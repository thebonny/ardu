
PPM_Decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c14  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083c14  00083c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00083c1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000f8  20070994  000845b0  00020994  2**2
                  ALLOC
  4 .stack        00002004  20070a8c  000846a8  00020994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020994  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009b7a  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bc8  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004079  00000000  00000000  0002c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000998  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008c0  00000000  00000000  00030b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000174e7  00000000  00000000  00031429  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000badd  00000000  00000000  00048910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063916  00000000  00000000  000543ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000208c  00000000  00000000  000b7d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a90 	.word	0x20072a90
   80004:	0008076d 	.word	0x0008076d
   80008:	00080769 	.word	0x00080769
   8000c:	00080769 	.word	0x00080769
   80010:	00080769 	.word	0x00080769
   80014:	00080769 	.word	0x00080769
   80018:	00080769 	.word	0x00080769
	...
   8002c:	00080769 	.word	0x00080769
   80030:	00080769 	.word	0x00080769
   80034:	00000000 	.word	0x00000000
   80038:	00080769 	.word	0x00080769
   8003c:	00080769 	.word	0x00080769
   80040:	00080769 	.word	0x00080769
   80044:	00080769 	.word	0x00080769
   80048:	00080769 	.word	0x00080769
   8004c:	00080769 	.word	0x00080769
   80050:	00080769 	.word	0x00080769
   80054:	00080769 	.word	0x00080769
   80058:	00080769 	.word	0x00080769
   8005c:	00080769 	.word	0x00080769
   80060:	00080769 	.word	0x00080769
   80064:	00080769 	.word	0x00080769
   80068:	00000000 	.word	0x00000000
   8006c:	00080519 	.word	0x00080519
   80070:	0008052d 	.word	0x0008052d
   80074:	00080541 	.word	0x00080541
   80078:	00080555 	.word	0x00080555
	...
   80084:	00080769 	.word	0x00080769
   80088:	00080769 	.word	0x00080769
   8008c:	00080769 	.word	0x00080769
   80090:	00080769 	.word	0x00080769
   80094:	00080769 	.word	0x00080769
   80098:	00080769 	.word	0x00080769
   8009c:	00080769 	.word	0x00080769
   800a0:	00080769 	.word	0x00080769
   800a4:	00000000 	.word	0x00000000
   800a8:	00080769 	.word	0x00080769
   800ac:	00080769 	.word	0x00080769
   800b0:	00080769 	.word	0x00080769
   800b4:	00080769 	.word	0x00080769
   800b8:	00080769 	.word	0x00080769
   800bc:	00080769 	.word	0x00080769
   800c0:	00080769 	.word	0x00080769
   800c4:	00080ac9 	.word	0x00080ac9
   800c8:	00080769 	.word	0x00080769
   800cc:	00080769 	.word	0x00080769
   800d0:	00080769 	.word	0x00080769
   800d4:	00080769 	.word	0x00080769
   800d8:	00080769 	.word	0x00080769
   800dc:	00080769 	.word	0x00080769
   800e0:	00080769 	.word	0x00080769
   800e4:	00080769 	.word	0x00080769
   800e8:	00080769 	.word	0x00080769
   800ec:	00080769 	.word	0x00080769
   800f0:	00080769 	.word	0x00080769

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00083c1c 	.word	0x00083c1c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070998 	.word	0x20070998
   80144:	00083c1c 	.word	0x00083c1c
   80148:	00083c1c 	.word	0x00083c1c
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	213e      	movs	r1, #62	; 0x3e
   8015a:	2000      	movs	r0, #0
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000805d1 	.word	0x000805d1
   80198:	00080625 	.word	0x00080625
   8019c:	00080635 	.word	0x00080635
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080645 	.word	0x00080645
   801ac:	00080569 	.word	0x00080569
   801b0:	00080819 	.word	0x00080819

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b990      	cbnz	r0, 801dc <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0f      	ble.n	801e2 <_read+0x2e>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42a7      	cmp	r7, r4
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801d6:	4640      	mov	r0, r8
   801d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801dc:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   801e0:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801e2:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   801e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e8:	20070a84 	.word	0x20070a84
   801ec:	20070a7c 	.word	0x20070a7c

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d815      	bhi.n	80222 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b19a      	cbz	r2, 80228 <_write+0x38>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80222:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   80226:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80228:	2000      	movs	r0, #0
   8022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a80 	.word	0x20070a80
   8023c:	20070a84 	.word	0x20070a84

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <board_init+0x50>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c11      	ldr	r4, [pc, #68]	; (80294 <board_init+0x54>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80260:	203b      	movs	r0, #59	; 0x3b
   80262:	4c0d      	ldr	r4, [pc, #52]	; (80298 <board_init+0x58>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026a:	2055      	movs	r0, #85	; 0x55
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80272:	2056      	movs	r0, #86	; 0x56
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	4909      	ldr	r1, [pc, #36]	; (8029c <board_init+0x5c>)
   80278:	2068      	movs	r0, #104	; 0x68
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	4908      	ldr	r1, [pc, #32]	; (802a0 <board_init+0x60>)
   8027e:	205c      	movs	r0, #92	; 0x5c
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	4a08      	ldr	r2, [pc, #32]	; (802a4 <board_init+0x64>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4807      	ldr	r0, [pc, #28]	; (802a8 <board_init+0x68>)
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <board_init+0x6c>)
   8028c:	4798      	blx	r3
   8028e:	bd10      	pop	{r4, pc}
   80290:	400e1a50 	.word	0x400e1a50
   80294:	00080655 	.word	0x00080655
   80298:	00080355 	.word	0x00080355
   8029c:	28000079 	.word	0x28000079
   802a0:	28000001 	.word	0x28000001
   802a4:	08000001 	.word	0x08000001
   802a8:	400e0e00 	.word	0x400e0e00
   802ac:	00080429 	.word	0x00080429

000802b0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802b0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802b6:	d016      	beq.n	802e6 <pio_set_peripheral+0x36>
   802b8:	d804      	bhi.n	802c4 <pio_set_peripheral+0x14>
   802ba:	b1c1      	cbz	r1, 802ee <pio_set_peripheral+0x3e>
   802bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802c0:	d00a      	beq.n	802d8 <pio_set_peripheral+0x28>
   802c2:	e013      	b.n	802ec <pio_set_peripheral+0x3c>
   802c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802c8:	d011      	beq.n	802ee <pio_set_peripheral+0x3e>
   802ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802ce:	d00e      	beq.n	802ee <pio_set_peripheral+0x3e>
   802d0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802d4:	d10a      	bne.n	802ec <pio_set_peripheral+0x3c>
   802d6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802da:	6f03      	ldr	r3, [r0, #112]	; 0x70
   802dc:	400b      	ands	r3, r1
   802de:	ea23 0302 	bic.w	r3, r3, r2
   802e2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802e4:	e002      	b.n	802ec <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802e8:	4313      	orrs	r3, r2
   802ea:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802ec:	6042      	str	r2, [r0, #4]
   802ee:	4770      	bx	lr

000802f0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802f0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802f2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802f6:	bf14      	ite	ne
   802f8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802fa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802fc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80300:	bf14      	ite	ne
   80302:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80304:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80306:	f012 0f02 	tst.w	r2, #2
   8030a:	d002      	beq.n	80312 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8030c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80310:	e004      	b.n	8031c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80312:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80316:	bf18      	it	ne
   80318:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8031c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8031e:	6001      	str	r1, [r0, #0]
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80324:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80326:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80328:	9c01      	ldr	r4, [sp, #4]
   8032a:	b10c      	cbz	r4, 80330 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8032c:	6641      	str	r1, [r0, #100]	; 0x64
   8032e:	e000      	b.n	80332 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80330:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80332:	b10b      	cbz	r3, 80338 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80334:	6501      	str	r1, [r0, #80]	; 0x50
   80336:	e000      	b.n	8033a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80338:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8033a:	b10a      	cbz	r2, 80340 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8033c:	6301      	str	r1, [r0, #48]	; 0x30
   8033e:	e000      	b.n	80342 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80340:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80342:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80344:	6001      	str	r1, [r0, #0]
}
   80346:	bc10      	pop	{r4}
   80348:	4770      	bx	lr
   8034a:	bf00      	nop

0008034c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8034c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8034e:	4770      	bx	lr

00080350 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80350:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80352:	4770      	bx	lr

00080354 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80354:	b570      	push	{r4, r5, r6, lr}
   80356:	b082      	sub	sp, #8
   80358:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8035a:	0943      	lsrs	r3, r0, #5
   8035c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80360:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80364:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80366:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8036a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8036e:	d030      	beq.n	803d2 <pio_configure_pin+0x7e>
   80370:	d806      	bhi.n	80380 <pio_configure_pin+0x2c>
   80372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80376:	d00a      	beq.n	8038e <pio_configure_pin+0x3a>
   80378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8037c:	d018      	beq.n	803b0 <pio_configure_pin+0x5c>
   8037e:	e049      	b.n	80414 <pio_configure_pin+0xc0>
   80380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80384:	d030      	beq.n	803e8 <pio_configure_pin+0x94>
   80386:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8038a:	d02d      	beq.n	803e8 <pio_configure_pin+0x94>
   8038c:	e042      	b.n	80414 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8038e:	f000 001f 	and.w	r0, r0, #31
   80392:	2601      	movs	r6, #1
   80394:	4086      	lsls	r6, r0
   80396:	4632      	mov	r2, r6
   80398:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8039c:	4620      	mov	r0, r4
   8039e:	4b1f      	ldr	r3, [pc, #124]	; (8041c <pio_configure_pin+0xc8>)
   803a0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803a2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803a6:	bf14      	ite	ne
   803a8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803aa:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ac:	2001      	movs	r0, #1
   803ae:	e032      	b.n	80416 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803b0:	f000 001f 	and.w	r0, r0, #31
   803b4:	2601      	movs	r6, #1
   803b6:	4086      	lsls	r6, r0
   803b8:	4632      	mov	r2, r6
   803ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803be:	4620      	mov	r0, r4
   803c0:	4b16      	ldr	r3, [pc, #88]	; (8041c <pio_configure_pin+0xc8>)
   803c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803c8:	bf14      	ite	ne
   803ca:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803cc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ce:	2001      	movs	r0, #1
   803d0:	e021      	b.n	80416 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803d2:	f000 011f 	and.w	r1, r0, #31
   803d6:	2601      	movs	r6, #1
   803d8:	462a      	mov	r2, r5
   803da:	fa06 f101 	lsl.w	r1, r6, r1
   803de:	4620      	mov	r0, r4
   803e0:	4b0f      	ldr	r3, [pc, #60]	; (80420 <pio_configure_pin+0xcc>)
   803e2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803e4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803e6:	e016      	b.n	80416 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803e8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   803ec:	f000 011f 	and.w	r1, r0, #31
   803f0:	2601      	movs	r6, #1
   803f2:	ea05 0306 	and.w	r3, r5, r6
   803f6:	9300      	str	r3, [sp, #0]
   803f8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   803fc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80400:	bf14      	ite	ne
   80402:	2200      	movne	r2, #0
   80404:	2201      	moveq	r2, #1
   80406:	fa06 f101 	lsl.w	r1, r6, r1
   8040a:	4620      	mov	r0, r4
   8040c:	4c05      	ldr	r4, [pc, #20]	; (80424 <pio_configure_pin+0xd0>)
   8040e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80410:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80412:	e000      	b.n	80416 <pio_configure_pin+0xc2>

	default:
		return 0;
   80414:	2000      	movs	r0, #0
	}

	return 1;
}
   80416:	b002      	add	sp, #8
   80418:	bd70      	pop	{r4, r5, r6, pc}
   8041a:	bf00      	nop
   8041c:	000802b1 	.word	0x000802b1
   80420:	000802f1 	.word	0x000802f1
   80424:	00080325 	.word	0x00080325

00080428 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80428:	b570      	push	{r4, r5, r6, lr}
   8042a:	b082      	sub	sp, #8
   8042c:	4605      	mov	r5, r0
   8042e:	460e      	mov	r6, r1
   80430:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80432:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80436:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8043a:	d026      	beq.n	8048a <pio_configure_pin_group+0x62>
   8043c:	d806      	bhi.n	8044c <pio_configure_pin_group+0x24>
   8043e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80442:	d00a      	beq.n	8045a <pio_configure_pin_group+0x32>
   80444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80448:	d013      	beq.n	80472 <pio_configure_pin_group+0x4a>
   8044a:	e034      	b.n	804b6 <pio_configure_pin_group+0x8e>
   8044c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80450:	d01f      	beq.n	80492 <pio_configure_pin_group+0x6a>
   80452:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80456:	d01c      	beq.n	80492 <pio_configure_pin_group+0x6a>
   80458:	e02d      	b.n	804b6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8045a:	460a      	mov	r2, r1
   8045c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80460:	4b16      	ldr	r3, [pc, #88]	; (804bc <pio_configure_pin_group+0x94>)
   80462:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80464:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80468:	bf14      	ite	ne
   8046a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8046c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8046e:	2001      	movs	r0, #1
   80470:	e022      	b.n	804b8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80472:	460a      	mov	r2, r1
   80474:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80478:	4b10      	ldr	r3, [pc, #64]	; (804bc <pio_configure_pin_group+0x94>)
   8047a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8047c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80480:	bf14      	ite	ne
   80482:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80484:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80486:	2001      	movs	r0, #1
   80488:	e016      	b.n	804b8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8048a:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <pio_configure_pin_group+0x98>)
   8048c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8048e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80490:	e012      	b.n	804b8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80492:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   80496:	f004 0301 	and.w	r3, r4, #1
   8049a:	9300      	str	r3, [sp, #0]
   8049c:	f3c4 0380 	ubfx	r3, r4, #2, #1
   804a0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804a4:	bf14      	ite	ne
   804a6:	2200      	movne	r2, #0
   804a8:	2201      	moveq	r2, #1
   804aa:	4631      	mov	r1, r6
   804ac:	4628      	mov	r0, r5
   804ae:	4c05      	ldr	r4, [pc, #20]	; (804c4 <pio_configure_pin_group+0x9c>)
   804b0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804b2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804b4:	e000      	b.n	804b8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   804b6:	2000      	movs	r0, #0
	}

	return 1;
}
   804b8:	b002      	add	sp, #8
   804ba:	bd70      	pop	{r4, r5, r6, pc}
   804bc:	000802b1 	.word	0x000802b1
   804c0:	000802f1 	.word	0x000802f1
   804c4:	00080325 	.word	0x00080325

000804c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804cc:	4604      	mov	r4, r0
   804ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804d0:	4b0e      	ldr	r3, [pc, #56]	; (8050c <pio_handler_process+0x44>)
   804d2:	4798      	blx	r3
   804d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804d6:	4620      	mov	r0, r4
   804d8:	4b0d      	ldr	r3, [pc, #52]	; (80510 <pio_handler_process+0x48>)
   804da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804dc:	4005      	ands	r5, r0
   804de:	d013      	beq.n	80508 <pio_handler_process+0x40>
   804e0:	4c0c      	ldr	r4, [pc, #48]	; (80514 <pio_handler_process+0x4c>)
   804e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804e6:	6823      	ldr	r3, [r4, #0]
   804e8:	4543      	cmp	r3, r8
   804ea:	d108      	bne.n	804fe <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804ec:	6861      	ldr	r1, [r4, #4]
   804ee:	4229      	tst	r1, r5
   804f0:	d005      	beq.n	804fe <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   804f2:	68e3      	ldr	r3, [r4, #12]
   804f4:	4640      	mov	r0, r8
   804f6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   804f8:	6863      	ldr	r3, [r4, #4]
   804fa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   804fe:	42b4      	cmp	r4, r6
   80500:	d002      	beq.n	80508 <pio_handler_process+0x40>
   80502:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80504:	2d00      	cmp	r5, #0
   80506:	d1ee      	bne.n	804e6 <pio_handler_process+0x1e>
   80508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8050c:	0008034d 	.word	0x0008034d
   80510:	00080351 	.word	0x00080351
   80514:	200709b0 	.word	0x200709b0

00080518 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80518:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8051a:	210b      	movs	r1, #11
   8051c:	4801      	ldr	r0, [pc, #4]	; (80524 <PIOA_Handler+0xc>)
   8051e:	4b02      	ldr	r3, [pc, #8]	; (80528 <PIOA_Handler+0x10>)
   80520:	4798      	blx	r3
   80522:	bd08      	pop	{r3, pc}
   80524:	400e0e00 	.word	0x400e0e00
   80528:	000804c9 	.word	0x000804c9

0008052c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8052c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8052e:	210c      	movs	r1, #12
   80530:	4801      	ldr	r0, [pc, #4]	; (80538 <PIOB_Handler+0xc>)
   80532:	4b02      	ldr	r3, [pc, #8]	; (8053c <PIOB_Handler+0x10>)
   80534:	4798      	blx	r3
   80536:	bd08      	pop	{r3, pc}
   80538:	400e1000 	.word	0x400e1000
   8053c:	000804c9 	.word	0x000804c9

00080540 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80540:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80542:	210d      	movs	r1, #13
   80544:	4801      	ldr	r0, [pc, #4]	; (8054c <PIOC_Handler+0xc>)
   80546:	4b02      	ldr	r3, [pc, #8]	; (80550 <PIOC_Handler+0x10>)
   80548:	4798      	blx	r3
   8054a:	bd08      	pop	{r3, pc}
   8054c:	400e1200 	.word	0x400e1200
   80550:	000804c9 	.word	0x000804c9

00080554 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80554:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80556:	210e      	movs	r1, #14
   80558:	4801      	ldr	r0, [pc, #4]	; (80560 <PIOD_Handler+0xc>)
   8055a:	4b02      	ldr	r3, [pc, #8]	; (80564 <PIOD_Handler+0x10>)
   8055c:	4798      	blx	r3
   8055e:	bd08      	pop	{r3, pc}
   80560:	400e1400 	.word	0x400e1400
   80564:	000804c9 	.word	0x000804c9

00080568 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80568:	4a18      	ldr	r2, [pc, #96]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   8056a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8056c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80570:	4318      	orrs	r0, r3
   80572:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80574:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80576:	f013 0f08 	tst.w	r3, #8
   8057a:	d003      	beq.n	80584 <pmc_switch_mck_to_pllack+0x1c>
   8057c:	e009      	b.n	80592 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8057e:	3b01      	subs	r3, #1
   80580:	d103      	bne.n	8058a <pmc_switch_mck_to_pllack+0x22>
   80582:	e01e      	b.n	805c2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80584:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80588:	4910      	ldr	r1, [pc, #64]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   8058a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8058c:	f012 0f08 	tst.w	r2, #8
   80590:	d0f5      	beq.n	8057e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80592:	4a0e      	ldr	r2, [pc, #56]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   80594:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80596:	f023 0303 	bic.w	r3, r3, #3
   8059a:	f043 0302 	orr.w	r3, r3, #2
   8059e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805a0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   805a2:	f010 0008 	ands.w	r0, r0, #8
   805a6:	d004      	beq.n	805b2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   805a8:	2000      	movs	r0, #0
   805aa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   805ac:	3b01      	subs	r3, #1
   805ae:	d103      	bne.n	805b8 <pmc_switch_mck_to_pllack+0x50>
   805b0:	e009      	b.n	805c6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805b6:	4905      	ldr	r1, [pc, #20]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   805b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805ba:	f012 0f08 	tst.w	r2, #8
   805be:	d0f5      	beq.n	805ac <pmc_switch_mck_to_pllack+0x44>
   805c0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805c2:	2001      	movs	r0, #1
   805c4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805c6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805c8:	4770      	bx	lr
   805ca:	bf00      	nop
   805cc:	400e0600 	.word	0x400e0600

000805d0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   805d0:	b138      	cbz	r0, 805e2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805d2:	4911      	ldr	r1, [pc, #68]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   805d4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   805d6:	4a11      	ldr	r2, [pc, #68]	; (8061c <pmc_switch_mainck_to_xtal+0x4c>)
   805d8:	401a      	ands	r2, r3
   805da:	4b11      	ldr	r3, [pc, #68]	; (80620 <pmc_switch_mainck_to_xtal+0x50>)
   805dc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805de:	620b      	str	r3, [r1, #32]
   805e0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805e2:	480d      	ldr	r0, [pc, #52]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   805e4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805e6:	0209      	lsls	r1, r1, #8
   805e8:	b289      	uxth	r1, r1
   805ea:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   805ee:	f023 0303 	bic.w	r3, r3, #3
   805f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   805f6:	f043 0301 	orr.w	r3, r3, #1
   805fa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805fc:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   805fe:	4602      	mov	r2, r0
   80600:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80602:	f013 0f01 	tst.w	r3, #1
   80606:	d0fb      	beq.n	80600 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80608:	4a03      	ldr	r2, [pc, #12]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   8060a:	6a13      	ldr	r3, [r2, #32]
   8060c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80614:	6213      	str	r3, [r2, #32]
   80616:	4770      	bx	lr
   80618:	400e0600 	.word	0x400e0600
   8061c:	fec8fffc 	.word	0xfec8fffc
   80620:	01370002 	.word	0x01370002

00080624 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80624:	4b02      	ldr	r3, [pc, #8]	; (80630 <pmc_osc_is_ready_mainck+0xc>)
   80626:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80628:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8062c:	4770      	bx	lr
   8062e:	bf00      	nop
   80630:	400e0600 	.word	0x400e0600

00080634 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80634:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80638:	4b01      	ldr	r3, [pc, #4]	; (80640 <pmc_disable_pllack+0xc>)
   8063a:	629a      	str	r2, [r3, #40]	; 0x28
   8063c:	4770      	bx	lr
   8063e:	bf00      	nop
   80640:	400e0600 	.word	0x400e0600

00080644 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80644:	4b02      	ldr	r3, [pc, #8]	; (80650 <pmc_is_locked_pllack+0xc>)
   80646:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80648:	f000 0002 	and.w	r0, r0, #2
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	400e0600 	.word	0x400e0600

00080654 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80654:	282c      	cmp	r0, #44	; 0x2c
   80656:	d81e      	bhi.n	80696 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80658:	281f      	cmp	r0, #31
   8065a:	d80c      	bhi.n	80676 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8065c:	4b11      	ldr	r3, [pc, #68]	; (806a4 <pmc_enable_periph_clk+0x50>)
   8065e:	699a      	ldr	r2, [r3, #24]
   80660:	2301      	movs	r3, #1
   80662:	4083      	lsls	r3, r0
   80664:	4393      	bics	r3, r2
   80666:	d018      	beq.n	8069a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80668:	2301      	movs	r3, #1
   8066a:	fa03 f000 	lsl.w	r0, r3, r0
   8066e:	4b0d      	ldr	r3, [pc, #52]	; (806a4 <pmc_enable_periph_clk+0x50>)
   80670:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80672:	2000      	movs	r0, #0
   80674:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80676:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80678:	4b0a      	ldr	r3, [pc, #40]	; (806a4 <pmc_enable_periph_clk+0x50>)
   8067a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8067e:	2301      	movs	r3, #1
   80680:	4083      	lsls	r3, r0
   80682:	4393      	bics	r3, r2
   80684:	d00b      	beq.n	8069e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80686:	2301      	movs	r3, #1
   80688:	fa03 f000 	lsl.w	r0, r3, r0
   8068c:	4b05      	ldr	r3, [pc, #20]	; (806a4 <pmc_enable_periph_clk+0x50>)
   8068e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80692:	2000      	movs	r0, #0
   80694:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80696:	2001      	movs	r0, #1
   80698:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8069a:	2000      	movs	r0, #0
   8069c:	4770      	bx	lr
   8069e:	2000      	movs	r0, #0
}
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop
   806a4:	400e0600 	.word	0x400e0600

000806a8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   806a8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806aa:	0189      	lsls	r1, r1, #6
   806ac:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   806ae:	2402      	movs	r4, #2
   806b0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   806b2:	f04f 31ff 	mov.w	r1, #4294967295
   806b6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   806b8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   806ba:	605a      	str	r2, [r3, #4]
}
   806bc:	bc10      	pop	{r4}
   806be:	4770      	bx	lr

000806c0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   806c0:	0189      	lsls	r1, r1, #6
   806c2:	2305      	movs	r3, #5
   806c4:	5043      	str	r3, [r0, r1]
   806c6:	4770      	bx	lr

000806c8 <tc_read_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
   806c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806cc:	6988      	ldr	r0, [r1, #24]
}
   806ce:	4770      	bx	lr

000806d0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806d0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   806d4:	624a      	str	r2, [r1, #36]	; 0x24
   806d6:	4770      	bx	lr

000806d8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806d8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   806dc:	6a08      	ldr	r0, [r1, #32]
}
   806de:	4770      	bx	lr

000806e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   806e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   806e2:	23ac      	movs	r3, #172	; 0xac
   806e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   806e6:	680b      	ldr	r3, [r1, #0]
   806e8:	684a      	ldr	r2, [r1, #4]
   806ea:	fbb3 f3f2 	udiv	r3, r3, r2
   806ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   806f0:	1e5c      	subs	r4, r3, #1
   806f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   806f6:	4294      	cmp	r4, r2
   806f8:	d80a      	bhi.n	80710 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   806fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   806fc:	688b      	ldr	r3, [r1, #8]
   806fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80700:	f240 2302 	movw	r3, #514	; 0x202
   80704:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80708:	2350      	movs	r3, #80	; 0x50
   8070a:	6003      	str	r3, [r0, #0]

	return 0;
   8070c:	2000      	movs	r0, #0
   8070e:	e000      	b.n	80712 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80710:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80712:	bc10      	pop	{r4}
   80714:	4770      	bx	lr
   80716:	bf00      	nop

00080718 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80718:	6943      	ldr	r3, [r0, #20]
   8071a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8071e:	bf1a      	itte	ne
   80720:	61c1      	strne	r1, [r0, #28]
	return 0;
   80722:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80724:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80726:	4770      	bx	lr

00080728 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80728:	6943      	ldr	r3, [r0, #20]
   8072a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8072e:	bf1d      	ittte	ne
   80730:	6983      	ldrne	r3, [r0, #24]
   80732:	700b      	strbne	r3, [r1, #0]
	return 0;
   80734:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80736:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80738:	4770      	bx	lr
   8073a:	bf00      	nop

0008073c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8073c:	6943      	ldr	r3, [r0, #20]
   8073e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80742:	bf1d      	ittte	ne
   80744:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80748:	61c1      	strne	r1, [r0, #28]
	return 0;
   8074a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8074c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8074e:	4770      	bx	lr

00080750 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80750:	6943      	ldr	r3, [r0, #20]
   80752:	f013 0f01 	tst.w	r3, #1
   80756:	d005      	beq.n	80764 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80758:	6983      	ldr	r3, [r0, #24]
   8075a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8075e:	600b      	str	r3, [r1, #0]

	return 0;
   80760:	2000      	movs	r0, #0
   80762:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80764:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80766:	4770      	bx	lr

00080768 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80768:	e7fe      	b.n	80768 <Dummy_Handler>
   8076a:	bf00      	nop

0008076c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8076c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8076e:	4b1e      	ldr	r3, [pc, #120]	; (807e8 <Reset_Handler+0x7c>)
   80770:	4a1e      	ldr	r2, [pc, #120]	; (807ec <Reset_Handler+0x80>)
   80772:	429a      	cmp	r2, r3
   80774:	d003      	beq.n	8077e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80776:	4b1e      	ldr	r3, [pc, #120]	; (807f0 <Reset_Handler+0x84>)
   80778:	4a1b      	ldr	r2, [pc, #108]	; (807e8 <Reset_Handler+0x7c>)
   8077a:	429a      	cmp	r2, r3
   8077c:	d304      	bcc.n	80788 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8077e:	4b1d      	ldr	r3, [pc, #116]	; (807f4 <Reset_Handler+0x88>)
   80780:	4a1d      	ldr	r2, [pc, #116]	; (807f8 <Reset_Handler+0x8c>)
   80782:	429a      	cmp	r2, r3
   80784:	d30f      	bcc.n	807a6 <Reset_Handler+0x3a>
   80786:	e01a      	b.n	807be <Reset_Handler+0x52>
   80788:	4917      	ldr	r1, [pc, #92]	; (807e8 <Reset_Handler+0x7c>)
   8078a:	4b1c      	ldr	r3, [pc, #112]	; (807fc <Reset_Handler+0x90>)
   8078c:	1a5b      	subs	r3, r3, r1
   8078e:	f023 0303 	bic.w	r3, r3, #3
   80792:	3304      	adds	r3, #4
   80794:	4a15      	ldr	r2, [pc, #84]	; (807ec <Reset_Handler+0x80>)
   80796:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80798:	f852 0b04 	ldr.w	r0, [r2], #4
   8079c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807a0:	429a      	cmp	r2, r3
   807a2:	d1f9      	bne.n	80798 <Reset_Handler+0x2c>
   807a4:	e7eb      	b.n	8077e <Reset_Handler+0x12>
   807a6:	4b16      	ldr	r3, [pc, #88]	; (80800 <Reset_Handler+0x94>)
   807a8:	4a16      	ldr	r2, [pc, #88]	; (80804 <Reset_Handler+0x98>)
   807aa:	1ad2      	subs	r2, r2, r3
   807ac:	f022 0203 	bic.w	r2, r2, #3
   807b0:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807b2:	3b04      	subs	r3, #4
		*pDest++ = 0;
   807b4:	2100      	movs	r1, #0
   807b6:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807ba:	4293      	cmp	r3, r2
   807bc:	d1fb      	bne.n	807b6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   807be:	4b12      	ldr	r3, [pc, #72]	; (80808 <Reset_Handler+0x9c>)
   807c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   807c4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   807c8:	4910      	ldr	r1, [pc, #64]	; (8080c <Reset_Handler+0xa0>)
   807ca:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   807cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   807d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807d4:	d203      	bcs.n	807de <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   807d6:	688b      	ldr	r3, [r1, #8]
   807d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   807dc:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   807de:	4b0c      	ldr	r3, [pc, #48]	; (80810 <Reset_Handler+0xa4>)
   807e0:	4798      	blx	r3

	/* Branch to main function */
	main();
   807e2:	4b0c      	ldr	r3, [pc, #48]	; (80814 <Reset_Handler+0xa8>)
   807e4:	4798      	blx	r3
   807e6:	e7fe      	b.n	807e6 <Reset_Handler+0x7a>
   807e8:	20070000 	.word	0x20070000
   807ec:	00083c1c 	.word	0x00083c1c
   807f0:	20070994 	.word	0x20070994
   807f4:	20070a8c 	.word	0x20070a8c
   807f8:	20070994 	.word	0x20070994
   807fc:	20070993 	.word	0x20070993
   80800:	20070998 	.word	0x20070998
   80804:	20070a8f 	.word	0x20070a8f
   80808:	00080000 	.word	0x00080000
   8080c:	e000ed00 	.word	0xe000ed00
   80810:	00080c41 	.word	0x00080c41
   80814:	00080b2d 	.word	0x00080b2d

00080818 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80818:	4b3e      	ldr	r3, [pc, #248]	; (80914 <SystemCoreClockUpdate+0xfc>)
   8081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8081c:	f003 0303 	and.w	r3, r3, #3
   80820:	2b03      	cmp	r3, #3
   80822:	d85f      	bhi.n	808e4 <SystemCoreClockUpdate+0xcc>
   80824:	e8df f003 	tbb	[pc, r3]
   80828:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8082c:	4b3a      	ldr	r3, [pc, #232]	; (80918 <SystemCoreClockUpdate+0x100>)
   8082e:	695b      	ldr	r3, [r3, #20]
   80830:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80834:	bf14      	ite	ne
   80836:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8083a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8083e:	4b37      	ldr	r3, [pc, #220]	; (8091c <SystemCoreClockUpdate+0x104>)
   80840:	601a      	str	r2, [r3, #0]
   80842:	e04f      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80844:	4b33      	ldr	r3, [pc, #204]	; (80914 <SystemCoreClockUpdate+0xfc>)
   80846:	6a1b      	ldr	r3, [r3, #32]
   80848:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8084c:	d003      	beq.n	80856 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8084e:	4a34      	ldr	r2, [pc, #208]	; (80920 <SystemCoreClockUpdate+0x108>)
   80850:	4b32      	ldr	r3, [pc, #200]	; (8091c <SystemCoreClockUpdate+0x104>)
   80852:	601a      	str	r2, [r3, #0]
   80854:	e046      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80856:	4a33      	ldr	r2, [pc, #204]	; (80924 <SystemCoreClockUpdate+0x10c>)
   80858:	4b30      	ldr	r3, [pc, #192]	; (8091c <SystemCoreClockUpdate+0x104>)
   8085a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8085c:	4b2d      	ldr	r3, [pc, #180]	; (80914 <SystemCoreClockUpdate+0xfc>)
   8085e:	6a1b      	ldr	r3, [r3, #32]
   80860:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80864:	2b10      	cmp	r3, #16
   80866:	d002      	beq.n	8086e <SystemCoreClockUpdate+0x56>
   80868:	2b20      	cmp	r3, #32
   8086a:	d004      	beq.n	80876 <SystemCoreClockUpdate+0x5e>
   8086c:	e03a      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8086e:	4a2e      	ldr	r2, [pc, #184]	; (80928 <SystemCoreClockUpdate+0x110>)
   80870:	4b2a      	ldr	r3, [pc, #168]	; (8091c <SystemCoreClockUpdate+0x104>)
   80872:	601a      	str	r2, [r3, #0]
				break;
   80874:	e036      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80876:	4a2a      	ldr	r2, [pc, #168]	; (80920 <SystemCoreClockUpdate+0x108>)
   80878:	4b28      	ldr	r3, [pc, #160]	; (8091c <SystemCoreClockUpdate+0x104>)
   8087a:	601a      	str	r2, [r3, #0]
				break;
   8087c:	e032      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8087e:	4b25      	ldr	r3, [pc, #148]	; (80914 <SystemCoreClockUpdate+0xfc>)
   80880:	6a1b      	ldr	r3, [r3, #32]
   80882:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80886:	d003      	beq.n	80890 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80888:	4a25      	ldr	r2, [pc, #148]	; (80920 <SystemCoreClockUpdate+0x108>)
   8088a:	4b24      	ldr	r3, [pc, #144]	; (8091c <SystemCoreClockUpdate+0x104>)
   8088c:	601a      	str	r2, [r3, #0]
   8088e:	e012      	b.n	808b6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80890:	4a24      	ldr	r2, [pc, #144]	; (80924 <SystemCoreClockUpdate+0x10c>)
   80892:	4b22      	ldr	r3, [pc, #136]	; (8091c <SystemCoreClockUpdate+0x104>)
   80894:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80896:	4b1f      	ldr	r3, [pc, #124]	; (80914 <SystemCoreClockUpdate+0xfc>)
   80898:	6a1b      	ldr	r3, [r3, #32]
   8089a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8089e:	2b10      	cmp	r3, #16
   808a0:	d002      	beq.n	808a8 <SystemCoreClockUpdate+0x90>
   808a2:	2b20      	cmp	r3, #32
   808a4:	d004      	beq.n	808b0 <SystemCoreClockUpdate+0x98>
   808a6:	e006      	b.n	808b6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808a8:	4a1f      	ldr	r2, [pc, #124]	; (80928 <SystemCoreClockUpdate+0x110>)
   808aa:	4b1c      	ldr	r3, [pc, #112]	; (8091c <SystemCoreClockUpdate+0x104>)
   808ac:	601a      	str	r2, [r3, #0]
				break;
   808ae:	e002      	b.n	808b6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808b0:	4a1b      	ldr	r2, [pc, #108]	; (80920 <SystemCoreClockUpdate+0x108>)
   808b2:	4b1a      	ldr	r3, [pc, #104]	; (8091c <SystemCoreClockUpdate+0x104>)
   808b4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   808b6:	4b17      	ldr	r3, [pc, #92]	; (80914 <SystemCoreClockUpdate+0xfc>)
   808b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808ba:	f003 0303 	and.w	r3, r3, #3
   808be:	2b02      	cmp	r3, #2
   808c0:	d10d      	bne.n	808de <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   808c2:	4a14      	ldr	r2, [pc, #80]	; (80914 <SystemCoreClockUpdate+0xfc>)
   808c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   808c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   808c8:	4814      	ldr	r0, [pc, #80]	; (8091c <SystemCoreClockUpdate+0x104>)
   808ca:	f3c3 410a 	ubfx	r1, r3, #16, #11
   808ce:	6803      	ldr	r3, [r0, #0]
   808d0:	fb01 3303 	mla	r3, r1, r3, r3
   808d4:	b2d2      	uxtb	r2, r2
   808d6:	fbb3 f3f2 	udiv	r3, r3, r2
   808da:	6003      	str	r3, [r0, #0]
   808dc:	e002      	b.n	808e4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   808de:	4a13      	ldr	r2, [pc, #76]	; (8092c <SystemCoreClockUpdate+0x114>)
   808e0:	4b0e      	ldr	r3, [pc, #56]	; (8091c <SystemCoreClockUpdate+0x104>)
   808e2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808e4:	4b0b      	ldr	r3, [pc, #44]	; (80914 <SystemCoreClockUpdate+0xfc>)
   808e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808ec:	2b70      	cmp	r3, #112	; 0x70
   808ee:	d107      	bne.n	80900 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   808f0:	4a0a      	ldr	r2, [pc, #40]	; (8091c <SystemCoreClockUpdate+0x104>)
   808f2:	6813      	ldr	r3, [r2, #0]
   808f4:	490e      	ldr	r1, [pc, #56]	; (80930 <SystemCoreClockUpdate+0x118>)
   808f6:	fba1 1303 	umull	r1, r3, r1, r3
   808fa:	085b      	lsrs	r3, r3, #1
   808fc:	6013      	str	r3, [r2, #0]
   808fe:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80900:	4b04      	ldr	r3, [pc, #16]	; (80914 <SystemCoreClockUpdate+0xfc>)
   80902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80904:	4905      	ldr	r1, [pc, #20]	; (8091c <SystemCoreClockUpdate+0x104>)
   80906:	f3c3 1202 	ubfx	r2, r3, #4, #3
   8090a:	680b      	ldr	r3, [r1, #0]
   8090c:	40d3      	lsrs	r3, r2
   8090e:	600b      	str	r3, [r1, #0]
   80910:	4770      	bx	lr
   80912:	bf00      	nop
   80914:	400e0600 	.word	0x400e0600
   80918:	400e1a10 	.word	0x400e1a10
   8091c:	2007012c 	.word	0x2007012c
   80920:	00b71b00 	.word	0x00b71b00
   80924:	003d0900 	.word	0x003d0900
   80928:	007a1200 	.word	0x007a1200
   8092c:	0e4e1c00 	.word	0x0e4e1c00
   80930:	aaaaaaab 	.word	0xaaaaaaab

00080934 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80934:	4b09      	ldr	r3, [pc, #36]	; (8095c <_sbrk+0x28>)
   80936:	681b      	ldr	r3, [r3, #0]
   80938:	b913      	cbnz	r3, 80940 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8093a:	4a09      	ldr	r2, [pc, #36]	; (80960 <_sbrk+0x2c>)
   8093c:	4b07      	ldr	r3, [pc, #28]	; (8095c <_sbrk+0x28>)
   8093e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80940:	4b06      	ldr	r3, [pc, #24]	; (8095c <_sbrk+0x28>)
   80942:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80944:	181a      	adds	r2, r3, r0
   80946:	4907      	ldr	r1, [pc, #28]	; (80964 <_sbrk+0x30>)
   80948:	4291      	cmp	r1, r2
   8094a:	db04      	blt.n	80956 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8094c:	4610      	mov	r0, r2
   8094e:	4a03      	ldr	r2, [pc, #12]	; (8095c <_sbrk+0x28>)
   80950:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80952:	4618      	mov	r0, r3
   80954:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80956:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8095a:	4770      	bx	lr
   8095c:	20070a20 	.word	0x20070a20
   80960:	20072a90 	.word	0x20072a90
   80964:	20087ffc 	.word	0x20087ffc

00080968 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80968:	f04f 30ff 	mov.w	r0, #4294967295
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop

00080970 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80974:	604b      	str	r3, [r1, #4]

	return 0;
}
   80976:	2000      	movs	r0, #0
   80978:	4770      	bx	lr
   8097a:	bf00      	nop

0008097c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8097c:	2001      	movs	r0, #1
   8097e:	4770      	bx	lr

00080980 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80980:	2000      	movs	r0, #0
   80982:	4770      	bx	lr

00080984 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80984:	b5f0      	push	{r4, r5, r6, r7, lr}
   80986:	b083      	sub	sp, #12
   80988:	4604      	mov	r4, r0
   8098a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8098c:	2300      	movs	r3, #0
   8098e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80990:	4b1f      	ldr	r3, [pc, #124]	; (80a10 <usart_serial_getchar+0x8c>)
   80992:	4298      	cmp	r0, r3
   80994:	d107      	bne.n	809a6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80996:	461f      	mov	r7, r3
   80998:	4e1e      	ldr	r6, [pc, #120]	; (80a14 <usart_serial_getchar+0x90>)
   8099a:	4629      	mov	r1, r5
   8099c:	4638      	mov	r0, r7
   8099e:	47b0      	blx	r6
   809a0:	2800      	cmp	r0, #0
   809a2:	d1fa      	bne.n	8099a <usart_serial_getchar+0x16>
   809a4:	e019      	b.n	809da <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   809a6:	4b1c      	ldr	r3, [pc, #112]	; (80a18 <usart_serial_getchar+0x94>)
   809a8:	4298      	cmp	r0, r3
   809aa:	d109      	bne.n	809c0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   809ac:	461f      	mov	r7, r3
   809ae:	4e1b      	ldr	r6, [pc, #108]	; (80a1c <usart_serial_getchar+0x98>)
   809b0:	a901      	add	r1, sp, #4
   809b2:	4638      	mov	r0, r7
   809b4:	47b0      	blx	r6
   809b6:	2800      	cmp	r0, #0
   809b8:	d1fa      	bne.n	809b0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   809ba:	9b01      	ldr	r3, [sp, #4]
   809bc:	702b      	strb	r3, [r5, #0]
   809be:	e019      	b.n	809f4 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   809c0:	4b17      	ldr	r3, [pc, #92]	; (80a20 <usart_serial_getchar+0x9c>)
   809c2:	4298      	cmp	r0, r3
   809c4:	d109      	bne.n	809da <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   809c6:	461e      	mov	r6, r3
   809c8:	4c14      	ldr	r4, [pc, #80]	; (80a1c <usart_serial_getchar+0x98>)
   809ca:	a901      	add	r1, sp, #4
   809cc:	4630      	mov	r0, r6
   809ce:	47a0      	blx	r4
   809d0:	2800      	cmp	r0, #0
   809d2:	d1fa      	bne.n	809ca <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   809d4:	9b01      	ldr	r3, [sp, #4]
   809d6:	702b      	strb	r3, [r5, #0]
   809d8:	e018      	b.n	80a0c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   809da:	4b12      	ldr	r3, [pc, #72]	; (80a24 <usart_serial_getchar+0xa0>)
   809dc:	429c      	cmp	r4, r3
   809de:	d109      	bne.n	809f4 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   809e0:	461e      	mov	r6, r3
   809e2:	4c0e      	ldr	r4, [pc, #56]	; (80a1c <usart_serial_getchar+0x98>)
   809e4:	a901      	add	r1, sp, #4
   809e6:	4630      	mov	r0, r6
   809e8:	47a0      	blx	r4
   809ea:	2800      	cmp	r0, #0
   809ec:	d1fa      	bne.n	809e4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   809ee:	9b01      	ldr	r3, [sp, #4]
   809f0:	702b      	strb	r3, [r5, #0]
   809f2:	e00b      	b.n	80a0c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809f4:	4b0c      	ldr	r3, [pc, #48]	; (80a28 <usart_serial_getchar+0xa4>)
   809f6:	429c      	cmp	r4, r3
   809f8:	d108      	bne.n	80a0c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   809fa:	461e      	mov	r6, r3
   809fc:	4c07      	ldr	r4, [pc, #28]	; (80a1c <usart_serial_getchar+0x98>)
   809fe:	a901      	add	r1, sp, #4
   80a00:	4630      	mov	r0, r6
   80a02:	47a0      	blx	r4
   80a04:	2800      	cmp	r0, #0
   80a06:	d1fa      	bne.n	809fe <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80a08:	9b01      	ldr	r3, [sp, #4]
   80a0a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80a0c:	b003      	add	sp, #12
   80a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a10:	400e0800 	.word	0x400e0800
   80a14:	00080729 	.word	0x00080729
   80a18:	40098000 	.word	0x40098000
   80a1c:	00080751 	.word	0x00080751
   80a20:	4009c000 	.word	0x4009c000
   80a24:	400a0000 	.word	0x400a0000
   80a28:	400a4000 	.word	0x400a4000

00080a2c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80a2c:	b570      	push	{r4, r5, r6, lr}
   80a2e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80a30:	4b1e      	ldr	r3, [pc, #120]	; (80aac <usart_serial_putchar+0x80>)
   80a32:	4298      	cmp	r0, r3
   80a34:	d108      	bne.n	80a48 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80a36:	461e      	mov	r6, r3
   80a38:	4d1d      	ldr	r5, [pc, #116]	; (80ab0 <usart_serial_putchar+0x84>)
   80a3a:	4621      	mov	r1, r4
   80a3c:	4630      	mov	r0, r6
   80a3e:	47a8      	blx	r5
   80a40:	2800      	cmp	r0, #0
   80a42:	d1fa      	bne.n	80a3a <usart_serial_putchar+0xe>
		return 1;
   80a44:	2001      	movs	r0, #1
   80a46:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80a48:	4b1a      	ldr	r3, [pc, #104]	; (80ab4 <usart_serial_putchar+0x88>)
   80a4a:	4298      	cmp	r0, r3
   80a4c:	d108      	bne.n	80a60 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80a4e:	461e      	mov	r6, r3
   80a50:	4d19      	ldr	r5, [pc, #100]	; (80ab8 <usart_serial_putchar+0x8c>)
   80a52:	4621      	mov	r1, r4
   80a54:	4630      	mov	r0, r6
   80a56:	47a8      	blx	r5
   80a58:	2800      	cmp	r0, #0
   80a5a:	d1fa      	bne.n	80a52 <usart_serial_putchar+0x26>
		return 1;
   80a5c:	2001      	movs	r0, #1
   80a5e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80a60:	4b16      	ldr	r3, [pc, #88]	; (80abc <usart_serial_putchar+0x90>)
   80a62:	4298      	cmp	r0, r3
   80a64:	d108      	bne.n	80a78 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80a66:	461e      	mov	r6, r3
   80a68:	4d13      	ldr	r5, [pc, #76]	; (80ab8 <usart_serial_putchar+0x8c>)
   80a6a:	4621      	mov	r1, r4
   80a6c:	4630      	mov	r0, r6
   80a6e:	47a8      	blx	r5
   80a70:	2800      	cmp	r0, #0
   80a72:	d1fa      	bne.n	80a6a <usart_serial_putchar+0x3e>
		return 1;
   80a74:	2001      	movs	r0, #1
   80a76:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a78:	4b11      	ldr	r3, [pc, #68]	; (80ac0 <usart_serial_putchar+0x94>)
   80a7a:	4298      	cmp	r0, r3
   80a7c:	d108      	bne.n	80a90 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80a7e:	461e      	mov	r6, r3
   80a80:	4d0d      	ldr	r5, [pc, #52]	; (80ab8 <usart_serial_putchar+0x8c>)
   80a82:	4621      	mov	r1, r4
   80a84:	4630      	mov	r0, r6
   80a86:	47a8      	blx	r5
   80a88:	2800      	cmp	r0, #0
   80a8a:	d1fa      	bne.n	80a82 <usart_serial_putchar+0x56>
		return 1;
   80a8c:	2001      	movs	r0, #1
   80a8e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a90:	4b0c      	ldr	r3, [pc, #48]	; (80ac4 <usart_serial_putchar+0x98>)
   80a92:	4298      	cmp	r0, r3
   80a94:	d108      	bne.n	80aa8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80a96:	461e      	mov	r6, r3
   80a98:	4d07      	ldr	r5, [pc, #28]	; (80ab8 <usart_serial_putchar+0x8c>)
   80a9a:	4621      	mov	r1, r4
   80a9c:	4630      	mov	r0, r6
   80a9e:	47a8      	blx	r5
   80aa0:	2800      	cmp	r0, #0
   80aa2:	d1fa      	bne.n	80a9a <usart_serial_putchar+0x6e>
		return 1;
   80aa4:	2001      	movs	r0, #1
   80aa6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80aa8:	2000      	movs	r0, #0
}
   80aaa:	bd70      	pop	{r4, r5, r6, pc}
   80aac:	400e0800 	.word	0x400e0800
   80ab0:	00080719 	.word	0x00080719
   80ab4:	40098000 	.word	0x40098000
   80ab8:	0008073d 	.word	0x0008073d
   80abc:	4009c000 	.word	0x4009c000
   80ac0:	400a0000 	.word	0x400a0000
   80ac4:	400a4000 	.word	0x400a4000

00080ac8 <TC6_Handler>:
static int CHANNEL[8];

static int channel_id = 0;

void TC_Handler(void)
{
   80ac8:	b508      	push	{r3, lr}
	if ((tc_get_status(TC, TC_CHANNEL_CAPTURE) & TC_SR_LDRBS) == TC_SR_LDRBS) {
   80aca:	2100      	movs	r1, #0
   80acc:	4811      	ldr	r0, [pc, #68]	; (80b14 <TC6_Handler+0x4c>)
   80ace:	4b12      	ldr	r3, [pc, #72]	; (80b18 <TC6_Handler+0x50>)
   80ad0:	4798      	blx	r3
   80ad2:	f010 0f40 	tst.w	r0, #64	; 0x40
   80ad6:	d01c      	beq.n	80b12 <TC6_Handler+0x4a>
		uint16_t micros = 0;
		gs_ul_captured_rb = tc_read_rb(TC, TC_CHANNEL_CAPTURE);
   80ad8:	2100      	movs	r1, #0
   80ada:	480e      	ldr	r0, [pc, #56]	; (80b14 <TC6_Handler+0x4c>)
   80adc:	4b0f      	ldr	r3, [pc, #60]	; (80b1c <TC6_Handler+0x54>)
   80ade:	4798      	blx	r3
		micros = (gs_ul_captured_rb * 8) / 21; // clock is Master Clock with prescaler 32 at 84 MHz Master Clock
   80ae0:	00c0      	lsls	r0, r0, #3
   80ae2:	4b0f      	ldr	r3, [pc, #60]	; (80b20 <TC6_Handler+0x58>)
   80ae4:	fba3 2300 	umull	r2, r3, r3, r0
   80ae8:	1ac0      	subs	r0, r0, r3
   80aea:	eb03 0350 	add.w	r3, r3, r0, lsr #1
   80aee:	091b      	lsrs	r3, r3, #4
		if (micros > 3000) {
   80af0:	b299      	uxth	r1, r3
   80af2:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80af6:	4291      	cmp	r1, r2
   80af8:	d903      	bls.n	80b02 <TC6_Handler+0x3a>
			// PPM sync pulse, recount channels starting with 0
			channel_id = 0;
   80afa:	2200      	movs	r2, #0
   80afc:	4b09      	ldr	r3, [pc, #36]	; (80b24 <TC6_Handler+0x5c>)
   80afe:	601a      	str	r2, [r3, #0]
			return;
   80b00:	bd08      	pop	{r3, pc}
		}
		CHANNEL[channel_id] = micros;
   80b02:	4908      	ldr	r1, [pc, #32]	; (80b24 <TC6_Handler+0x5c>)
   80b04:	680a      	ldr	r2, [r1, #0]
   80b06:	b29b      	uxth	r3, r3
   80b08:	4807      	ldr	r0, [pc, #28]	; (80b28 <TC6_Handler+0x60>)
   80b0a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		channel_id++;		
   80b0e:	3201      	adds	r2, #1
   80b10:	600a      	str	r2, [r1, #0]
   80b12:	bd08      	pop	{r3, pc}
   80b14:	40088000 	.word	0x40088000
   80b18:	000806d9 	.word	0x000806d9
   80b1c:	000806c9 	.word	0x000806c9
   80b20:	86186187 	.word	0x86186187
   80b24:	20070a24 	.word	0x20070a24
   80b28:	20070a28 	.word	0x20070a28

00080b2c <main>:

	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
   80b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b30:	b085      	sub	sp, #20
	sysclk_init();
   80b32:	4b2b      	ldr	r3, [pc, #172]	; (80be0 <main+0xb4>)
   80b34:	4798      	blx	r3
	board_init();
   80b36:	4b2b      	ldr	r3, [pc, #172]	; (80be4 <main+0xb8>)
   80b38:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b3a:	4d2b      	ldr	r5, [pc, #172]	; (80be8 <main+0xbc>)
   80b3c:	4b2b      	ldr	r3, [pc, #172]	; (80bec <main+0xc0>)
   80b3e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b40:	4a2b      	ldr	r2, [pc, #172]	; (80bf0 <main+0xc4>)
   80b42:	4b2c      	ldr	r3, [pc, #176]	; (80bf4 <main+0xc8>)
   80b44:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80b46:	4a2c      	ldr	r2, [pc, #176]	; (80bf8 <main+0xcc>)
   80b48:	4b2c      	ldr	r3, [pc, #176]	; (80bfc <main+0xd0>)
   80b4a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80b4c:	4b2c      	ldr	r3, [pc, #176]	; (80c00 <main+0xd4>)
   80b4e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80b50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80b54:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80b56:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b5a:	9303      	str	r3, [sp, #12]
   80b5c:	2008      	movs	r0, #8
   80b5e:	4c29      	ldr	r4, [pc, #164]	; (80c04 <main+0xd8>)
   80b60:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80b62:	a901      	add	r1, sp, #4
   80b64:	4628      	mov	r0, r5
   80b66:	4b28      	ldr	r3, [pc, #160]	; (80c08 <main+0xdc>)
   80b68:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80b6a:	4e28      	ldr	r6, [pc, #160]	; (80c0c <main+0xe0>)
   80b6c:	6833      	ldr	r3, [r6, #0]
   80b6e:	2100      	movs	r1, #0
   80b70:	6898      	ldr	r0, [r3, #8]
   80b72:	4d27      	ldr	r5, [pc, #156]	; (80c10 <main+0xe4>)
   80b74:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80b76:	6833      	ldr	r3, [r6, #0]
   80b78:	2100      	movs	r1, #0
   80b7a:	6858      	ldr	r0, [r3, #4]
   80b7c:	47a8      	blx	r5

	configure_console(); 
	pmc_enable_periph_clk(ID_TC_CAPTURE);
   80b7e:	2021      	movs	r0, #33	; 0x21
   80b80:	47a0      	blx	r4
	tc_init(TC, TC_CHANNEL_CAPTURE,
   80b82:	4c24      	ldr	r4, [pc, #144]	; (80c14 <main+0xe8>)
   80b84:	4a24      	ldr	r2, [pc, #144]	; (80c18 <main+0xec>)
   80b86:	2100      	movs	r1, #0
   80b88:	4620      	mov	r0, r4
   80b8a:	4b24      	ldr	r3, [pc, #144]	; (80c1c <main+0xf0>)
   80b8c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80b8e:	4b24      	ldr	r3, [pc, #144]	; (80c20 <main+0xf4>)
   80b90:	2202      	movs	r2, #2
   80b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80b96:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80b9a:	2500      	movs	r5, #0
   80b9c:	f883 5321 	strb.w	r5, [r3, #801]	; 0x321

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80ba0:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(TC_IRQn);
	NVIC_ClearPendingIRQ(TC_IRQn);
	NVIC_SetPriority(TC_IRQn, 0);
	NVIC_EnableIRQ(TC_IRQn);
	
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
   80ba2:	2240      	movs	r2, #64	; 0x40
   80ba4:	4629      	mov	r1, r5
   80ba6:	4620      	mov	r0, r4
   80ba8:	4b1e      	ldr	r3, [pc, #120]	; (80c24 <main+0xf8>)
   80baa:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL_CAPTURE);
   80bac:	4629      	mov	r1, r5
   80bae:	4620      	mov	r0, r4
   80bb0:	4b1d      	ldr	r3, [pc, #116]	; (80c28 <main+0xfc>)
   80bb2:	4798      	blx	r3
	printf("TESTESTESTESTESTESTESTEST");
   80bb4:	481d      	ldr	r0, [pc, #116]	; (80c2c <main+0x100>)
   80bb6:	4b1e      	ldr	r3, [pc, #120]	; (80c30 <main+0x104>)
   80bb8:	4798      	blx	r3
   80bba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80c38 <main+0x10c>
	while(1) {
		for (int i = 0; i < 8; i++) {
			printf("%d::", CHANNEL[i]);
   80bbe:	4d1c      	ldr	r5, [pc, #112]	; (80c30 <main+0x104>)
   80bc0:	4f1c      	ldr	r7, [pc, #112]	; (80c34 <main+0x108>)
			
		}
		printf("\r\n");		
   80bc2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80c3c <main+0x110>
   80bc6:	f1a8 0404 	sub.w	r4, r8, #4
   80bca:	f108 061c 	add.w	r6, r8, #28
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
	tc_start(TC, TC_CHANNEL_CAPTURE);
	printf("TESTESTESTESTESTESTESTEST");
	while(1) {
		for (int i = 0; i < 8; i++) {
			printf("%d::", CHANNEL[i]);
   80bce:	f854 1f04 	ldr.w	r1, [r4, #4]!
   80bd2:	4638      	mov	r0, r7
   80bd4:	47a8      	blx	r5
	
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
	tc_start(TC, TC_CHANNEL_CAPTURE);
	printf("TESTESTESTESTESTESTESTEST");
	while(1) {
		for (int i = 0; i < 8; i++) {
   80bd6:	42a6      	cmp	r6, r4
   80bd8:	d1f9      	bne.n	80bce <main+0xa2>
			printf("%d::", CHANNEL[i]);
			
		}
		printf("\r\n");		
   80bda:	4648      	mov	r0, r9
   80bdc:	47a8      	blx	r5
	}
   80bde:	e7f2      	b.n	80bc6 <main+0x9a>
   80be0:	00080151 	.word	0x00080151
   80be4:	00080241 	.word	0x00080241
   80be8:	400e0800 	.word	0x400e0800
   80bec:	20070a84 	.word	0x20070a84
   80bf0:	00080a2d 	.word	0x00080a2d
   80bf4:	20070a80 	.word	0x20070a80
   80bf8:	00080985 	.word	0x00080985
   80bfc:	20070a7c 	.word	0x20070a7c
   80c00:	0501bd00 	.word	0x0501bd00
   80c04:	00080655 	.word	0x00080655
   80c08:	000806e1 	.word	0x000806e1
   80c0c:	20070558 	.word	0x20070558
   80c10:	00080d55 	.word	0x00080d55
   80c14:	40088000 	.word	0x40088000
   80c18:	00060502 	.word	0x00060502
   80c1c:	000806a9 	.word	0x000806a9
   80c20:	e000e100 	.word	0xe000e100
   80c24:	000806d1 	.word	0x000806d1
   80c28:	000806c1 	.word	0x000806c1
   80c2c:	00083b70 	.word	0x00083b70
   80c30:	00080c91 	.word	0x00080c91
   80c34:	00083b8c 	.word	0x00083b8c
   80c38:	20070a28 	.word	0x20070a28
   80c3c:	00083b94 	.word	0x00083b94

00080c40 <__libc_init_array>:
   80c40:	b570      	push	{r4, r5, r6, lr}
   80c42:	4e0f      	ldr	r6, [pc, #60]	; (80c80 <__libc_init_array+0x40>)
   80c44:	4d0f      	ldr	r5, [pc, #60]	; (80c84 <__libc_init_array+0x44>)
   80c46:	1b76      	subs	r6, r6, r5
   80c48:	10b6      	asrs	r6, r6, #2
   80c4a:	bf18      	it	ne
   80c4c:	2400      	movne	r4, #0
   80c4e:	d005      	beq.n	80c5c <__libc_init_array+0x1c>
   80c50:	3401      	adds	r4, #1
   80c52:	f855 3b04 	ldr.w	r3, [r5], #4
   80c56:	4798      	blx	r3
   80c58:	42a6      	cmp	r6, r4
   80c5a:	d1f9      	bne.n	80c50 <__libc_init_array+0x10>
   80c5c:	4e0a      	ldr	r6, [pc, #40]	; (80c88 <__libc_init_array+0x48>)
   80c5e:	4d0b      	ldr	r5, [pc, #44]	; (80c8c <__libc_init_array+0x4c>)
   80c60:	f002 ffc6 	bl	83bf0 <_init>
   80c64:	1b76      	subs	r6, r6, r5
   80c66:	10b6      	asrs	r6, r6, #2
   80c68:	bf18      	it	ne
   80c6a:	2400      	movne	r4, #0
   80c6c:	d006      	beq.n	80c7c <__libc_init_array+0x3c>
   80c6e:	3401      	adds	r4, #1
   80c70:	f855 3b04 	ldr.w	r3, [r5], #4
   80c74:	4798      	blx	r3
   80c76:	42a6      	cmp	r6, r4
   80c78:	d1f9      	bne.n	80c6e <__libc_init_array+0x2e>
   80c7a:	bd70      	pop	{r4, r5, r6, pc}
   80c7c:	bd70      	pop	{r4, r5, r6, pc}
   80c7e:	bf00      	nop
   80c80:	00083bfc 	.word	0x00083bfc
   80c84:	00083bfc 	.word	0x00083bfc
   80c88:	00083c04 	.word	0x00083c04
   80c8c:	00083bfc 	.word	0x00083bfc

00080c90 <iprintf>:
   80c90:	b40f      	push	{r0, r1, r2, r3}
   80c92:	b510      	push	{r4, lr}
   80c94:	4b07      	ldr	r3, [pc, #28]	; (80cb4 <iprintf+0x24>)
   80c96:	b082      	sub	sp, #8
   80c98:	ac04      	add	r4, sp, #16
   80c9a:	f854 2b04 	ldr.w	r2, [r4], #4
   80c9e:	6818      	ldr	r0, [r3, #0]
   80ca0:	4623      	mov	r3, r4
   80ca2:	6881      	ldr	r1, [r0, #8]
   80ca4:	9401      	str	r4, [sp, #4]
   80ca6:	f000 f941 	bl	80f2c <_vfiprintf_r>
   80caa:	b002      	add	sp, #8
   80cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80cb0:	b004      	add	sp, #16
   80cb2:	4770      	bx	lr
   80cb4:	20070558 	.word	0x20070558

00080cb8 <memset>:
   80cb8:	b470      	push	{r4, r5, r6}
   80cba:	0784      	lsls	r4, r0, #30
   80cbc:	d046      	beq.n	80d4c <memset+0x94>
   80cbe:	1e54      	subs	r4, r2, #1
   80cc0:	2a00      	cmp	r2, #0
   80cc2:	d041      	beq.n	80d48 <memset+0x90>
   80cc4:	b2cd      	uxtb	r5, r1
   80cc6:	4603      	mov	r3, r0
   80cc8:	e002      	b.n	80cd0 <memset+0x18>
   80cca:	1e62      	subs	r2, r4, #1
   80ccc:	b3e4      	cbz	r4, 80d48 <memset+0x90>
   80cce:	4614      	mov	r4, r2
   80cd0:	f803 5b01 	strb.w	r5, [r3], #1
   80cd4:	079a      	lsls	r2, r3, #30
   80cd6:	d1f8      	bne.n	80cca <memset+0x12>
   80cd8:	2c03      	cmp	r4, #3
   80cda:	d92e      	bls.n	80d3a <memset+0x82>
   80cdc:	b2cd      	uxtb	r5, r1
   80cde:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80ce2:	2c0f      	cmp	r4, #15
   80ce4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80ce8:	d919      	bls.n	80d1e <memset+0x66>
   80cea:	4626      	mov	r6, r4
   80cec:	f103 0210 	add.w	r2, r3, #16
   80cf0:	3e10      	subs	r6, #16
   80cf2:	2e0f      	cmp	r6, #15
   80cf4:	f842 5c10 	str.w	r5, [r2, #-16]
   80cf8:	f842 5c0c 	str.w	r5, [r2, #-12]
   80cfc:	f842 5c08 	str.w	r5, [r2, #-8]
   80d00:	f842 5c04 	str.w	r5, [r2, #-4]
   80d04:	f102 0210 	add.w	r2, r2, #16
   80d08:	d8f2      	bhi.n	80cf0 <memset+0x38>
   80d0a:	f1a4 0210 	sub.w	r2, r4, #16
   80d0e:	f022 020f 	bic.w	r2, r2, #15
   80d12:	f004 040f 	and.w	r4, r4, #15
   80d16:	3210      	adds	r2, #16
   80d18:	2c03      	cmp	r4, #3
   80d1a:	4413      	add	r3, r2
   80d1c:	d90d      	bls.n	80d3a <memset+0x82>
   80d1e:	461e      	mov	r6, r3
   80d20:	4622      	mov	r2, r4
   80d22:	3a04      	subs	r2, #4
   80d24:	2a03      	cmp	r2, #3
   80d26:	f846 5b04 	str.w	r5, [r6], #4
   80d2a:	d8fa      	bhi.n	80d22 <memset+0x6a>
   80d2c:	1f22      	subs	r2, r4, #4
   80d2e:	f022 0203 	bic.w	r2, r2, #3
   80d32:	3204      	adds	r2, #4
   80d34:	4413      	add	r3, r2
   80d36:	f004 0403 	and.w	r4, r4, #3
   80d3a:	b12c      	cbz	r4, 80d48 <memset+0x90>
   80d3c:	b2c9      	uxtb	r1, r1
   80d3e:	441c      	add	r4, r3
   80d40:	f803 1b01 	strb.w	r1, [r3], #1
   80d44:	42a3      	cmp	r3, r4
   80d46:	d1fb      	bne.n	80d40 <memset+0x88>
   80d48:	bc70      	pop	{r4, r5, r6}
   80d4a:	4770      	bx	lr
   80d4c:	4614      	mov	r4, r2
   80d4e:	4603      	mov	r3, r0
   80d50:	e7c2      	b.n	80cd8 <memset+0x20>
   80d52:	bf00      	nop

00080d54 <setbuf>:
   80d54:	2900      	cmp	r1, #0
   80d56:	bf0c      	ite	eq
   80d58:	2202      	moveq	r2, #2
   80d5a:	2200      	movne	r2, #0
   80d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80d60:	f000 b800 	b.w	80d64 <setvbuf>

00080d64 <setvbuf>:
   80d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80d68:	4d51      	ldr	r5, [pc, #324]	; (80eb0 <setvbuf+0x14c>)
   80d6a:	b083      	sub	sp, #12
   80d6c:	682d      	ldr	r5, [r5, #0]
   80d6e:	4604      	mov	r4, r0
   80d70:	460f      	mov	r7, r1
   80d72:	4690      	mov	r8, r2
   80d74:	461e      	mov	r6, r3
   80d76:	b115      	cbz	r5, 80d7e <setvbuf+0x1a>
   80d78:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80d7a:	2b00      	cmp	r3, #0
   80d7c:	d079      	beq.n	80e72 <setvbuf+0x10e>
   80d7e:	f1b8 0f02 	cmp.w	r8, #2
   80d82:	d004      	beq.n	80d8e <setvbuf+0x2a>
   80d84:	f1b8 0f01 	cmp.w	r8, #1
   80d88:	d87f      	bhi.n	80e8a <setvbuf+0x126>
   80d8a:	2e00      	cmp	r6, #0
   80d8c:	db7d      	blt.n	80e8a <setvbuf+0x126>
   80d8e:	4621      	mov	r1, r4
   80d90:	4628      	mov	r0, r5
   80d92:	f001 f90d 	bl	81fb0 <_fflush_r>
   80d96:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80d98:	b141      	cbz	r1, 80dac <setvbuf+0x48>
   80d9a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80d9e:	4299      	cmp	r1, r3
   80da0:	d002      	beq.n	80da8 <setvbuf+0x44>
   80da2:	4628      	mov	r0, r5
   80da4:	f001 fa60 	bl	82268 <_free_r>
   80da8:	2300      	movs	r3, #0
   80daa:	6323      	str	r3, [r4, #48]	; 0x30
   80dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80db0:	2200      	movs	r2, #0
   80db2:	61a2      	str	r2, [r4, #24]
   80db4:	6062      	str	r2, [r4, #4]
   80db6:	061a      	lsls	r2, r3, #24
   80db8:	d454      	bmi.n	80e64 <setvbuf+0x100>
   80dba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   80dbe:	f023 0303 	bic.w	r3, r3, #3
   80dc2:	f1b8 0f02 	cmp.w	r8, #2
   80dc6:	81a3      	strh	r3, [r4, #12]
   80dc8:	d039      	beq.n	80e3e <setvbuf+0xda>
   80dca:	ab01      	add	r3, sp, #4
   80dcc:	466a      	mov	r2, sp
   80dce:	4621      	mov	r1, r4
   80dd0:	4628      	mov	r0, r5
   80dd2:	f001 fce7 	bl	827a4 <__swhatbuf_r>
   80dd6:	89a3      	ldrh	r3, [r4, #12]
   80dd8:	4318      	orrs	r0, r3
   80dda:	81a0      	strh	r0, [r4, #12]
   80ddc:	b326      	cbz	r6, 80e28 <setvbuf+0xc4>
   80dde:	b327      	cbz	r7, 80e2a <setvbuf+0xc6>
   80de0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80de2:	2b00      	cmp	r3, #0
   80de4:	d04d      	beq.n	80e82 <setvbuf+0x11e>
   80de6:	9b00      	ldr	r3, [sp, #0]
   80de8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   80dec:	429e      	cmp	r6, r3
   80dee:	bf1c      	itt	ne
   80df0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   80df4:	81a0      	strhne	r0, [r4, #12]
   80df6:	f1b8 0f01 	cmp.w	r8, #1
   80dfa:	bf08      	it	eq
   80dfc:	f040 0001 	orreq.w	r0, r0, #1
   80e00:	b283      	uxth	r3, r0
   80e02:	bf08      	it	eq
   80e04:	81a0      	strheq	r0, [r4, #12]
   80e06:	f003 0008 	and.w	r0, r3, #8
   80e0a:	b280      	uxth	r0, r0
   80e0c:	6027      	str	r7, [r4, #0]
   80e0e:	6127      	str	r7, [r4, #16]
   80e10:	6166      	str	r6, [r4, #20]
   80e12:	b318      	cbz	r0, 80e5c <setvbuf+0xf8>
   80e14:	f013 0001 	ands.w	r0, r3, #1
   80e18:	d02f      	beq.n	80e7a <setvbuf+0x116>
   80e1a:	2000      	movs	r0, #0
   80e1c:	4276      	negs	r6, r6
   80e1e:	61a6      	str	r6, [r4, #24]
   80e20:	60a0      	str	r0, [r4, #8]
   80e22:	b003      	add	sp, #12
   80e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e28:	9e00      	ldr	r6, [sp, #0]
   80e2a:	4630      	mov	r0, r6
   80e2c:	f001 fd2e 	bl	8288c <malloc>
   80e30:	4607      	mov	r7, r0
   80e32:	b368      	cbz	r0, 80e90 <setvbuf+0x12c>
   80e34:	89a3      	ldrh	r3, [r4, #12]
   80e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80e3a:	81a3      	strh	r3, [r4, #12]
   80e3c:	e7d0      	b.n	80de0 <setvbuf+0x7c>
   80e3e:	2000      	movs	r0, #0
   80e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80e44:	f043 0302 	orr.w	r3, r3, #2
   80e48:	2500      	movs	r5, #0
   80e4a:	2101      	movs	r1, #1
   80e4c:	81a3      	strh	r3, [r4, #12]
   80e4e:	60a5      	str	r5, [r4, #8]
   80e50:	6022      	str	r2, [r4, #0]
   80e52:	6122      	str	r2, [r4, #16]
   80e54:	6161      	str	r1, [r4, #20]
   80e56:	b003      	add	sp, #12
   80e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e5c:	60a0      	str	r0, [r4, #8]
   80e5e:	b003      	add	sp, #12
   80e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e64:	6921      	ldr	r1, [r4, #16]
   80e66:	4628      	mov	r0, r5
   80e68:	f001 f9fe 	bl	82268 <_free_r>
   80e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80e70:	e7a3      	b.n	80dba <setvbuf+0x56>
   80e72:	4628      	mov	r0, r5
   80e74:	f001 f930 	bl	820d8 <__sinit>
   80e78:	e781      	b.n	80d7e <setvbuf+0x1a>
   80e7a:	60a6      	str	r6, [r4, #8]
   80e7c:	b003      	add	sp, #12
   80e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e82:	4628      	mov	r0, r5
   80e84:	f001 f928 	bl	820d8 <__sinit>
   80e88:	e7ad      	b.n	80de6 <setvbuf+0x82>
   80e8a:	f04f 30ff 	mov.w	r0, #4294967295
   80e8e:	e7e2      	b.n	80e56 <setvbuf+0xf2>
   80e90:	f8dd 9000 	ldr.w	r9, [sp]
   80e94:	45b1      	cmp	r9, r6
   80e96:	d006      	beq.n	80ea6 <setvbuf+0x142>
   80e98:	4648      	mov	r0, r9
   80e9a:	f001 fcf7 	bl	8288c <malloc>
   80e9e:	4607      	mov	r7, r0
   80ea0:	b108      	cbz	r0, 80ea6 <setvbuf+0x142>
   80ea2:	464e      	mov	r6, r9
   80ea4:	e7c6      	b.n	80e34 <setvbuf+0xd0>
   80ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80eaa:	f04f 30ff 	mov.w	r0, #4294967295
   80eae:	e7c7      	b.n	80e40 <setvbuf+0xdc>
   80eb0:	20070558 	.word	0x20070558

00080eb4 <__sprint_r.part.0>:
   80eb4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80eba:	049c      	lsls	r4, r3, #18
   80ebc:	4692      	mov	sl, r2
   80ebe:	d52c      	bpl.n	80f1a <__sprint_r.part.0+0x66>
   80ec0:	6893      	ldr	r3, [r2, #8]
   80ec2:	6812      	ldr	r2, [r2, #0]
   80ec4:	b33b      	cbz	r3, 80f16 <__sprint_r.part.0+0x62>
   80ec6:	460f      	mov	r7, r1
   80ec8:	4680      	mov	r8, r0
   80eca:	f102 0908 	add.w	r9, r2, #8
   80ece:	e919 0060 	ldmdb	r9, {r5, r6}
   80ed2:	08b6      	lsrs	r6, r6, #2
   80ed4:	d017      	beq.n	80f06 <__sprint_r.part.0+0x52>
   80ed6:	3d04      	subs	r5, #4
   80ed8:	2400      	movs	r4, #0
   80eda:	e001      	b.n	80ee0 <__sprint_r.part.0+0x2c>
   80edc:	42a6      	cmp	r6, r4
   80ede:	d010      	beq.n	80f02 <__sprint_r.part.0+0x4e>
   80ee0:	463a      	mov	r2, r7
   80ee2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80ee6:	4640      	mov	r0, r8
   80ee8:	f001 f95e 	bl	821a8 <_fputwc_r>
   80eec:	1c43      	adds	r3, r0, #1
   80eee:	f104 0401 	add.w	r4, r4, #1
   80ef2:	d1f3      	bne.n	80edc <__sprint_r.part.0+0x28>
   80ef4:	2300      	movs	r3, #0
   80ef6:	f8ca 3008 	str.w	r3, [sl, #8]
   80efa:	f8ca 3004 	str.w	r3, [sl, #4]
   80efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80f02:	f8da 3008 	ldr.w	r3, [sl, #8]
   80f06:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   80f0a:	f8ca 3008 	str.w	r3, [sl, #8]
   80f0e:	f109 0908 	add.w	r9, r9, #8
   80f12:	2b00      	cmp	r3, #0
   80f14:	d1db      	bne.n	80ece <__sprint_r.part.0+0x1a>
   80f16:	2000      	movs	r0, #0
   80f18:	e7ec      	b.n	80ef4 <__sprint_r.part.0+0x40>
   80f1a:	f001 fa8d 	bl	82438 <__sfvwrite_r>
   80f1e:	2300      	movs	r3, #0
   80f20:	f8ca 3008 	str.w	r3, [sl, #8]
   80f24:	f8ca 3004 	str.w	r3, [sl, #4]
   80f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00080f2c <_vfiprintf_r>:
   80f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f30:	b0ab      	sub	sp, #172	; 0xac
   80f32:	461c      	mov	r4, r3
   80f34:	9100      	str	r1, [sp, #0]
   80f36:	4690      	mov	r8, r2
   80f38:	9304      	str	r3, [sp, #16]
   80f3a:	9005      	str	r0, [sp, #20]
   80f3c:	b118      	cbz	r0, 80f46 <_vfiprintf_r+0x1a>
   80f3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80f40:	2b00      	cmp	r3, #0
   80f42:	f000 80de 	beq.w	81102 <_vfiprintf_r+0x1d6>
   80f46:	9800      	ldr	r0, [sp, #0]
   80f48:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   80f4c:	b28a      	uxth	r2, r1
   80f4e:	0495      	lsls	r5, r2, #18
   80f50:	d407      	bmi.n	80f62 <_vfiprintf_r+0x36>
   80f52:	6e43      	ldr	r3, [r0, #100]	; 0x64
   80f54:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   80f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   80f5c:	8182      	strh	r2, [r0, #12]
   80f5e:	6643      	str	r3, [r0, #100]	; 0x64
   80f60:	b292      	uxth	r2, r2
   80f62:	0711      	lsls	r1, r2, #28
   80f64:	f140 80b1 	bpl.w	810ca <_vfiprintf_r+0x19e>
   80f68:	9b00      	ldr	r3, [sp, #0]
   80f6a:	691b      	ldr	r3, [r3, #16]
   80f6c:	2b00      	cmp	r3, #0
   80f6e:	f000 80ac 	beq.w	810ca <_vfiprintf_r+0x19e>
   80f72:	f002 021a 	and.w	r2, r2, #26
   80f76:	2a0a      	cmp	r2, #10
   80f78:	f000 80b5 	beq.w	810e6 <_vfiprintf_r+0x1ba>
   80f7c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   80f80:	46d3      	mov	fp, sl
   80f82:	2300      	movs	r3, #0
   80f84:	9302      	str	r3, [sp, #8]
   80f86:	930f      	str	r3, [sp, #60]	; 0x3c
   80f88:	930e      	str	r3, [sp, #56]	; 0x38
   80f8a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   80f8e:	f898 3000 	ldrb.w	r3, [r8]
   80f92:	4644      	mov	r4, r8
   80f94:	b1fb      	cbz	r3, 80fd6 <_vfiprintf_r+0xaa>
   80f96:	2b25      	cmp	r3, #37	; 0x25
   80f98:	d102      	bne.n	80fa0 <_vfiprintf_r+0x74>
   80f9a:	e01c      	b.n	80fd6 <_vfiprintf_r+0xaa>
   80f9c:	2b25      	cmp	r3, #37	; 0x25
   80f9e:	d003      	beq.n	80fa8 <_vfiprintf_r+0x7c>
   80fa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   80fa4:	2b00      	cmp	r3, #0
   80fa6:	d1f9      	bne.n	80f9c <_vfiprintf_r+0x70>
   80fa8:	ebc8 0504 	rsb	r5, r8, r4
   80fac:	b19d      	cbz	r5, 80fd6 <_vfiprintf_r+0xaa>
   80fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   80fb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   80fb2:	3301      	adds	r3, #1
   80fb4:	442a      	add	r2, r5
   80fb6:	2b07      	cmp	r3, #7
   80fb8:	f8cb 8000 	str.w	r8, [fp]
   80fbc:	f8cb 5004 	str.w	r5, [fp, #4]
   80fc0:	920f      	str	r2, [sp, #60]	; 0x3c
   80fc2:	930e      	str	r3, [sp, #56]	; 0x38
   80fc4:	dd7b      	ble.n	810be <_vfiprintf_r+0x192>
   80fc6:	2a00      	cmp	r2, #0
   80fc8:	f040 851f 	bne.w	81a0a <_vfiprintf_r+0xade>
   80fcc:	46d3      	mov	fp, sl
   80fce:	9b02      	ldr	r3, [sp, #8]
   80fd0:	920e      	str	r2, [sp, #56]	; 0x38
   80fd2:	442b      	add	r3, r5
   80fd4:	9302      	str	r3, [sp, #8]
   80fd6:	7823      	ldrb	r3, [r4, #0]
   80fd8:	2b00      	cmp	r3, #0
   80fda:	f000 843b 	beq.w	81854 <_vfiprintf_r+0x928>
   80fde:	f04f 0300 	mov.w	r3, #0
   80fe2:	2100      	movs	r1, #0
   80fe4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   80fe8:	f104 0801 	add.w	r8, r4, #1
   80fec:	7863      	ldrb	r3, [r4, #1]
   80fee:	4608      	mov	r0, r1
   80ff0:	460e      	mov	r6, r1
   80ff2:	460c      	mov	r4, r1
   80ff4:	f04f 32ff 	mov.w	r2, #4294967295
   80ff8:	9201      	str	r2, [sp, #4]
   80ffa:	f108 0801 	add.w	r8, r8, #1
   80ffe:	f1a3 0220 	sub.w	r2, r3, #32
   81002:	2a58      	cmp	r2, #88	; 0x58
   81004:	f200 838b 	bhi.w	8171e <_vfiprintf_r+0x7f2>
   81008:	e8df f012 	tbh	[pc, r2, lsl #1]
   8100c:	0389033d 	.word	0x0389033d
   81010:	03450389 	.word	0x03450389
   81014:	03890389 	.word	0x03890389
   81018:	03890389 	.word	0x03890389
   8101c:	03890389 	.word	0x03890389
   81020:	026b007e 	.word	0x026b007e
   81024:	00860389 	.word	0x00860389
   81028:	03890270 	.word	0x03890270
   8102c:	025d01cc 	.word	0x025d01cc
   81030:	025d025d 	.word	0x025d025d
   81034:	025d025d 	.word	0x025d025d
   81038:	025d025d 	.word	0x025d025d
   8103c:	025d025d 	.word	0x025d025d
   81040:	03890389 	.word	0x03890389
   81044:	03890389 	.word	0x03890389
   81048:	03890389 	.word	0x03890389
   8104c:	03890389 	.word	0x03890389
   81050:	03890389 	.word	0x03890389
   81054:	038901d1 	.word	0x038901d1
   81058:	03890389 	.word	0x03890389
   8105c:	03890389 	.word	0x03890389
   81060:	03890389 	.word	0x03890389
   81064:	03890389 	.word	0x03890389
   81068:	021a0389 	.word	0x021a0389
   8106c:	03890389 	.word	0x03890389
   81070:	03890389 	.word	0x03890389
   81074:	02e50389 	.word	0x02e50389
   81078:	03890389 	.word	0x03890389
   8107c:	03890308 	.word	0x03890308
   81080:	03890389 	.word	0x03890389
   81084:	03890389 	.word	0x03890389
   81088:	03890389 	.word	0x03890389
   8108c:	03890389 	.word	0x03890389
   81090:	032b0389 	.word	0x032b0389
   81094:	03890382 	.word	0x03890382
   81098:	03890389 	.word	0x03890389
   8109c:	0382035e 	.word	0x0382035e
   810a0:	03890389 	.word	0x03890389
   810a4:	03890363 	.word	0x03890363
   810a8:	028d0370 	.word	0x028d0370
   810ac:	02e0008b 	.word	0x02e0008b
   810b0:	02930389 	.word	0x02930389
   810b4:	02b20389 	.word	0x02b20389
   810b8:	03890389 	.word	0x03890389
   810bc:	034a      	.short	0x034a
   810be:	f10b 0b08 	add.w	fp, fp, #8
   810c2:	9b02      	ldr	r3, [sp, #8]
   810c4:	442b      	add	r3, r5
   810c6:	9302      	str	r3, [sp, #8]
   810c8:	e785      	b.n	80fd6 <_vfiprintf_r+0xaa>
   810ca:	9900      	ldr	r1, [sp, #0]
   810cc:	9805      	ldr	r0, [sp, #20]
   810ce:	f000 fe57 	bl	81d80 <__swsetup_r>
   810d2:	2800      	cmp	r0, #0
   810d4:	f040 8545 	bne.w	81b62 <_vfiprintf_r+0xc36>
   810d8:	9b00      	ldr	r3, [sp, #0]
   810da:	899a      	ldrh	r2, [r3, #12]
   810dc:	f002 021a 	and.w	r2, r2, #26
   810e0:	2a0a      	cmp	r2, #10
   810e2:	f47f af4b 	bne.w	80f7c <_vfiprintf_r+0x50>
   810e6:	9900      	ldr	r1, [sp, #0]
   810e8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   810ec:	2b00      	cmp	r3, #0
   810ee:	f6ff af45 	blt.w	80f7c <_vfiprintf_r+0x50>
   810f2:	4623      	mov	r3, r4
   810f4:	4642      	mov	r2, r8
   810f6:	9805      	ldr	r0, [sp, #20]
   810f8:	f000 fe0c 	bl	81d14 <__sbprintf>
   810fc:	b02b      	add	sp, #172	; 0xac
   810fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81102:	f000 ffe9 	bl	820d8 <__sinit>
   81106:	e71e      	b.n	80f46 <_vfiprintf_r+0x1a>
   81108:	9a04      	ldr	r2, [sp, #16]
   8110a:	4613      	mov	r3, r2
   8110c:	6814      	ldr	r4, [r2, #0]
   8110e:	3304      	adds	r3, #4
   81110:	2c00      	cmp	r4, #0
   81112:	9304      	str	r3, [sp, #16]
   81114:	da02      	bge.n	8111c <_vfiprintf_r+0x1f0>
   81116:	4264      	negs	r4, r4
   81118:	f046 0604 	orr.w	r6, r6, #4
   8111c:	f898 3000 	ldrb.w	r3, [r8]
   81120:	e76b      	b.n	80ffa <_vfiprintf_r+0xce>
   81122:	f04f 0300 	mov.w	r3, #0
   81126:	9804      	ldr	r0, [sp, #16]
   81128:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8112c:	4603      	mov	r3, r0
   8112e:	2130      	movs	r1, #48	; 0x30
   81130:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   81134:	9901      	ldr	r1, [sp, #4]
   81136:	2278      	movs	r2, #120	; 0x78
   81138:	2900      	cmp	r1, #0
   8113a:	9406      	str	r4, [sp, #24]
   8113c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   81140:	6804      	ldr	r4, [r0, #0]
   81142:	f103 0304 	add.w	r3, r3, #4
   81146:	f04f 0500 	mov.w	r5, #0
   8114a:	f046 0202 	orr.w	r2, r6, #2
   8114e:	f2c0 850c 	blt.w	81b6a <_vfiprintf_r+0xc3e>
   81152:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81156:	ea54 0205 	orrs.w	r2, r4, r5
   8115a:	f046 0602 	orr.w	r6, r6, #2
   8115e:	9304      	str	r3, [sp, #16]
   81160:	f040 84b5 	bne.w	81ace <_vfiprintf_r+0xba2>
   81164:	48b3      	ldr	r0, [pc, #716]	; (81434 <_vfiprintf_r+0x508>)
   81166:	9b01      	ldr	r3, [sp, #4]
   81168:	2b00      	cmp	r3, #0
   8116a:	f040 8462 	bne.w	81a32 <_vfiprintf_r+0xb06>
   8116e:	4699      	mov	r9, r3
   81170:	4657      	mov	r7, sl
   81172:	2300      	movs	r3, #0
   81174:	9301      	str	r3, [sp, #4]
   81176:	9303      	str	r3, [sp, #12]
   81178:	9b01      	ldr	r3, [sp, #4]
   8117a:	9a03      	ldr	r2, [sp, #12]
   8117c:	4293      	cmp	r3, r2
   8117e:	bfb8      	it	lt
   81180:	4613      	movlt	r3, r2
   81182:	461d      	mov	r5, r3
   81184:	f1b9 0f00 	cmp.w	r9, #0
   81188:	d000      	beq.n	8118c <_vfiprintf_r+0x260>
   8118a:	3501      	adds	r5, #1
   8118c:	f016 0302 	ands.w	r3, r6, #2
   81190:	9307      	str	r3, [sp, #28]
   81192:	bf18      	it	ne
   81194:	3502      	addne	r5, #2
   81196:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   8119a:	9308      	str	r3, [sp, #32]
   8119c:	f040 82e8 	bne.w	81770 <_vfiprintf_r+0x844>
   811a0:	9b06      	ldr	r3, [sp, #24]
   811a2:	1b5c      	subs	r4, r3, r5
   811a4:	2c00      	cmp	r4, #0
   811a6:	f340 82e3 	ble.w	81770 <_vfiprintf_r+0x844>
   811aa:	2c10      	cmp	r4, #16
   811ac:	f340 853c 	ble.w	81c28 <_vfiprintf_r+0xcfc>
   811b0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 81438 <_vfiprintf_r+0x50c>
   811b4:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   811b8:	46dc      	mov	ip, fp
   811ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   811bc:	46c3      	mov	fp, r8
   811be:	2310      	movs	r3, #16
   811c0:	46a8      	mov	r8, r5
   811c2:	4670      	mov	r0, lr
   811c4:	464d      	mov	r5, r9
   811c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   811ca:	e007      	b.n	811dc <_vfiprintf_r+0x2b0>
   811cc:	f100 0e02 	add.w	lr, r0, #2
   811d0:	4608      	mov	r0, r1
   811d2:	f10c 0c08 	add.w	ip, ip, #8
   811d6:	3c10      	subs	r4, #16
   811d8:	2c10      	cmp	r4, #16
   811da:	dd13      	ble.n	81204 <_vfiprintf_r+0x2d8>
   811dc:	1c41      	adds	r1, r0, #1
   811de:	3210      	adds	r2, #16
   811e0:	2907      	cmp	r1, #7
   811e2:	920f      	str	r2, [sp, #60]	; 0x3c
   811e4:	f8cc 5000 	str.w	r5, [ip]
   811e8:	f8cc 3004 	str.w	r3, [ip, #4]
   811ec:	910e      	str	r1, [sp, #56]	; 0x38
   811ee:	dded      	ble.n	811cc <_vfiprintf_r+0x2a0>
   811f0:	2a00      	cmp	r2, #0
   811f2:	f040 82a5 	bne.w	81740 <_vfiprintf_r+0x814>
   811f6:	3c10      	subs	r4, #16
   811f8:	2c10      	cmp	r4, #16
   811fa:	4610      	mov	r0, r2
   811fc:	f04f 0e01 	mov.w	lr, #1
   81200:	46d4      	mov	ip, sl
   81202:	dceb      	bgt.n	811dc <_vfiprintf_r+0x2b0>
   81204:	46a9      	mov	r9, r5
   81206:	4670      	mov	r0, lr
   81208:	4645      	mov	r5, r8
   8120a:	46d8      	mov	r8, fp
   8120c:	46e3      	mov	fp, ip
   8120e:	4422      	add	r2, r4
   81210:	2807      	cmp	r0, #7
   81212:	920f      	str	r2, [sp, #60]	; 0x3c
   81214:	f8cb 9000 	str.w	r9, [fp]
   81218:	f8cb 4004 	str.w	r4, [fp, #4]
   8121c:	900e      	str	r0, [sp, #56]	; 0x38
   8121e:	f300 836d 	bgt.w	818fc <_vfiprintf_r+0x9d0>
   81222:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81226:	f10b 0b08 	add.w	fp, fp, #8
   8122a:	f100 0e01 	add.w	lr, r0, #1
   8122e:	2b00      	cmp	r3, #0
   81230:	f040 82a7 	bne.w	81782 <_vfiprintf_r+0x856>
   81234:	9b07      	ldr	r3, [sp, #28]
   81236:	2b00      	cmp	r3, #0
   81238:	f000 82ba 	beq.w	817b0 <_vfiprintf_r+0x884>
   8123c:	3202      	adds	r2, #2
   8123e:	a90c      	add	r1, sp, #48	; 0x30
   81240:	2302      	movs	r3, #2
   81242:	f1be 0f07 	cmp.w	lr, #7
   81246:	920f      	str	r2, [sp, #60]	; 0x3c
   81248:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8124c:	e88b 000a 	stmia.w	fp, {r1, r3}
   81250:	f340 8370 	ble.w	81934 <_vfiprintf_r+0xa08>
   81254:	2a00      	cmp	r2, #0
   81256:	f040 8400 	bne.w	81a5a <_vfiprintf_r+0xb2e>
   8125a:	9b08      	ldr	r3, [sp, #32]
   8125c:	f04f 0e01 	mov.w	lr, #1
   81260:	2b80      	cmp	r3, #128	; 0x80
   81262:	4610      	mov	r0, r2
   81264:	46d3      	mov	fp, sl
   81266:	f040 82a7 	bne.w	817b8 <_vfiprintf_r+0x88c>
   8126a:	9b06      	ldr	r3, [sp, #24]
   8126c:	1b5c      	subs	r4, r3, r5
   8126e:	2c00      	cmp	r4, #0
   81270:	f340 82a2 	ble.w	817b8 <_vfiprintf_r+0x88c>
   81274:	2c10      	cmp	r4, #16
   81276:	f340 84f8 	ble.w	81c6a <_vfiprintf_r+0xd3e>
   8127a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8143c <_vfiprintf_r+0x510>
   8127e:	46de      	mov	lr, fp
   81280:	2310      	movs	r3, #16
   81282:	46c3      	mov	fp, r8
   81284:	46a8      	mov	r8, r5
   81286:	464d      	mov	r5, r9
   81288:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8128c:	e007      	b.n	8129e <_vfiprintf_r+0x372>
   8128e:	f100 0c02 	add.w	ip, r0, #2
   81292:	4608      	mov	r0, r1
   81294:	f10e 0e08 	add.w	lr, lr, #8
   81298:	3c10      	subs	r4, #16
   8129a:	2c10      	cmp	r4, #16
   8129c:	dd13      	ble.n	812c6 <_vfiprintf_r+0x39a>
   8129e:	1c41      	adds	r1, r0, #1
   812a0:	3210      	adds	r2, #16
   812a2:	2907      	cmp	r1, #7
   812a4:	920f      	str	r2, [sp, #60]	; 0x3c
   812a6:	f8ce 5000 	str.w	r5, [lr]
   812aa:	f8ce 3004 	str.w	r3, [lr, #4]
   812ae:	910e      	str	r1, [sp, #56]	; 0x38
   812b0:	dded      	ble.n	8128e <_vfiprintf_r+0x362>
   812b2:	2a00      	cmp	r2, #0
   812b4:	f040 830c 	bne.w	818d0 <_vfiprintf_r+0x9a4>
   812b8:	3c10      	subs	r4, #16
   812ba:	2c10      	cmp	r4, #16
   812bc:	f04f 0c01 	mov.w	ip, #1
   812c0:	4610      	mov	r0, r2
   812c2:	46d6      	mov	lr, sl
   812c4:	dceb      	bgt.n	8129e <_vfiprintf_r+0x372>
   812c6:	46a9      	mov	r9, r5
   812c8:	4645      	mov	r5, r8
   812ca:	46d8      	mov	r8, fp
   812cc:	46f3      	mov	fp, lr
   812ce:	4422      	add	r2, r4
   812d0:	f1bc 0f07 	cmp.w	ip, #7
   812d4:	920f      	str	r2, [sp, #60]	; 0x3c
   812d6:	f8cb 9000 	str.w	r9, [fp]
   812da:	f8cb 4004 	str.w	r4, [fp, #4]
   812de:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   812e2:	f300 83c8 	bgt.w	81a76 <_vfiprintf_r+0xb4a>
   812e6:	9b01      	ldr	r3, [sp, #4]
   812e8:	9903      	ldr	r1, [sp, #12]
   812ea:	f10b 0b08 	add.w	fp, fp, #8
   812ee:	1a5c      	subs	r4, r3, r1
   812f0:	2c00      	cmp	r4, #0
   812f2:	f10c 0e01 	add.w	lr, ip, #1
   812f6:	4660      	mov	r0, ip
   812f8:	f300 8264 	bgt.w	817c4 <_vfiprintf_r+0x898>
   812fc:	9903      	ldr	r1, [sp, #12]
   812fe:	f1be 0f07 	cmp.w	lr, #7
   81302:	440a      	add	r2, r1
   81304:	920f      	str	r2, [sp, #60]	; 0x3c
   81306:	f8cb 7000 	str.w	r7, [fp]
   8130a:	f8cb 1004 	str.w	r1, [fp, #4]
   8130e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81312:	f340 82c5 	ble.w	818a0 <_vfiprintf_r+0x974>
   81316:	2a00      	cmp	r2, #0
   81318:	f040 8332 	bne.w	81980 <_vfiprintf_r+0xa54>
   8131c:	0770      	lsls	r0, r6, #29
   8131e:	920e      	str	r2, [sp, #56]	; 0x38
   81320:	d538      	bpl.n	81394 <_vfiprintf_r+0x468>
   81322:	9b06      	ldr	r3, [sp, #24]
   81324:	1b5c      	subs	r4, r3, r5
   81326:	2c00      	cmp	r4, #0
   81328:	dd34      	ble.n	81394 <_vfiprintf_r+0x468>
   8132a:	46d3      	mov	fp, sl
   8132c:	2c10      	cmp	r4, #16
   8132e:	f340 8496 	ble.w	81c5e <_vfiprintf_r+0xd32>
   81332:	f8df 9104 	ldr.w	r9, [pc, #260]	; 81438 <_vfiprintf_r+0x50c>
   81336:	990e      	ldr	r1, [sp, #56]	; 0x38
   81338:	464f      	mov	r7, r9
   8133a:	2610      	movs	r6, #16
   8133c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   81340:	e006      	b.n	81350 <_vfiprintf_r+0x424>
   81342:	1c88      	adds	r0, r1, #2
   81344:	4619      	mov	r1, r3
   81346:	f10b 0b08 	add.w	fp, fp, #8
   8134a:	3c10      	subs	r4, #16
   8134c:	2c10      	cmp	r4, #16
   8134e:	dd13      	ble.n	81378 <_vfiprintf_r+0x44c>
   81350:	1c4b      	adds	r3, r1, #1
   81352:	3210      	adds	r2, #16
   81354:	2b07      	cmp	r3, #7
   81356:	920f      	str	r2, [sp, #60]	; 0x3c
   81358:	f8cb 7000 	str.w	r7, [fp]
   8135c:	f8cb 6004 	str.w	r6, [fp, #4]
   81360:	930e      	str	r3, [sp, #56]	; 0x38
   81362:	ddee      	ble.n	81342 <_vfiprintf_r+0x416>
   81364:	2a00      	cmp	r2, #0
   81366:	f040 8285 	bne.w	81874 <_vfiprintf_r+0x948>
   8136a:	3c10      	subs	r4, #16
   8136c:	2c10      	cmp	r4, #16
   8136e:	f04f 0001 	mov.w	r0, #1
   81372:	4611      	mov	r1, r2
   81374:	46d3      	mov	fp, sl
   81376:	dceb      	bgt.n	81350 <_vfiprintf_r+0x424>
   81378:	46b9      	mov	r9, r7
   8137a:	4422      	add	r2, r4
   8137c:	2807      	cmp	r0, #7
   8137e:	920f      	str	r2, [sp, #60]	; 0x3c
   81380:	f8cb 9000 	str.w	r9, [fp]
   81384:	f8cb 4004 	str.w	r4, [fp, #4]
   81388:	900e      	str	r0, [sp, #56]	; 0x38
   8138a:	f340 8292 	ble.w	818b2 <_vfiprintf_r+0x986>
   8138e:	2a00      	cmp	r2, #0
   81390:	f040 840c 	bne.w	81bac <_vfiprintf_r+0xc80>
   81394:	9b02      	ldr	r3, [sp, #8]
   81396:	9a06      	ldr	r2, [sp, #24]
   81398:	42aa      	cmp	r2, r5
   8139a:	bfac      	ite	ge
   8139c:	189b      	addge	r3, r3, r2
   8139e:	195b      	addlt	r3, r3, r5
   813a0:	9302      	str	r3, [sp, #8]
   813a2:	e290      	b.n	818c6 <_vfiprintf_r+0x99a>
   813a4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   813a8:	f898 3000 	ldrb.w	r3, [r8]
   813ac:	e625      	b.n	80ffa <_vfiprintf_r+0xce>
   813ae:	9406      	str	r4, [sp, #24]
   813b0:	2900      	cmp	r1, #0
   813b2:	f040 8485 	bne.w	81cc0 <_vfiprintf_r+0xd94>
   813b6:	f046 0610 	orr.w	r6, r6, #16
   813ba:	06b3      	lsls	r3, r6, #26
   813bc:	f140 8304 	bpl.w	819c8 <_vfiprintf_r+0xa9c>
   813c0:	9904      	ldr	r1, [sp, #16]
   813c2:	3107      	adds	r1, #7
   813c4:	f021 0107 	bic.w	r1, r1, #7
   813c8:	e9d1 2300 	ldrd	r2, r3, [r1]
   813cc:	4614      	mov	r4, r2
   813ce:	461d      	mov	r5, r3
   813d0:	3108      	adds	r1, #8
   813d2:	9104      	str	r1, [sp, #16]
   813d4:	2a00      	cmp	r2, #0
   813d6:	f173 0300 	sbcs.w	r3, r3, #0
   813da:	f2c0 837c 	blt.w	81ad6 <_vfiprintf_r+0xbaa>
   813de:	9b01      	ldr	r3, [sp, #4]
   813e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   813e4:	2b00      	cmp	r3, #0
   813e6:	f2c0 830b 	blt.w	81a00 <_vfiprintf_r+0xad4>
   813ea:	ea54 0305 	orrs.w	r3, r4, r5
   813ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   813f2:	f000 80de 	beq.w	815b2 <_vfiprintf_r+0x686>
   813f6:	2d00      	cmp	r5, #0
   813f8:	bf08      	it	eq
   813fa:	2c0a      	cmpeq	r4, #10
   813fc:	f0c0 80de 	bcc.w	815bc <_vfiprintf_r+0x690>
   81400:	4657      	mov	r7, sl
   81402:	4620      	mov	r0, r4
   81404:	4629      	mov	r1, r5
   81406:	220a      	movs	r2, #10
   81408:	2300      	movs	r3, #0
   8140a:	f002 fa21 	bl	83850 <__aeabi_uldivmod>
   8140e:	3230      	adds	r2, #48	; 0x30
   81410:	f807 2d01 	strb.w	r2, [r7, #-1]!
   81414:	4620      	mov	r0, r4
   81416:	4629      	mov	r1, r5
   81418:	2300      	movs	r3, #0
   8141a:	220a      	movs	r2, #10
   8141c:	f002 fa18 	bl	83850 <__aeabi_uldivmod>
   81420:	4604      	mov	r4, r0
   81422:	460d      	mov	r5, r1
   81424:	ea54 0305 	orrs.w	r3, r4, r5
   81428:	d1eb      	bne.n	81402 <_vfiprintf_r+0x4d6>
   8142a:	ebc7 030a 	rsb	r3, r7, sl
   8142e:	9303      	str	r3, [sp, #12]
   81430:	e6a2      	b.n	81178 <_vfiprintf_r+0x24c>
   81432:	bf00      	nop
   81434:	00083bc4 	.word	0x00083bc4
   81438:	00083be0 	.word	0x00083be0
   8143c:	00083ba0 	.word	0x00083ba0
   81440:	9406      	str	r4, [sp, #24]
   81442:	2900      	cmp	r1, #0
   81444:	f040 8438 	bne.w	81cb8 <_vfiprintf_r+0xd8c>
   81448:	f046 0610 	orr.w	r6, r6, #16
   8144c:	f016 0320 	ands.w	r3, r6, #32
   81450:	f000 82a1 	beq.w	81996 <_vfiprintf_r+0xa6a>
   81454:	f04f 0200 	mov.w	r2, #0
   81458:	9b04      	ldr	r3, [sp, #16]
   8145a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8145e:	3307      	adds	r3, #7
   81460:	f023 0307 	bic.w	r3, r3, #7
   81464:	f103 0208 	add.w	r2, r3, #8
   81468:	e9d3 4500 	ldrd	r4, r5, [r3]
   8146c:	9b01      	ldr	r3, [sp, #4]
   8146e:	9204      	str	r2, [sp, #16]
   81470:	2b00      	cmp	r3, #0
   81472:	db0a      	blt.n	8148a <_vfiprintf_r+0x55e>
   81474:	ea54 0305 	orrs.w	r3, r4, r5
   81478:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8147c:	d105      	bne.n	8148a <_vfiprintf_r+0x55e>
   8147e:	9b01      	ldr	r3, [sp, #4]
   81480:	2b00      	cmp	r3, #0
   81482:	f000 8427 	beq.w	81cd4 <_vfiprintf_r+0xda8>
   81486:	2400      	movs	r4, #0
   81488:	2500      	movs	r5, #0
   8148a:	f04f 0900 	mov.w	r9, #0
   8148e:	4657      	mov	r7, sl
   81490:	08e2      	lsrs	r2, r4, #3
   81492:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   81496:	08e9      	lsrs	r1, r5, #3
   81498:	f004 0307 	and.w	r3, r4, #7
   8149c:	460d      	mov	r5, r1
   8149e:	4614      	mov	r4, r2
   814a0:	3330      	adds	r3, #48	; 0x30
   814a2:	ea54 0205 	orrs.w	r2, r4, r5
   814a6:	f807 3d01 	strb.w	r3, [r7, #-1]!
   814aa:	d1f1      	bne.n	81490 <_vfiprintf_r+0x564>
   814ac:	07f4      	lsls	r4, r6, #31
   814ae:	d5bc      	bpl.n	8142a <_vfiprintf_r+0x4fe>
   814b0:	2b30      	cmp	r3, #48	; 0x30
   814b2:	d0ba      	beq.n	8142a <_vfiprintf_r+0x4fe>
   814b4:	2230      	movs	r2, #48	; 0x30
   814b6:	1e7b      	subs	r3, r7, #1
   814b8:	f807 2c01 	strb.w	r2, [r7, #-1]
   814bc:	ebc3 020a 	rsb	r2, r3, sl
   814c0:	9203      	str	r2, [sp, #12]
   814c2:	461f      	mov	r7, r3
   814c4:	e658      	b.n	81178 <_vfiprintf_r+0x24c>
   814c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814ca:	2400      	movs	r4, #0
   814cc:	f818 3b01 	ldrb.w	r3, [r8], #1
   814d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   814d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   814d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814dc:	2a09      	cmp	r2, #9
   814de:	d9f5      	bls.n	814cc <_vfiprintf_r+0x5a0>
   814e0:	e58d      	b.n	80ffe <_vfiprintf_r+0xd2>
   814e2:	f898 3000 	ldrb.w	r3, [r8]
   814e6:	2101      	movs	r1, #1
   814e8:	202b      	movs	r0, #43	; 0x2b
   814ea:	e586      	b.n	80ffa <_vfiprintf_r+0xce>
   814ec:	f898 3000 	ldrb.w	r3, [r8]
   814f0:	f108 0501 	add.w	r5, r8, #1
   814f4:	2b2a      	cmp	r3, #42	; 0x2a
   814f6:	f000 83cc 	beq.w	81c92 <_vfiprintf_r+0xd66>
   814fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814fe:	2a09      	cmp	r2, #9
   81500:	46a8      	mov	r8, r5
   81502:	bf98      	it	ls
   81504:	2500      	movls	r5, #0
   81506:	f200 83b5 	bhi.w	81c74 <_vfiprintf_r+0xd48>
   8150a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8150e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81512:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81516:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8151a:	2a09      	cmp	r2, #9
   8151c:	d9f5      	bls.n	8150a <_vfiprintf_r+0x5de>
   8151e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   81522:	9201      	str	r2, [sp, #4]
   81524:	e56b      	b.n	80ffe <_vfiprintf_r+0xd2>
   81526:	9406      	str	r4, [sp, #24]
   81528:	2900      	cmp	r1, #0
   8152a:	d08f      	beq.n	8144c <_vfiprintf_r+0x520>
   8152c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81530:	e78c      	b.n	8144c <_vfiprintf_r+0x520>
   81532:	f04f 0300 	mov.w	r3, #0
   81536:	9a04      	ldr	r2, [sp, #16]
   81538:	9406      	str	r4, [sp, #24]
   8153a:	6817      	ldr	r7, [r2, #0]
   8153c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81540:	1d14      	adds	r4, r2, #4
   81542:	9b01      	ldr	r3, [sp, #4]
   81544:	2f00      	cmp	r7, #0
   81546:	f000 837f 	beq.w	81c48 <_vfiprintf_r+0xd1c>
   8154a:	2b00      	cmp	r3, #0
   8154c:	f2c0 8353 	blt.w	81bf6 <_vfiprintf_r+0xcca>
   81550:	461a      	mov	r2, r3
   81552:	2100      	movs	r1, #0
   81554:	4638      	mov	r0, r7
   81556:	f001 fc4d 	bl	82df4 <memchr>
   8155a:	2800      	cmp	r0, #0
   8155c:	f000 838e 	beq.w	81c7c <_vfiprintf_r+0xd50>
   81560:	1bc3      	subs	r3, r0, r7
   81562:	9303      	str	r3, [sp, #12]
   81564:	2300      	movs	r3, #0
   81566:	9404      	str	r4, [sp, #16]
   81568:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8156c:	9301      	str	r3, [sp, #4]
   8156e:	e603      	b.n	81178 <_vfiprintf_r+0x24c>
   81570:	9406      	str	r4, [sp, #24]
   81572:	2900      	cmp	r1, #0
   81574:	f040 839d 	bne.w	81cb2 <_vfiprintf_r+0xd86>
   81578:	f016 0920 	ands.w	r9, r6, #32
   8157c:	d134      	bne.n	815e8 <_vfiprintf_r+0x6bc>
   8157e:	f016 0310 	ands.w	r3, r6, #16
   81582:	d103      	bne.n	8158c <_vfiprintf_r+0x660>
   81584:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   81588:	f040 831f 	bne.w	81bca <_vfiprintf_r+0xc9e>
   8158c:	9a04      	ldr	r2, [sp, #16]
   8158e:	2500      	movs	r5, #0
   81590:	4613      	mov	r3, r2
   81592:	6814      	ldr	r4, [r2, #0]
   81594:	9a01      	ldr	r2, [sp, #4]
   81596:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8159a:	2a00      	cmp	r2, #0
   8159c:	f103 0304 	add.w	r3, r3, #4
   815a0:	f2c0 8327 	blt.w	81bf2 <_vfiprintf_r+0xcc6>
   815a4:	ea54 0205 	orrs.w	r2, r4, r5
   815a8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   815ac:	9304      	str	r3, [sp, #16]
   815ae:	f47f af22 	bne.w	813f6 <_vfiprintf_r+0x4ca>
   815b2:	9b01      	ldr	r3, [sp, #4]
   815b4:	2b00      	cmp	r3, #0
   815b6:	f43f addb 	beq.w	81170 <_vfiprintf_r+0x244>
   815ba:	2400      	movs	r4, #0
   815bc:	af2a      	add	r7, sp, #168	; 0xa8
   815be:	3430      	adds	r4, #48	; 0x30
   815c0:	f807 4d41 	strb.w	r4, [r7, #-65]!
   815c4:	ebc7 030a 	rsb	r3, r7, sl
   815c8:	9303      	str	r3, [sp, #12]
   815ca:	e5d5      	b.n	81178 <_vfiprintf_r+0x24c>
   815cc:	f046 0620 	orr.w	r6, r6, #32
   815d0:	f898 3000 	ldrb.w	r3, [r8]
   815d4:	e511      	b.n	80ffa <_vfiprintf_r+0xce>
   815d6:	9406      	str	r4, [sp, #24]
   815d8:	2900      	cmp	r1, #0
   815da:	f040 8375 	bne.w	81cc8 <_vfiprintf_r+0xd9c>
   815de:	f046 0610 	orr.w	r6, r6, #16
   815e2:	f016 0920 	ands.w	r9, r6, #32
   815e6:	d0ca      	beq.n	8157e <_vfiprintf_r+0x652>
   815e8:	f04f 0200 	mov.w	r2, #0
   815ec:	9b04      	ldr	r3, [sp, #16]
   815ee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   815f2:	3307      	adds	r3, #7
   815f4:	f023 0307 	bic.w	r3, r3, #7
   815f8:	f103 0208 	add.w	r2, r3, #8
   815fc:	e9d3 4500 	ldrd	r4, r5, [r3]
   81600:	9b01      	ldr	r3, [sp, #4]
   81602:	9204      	str	r2, [sp, #16]
   81604:	2b00      	cmp	r3, #0
   81606:	f2c0 81f9 	blt.w	819fc <_vfiprintf_r+0xad0>
   8160a:	ea54 0305 	orrs.w	r3, r4, r5
   8160e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81612:	f04f 0900 	mov.w	r9, #0
   81616:	f47f aeee 	bne.w	813f6 <_vfiprintf_r+0x4ca>
   8161a:	e7ca      	b.n	815b2 <_vfiprintf_r+0x686>
   8161c:	9406      	str	r4, [sp, #24]
   8161e:	2900      	cmp	r1, #0
   81620:	f040 8355 	bne.w	81cce <_vfiprintf_r+0xda2>
   81624:	06b2      	lsls	r2, r6, #26
   81626:	48b2      	ldr	r0, [pc, #712]	; (818f0 <_vfiprintf_r+0x9c4>)
   81628:	d541      	bpl.n	816ae <_vfiprintf_r+0x782>
   8162a:	9a04      	ldr	r2, [sp, #16]
   8162c:	3207      	adds	r2, #7
   8162e:	f022 0207 	bic.w	r2, r2, #7
   81632:	f102 0108 	add.w	r1, r2, #8
   81636:	9104      	str	r1, [sp, #16]
   81638:	e9d2 4500 	ldrd	r4, r5, [r2]
   8163c:	f016 0901 	ands.w	r9, r6, #1
   81640:	f000 817e 	beq.w	81940 <_vfiprintf_r+0xa14>
   81644:	ea54 0205 	orrs.w	r2, r4, r5
   81648:	f040 822b 	bne.w	81aa2 <_vfiprintf_r+0xb76>
   8164c:	f04f 0300 	mov.w	r3, #0
   81650:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81654:	9b01      	ldr	r3, [sp, #4]
   81656:	2b00      	cmp	r3, #0
   81658:	f2c0 82f3 	blt.w	81c42 <_vfiprintf_r+0xd16>
   8165c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81660:	e581      	b.n	81166 <_vfiprintf_r+0x23a>
   81662:	9a04      	ldr	r2, [sp, #16]
   81664:	f04f 0100 	mov.w	r1, #0
   81668:	6813      	ldr	r3, [r2, #0]
   8166a:	2501      	movs	r5, #1
   8166c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81670:	4613      	mov	r3, r2
   81672:	3304      	adds	r3, #4
   81674:	9406      	str	r4, [sp, #24]
   81676:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8167a:	9304      	str	r3, [sp, #16]
   8167c:	9503      	str	r5, [sp, #12]
   8167e:	af10      	add	r7, sp, #64	; 0x40
   81680:	2300      	movs	r3, #0
   81682:	9301      	str	r3, [sp, #4]
   81684:	e582      	b.n	8118c <_vfiprintf_r+0x260>
   81686:	f898 3000 	ldrb.w	r3, [r8]
   8168a:	2800      	cmp	r0, #0
   8168c:	f47f acb5 	bne.w	80ffa <_vfiprintf_r+0xce>
   81690:	2101      	movs	r1, #1
   81692:	2020      	movs	r0, #32
   81694:	e4b1      	b.n	80ffa <_vfiprintf_r+0xce>
   81696:	f046 0601 	orr.w	r6, r6, #1
   8169a:	f898 3000 	ldrb.w	r3, [r8]
   8169e:	e4ac      	b.n	80ffa <_vfiprintf_r+0xce>
   816a0:	9406      	str	r4, [sp, #24]
   816a2:	2900      	cmp	r1, #0
   816a4:	f040 832a 	bne.w	81cfc <_vfiprintf_r+0xdd0>
   816a8:	06b2      	lsls	r2, r6, #26
   816aa:	4892      	ldr	r0, [pc, #584]	; (818f4 <_vfiprintf_r+0x9c8>)
   816ac:	d4bd      	bmi.n	8162a <_vfiprintf_r+0x6fe>
   816ae:	9904      	ldr	r1, [sp, #16]
   816b0:	06f7      	lsls	r7, r6, #27
   816b2:	460a      	mov	r2, r1
   816b4:	f100 819d 	bmi.w	819f2 <_vfiprintf_r+0xac6>
   816b8:	0675      	lsls	r5, r6, #25
   816ba:	f140 819a 	bpl.w	819f2 <_vfiprintf_r+0xac6>
   816be:	3204      	adds	r2, #4
   816c0:	880c      	ldrh	r4, [r1, #0]
   816c2:	9204      	str	r2, [sp, #16]
   816c4:	2500      	movs	r5, #0
   816c6:	e7b9      	b.n	8163c <_vfiprintf_r+0x710>
   816c8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   816cc:	f898 3000 	ldrb.w	r3, [r8]
   816d0:	e493      	b.n	80ffa <_vfiprintf_r+0xce>
   816d2:	f898 3000 	ldrb.w	r3, [r8]
   816d6:	2b6c      	cmp	r3, #108	; 0x6c
   816d8:	bf03      	ittte	eq
   816da:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   816de:	f046 0620 	orreq.w	r6, r6, #32
   816e2:	f108 0801 	addeq.w	r8, r8, #1
   816e6:	f046 0610 	orrne.w	r6, r6, #16
   816ea:	e486      	b.n	80ffa <_vfiprintf_r+0xce>
   816ec:	2900      	cmp	r1, #0
   816ee:	f040 8302 	bne.w	81cf6 <_vfiprintf_r+0xdca>
   816f2:	06b4      	lsls	r4, r6, #26
   816f4:	f140 8220 	bpl.w	81b38 <_vfiprintf_r+0xc0c>
   816f8:	9a04      	ldr	r2, [sp, #16]
   816fa:	4613      	mov	r3, r2
   816fc:	3304      	adds	r3, #4
   816fe:	9304      	str	r3, [sp, #16]
   81700:	9b02      	ldr	r3, [sp, #8]
   81702:	6811      	ldr	r1, [r2, #0]
   81704:	17dd      	asrs	r5, r3, #31
   81706:	461a      	mov	r2, r3
   81708:	462b      	mov	r3, r5
   8170a:	e9c1 2300 	strd	r2, r3, [r1]
   8170e:	e43e      	b.n	80f8e <_vfiprintf_r+0x62>
   81710:	9406      	str	r4, [sp, #24]
   81712:	2900      	cmp	r1, #0
   81714:	f43f ae51 	beq.w	813ba <_vfiprintf_r+0x48e>
   81718:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8171c:	e64d      	b.n	813ba <_vfiprintf_r+0x48e>
   8171e:	9406      	str	r4, [sp, #24]
   81720:	2900      	cmp	r1, #0
   81722:	f040 82e5 	bne.w	81cf0 <_vfiprintf_r+0xdc4>
   81726:	2b00      	cmp	r3, #0
   81728:	f000 8094 	beq.w	81854 <_vfiprintf_r+0x928>
   8172c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81730:	f04f 0300 	mov.w	r3, #0
   81734:	2501      	movs	r5, #1
   81736:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8173a:	9503      	str	r5, [sp, #12]
   8173c:	af10      	add	r7, sp, #64	; 0x40
   8173e:	e79f      	b.n	81680 <_vfiprintf_r+0x754>
   81740:	aa0d      	add	r2, sp, #52	; 0x34
   81742:	9900      	ldr	r1, [sp, #0]
   81744:	4648      	mov	r0, r9
   81746:	9309      	str	r3, [sp, #36]	; 0x24
   81748:	f7ff fbb4 	bl	80eb4 <__sprint_r.part.0>
   8174c:	2800      	cmp	r0, #0
   8174e:	f040 8088 	bne.w	81862 <_vfiprintf_r+0x936>
   81752:	980e      	ldr	r0, [sp, #56]	; 0x38
   81754:	46d4      	mov	ip, sl
   81756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81758:	f100 0e01 	add.w	lr, r0, #1
   8175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8175e:	e53a      	b.n	811d6 <_vfiprintf_r+0x2aa>
   81760:	aa0d      	add	r2, sp, #52	; 0x34
   81762:	9900      	ldr	r1, [sp, #0]
   81764:	9805      	ldr	r0, [sp, #20]
   81766:	f7ff fba5 	bl	80eb4 <__sprint_r.part.0>
   8176a:	2800      	cmp	r0, #0
   8176c:	d179      	bne.n	81862 <_vfiprintf_r+0x936>
   8176e:	46d3      	mov	fp, sl
   81770:	980e      	ldr	r0, [sp, #56]	; 0x38
   81772:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81778:	f100 0e01 	add.w	lr, r0, #1
   8177c:	2b00      	cmp	r3, #0
   8177e:	f43f ad59 	beq.w	81234 <_vfiprintf_r+0x308>
   81782:	3201      	adds	r2, #1
   81784:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81788:	2301      	movs	r3, #1
   8178a:	f1be 0f07 	cmp.w	lr, #7
   8178e:	920f      	str	r2, [sp, #60]	; 0x3c
   81790:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81794:	e88b 000a 	stmia.w	fp, {r1, r3}
   81798:	f340 80c0 	ble.w	8191c <_vfiprintf_r+0x9f0>
   8179c:	2a00      	cmp	r2, #0
   8179e:	f040 814d 	bne.w	81a3c <_vfiprintf_r+0xb10>
   817a2:	9907      	ldr	r1, [sp, #28]
   817a4:	2900      	cmp	r1, #0
   817a6:	f040 80bf 	bne.w	81928 <_vfiprintf_r+0x9fc>
   817aa:	469e      	mov	lr, r3
   817ac:	4610      	mov	r0, r2
   817ae:	46d3      	mov	fp, sl
   817b0:	9b08      	ldr	r3, [sp, #32]
   817b2:	2b80      	cmp	r3, #128	; 0x80
   817b4:	f43f ad59 	beq.w	8126a <_vfiprintf_r+0x33e>
   817b8:	9b01      	ldr	r3, [sp, #4]
   817ba:	9903      	ldr	r1, [sp, #12]
   817bc:	1a5c      	subs	r4, r3, r1
   817be:	2c00      	cmp	r4, #0
   817c0:	f77f ad9c 	ble.w	812fc <_vfiprintf_r+0x3d0>
   817c4:	2c10      	cmp	r4, #16
   817c6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 818f8 <_vfiprintf_r+0x9cc>
   817ca:	dd25      	ble.n	81818 <_vfiprintf_r+0x8ec>
   817cc:	46dc      	mov	ip, fp
   817ce:	2310      	movs	r3, #16
   817d0:	46c3      	mov	fp, r8
   817d2:	46a8      	mov	r8, r5
   817d4:	464d      	mov	r5, r9
   817d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   817da:	e007      	b.n	817ec <_vfiprintf_r+0x8c0>
   817dc:	f100 0e02 	add.w	lr, r0, #2
   817e0:	4608      	mov	r0, r1
   817e2:	f10c 0c08 	add.w	ip, ip, #8
   817e6:	3c10      	subs	r4, #16
   817e8:	2c10      	cmp	r4, #16
   817ea:	dd11      	ble.n	81810 <_vfiprintf_r+0x8e4>
   817ec:	1c41      	adds	r1, r0, #1
   817ee:	3210      	adds	r2, #16
   817f0:	2907      	cmp	r1, #7
   817f2:	920f      	str	r2, [sp, #60]	; 0x3c
   817f4:	f8cc 5000 	str.w	r5, [ip]
   817f8:	f8cc 3004 	str.w	r3, [ip, #4]
   817fc:	910e      	str	r1, [sp, #56]	; 0x38
   817fe:	dded      	ble.n	817dc <_vfiprintf_r+0x8b0>
   81800:	b9d2      	cbnz	r2, 81838 <_vfiprintf_r+0x90c>
   81802:	3c10      	subs	r4, #16
   81804:	2c10      	cmp	r4, #16
   81806:	f04f 0e01 	mov.w	lr, #1
   8180a:	4610      	mov	r0, r2
   8180c:	46d4      	mov	ip, sl
   8180e:	dced      	bgt.n	817ec <_vfiprintf_r+0x8c0>
   81810:	46a9      	mov	r9, r5
   81812:	4645      	mov	r5, r8
   81814:	46d8      	mov	r8, fp
   81816:	46e3      	mov	fp, ip
   81818:	4422      	add	r2, r4
   8181a:	f1be 0f07 	cmp.w	lr, #7
   8181e:	920f      	str	r2, [sp, #60]	; 0x3c
   81820:	f8cb 9000 	str.w	r9, [fp]
   81824:	f8cb 4004 	str.w	r4, [fp, #4]
   81828:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8182c:	dc2e      	bgt.n	8188c <_vfiprintf_r+0x960>
   8182e:	f10b 0b08 	add.w	fp, fp, #8
   81832:	f10e 0e01 	add.w	lr, lr, #1
   81836:	e561      	b.n	812fc <_vfiprintf_r+0x3d0>
   81838:	aa0d      	add	r2, sp, #52	; 0x34
   8183a:	9900      	ldr	r1, [sp, #0]
   8183c:	4648      	mov	r0, r9
   8183e:	9301      	str	r3, [sp, #4]
   81840:	f7ff fb38 	bl	80eb4 <__sprint_r.part.0>
   81844:	b968      	cbnz	r0, 81862 <_vfiprintf_r+0x936>
   81846:	980e      	ldr	r0, [sp, #56]	; 0x38
   81848:	46d4      	mov	ip, sl
   8184a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8184c:	f100 0e01 	add.w	lr, r0, #1
   81850:	9b01      	ldr	r3, [sp, #4]
   81852:	e7c8      	b.n	817e6 <_vfiprintf_r+0x8ba>
   81854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81856:	b123      	cbz	r3, 81862 <_vfiprintf_r+0x936>
   81858:	9805      	ldr	r0, [sp, #20]
   8185a:	aa0d      	add	r2, sp, #52	; 0x34
   8185c:	9900      	ldr	r1, [sp, #0]
   8185e:	f7ff fb29 	bl	80eb4 <__sprint_r.part.0>
   81862:	9b00      	ldr	r3, [sp, #0]
   81864:	899b      	ldrh	r3, [r3, #12]
   81866:	065a      	lsls	r2, r3, #25
   81868:	f100 817b 	bmi.w	81b62 <_vfiprintf_r+0xc36>
   8186c:	9802      	ldr	r0, [sp, #8]
   8186e:	b02b      	add	sp, #172	; 0xac
   81870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81874:	aa0d      	add	r2, sp, #52	; 0x34
   81876:	9900      	ldr	r1, [sp, #0]
   81878:	4648      	mov	r0, r9
   8187a:	f7ff fb1b 	bl	80eb4 <__sprint_r.part.0>
   8187e:	2800      	cmp	r0, #0
   81880:	d1ef      	bne.n	81862 <_vfiprintf_r+0x936>
   81882:	990e      	ldr	r1, [sp, #56]	; 0x38
   81884:	46d3      	mov	fp, sl
   81886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81888:	1c48      	adds	r0, r1, #1
   8188a:	e55e      	b.n	8134a <_vfiprintf_r+0x41e>
   8188c:	2a00      	cmp	r2, #0
   8188e:	f040 80fa 	bne.w	81a86 <_vfiprintf_r+0xb5a>
   81892:	46d3      	mov	fp, sl
   81894:	9a03      	ldr	r2, [sp, #12]
   81896:	2301      	movs	r3, #1
   81898:	921b      	str	r2, [sp, #108]	; 0x6c
   8189a:	920f      	str	r2, [sp, #60]	; 0x3c
   8189c:	971a      	str	r7, [sp, #104]	; 0x68
   8189e:	930e      	str	r3, [sp, #56]	; 0x38
   818a0:	f10b 0b08 	add.w	fp, fp, #8
   818a4:	0771      	lsls	r1, r6, #29
   818a6:	d504      	bpl.n	818b2 <_vfiprintf_r+0x986>
   818a8:	9b06      	ldr	r3, [sp, #24]
   818aa:	1b5c      	subs	r4, r3, r5
   818ac:	2c00      	cmp	r4, #0
   818ae:	f73f ad3d 	bgt.w	8132c <_vfiprintf_r+0x400>
   818b2:	9b02      	ldr	r3, [sp, #8]
   818b4:	9906      	ldr	r1, [sp, #24]
   818b6:	42a9      	cmp	r1, r5
   818b8:	bfac      	ite	ge
   818ba:	185b      	addge	r3, r3, r1
   818bc:	195b      	addlt	r3, r3, r5
   818be:	9302      	str	r3, [sp, #8]
   818c0:	2a00      	cmp	r2, #0
   818c2:	f040 80ad 	bne.w	81a20 <_vfiprintf_r+0xaf4>
   818c6:	2300      	movs	r3, #0
   818c8:	930e      	str	r3, [sp, #56]	; 0x38
   818ca:	46d3      	mov	fp, sl
   818cc:	f7ff bb5f 	b.w	80f8e <_vfiprintf_r+0x62>
   818d0:	aa0d      	add	r2, sp, #52	; 0x34
   818d2:	9900      	ldr	r1, [sp, #0]
   818d4:	4648      	mov	r0, r9
   818d6:	9307      	str	r3, [sp, #28]
   818d8:	f7ff faec 	bl	80eb4 <__sprint_r.part.0>
   818dc:	2800      	cmp	r0, #0
   818de:	d1c0      	bne.n	81862 <_vfiprintf_r+0x936>
   818e0:	980e      	ldr	r0, [sp, #56]	; 0x38
   818e2:	46d6      	mov	lr, sl
   818e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   818e6:	f100 0c01 	add.w	ip, r0, #1
   818ea:	9b07      	ldr	r3, [sp, #28]
   818ec:	e4d4      	b.n	81298 <_vfiprintf_r+0x36c>
   818ee:	bf00      	nop
   818f0:	00083bb0 	.word	0x00083bb0
   818f4:	00083bc4 	.word	0x00083bc4
   818f8:	00083ba0 	.word	0x00083ba0
   818fc:	2a00      	cmp	r2, #0
   818fe:	f47f af2f 	bne.w	81760 <_vfiprintf_r+0x834>
   81902:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81906:	2b00      	cmp	r3, #0
   81908:	f000 80f3 	beq.w	81af2 <_vfiprintf_r+0xbc6>
   8190c:	2301      	movs	r3, #1
   8190e:	461a      	mov	r2, r3
   81910:	469e      	mov	lr, r3
   81912:	46d3      	mov	fp, sl
   81914:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81918:	931b      	str	r3, [sp, #108]	; 0x6c
   8191a:	911a      	str	r1, [sp, #104]	; 0x68
   8191c:	4670      	mov	r0, lr
   8191e:	f10b 0b08 	add.w	fp, fp, #8
   81922:	f10e 0e01 	add.w	lr, lr, #1
   81926:	e485      	b.n	81234 <_vfiprintf_r+0x308>
   81928:	469e      	mov	lr, r3
   8192a:	46d3      	mov	fp, sl
   8192c:	a90c      	add	r1, sp, #48	; 0x30
   8192e:	2202      	movs	r2, #2
   81930:	911a      	str	r1, [sp, #104]	; 0x68
   81932:	921b      	str	r2, [sp, #108]	; 0x6c
   81934:	4670      	mov	r0, lr
   81936:	f10b 0b08 	add.w	fp, fp, #8
   8193a:	f10e 0e01 	add.w	lr, lr, #1
   8193e:	e737      	b.n	817b0 <_vfiprintf_r+0x884>
   81940:	9b01      	ldr	r3, [sp, #4]
   81942:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   81946:	2b00      	cmp	r3, #0
   81948:	f2c0 811b 	blt.w	81b82 <_vfiprintf_r+0xc56>
   8194c:	ea54 0305 	orrs.w	r3, r4, r5
   81950:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81954:	f43f ac07 	beq.w	81166 <_vfiprintf_r+0x23a>
   81958:	4657      	mov	r7, sl
   8195a:	0923      	lsrs	r3, r4, #4
   8195c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   81960:	0929      	lsrs	r1, r5, #4
   81962:	f004 020f 	and.w	r2, r4, #15
   81966:	460d      	mov	r5, r1
   81968:	461c      	mov	r4, r3
   8196a:	5c83      	ldrb	r3, [r0, r2]
   8196c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   81970:	ea54 0305 	orrs.w	r3, r4, r5
   81974:	d1f1      	bne.n	8195a <_vfiprintf_r+0xa2e>
   81976:	ebc7 030a 	rsb	r3, r7, sl
   8197a:	9303      	str	r3, [sp, #12]
   8197c:	f7ff bbfc 	b.w	81178 <_vfiprintf_r+0x24c>
   81980:	aa0d      	add	r2, sp, #52	; 0x34
   81982:	9900      	ldr	r1, [sp, #0]
   81984:	9805      	ldr	r0, [sp, #20]
   81986:	f7ff fa95 	bl	80eb4 <__sprint_r.part.0>
   8198a:	2800      	cmp	r0, #0
   8198c:	f47f af69 	bne.w	81862 <_vfiprintf_r+0x936>
   81990:	46d3      	mov	fp, sl
   81992:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81994:	e786      	b.n	818a4 <_vfiprintf_r+0x978>
   81996:	f016 0210 	ands.w	r2, r6, #16
   8199a:	f000 80b5 	beq.w	81b08 <_vfiprintf_r+0xbdc>
   8199e:	9904      	ldr	r1, [sp, #16]
   819a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   819a4:	460a      	mov	r2, r1
   819a6:	680c      	ldr	r4, [r1, #0]
   819a8:	9901      	ldr	r1, [sp, #4]
   819aa:	3204      	adds	r2, #4
   819ac:	2900      	cmp	r1, #0
   819ae:	f04f 0500 	mov.w	r5, #0
   819b2:	f2c0 8152 	blt.w	81c5a <_vfiprintf_r+0xd2e>
   819b6:	ea54 0105 	orrs.w	r1, r4, r5
   819ba:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   819be:	9204      	str	r2, [sp, #16]
   819c0:	f43f ad5d 	beq.w	8147e <_vfiprintf_r+0x552>
   819c4:	4699      	mov	r9, r3
   819c6:	e562      	b.n	8148e <_vfiprintf_r+0x562>
   819c8:	9a04      	ldr	r2, [sp, #16]
   819ca:	06f7      	lsls	r7, r6, #27
   819cc:	4613      	mov	r3, r2
   819ce:	d409      	bmi.n	819e4 <_vfiprintf_r+0xab8>
   819d0:	0675      	lsls	r5, r6, #25
   819d2:	d507      	bpl.n	819e4 <_vfiprintf_r+0xab8>
   819d4:	f9b2 4000 	ldrsh.w	r4, [r2]
   819d8:	3304      	adds	r3, #4
   819da:	17e5      	asrs	r5, r4, #31
   819dc:	9304      	str	r3, [sp, #16]
   819de:	4622      	mov	r2, r4
   819e0:	462b      	mov	r3, r5
   819e2:	e4f7      	b.n	813d4 <_vfiprintf_r+0x4a8>
   819e4:	681c      	ldr	r4, [r3, #0]
   819e6:	3304      	adds	r3, #4
   819e8:	17e5      	asrs	r5, r4, #31
   819ea:	9304      	str	r3, [sp, #16]
   819ec:	4622      	mov	r2, r4
   819ee:	462b      	mov	r3, r5
   819f0:	e4f0      	b.n	813d4 <_vfiprintf_r+0x4a8>
   819f2:	6814      	ldr	r4, [r2, #0]
   819f4:	3204      	adds	r2, #4
   819f6:	9204      	str	r2, [sp, #16]
   819f8:	2500      	movs	r5, #0
   819fa:	e61f      	b.n	8163c <_vfiprintf_r+0x710>
   819fc:	f04f 0900 	mov.w	r9, #0
   81a00:	ea54 0305 	orrs.w	r3, r4, r5
   81a04:	f47f acf7 	bne.w	813f6 <_vfiprintf_r+0x4ca>
   81a08:	e5d8      	b.n	815bc <_vfiprintf_r+0x690>
   81a0a:	aa0d      	add	r2, sp, #52	; 0x34
   81a0c:	9900      	ldr	r1, [sp, #0]
   81a0e:	9805      	ldr	r0, [sp, #20]
   81a10:	f7ff fa50 	bl	80eb4 <__sprint_r.part.0>
   81a14:	2800      	cmp	r0, #0
   81a16:	f47f af24 	bne.w	81862 <_vfiprintf_r+0x936>
   81a1a:	46d3      	mov	fp, sl
   81a1c:	f7ff bb51 	b.w	810c2 <_vfiprintf_r+0x196>
   81a20:	aa0d      	add	r2, sp, #52	; 0x34
   81a22:	9900      	ldr	r1, [sp, #0]
   81a24:	9805      	ldr	r0, [sp, #20]
   81a26:	f7ff fa45 	bl	80eb4 <__sprint_r.part.0>
   81a2a:	2800      	cmp	r0, #0
   81a2c:	f43f af4b 	beq.w	818c6 <_vfiprintf_r+0x99a>
   81a30:	e717      	b.n	81862 <_vfiprintf_r+0x936>
   81a32:	2400      	movs	r4, #0
   81a34:	2500      	movs	r5, #0
   81a36:	f04f 0900 	mov.w	r9, #0
   81a3a:	e78d      	b.n	81958 <_vfiprintf_r+0xa2c>
   81a3c:	aa0d      	add	r2, sp, #52	; 0x34
   81a3e:	9900      	ldr	r1, [sp, #0]
   81a40:	9805      	ldr	r0, [sp, #20]
   81a42:	f7ff fa37 	bl	80eb4 <__sprint_r.part.0>
   81a46:	2800      	cmp	r0, #0
   81a48:	f47f af0b 	bne.w	81862 <_vfiprintf_r+0x936>
   81a4c:	980e      	ldr	r0, [sp, #56]	; 0x38
   81a4e:	46d3      	mov	fp, sl
   81a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a52:	f100 0e01 	add.w	lr, r0, #1
   81a56:	f7ff bbed 	b.w	81234 <_vfiprintf_r+0x308>
   81a5a:	aa0d      	add	r2, sp, #52	; 0x34
   81a5c:	9900      	ldr	r1, [sp, #0]
   81a5e:	9805      	ldr	r0, [sp, #20]
   81a60:	f7ff fa28 	bl	80eb4 <__sprint_r.part.0>
   81a64:	2800      	cmp	r0, #0
   81a66:	f47f aefc 	bne.w	81862 <_vfiprintf_r+0x936>
   81a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
   81a6c:	46d3      	mov	fp, sl
   81a6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a70:	f100 0e01 	add.w	lr, r0, #1
   81a74:	e69c      	b.n	817b0 <_vfiprintf_r+0x884>
   81a76:	2a00      	cmp	r2, #0
   81a78:	f040 80c8 	bne.w	81c0c <_vfiprintf_r+0xce0>
   81a7c:	f04f 0e01 	mov.w	lr, #1
   81a80:	4610      	mov	r0, r2
   81a82:	46d3      	mov	fp, sl
   81a84:	e698      	b.n	817b8 <_vfiprintf_r+0x88c>
   81a86:	aa0d      	add	r2, sp, #52	; 0x34
   81a88:	9900      	ldr	r1, [sp, #0]
   81a8a:	9805      	ldr	r0, [sp, #20]
   81a8c:	f7ff fa12 	bl	80eb4 <__sprint_r.part.0>
   81a90:	2800      	cmp	r0, #0
   81a92:	f47f aee6 	bne.w	81862 <_vfiprintf_r+0x936>
   81a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81a98:	46d3      	mov	fp, sl
   81a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a9c:	f103 0e01 	add.w	lr, r3, #1
   81aa0:	e42c      	b.n	812fc <_vfiprintf_r+0x3d0>
   81aa2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81aa6:	f04f 0300 	mov.w	r3, #0
   81aaa:	2230      	movs	r2, #48	; 0x30
   81aac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   81ab0:	9a01      	ldr	r2, [sp, #4]
   81ab2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81ab6:	2a00      	cmp	r2, #0
   81ab8:	f046 0302 	orr.w	r3, r6, #2
   81abc:	f2c0 80bb 	blt.w	81c36 <_vfiprintf_r+0xd0a>
   81ac0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81ac4:	f046 0602 	orr.w	r6, r6, #2
   81ac8:	f04f 0900 	mov.w	r9, #0
   81acc:	e744      	b.n	81958 <_vfiprintf_r+0xa2c>
   81ace:	f04f 0900 	mov.w	r9, #0
   81ad2:	488c      	ldr	r0, [pc, #560]	; (81d04 <_vfiprintf_r+0xdd8>)
   81ad4:	e740      	b.n	81958 <_vfiprintf_r+0xa2c>
   81ad6:	9b01      	ldr	r3, [sp, #4]
   81ad8:	4264      	negs	r4, r4
   81ada:	f04f 092d 	mov.w	r9, #45	; 0x2d
   81ade:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81ae2:	2b00      	cmp	r3, #0
   81ae4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   81ae8:	f6ff ac85 	blt.w	813f6 <_vfiprintf_r+0x4ca>
   81aec:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81af0:	e481      	b.n	813f6 <_vfiprintf_r+0x4ca>
   81af2:	9b07      	ldr	r3, [sp, #28]
   81af4:	2b00      	cmp	r3, #0
   81af6:	d063      	beq.n	81bc0 <_vfiprintf_r+0xc94>
   81af8:	ab0c      	add	r3, sp, #48	; 0x30
   81afa:	2202      	movs	r2, #2
   81afc:	931a      	str	r3, [sp, #104]	; 0x68
   81afe:	921b      	str	r2, [sp, #108]	; 0x6c
   81b00:	f04f 0e01 	mov.w	lr, #1
   81b04:	46d3      	mov	fp, sl
   81b06:	e715      	b.n	81934 <_vfiprintf_r+0xa08>
   81b08:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   81b0c:	d03b      	beq.n	81b86 <_vfiprintf_r+0xc5a>
   81b0e:	9904      	ldr	r1, [sp, #16]
   81b10:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   81b14:	460b      	mov	r3, r1
   81b16:	880c      	ldrh	r4, [r1, #0]
   81b18:	9901      	ldr	r1, [sp, #4]
   81b1a:	3304      	adds	r3, #4
   81b1c:	2900      	cmp	r1, #0
   81b1e:	f04f 0500 	mov.w	r5, #0
   81b22:	f2c0 808c 	blt.w	81c3e <_vfiprintf_r+0xd12>
   81b26:	ea54 0105 	orrs.w	r1, r4, r5
   81b2a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81b2e:	9304      	str	r3, [sp, #16]
   81b30:	f43f aca5 	beq.w	8147e <_vfiprintf_r+0x552>
   81b34:	4691      	mov	r9, r2
   81b36:	e4aa      	b.n	8148e <_vfiprintf_r+0x562>
   81b38:	06f0      	lsls	r0, r6, #27
   81b3a:	d40a      	bmi.n	81b52 <_vfiprintf_r+0xc26>
   81b3c:	0671      	lsls	r1, r6, #25
   81b3e:	d508      	bpl.n	81b52 <_vfiprintf_r+0xc26>
   81b40:	9a04      	ldr	r2, [sp, #16]
   81b42:	6813      	ldr	r3, [r2, #0]
   81b44:	3204      	adds	r2, #4
   81b46:	9204      	str	r2, [sp, #16]
   81b48:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   81b4c:	801a      	strh	r2, [r3, #0]
   81b4e:	f7ff ba1e 	b.w	80f8e <_vfiprintf_r+0x62>
   81b52:	9a04      	ldr	r2, [sp, #16]
   81b54:	6813      	ldr	r3, [r2, #0]
   81b56:	3204      	adds	r2, #4
   81b58:	9204      	str	r2, [sp, #16]
   81b5a:	9a02      	ldr	r2, [sp, #8]
   81b5c:	601a      	str	r2, [r3, #0]
   81b5e:	f7ff ba16 	b.w	80f8e <_vfiprintf_r+0x62>
   81b62:	f04f 30ff 	mov.w	r0, #4294967295
   81b66:	f7ff bac9 	b.w	810fc <_vfiprintf_r+0x1d0>
   81b6a:	4616      	mov	r6, r2
   81b6c:	4865      	ldr	r0, [pc, #404]	; (81d04 <_vfiprintf_r+0xdd8>)
   81b6e:	ea54 0205 	orrs.w	r2, r4, r5
   81b72:	9304      	str	r3, [sp, #16]
   81b74:	f04f 0900 	mov.w	r9, #0
   81b78:	f47f aeee 	bne.w	81958 <_vfiprintf_r+0xa2c>
   81b7c:	2400      	movs	r4, #0
   81b7e:	2500      	movs	r5, #0
   81b80:	e6ea      	b.n	81958 <_vfiprintf_r+0xa2c>
   81b82:	9b04      	ldr	r3, [sp, #16]
   81b84:	e7f3      	b.n	81b6e <_vfiprintf_r+0xc42>
   81b86:	9a04      	ldr	r2, [sp, #16]
   81b88:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   81b8c:	4613      	mov	r3, r2
   81b8e:	6814      	ldr	r4, [r2, #0]
   81b90:	9a01      	ldr	r2, [sp, #4]
   81b92:	3304      	adds	r3, #4
   81b94:	2a00      	cmp	r2, #0
   81b96:	f04f 0500 	mov.w	r5, #0
   81b9a:	db50      	blt.n	81c3e <_vfiprintf_r+0xd12>
   81b9c:	ea54 0205 	orrs.w	r2, r4, r5
   81ba0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81ba4:	9304      	str	r3, [sp, #16]
   81ba6:	f47f ac72 	bne.w	8148e <_vfiprintf_r+0x562>
   81baa:	e468      	b.n	8147e <_vfiprintf_r+0x552>
   81bac:	aa0d      	add	r2, sp, #52	; 0x34
   81bae:	9900      	ldr	r1, [sp, #0]
   81bb0:	9805      	ldr	r0, [sp, #20]
   81bb2:	f7ff f97f 	bl	80eb4 <__sprint_r.part.0>
   81bb6:	2800      	cmp	r0, #0
   81bb8:	f47f ae53 	bne.w	81862 <_vfiprintf_r+0x936>
   81bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81bbe:	e678      	b.n	818b2 <_vfiprintf_r+0x986>
   81bc0:	4610      	mov	r0, r2
   81bc2:	f04f 0e01 	mov.w	lr, #1
   81bc6:	46d3      	mov	fp, sl
   81bc8:	e5f6      	b.n	817b8 <_vfiprintf_r+0x88c>
   81bca:	9904      	ldr	r1, [sp, #16]
   81bcc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81bd0:	460a      	mov	r2, r1
   81bd2:	880c      	ldrh	r4, [r1, #0]
   81bd4:	9901      	ldr	r1, [sp, #4]
   81bd6:	3204      	adds	r2, #4
   81bd8:	2900      	cmp	r1, #0
   81bda:	f04f 0500 	mov.w	r5, #0
   81bde:	db55      	blt.n	81c8c <_vfiprintf_r+0xd60>
   81be0:	ea54 0105 	orrs.w	r1, r4, r5
   81be4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   81be8:	9204      	str	r2, [sp, #16]
   81bea:	4699      	mov	r9, r3
   81bec:	f47f ac03 	bne.w	813f6 <_vfiprintf_r+0x4ca>
   81bf0:	e4df      	b.n	815b2 <_vfiprintf_r+0x686>
   81bf2:	9304      	str	r3, [sp, #16]
   81bf4:	e704      	b.n	81a00 <_vfiprintf_r+0xad4>
   81bf6:	4638      	mov	r0, r7
   81bf8:	9404      	str	r4, [sp, #16]
   81bfa:	f001 fc5f 	bl	834bc <strlen>
   81bfe:	2300      	movs	r3, #0
   81c00:	9003      	str	r0, [sp, #12]
   81c02:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   81c06:	9301      	str	r3, [sp, #4]
   81c08:	f7ff bab6 	b.w	81178 <_vfiprintf_r+0x24c>
   81c0c:	aa0d      	add	r2, sp, #52	; 0x34
   81c0e:	9900      	ldr	r1, [sp, #0]
   81c10:	9805      	ldr	r0, [sp, #20]
   81c12:	f7ff f94f 	bl	80eb4 <__sprint_r.part.0>
   81c16:	2800      	cmp	r0, #0
   81c18:	f47f ae23 	bne.w	81862 <_vfiprintf_r+0x936>
   81c1c:	980e      	ldr	r0, [sp, #56]	; 0x38
   81c1e:	46d3      	mov	fp, sl
   81c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81c22:	f100 0e01 	add.w	lr, r0, #1
   81c26:	e5c7      	b.n	817b8 <_vfiprintf_r+0x88c>
   81c28:	980e      	ldr	r0, [sp, #56]	; 0x38
   81c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81c2c:	3001      	adds	r0, #1
   81c2e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 81d0c <_vfiprintf_r+0xde0>
   81c32:	f7ff baec 	b.w	8120e <_vfiprintf_r+0x2e2>
   81c36:	461e      	mov	r6, r3
   81c38:	f04f 0900 	mov.w	r9, #0
   81c3c:	e68c      	b.n	81958 <_vfiprintf_r+0xa2c>
   81c3e:	9304      	str	r3, [sp, #16]
   81c40:	e423      	b.n	8148a <_vfiprintf_r+0x55e>
   81c42:	f04f 0900 	mov.w	r9, #0
   81c46:	e799      	b.n	81b7c <_vfiprintf_r+0xc50>
   81c48:	2b06      	cmp	r3, #6
   81c4a:	bf28      	it	cs
   81c4c:	2306      	movcs	r3, #6
   81c4e:	9303      	str	r3, [sp, #12]
   81c50:	9404      	str	r4, [sp, #16]
   81c52:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   81c56:	4f2c      	ldr	r7, [pc, #176]	; (81d08 <_vfiprintf_r+0xddc>)
   81c58:	e512      	b.n	81680 <_vfiprintf_r+0x754>
   81c5a:	9204      	str	r2, [sp, #16]
   81c5c:	e415      	b.n	8148a <_vfiprintf_r+0x55e>
   81c5e:	980e      	ldr	r0, [sp, #56]	; 0x38
   81c60:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 81d0c <_vfiprintf_r+0xde0>
   81c64:	3001      	adds	r0, #1
   81c66:	f7ff bb88 	b.w	8137a <_vfiprintf_r+0x44e>
   81c6a:	46f4      	mov	ip, lr
   81c6c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 81d10 <_vfiprintf_r+0xde4>
   81c70:	f7ff bb2d 	b.w	812ce <_vfiprintf_r+0x3a2>
   81c74:	2200      	movs	r2, #0
   81c76:	9201      	str	r2, [sp, #4]
   81c78:	f7ff b9c1 	b.w	80ffe <_vfiprintf_r+0xd2>
   81c7c:	9b01      	ldr	r3, [sp, #4]
   81c7e:	9404      	str	r4, [sp, #16]
   81c80:	9303      	str	r3, [sp, #12]
   81c82:	9001      	str	r0, [sp, #4]
   81c84:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   81c88:	f7ff ba76 	b.w	81178 <_vfiprintf_r+0x24c>
   81c8c:	9204      	str	r2, [sp, #16]
   81c8e:	4699      	mov	r9, r3
   81c90:	e6b6      	b.n	81a00 <_vfiprintf_r+0xad4>
   81c92:	9a04      	ldr	r2, [sp, #16]
   81c94:	6813      	ldr	r3, [r2, #0]
   81c96:	3204      	adds	r2, #4
   81c98:	2b00      	cmp	r3, #0
   81c9a:	9301      	str	r3, [sp, #4]
   81c9c:	9204      	str	r2, [sp, #16]
   81c9e:	f898 3001 	ldrb.w	r3, [r8, #1]
   81ca2:	46a8      	mov	r8, r5
   81ca4:	f6bf a9a9 	bge.w	80ffa <_vfiprintf_r+0xce>
   81ca8:	f04f 32ff 	mov.w	r2, #4294967295
   81cac:	9201      	str	r2, [sp, #4]
   81cae:	f7ff b9a4 	b.w	80ffa <_vfiprintf_r+0xce>
   81cb2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cb6:	e45f      	b.n	81578 <_vfiprintf_r+0x64c>
   81cb8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cbc:	f7ff bbc4 	b.w	81448 <_vfiprintf_r+0x51c>
   81cc0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cc4:	f7ff bb77 	b.w	813b6 <_vfiprintf_r+0x48a>
   81cc8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81ccc:	e487      	b.n	815de <_vfiprintf_r+0x6b2>
   81cce:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cd2:	e4a7      	b.n	81624 <_vfiprintf_r+0x6f8>
   81cd4:	4699      	mov	r9, r3
   81cd6:	07f3      	lsls	r3, r6, #31
   81cd8:	d505      	bpl.n	81ce6 <_vfiprintf_r+0xdba>
   81cda:	af2a      	add	r7, sp, #168	; 0xa8
   81cdc:	2330      	movs	r3, #48	; 0x30
   81cde:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81ce2:	f7ff bba2 	b.w	8142a <_vfiprintf_r+0x4fe>
   81ce6:	9b01      	ldr	r3, [sp, #4]
   81ce8:	4657      	mov	r7, sl
   81cea:	9303      	str	r3, [sp, #12]
   81cec:	f7ff ba44 	b.w	81178 <_vfiprintf_r+0x24c>
   81cf0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cf4:	e517      	b.n	81726 <_vfiprintf_r+0x7fa>
   81cf6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81cfa:	e4fa      	b.n	816f2 <_vfiprintf_r+0x7c6>
   81cfc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   81d00:	e4d2      	b.n	816a8 <_vfiprintf_r+0x77c>
   81d02:	bf00      	nop
   81d04:	00083bc4 	.word	0x00083bc4
   81d08:	00083bd8 	.word	0x00083bd8
   81d0c:	00083be0 	.word	0x00083be0
   81d10:	00083ba0 	.word	0x00083ba0

00081d14 <__sbprintf>:
   81d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   81d16:	460c      	mov	r4, r1
   81d18:	8989      	ldrh	r1, [r1, #12]
   81d1a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81d1e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81d20:	f021 0102 	bic.w	r1, r1, #2
   81d24:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81d26:	f8ad 100c 	strh.w	r1, [sp, #12]
   81d2a:	69e1      	ldr	r1, [r4, #28]
   81d2c:	89e7      	ldrh	r7, [r4, #14]
   81d2e:	9519      	str	r5, [sp, #100]	; 0x64
   81d30:	2500      	movs	r5, #0
   81d32:	9107      	str	r1, [sp, #28]
   81d34:	9609      	str	r6, [sp, #36]	; 0x24
   81d36:	9506      	str	r5, [sp, #24]
   81d38:	ae1a      	add	r6, sp, #104	; 0x68
   81d3a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81d3e:	4669      	mov	r1, sp
   81d40:	9600      	str	r6, [sp, #0]
   81d42:	9604      	str	r6, [sp, #16]
   81d44:	9502      	str	r5, [sp, #8]
   81d46:	9505      	str	r5, [sp, #20]
   81d48:	f8ad 700e 	strh.w	r7, [sp, #14]
   81d4c:	4606      	mov	r6, r0
   81d4e:	f7ff f8ed 	bl	80f2c <_vfiprintf_r>
   81d52:	1e05      	subs	r5, r0, #0
   81d54:	db07      	blt.n	81d66 <__sbprintf+0x52>
   81d56:	4630      	mov	r0, r6
   81d58:	4669      	mov	r1, sp
   81d5a:	f000 f929 	bl	81fb0 <_fflush_r>
   81d5e:	2800      	cmp	r0, #0
   81d60:	bf18      	it	ne
   81d62:	f04f 35ff 	movne.w	r5, #4294967295
   81d66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81d6a:	065b      	lsls	r3, r3, #25
   81d6c:	d503      	bpl.n	81d76 <__sbprintf+0x62>
   81d6e:	89a3      	ldrh	r3, [r4, #12]
   81d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d74:	81a3      	strh	r3, [r4, #12]
   81d76:	4628      	mov	r0, r5
   81d78:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   81d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81d7e:	bf00      	nop

00081d80 <__swsetup_r>:
   81d80:	b538      	push	{r3, r4, r5, lr}
   81d82:	4b30      	ldr	r3, [pc, #192]	; (81e44 <__swsetup_r+0xc4>)
   81d84:	4605      	mov	r5, r0
   81d86:	6818      	ldr	r0, [r3, #0]
   81d88:	460c      	mov	r4, r1
   81d8a:	b110      	cbz	r0, 81d92 <__swsetup_r+0x12>
   81d8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81d8e:	2b00      	cmp	r3, #0
   81d90:	d038      	beq.n	81e04 <__swsetup_r+0x84>
   81d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81d96:	b293      	uxth	r3, r2
   81d98:	0718      	lsls	r0, r3, #28
   81d9a:	d50c      	bpl.n	81db6 <__swsetup_r+0x36>
   81d9c:	6920      	ldr	r0, [r4, #16]
   81d9e:	b1a8      	cbz	r0, 81dcc <__swsetup_r+0x4c>
   81da0:	f013 0201 	ands.w	r2, r3, #1
   81da4:	d01e      	beq.n	81de4 <__swsetup_r+0x64>
   81da6:	6963      	ldr	r3, [r4, #20]
   81da8:	2200      	movs	r2, #0
   81daa:	425b      	negs	r3, r3
   81dac:	61a3      	str	r3, [r4, #24]
   81dae:	60a2      	str	r2, [r4, #8]
   81db0:	b1f0      	cbz	r0, 81df0 <__swsetup_r+0x70>
   81db2:	2000      	movs	r0, #0
   81db4:	bd38      	pop	{r3, r4, r5, pc}
   81db6:	06d9      	lsls	r1, r3, #27
   81db8:	d53b      	bpl.n	81e32 <__swsetup_r+0xb2>
   81dba:	0758      	lsls	r0, r3, #29
   81dbc:	d425      	bmi.n	81e0a <__swsetup_r+0x8a>
   81dbe:	6920      	ldr	r0, [r4, #16]
   81dc0:	f042 0308 	orr.w	r3, r2, #8
   81dc4:	81a3      	strh	r3, [r4, #12]
   81dc6:	b29b      	uxth	r3, r3
   81dc8:	2800      	cmp	r0, #0
   81dca:	d1e9      	bne.n	81da0 <__swsetup_r+0x20>
   81dcc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81dd0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81dd4:	d0e4      	beq.n	81da0 <__swsetup_r+0x20>
   81dd6:	4628      	mov	r0, r5
   81dd8:	4621      	mov	r1, r4
   81dda:	f000 fd13 	bl	82804 <__smakebuf_r>
   81dde:	89a3      	ldrh	r3, [r4, #12]
   81de0:	6920      	ldr	r0, [r4, #16]
   81de2:	e7dd      	b.n	81da0 <__swsetup_r+0x20>
   81de4:	0799      	lsls	r1, r3, #30
   81de6:	bf58      	it	pl
   81de8:	6962      	ldrpl	r2, [r4, #20]
   81dea:	60a2      	str	r2, [r4, #8]
   81dec:	2800      	cmp	r0, #0
   81dee:	d1e0      	bne.n	81db2 <__swsetup_r+0x32>
   81df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81df4:	061a      	lsls	r2, r3, #24
   81df6:	d5dd      	bpl.n	81db4 <__swsetup_r+0x34>
   81df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81dfc:	81a3      	strh	r3, [r4, #12]
   81dfe:	f04f 30ff 	mov.w	r0, #4294967295
   81e02:	bd38      	pop	{r3, r4, r5, pc}
   81e04:	f000 f968 	bl	820d8 <__sinit>
   81e08:	e7c3      	b.n	81d92 <__swsetup_r+0x12>
   81e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e0c:	b151      	cbz	r1, 81e24 <__swsetup_r+0xa4>
   81e0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e12:	4299      	cmp	r1, r3
   81e14:	d004      	beq.n	81e20 <__swsetup_r+0xa0>
   81e16:	4628      	mov	r0, r5
   81e18:	f000 fa26 	bl	82268 <_free_r>
   81e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81e20:	2300      	movs	r3, #0
   81e22:	6323      	str	r3, [r4, #48]	; 0x30
   81e24:	6920      	ldr	r0, [r4, #16]
   81e26:	2300      	movs	r3, #0
   81e28:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81e2c:	e884 0009 	stmia.w	r4, {r0, r3}
   81e30:	e7c6      	b.n	81dc0 <__swsetup_r+0x40>
   81e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81e36:	2309      	movs	r3, #9
   81e38:	602b      	str	r3, [r5, #0]
   81e3a:	f04f 30ff 	mov.w	r0, #4294967295
   81e3e:	81a2      	strh	r2, [r4, #12]
   81e40:	bd38      	pop	{r3, r4, r5, pc}
   81e42:	bf00      	nop
   81e44:	20070558 	.word	0x20070558

00081e48 <register_fini>:
   81e48:	4b02      	ldr	r3, [pc, #8]	; (81e54 <register_fini+0xc>)
   81e4a:	b113      	cbz	r3, 81e52 <register_fini+0xa>
   81e4c:	4802      	ldr	r0, [pc, #8]	; (81e58 <register_fini+0x10>)
   81e4e:	f000 b805 	b.w	81e5c <atexit>
   81e52:	4770      	bx	lr
   81e54:	00000000 	.word	0x00000000
   81e58:	000820ed 	.word	0x000820ed

00081e5c <atexit>:
   81e5c:	2300      	movs	r3, #0
   81e5e:	4601      	mov	r1, r0
   81e60:	461a      	mov	r2, r3
   81e62:	4618      	mov	r0, r3
   81e64:	f001 bbfc 	b.w	83660 <__register_exitproc>

00081e68 <__sflush_r>:
   81e68:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   81e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e70:	b29a      	uxth	r2, r3
   81e72:	460d      	mov	r5, r1
   81e74:	0711      	lsls	r1, r2, #28
   81e76:	4680      	mov	r8, r0
   81e78:	d43c      	bmi.n	81ef4 <__sflush_r+0x8c>
   81e7a:	686a      	ldr	r2, [r5, #4]
   81e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e80:	2a00      	cmp	r2, #0
   81e82:	81ab      	strh	r3, [r5, #12]
   81e84:	dd73      	ble.n	81f6e <__sflush_r+0x106>
   81e86:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e88:	2c00      	cmp	r4, #0
   81e8a:	d04b      	beq.n	81f24 <__sflush_r+0xbc>
   81e8c:	b29b      	uxth	r3, r3
   81e8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81e92:	2100      	movs	r1, #0
   81e94:	b292      	uxth	r2, r2
   81e96:	f8d8 6000 	ldr.w	r6, [r8]
   81e9a:	f8c8 1000 	str.w	r1, [r8]
   81e9e:	2a00      	cmp	r2, #0
   81ea0:	d069      	beq.n	81f76 <__sflush_r+0x10e>
   81ea2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81ea4:	075f      	lsls	r7, r3, #29
   81ea6:	d505      	bpl.n	81eb4 <__sflush_r+0x4c>
   81ea8:	6869      	ldr	r1, [r5, #4]
   81eaa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81eac:	1a52      	subs	r2, r2, r1
   81eae:	b10b      	cbz	r3, 81eb4 <__sflush_r+0x4c>
   81eb0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81eb2:	1ad2      	subs	r2, r2, r3
   81eb4:	2300      	movs	r3, #0
   81eb6:	69e9      	ldr	r1, [r5, #28]
   81eb8:	4640      	mov	r0, r8
   81eba:	47a0      	blx	r4
   81ebc:	1c44      	adds	r4, r0, #1
   81ebe:	d03c      	beq.n	81f3a <__sflush_r+0xd2>
   81ec0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   81ec4:	6929      	ldr	r1, [r5, #16]
   81ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81eca:	2200      	movs	r2, #0
   81ecc:	81ab      	strh	r3, [r5, #12]
   81ece:	04db      	lsls	r3, r3, #19
   81ed0:	e885 0006 	stmia.w	r5, {r1, r2}
   81ed4:	d449      	bmi.n	81f6a <__sflush_r+0x102>
   81ed6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81ed8:	f8c8 6000 	str.w	r6, [r8]
   81edc:	b311      	cbz	r1, 81f24 <__sflush_r+0xbc>
   81ede:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81ee2:	4299      	cmp	r1, r3
   81ee4:	d002      	beq.n	81eec <__sflush_r+0x84>
   81ee6:	4640      	mov	r0, r8
   81ee8:	f000 f9be 	bl	82268 <_free_r>
   81eec:	2000      	movs	r0, #0
   81eee:	6328      	str	r0, [r5, #48]	; 0x30
   81ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ef4:	692e      	ldr	r6, [r5, #16]
   81ef6:	b1ae      	cbz	r6, 81f24 <__sflush_r+0xbc>
   81ef8:	0790      	lsls	r0, r2, #30
   81efa:	682c      	ldr	r4, [r5, #0]
   81efc:	bf0c      	ite	eq
   81efe:	696b      	ldreq	r3, [r5, #20]
   81f00:	2300      	movne	r3, #0
   81f02:	602e      	str	r6, [r5, #0]
   81f04:	1ba4      	subs	r4, r4, r6
   81f06:	60ab      	str	r3, [r5, #8]
   81f08:	e00a      	b.n	81f20 <__sflush_r+0xb8>
   81f0a:	4623      	mov	r3, r4
   81f0c:	4632      	mov	r2, r6
   81f0e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81f10:	69e9      	ldr	r1, [r5, #28]
   81f12:	4640      	mov	r0, r8
   81f14:	47b8      	blx	r7
   81f16:	2800      	cmp	r0, #0
   81f18:	eba4 0400 	sub.w	r4, r4, r0
   81f1c:	4406      	add	r6, r0
   81f1e:	dd04      	ble.n	81f2a <__sflush_r+0xc2>
   81f20:	2c00      	cmp	r4, #0
   81f22:	dcf2      	bgt.n	81f0a <__sflush_r+0xa2>
   81f24:	2000      	movs	r0, #0
   81f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f2a:	89ab      	ldrh	r3, [r5, #12]
   81f2c:	f04f 30ff 	mov.w	r0, #4294967295
   81f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f34:	81ab      	strh	r3, [r5, #12]
   81f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f3a:	f8d8 2000 	ldr.w	r2, [r8]
   81f3e:	2a1d      	cmp	r2, #29
   81f40:	d8f3      	bhi.n	81f2a <__sflush_r+0xc2>
   81f42:	4b1a      	ldr	r3, [pc, #104]	; (81fac <__sflush_r+0x144>)
   81f44:	40d3      	lsrs	r3, r2
   81f46:	f003 0301 	and.w	r3, r3, #1
   81f4a:	f083 0401 	eor.w	r4, r3, #1
   81f4e:	2b00      	cmp	r3, #0
   81f50:	d0eb      	beq.n	81f2a <__sflush_r+0xc2>
   81f52:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   81f56:	6929      	ldr	r1, [r5, #16]
   81f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81f5c:	6029      	str	r1, [r5, #0]
   81f5e:	04d9      	lsls	r1, r3, #19
   81f60:	606c      	str	r4, [r5, #4]
   81f62:	81ab      	strh	r3, [r5, #12]
   81f64:	d5b7      	bpl.n	81ed6 <__sflush_r+0x6e>
   81f66:	2a00      	cmp	r2, #0
   81f68:	d1b5      	bne.n	81ed6 <__sflush_r+0x6e>
   81f6a:	6528      	str	r0, [r5, #80]	; 0x50
   81f6c:	e7b3      	b.n	81ed6 <__sflush_r+0x6e>
   81f6e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f70:	2a00      	cmp	r2, #0
   81f72:	dc88      	bgt.n	81e86 <__sflush_r+0x1e>
   81f74:	e7d6      	b.n	81f24 <__sflush_r+0xbc>
   81f76:	2301      	movs	r3, #1
   81f78:	69e9      	ldr	r1, [r5, #28]
   81f7a:	4640      	mov	r0, r8
   81f7c:	47a0      	blx	r4
   81f7e:	1c43      	adds	r3, r0, #1
   81f80:	4602      	mov	r2, r0
   81f82:	d002      	beq.n	81f8a <__sflush_r+0x122>
   81f84:	89ab      	ldrh	r3, [r5, #12]
   81f86:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f88:	e78c      	b.n	81ea4 <__sflush_r+0x3c>
   81f8a:	f8d8 3000 	ldr.w	r3, [r8]
   81f8e:	2b00      	cmp	r3, #0
   81f90:	d0f8      	beq.n	81f84 <__sflush_r+0x11c>
   81f92:	2b1d      	cmp	r3, #29
   81f94:	d001      	beq.n	81f9a <__sflush_r+0x132>
   81f96:	2b16      	cmp	r3, #22
   81f98:	d102      	bne.n	81fa0 <__sflush_r+0x138>
   81f9a:	f8c8 6000 	str.w	r6, [r8]
   81f9e:	e7c1      	b.n	81f24 <__sflush_r+0xbc>
   81fa0:	89ab      	ldrh	r3, [r5, #12]
   81fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fa6:	81ab      	strh	r3, [r5, #12]
   81fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fac:	20400001 	.word	0x20400001

00081fb0 <_fflush_r>:
   81fb0:	b510      	push	{r4, lr}
   81fb2:	4604      	mov	r4, r0
   81fb4:	b082      	sub	sp, #8
   81fb6:	b108      	cbz	r0, 81fbc <_fflush_r+0xc>
   81fb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fba:	b153      	cbz	r3, 81fd2 <_fflush_r+0x22>
   81fbc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81fc0:	b908      	cbnz	r0, 81fc6 <_fflush_r+0x16>
   81fc2:	b002      	add	sp, #8
   81fc4:	bd10      	pop	{r4, pc}
   81fc6:	4620      	mov	r0, r4
   81fc8:	b002      	add	sp, #8
   81fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81fce:	f7ff bf4b 	b.w	81e68 <__sflush_r>
   81fd2:	9101      	str	r1, [sp, #4]
   81fd4:	f000 f880 	bl	820d8 <__sinit>
   81fd8:	9901      	ldr	r1, [sp, #4]
   81fda:	e7ef      	b.n	81fbc <_fflush_r+0xc>

00081fdc <_cleanup_r>:
   81fdc:	4901      	ldr	r1, [pc, #4]	; (81fe4 <_cleanup_r+0x8>)
   81fde:	f000 bbaf 	b.w	82740 <_fwalk_reent>
   81fe2:	bf00      	nop
   81fe4:	00083729 	.word	0x00083729

00081fe8 <__sinit.part.1>:
   81fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fec:	4607      	mov	r7, r0
   81fee:	4835      	ldr	r0, [pc, #212]	; (820c4 <__sinit.part.1+0xdc>)
   81ff0:	687d      	ldr	r5, [r7, #4]
   81ff2:	2400      	movs	r4, #0
   81ff4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81ff8:	2304      	movs	r3, #4
   81ffa:	2103      	movs	r1, #3
   81ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
   81ffe:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82002:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82006:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8200a:	b083      	sub	sp, #12
   8200c:	602c      	str	r4, [r5, #0]
   8200e:	606c      	str	r4, [r5, #4]
   82010:	60ac      	str	r4, [r5, #8]
   82012:	666c      	str	r4, [r5, #100]	; 0x64
   82014:	81ec      	strh	r4, [r5, #14]
   82016:	612c      	str	r4, [r5, #16]
   82018:	616c      	str	r4, [r5, #20]
   8201a:	61ac      	str	r4, [r5, #24]
   8201c:	81ab      	strh	r3, [r5, #12]
   8201e:	4621      	mov	r1, r4
   82020:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82024:	2208      	movs	r2, #8
   82026:	f7fe fe47 	bl	80cb8 <memset>
   8202a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 820c8 <__sinit.part.1+0xe0>
   8202e:	68be      	ldr	r6, [r7, #8]
   82030:	f8df a098 	ldr.w	sl, [pc, #152]	; 820cc <__sinit.part.1+0xe4>
   82034:	f8df 9098 	ldr.w	r9, [pc, #152]	; 820d0 <__sinit.part.1+0xe8>
   82038:	f8df 8098 	ldr.w	r8, [pc, #152]	; 820d4 <__sinit.part.1+0xec>
   8203c:	2301      	movs	r3, #1
   8203e:	2209      	movs	r2, #9
   82040:	f8c5 b020 	str.w	fp, [r5, #32]
   82044:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82048:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8204c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82050:	61ed      	str	r5, [r5, #28]
   82052:	4621      	mov	r1, r4
   82054:	81f3      	strh	r3, [r6, #14]
   82056:	81b2      	strh	r2, [r6, #12]
   82058:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8205c:	6034      	str	r4, [r6, #0]
   8205e:	6074      	str	r4, [r6, #4]
   82060:	60b4      	str	r4, [r6, #8]
   82062:	6674      	str	r4, [r6, #100]	; 0x64
   82064:	6134      	str	r4, [r6, #16]
   82066:	6174      	str	r4, [r6, #20]
   82068:	61b4      	str	r4, [r6, #24]
   8206a:	2208      	movs	r2, #8
   8206c:	9301      	str	r3, [sp, #4]
   8206e:	f7fe fe23 	bl	80cb8 <memset>
   82072:	68fd      	ldr	r5, [r7, #12]
   82074:	2012      	movs	r0, #18
   82076:	2202      	movs	r2, #2
   82078:	61f6      	str	r6, [r6, #28]
   8207a:	f8c6 b020 	str.w	fp, [r6, #32]
   8207e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82082:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82086:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8208a:	4621      	mov	r1, r4
   8208c:	81a8      	strh	r0, [r5, #12]
   8208e:	81ea      	strh	r2, [r5, #14]
   82090:	602c      	str	r4, [r5, #0]
   82092:	606c      	str	r4, [r5, #4]
   82094:	60ac      	str	r4, [r5, #8]
   82096:	666c      	str	r4, [r5, #100]	; 0x64
   82098:	612c      	str	r4, [r5, #16]
   8209a:	616c      	str	r4, [r5, #20]
   8209c:	61ac      	str	r4, [r5, #24]
   8209e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   820a2:	2208      	movs	r2, #8
   820a4:	f7fe fe08 	bl	80cb8 <memset>
   820a8:	9b01      	ldr	r3, [sp, #4]
   820aa:	61ed      	str	r5, [r5, #28]
   820ac:	f8c5 b020 	str.w	fp, [r5, #32]
   820b0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   820b4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   820b8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   820bc:	63bb      	str	r3, [r7, #56]	; 0x38
   820be:	b003      	add	sp, #12
   820c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820c4:	00081fdd 	.word	0x00081fdd
   820c8:	00083435 	.word	0x00083435
   820cc:	00083459 	.word	0x00083459
   820d0:	00083495 	.word	0x00083495
   820d4:	000834b5 	.word	0x000834b5

000820d8 <__sinit>:
   820d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   820da:	b103      	cbz	r3, 820de <__sinit+0x6>
   820dc:	4770      	bx	lr
   820de:	f7ff bf83 	b.w	81fe8 <__sinit.part.1>
   820e2:	bf00      	nop

000820e4 <__sfp_lock_acquire>:
   820e4:	4770      	bx	lr
   820e6:	bf00      	nop

000820e8 <__sfp_lock_release>:
   820e8:	4770      	bx	lr
   820ea:	bf00      	nop

000820ec <__libc_fini_array>:
   820ec:	b538      	push	{r3, r4, r5, lr}
   820ee:	4d07      	ldr	r5, [pc, #28]	; (8210c <__libc_fini_array+0x20>)
   820f0:	4c07      	ldr	r4, [pc, #28]	; (82110 <__libc_fini_array+0x24>)
   820f2:	1b2c      	subs	r4, r5, r4
   820f4:	10a4      	asrs	r4, r4, #2
   820f6:	d005      	beq.n	82104 <__libc_fini_array+0x18>
   820f8:	3c01      	subs	r4, #1
   820fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   820fe:	4798      	blx	r3
   82100:	2c00      	cmp	r4, #0
   82102:	d1f9      	bne.n	820f8 <__libc_fini_array+0xc>
   82104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82108:	f001 bd7c 	b.w	83c04 <_fini>
   8210c:	00083c14 	.word	0x00083c14
   82110:	00083c10 	.word	0x00083c10

00082114 <__fputwc>:
   82114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82118:	b082      	sub	sp, #8
   8211a:	4606      	mov	r6, r0
   8211c:	460f      	mov	r7, r1
   8211e:	4614      	mov	r4, r2
   82120:	f000 fb3a 	bl	82798 <__locale_mb_cur_max>
   82124:	2801      	cmp	r0, #1
   82126:	d032      	beq.n	8218e <__fputwc+0x7a>
   82128:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8212c:	463a      	mov	r2, r7
   8212e:	a901      	add	r1, sp, #4
   82130:	4630      	mov	r0, r6
   82132:	f001 fa47 	bl	835c4 <_wcrtomb_r>
   82136:	f1b0 3fff 	cmp.w	r0, #4294967295
   8213a:	4680      	mov	r8, r0
   8213c:	d020      	beq.n	82180 <__fputwc+0x6c>
   8213e:	b370      	cbz	r0, 8219e <__fputwc+0x8a>
   82140:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82144:	2500      	movs	r5, #0
   82146:	e008      	b.n	8215a <__fputwc+0x46>
   82148:	6823      	ldr	r3, [r4, #0]
   8214a:	1c5a      	adds	r2, r3, #1
   8214c:	6022      	str	r2, [r4, #0]
   8214e:	7019      	strb	r1, [r3, #0]
   82150:	3501      	adds	r5, #1
   82152:	4545      	cmp	r5, r8
   82154:	d223      	bcs.n	8219e <__fputwc+0x8a>
   82156:	ab01      	add	r3, sp, #4
   82158:	5d59      	ldrb	r1, [r3, r5]
   8215a:	68a3      	ldr	r3, [r4, #8]
   8215c:	3b01      	subs	r3, #1
   8215e:	2b00      	cmp	r3, #0
   82160:	60a3      	str	r3, [r4, #8]
   82162:	daf1      	bge.n	82148 <__fputwc+0x34>
   82164:	69a2      	ldr	r2, [r4, #24]
   82166:	4293      	cmp	r3, r2
   82168:	db01      	blt.n	8216e <__fputwc+0x5a>
   8216a:	290a      	cmp	r1, #10
   8216c:	d1ec      	bne.n	82148 <__fputwc+0x34>
   8216e:	4622      	mov	r2, r4
   82170:	4630      	mov	r0, r6
   82172:	f001 f9d1 	bl	83518 <__swbuf_r>
   82176:	1c43      	adds	r3, r0, #1
   82178:	d1ea      	bne.n	82150 <__fputwc+0x3c>
   8217a:	b002      	add	sp, #8
   8217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82180:	89a3      	ldrh	r3, [r4, #12]
   82182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82186:	81a3      	strh	r3, [r4, #12]
   82188:	b002      	add	sp, #8
   8218a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8218e:	1e7b      	subs	r3, r7, #1
   82190:	2bfe      	cmp	r3, #254	; 0xfe
   82192:	d8c9      	bhi.n	82128 <__fputwc+0x14>
   82194:	b2f9      	uxtb	r1, r7
   82196:	4680      	mov	r8, r0
   82198:	f88d 1004 	strb.w	r1, [sp, #4]
   8219c:	e7d2      	b.n	82144 <__fputwc+0x30>
   8219e:	4638      	mov	r0, r7
   821a0:	b002      	add	sp, #8
   821a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821a6:	bf00      	nop

000821a8 <_fputwc_r>:
   821a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   821ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   821b0:	d10a      	bne.n	821c8 <_fputwc_r+0x20>
   821b2:	b410      	push	{r4}
   821b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
   821b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   821ba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   821be:	6654      	str	r4, [r2, #100]	; 0x64
   821c0:	8193      	strh	r3, [r2, #12]
   821c2:	bc10      	pop	{r4}
   821c4:	f7ff bfa6 	b.w	82114 <__fputwc>
   821c8:	f7ff bfa4 	b.w	82114 <__fputwc>

000821cc <_malloc_trim_r>:
   821cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821ce:	460c      	mov	r4, r1
   821d0:	4f22      	ldr	r7, [pc, #136]	; (8225c <_malloc_trim_r+0x90>)
   821d2:	4606      	mov	r6, r0
   821d4:	f000 ff2e 	bl	83034 <__malloc_lock>
   821d8:	68bb      	ldr	r3, [r7, #8]
   821da:	685d      	ldr	r5, [r3, #4]
   821dc:	f025 0503 	bic.w	r5, r5, #3
   821e0:	1b29      	subs	r1, r5, r4
   821e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   821e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   821ea:	f021 010f 	bic.w	r1, r1, #15
   821ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   821f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   821f6:	db07      	blt.n	82208 <_malloc_trim_r+0x3c>
   821f8:	2100      	movs	r1, #0
   821fa:	4630      	mov	r0, r6
   821fc:	f001 f908 	bl	83410 <_sbrk_r>
   82200:	68bb      	ldr	r3, [r7, #8]
   82202:	442b      	add	r3, r5
   82204:	4298      	cmp	r0, r3
   82206:	d004      	beq.n	82212 <_malloc_trim_r+0x46>
   82208:	4630      	mov	r0, r6
   8220a:	f000 ff15 	bl	83038 <__malloc_unlock>
   8220e:	2000      	movs	r0, #0
   82210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82212:	4261      	negs	r1, r4
   82214:	4630      	mov	r0, r6
   82216:	f001 f8fb 	bl	83410 <_sbrk_r>
   8221a:	3001      	adds	r0, #1
   8221c:	d00d      	beq.n	8223a <_malloc_trim_r+0x6e>
   8221e:	4b10      	ldr	r3, [pc, #64]	; (82260 <_malloc_trim_r+0x94>)
   82220:	68ba      	ldr	r2, [r7, #8]
   82222:	6819      	ldr	r1, [r3, #0]
   82224:	1b2d      	subs	r5, r5, r4
   82226:	f045 0501 	orr.w	r5, r5, #1
   8222a:	4630      	mov	r0, r6
   8222c:	1b09      	subs	r1, r1, r4
   8222e:	6055      	str	r5, [r2, #4]
   82230:	6019      	str	r1, [r3, #0]
   82232:	f000 ff01 	bl	83038 <__malloc_unlock>
   82236:	2001      	movs	r0, #1
   82238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8223a:	2100      	movs	r1, #0
   8223c:	4630      	mov	r0, r6
   8223e:	f001 f8e7 	bl	83410 <_sbrk_r>
   82242:	68ba      	ldr	r2, [r7, #8]
   82244:	1a83      	subs	r3, r0, r2
   82246:	2b0f      	cmp	r3, #15
   82248:	ddde      	ble.n	82208 <_malloc_trim_r+0x3c>
   8224a:	4c06      	ldr	r4, [pc, #24]	; (82264 <_malloc_trim_r+0x98>)
   8224c:	4904      	ldr	r1, [pc, #16]	; (82260 <_malloc_trim_r+0x94>)
   8224e:	6824      	ldr	r4, [r4, #0]
   82250:	f043 0301 	orr.w	r3, r3, #1
   82254:	1b00      	subs	r0, r0, r4
   82256:	6053      	str	r3, [r2, #4]
   82258:	6008      	str	r0, [r1, #0]
   8225a:	e7d5      	b.n	82208 <_malloc_trim_r+0x3c>
   8225c:	20070580 	.word	0x20070580
   82260:	20070a54 	.word	0x20070a54
   82264:	2007098c 	.word	0x2007098c

00082268 <_free_r>:
   82268:	2900      	cmp	r1, #0
   8226a:	d045      	beq.n	822f8 <_free_r+0x90>
   8226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82270:	460d      	mov	r5, r1
   82272:	4680      	mov	r8, r0
   82274:	f000 fede 	bl	83034 <__malloc_lock>
   82278:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8227c:	496a      	ldr	r1, [pc, #424]	; (82428 <_free_r+0x1c0>)
   8227e:	f1a5 0408 	sub.w	r4, r5, #8
   82282:	f027 0301 	bic.w	r3, r7, #1
   82286:	18e2      	adds	r2, r4, r3
   82288:	688e      	ldr	r6, [r1, #8]
   8228a:	6850      	ldr	r0, [r2, #4]
   8228c:	42b2      	cmp	r2, r6
   8228e:	f020 0003 	bic.w	r0, r0, #3
   82292:	d062      	beq.n	8235a <_free_r+0xf2>
   82294:	07fe      	lsls	r6, r7, #31
   82296:	6050      	str	r0, [r2, #4]
   82298:	d40b      	bmi.n	822b2 <_free_r+0x4a>
   8229a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8229e:	f101 0e08 	add.w	lr, r1, #8
   822a2:	1be4      	subs	r4, r4, r7
   822a4:	68a5      	ldr	r5, [r4, #8]
   822a6:	443b      	add	r3, r7
   822a8:	4575      	cmp	r5, lr
   822aa:	d06f      	beq.n	8238c <_free_r+0x124>
   822ac:	68e7      	ldr	r7, [r4, #12]
   822ae:	60ef      	str	r7, [r5, #12]
   822b0:	60bd      	str	r5, [r7, #8]
   822b2:	1815      	adds	r5, r2, r0
   822b4:	686d      	ldr	r5, [r5, #4]
   822b6:	07ed      	lsls	r5, r5, #31
   822b8:	d542      	bpl.n	82340 <_free_r+0xd8>
   822ba:	f043 0201 	orr.w	r2, r3, #1
   822be:	6062      	str	r2, [r4, #4]
   822c0:	50e3      	str	r3, [r4, r3]
   822c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   822c6:	d218      	bcs.n	822fa <_free_r+0x92>
   822c8:	08db      	lsrs	r3, r3, #3
   822ca:	6848      	ldr	r0, [r1, #4]
   822cc:	109d      	asrs	r5, r3, #2
   822ce:	2201      	movs	r2, #1
   822d0:	3301      	adds	r3, #1
   822d2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   822d6:	fa02 f505 	lsl.w	r5, r2, r5
   822da:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   822de:	4328      	orrs	r0, r5
   822e0:	3a08      	subs	r2, #8
   822e2:	60e2      	str	r2, [r4, #12]
   822e4:	60a7      	str	r7, [r4, #8]
   822e6:	6048      	str	r0, [r1, #4]
   822e8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   822ec:	60fc      	str	r4, [r7, #12]
   822ee:	4640      	mov	r0, r8
   822f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   822f4:	f000 bea0 	b.w	83038 <__malloc_unlock>
   822f8:	4770      	bx	lr
   822fa:	0a5a      	lsrs	r2, r3, #9
   822fc:	2a04      	cmp	r2, #4
   822fe:	d853      	bhi.n	823a8 <_free_r+0x140>
   82300:	099a      	lsrs	r2, r3, #6
   82302:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82306:	007f      	lsls	r7, r7, #1
   82308:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8230c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   82310:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   82314:	3808      	subs	r0, #8
   82316:	4290      	cmp	r0, r2
   82318:	4943      	ldr	r1, [pc, #268]	; (82428 <_free_r+0x1c0>)
   8231a:	d04d      	beq.n	823b8 <_free_r+0x150>
   8231c:	6851      	ldr	r1, [r2, #4]
   8231e:	f021 0103 	bic.w	r1, r1, #3
   82322:	428b      	cmp	r3, r1
   82324:	d202      	bcs.n	8232c <_free_r+0xc4>
   82326:	6892      	ldr	r2, [r2, #8]
   82328:	4290      	cmp	r0, r2
   8232a:	d1f7      	bne.n	8231c <_free_r+0xb4>
   8232c:	68d0      	ldr	r0, [r2, #12]
   8232e:	60e0      	str	r0, [r4, #12]
   82330:	60a2      	str	r2, [r4, #8]
   82332:	6084      	str	r4, [r0, #8]
   82334:	60d4      	str	r4, [r2, #12]
   82336:	4640      	mov	r0, r8
   82338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8233c:	f000 be7c 	b.w	83038 <__malloc_unlock>
   82340:	6895      	ldr	r5, [r2, #8]
   82342:	4f3a      	ldr	r7, [pc, #232]	; (8242c <_free_r+0x1c4>)
   82344:	4403      	add	r3, r0
   82346:	42bd      	cmp	r5, r7
   82348:	d03f      	beq.n	823ca <_free_r+0x162>
   8234a:	68d0      	ldr	r0, [r2, #12]
   8234c:	f043 0201 	orr.w	r2, r3, #1
   82350:	60e8      	str	r0, [r5, #12]
   82352:	6085      	str	r5, [r0, #8]
   82354:	6062      	str	r2, [r4, #4]
   82356:	50e3      	str	r3, [r4, r3]
   82358:	e7b3      	b.n	822c2 <_free_r+0x5a>
   8235a:	07ff      	lsls	r7, r7, #31
   8235c:	4403      	add	r3, r0
   8235e:	d407      	bmi.n	82370 <_free_r+0x108>
   82360:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82364:	1b64      	subs	r4, r4, r5
   82366:	68e2      	ldr	r2, [r4, #12]
   82368:	68a0      	ldr	r0, [r4, #8]
   8236a:	442b      	add	r3, r5
   8236c:	60c2      	str	r2, [r0, #12]
   8236e:	6090      	str	r0, [r2, #8]
   82370:	4a2f      	ldr	r2, [pc, #188]	; (82430 <_free_r+0x1c8>)
   82372:	f043 0001 	orr.w	r0, r3, #1
   82376:	6812      	ldr	r2, [r2, #0]
   82378:	6060      	str	r0, [r4, #4]
   8237a:	4293      	cmp	r3, r2
   8237c:	608c      	str	r4, [r1, #8]
   8237e:	d3b6      	bcc.n	822ee <_free_r+0x86>
   82380:	4b2c      	ldr	r3, [pc, #176]	; (82434 <_free_r+0x1cc>)
   82382:	4640      	mov	r0, r8
   82384:	6819      	ldr	r1, [r3, #0]
   82386:	f7ff ff21 	bl	821cc <_malloc_trim_r>
   8238a:	e7b0      	b.n	822ee <_free_r+0x86>
   8238c:	1811      	adds	r1, r2, r0
   8238e:	6849      	ldr	r1, [r1, #4]
   82390:	07c9      	lsls	r1, r1, #31
   82392:	d444      	bmi.n	8241e <_free_r+0x1b6>
   82394:	6891      	ldr	r1, [r2, #8]
   82396:	4403      	add	r3, r0
   82398:	68d2      	ldr	r2, [r2, #12]
   8239a:	f043 0001 	orr.w	r0, r3, #1
   8239e:	60ca      	str	r2, [r1, #12]
   823a0:	6091      	str	r1, [r2, #8]
   823a2:	6060      	str	r0, [r4, #4]
   823a4:	50e3      	str	r3, [r4, r3]
   823a6:	e7a2      	b.n	822ee <_free_r+0x86>
   823a8:	2a14      	cmp	r2, #20
   823aa:	d817      	bhi.n	823dc <_free_r+0x174>
   823ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   823b0:	007f      	lsls	r7, r7, #1
   823b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   823b6:	e7a9      	b.n	8230c <_free_r+0xa4>
   823b8:	10aa      	asrs	r2, r5, #2
   823ba:	684b      	ldr	r3, [r1, #4]
   823bc:	2501      	movs	r5, #1
   823be:	fa05 f202 	lsl.w	r2, r5, r2
   823c2:	4313      	orrs	r3, r2
   823c4:	604b      	str	r3, [r1, #4]
   823c6:	4602      	mov	r2, r0
   823c8:	e7b1      	b.n	8232e <_free_r+0xc6>
   823ca:	f043 0201 	orr.w	r2, r3, #1
   823ce:	614c      	str	r4, [r1, #20]
   823d0:	610c      	str	r4, [r1, #16]
   823d2:	60e5      	str	r5, [r4, #12]
   823d4:	60a5      	str	r5, [r4, #8]
   823d6:	6062      	str	r2, [r4, #4]
   823d8:	50e3      	str	r3, [r4, r3]
   823da:	e788      	b.n	822ee <_free_r+0x86>
   823dc:	2a54      	cmp	r2, #84	; 0x54
   823de:	d806      	bhi.n	823ee <_free_r+0x186>
   823e0:	0b1a      	lsrs	r2, r3, #12
   823e2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   823e6:	007f      	lsls	r7, r7, #1
   823e8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   823ec:	e78e      	b.n	8230c <_free_r+0xa4>
   823ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   823f2:	d806      	bhi.n	82402 <_free_r+0x19a>
   823f4:	0bda      	lsrs	r2, r3, #15
   823f6:	f102 0778 	add.w	r7, r2, #120	; 0x78
   823fa:	007f      	lsls	r7, r7, #1
   823fc:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82400:	e784      	b.n	8230c <_free_r+0xa4>
   82402:	f240 5054 	movw	r0, #1364	; 0x554
   82406:	4282      	cmp	r2, r0
   82408:	d806      	bhi.n	82418 <_free_r+0x1b0>
   8240a:	0c9a      	lsrs	r2, r3, #18
   8240c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82410:	007f      	lsls	r7, r7, #1
   82412:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82416:	e779      	b.n	8230c <_free_r+0xa4>
   82418:	27fe      	movs	r7, #254	; 0xfe
   8241a:	257e      	movs	r5, #126	; 0x7e
   8241c:	e776      	b.n	8230c <_free_r+0xa4>
   8241e:	f043 0201 	orr.w	r2, r3, #1
   82422:	6062      	str	r2, [r4, #4]
   82424:	50e3      	str	r3, [r4, r3]
   82426:	e762      	b.n	822ee <_free_r+0x86>
   82428:	20070580 	.word	0x20070580
   8242c:	20070588 	.word	0x20070588
   82430:	20070988 	.word	0x20070988
   82434:	20070a50 	.word	0x20070a50

00082438 <__sfvwrite_r>:
   82438:	6893      	ldr	r3, [r2, #8]
   8243a:	2b00      	cmp	r3, #0
   8243c:	f000 80ab 	beq.w	82596 <__sfvwrite_r+0x15e>
   82440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82444:	898b      	ldrh	r3, [r1, #12]
   82446:	b085      	sub	sp, #20
   82448:	460c      	mov	r4, r1
   8244a:	0719      	lsls	r1, r3, #28
   8244c:	9002      	str	r0, [sp, #8]
   8244e:	4616      	mov	r6, r2
   82450:	d528      	bpl.n	824a4 <__sfvwrite_r+0x6c>
   82452:	6922      	ldr	r2, [r4, #16]
   82454:	b332      	cbz	r2, 824a4 <__sfvwrite_r+0x6c>
   82456:	f003 0802 	and.w	r8, r3, #2
   8245a:	fa1f f088 	uxth.w	r0, r8
   8245e:	6835      	ldr	r5, [r6, #0]
   82460:	b378      	cbz	r0, 824c2 <__sfvwrite_r+0x8a>
   82462:	f04f 0900 	mov.w	r9, #0
   82466:	46c8      	mov	r8, r9
   82468:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8273c <__sfvwrite_r+0x304>
   8246c:	f1b8 0f00 	cmp.w	r8, #0
   82470:	f000 808b 	beq.w	8258a <__sfvwrite_r+0x152>
   82474:	45d0      	cmp	r8, sl
   82476:	4643      	mov	r3, r8
   82478:	464a      	mov	r2, r9
   8247a:	bf28      	it	cs
   8247c:	4653      	movcs	r3, sl
   8247e:	69e1      	ldr	r1, [r4, #28]
   82480:	9802      	ldr	r0, [sp, #8]
   82482:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82484:	47b8      	blx	r7
   82486:	2800      	cmp	r0, #0
   82488:	f340 80a5 	ble.w	825d6 <__sfvwrite_r+0x19e>
   8248c:	68b3      	ldr	r3, [r6, #8]
   8248e:	4481      	add	r9, r0
   82490:	1a1b      	subs	r3, r3, r0
   82492:	ebc0 0808 	rsb	r8, r0, r8
   82496:	60b3      	str	r3, [r6, #8]
   82498:	2b00      	cmp	r3, #0
   8249a:	d1e7      	bne.n	8246c <__sfvwrite_r+0x34>
   8249c:	2000      	movs	r0, #0
   8249e:	b005      	add	sp, #20
   824a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824a4:	4621      	mov	r1, r4
   824a6:	9802      	ldr	r0, [sp, #8]
   824a8:	f7ff fc6a 	bl	81d80 <__swsetup_r>
   824ac:	2800      	cmp	r0, #0
   824ae:	f040 813c 	bne.w	8272a <__sfvwrite_r+0x2f2>
   824b2:	89a3      	ldrh	r3, [r4, #12]
   824b4:	6835      	ldr	r5, [r6, #0]
   824b6:	f003 0802 	and.w	r8, r3, #2
   824ba:	fa1f f088 	uxth.w	r0, r8
   824be:	2800      	cmp	r0, #0
   824c0:	d1cf      	bne.n	82462 <__sfvwrite_r+0x2a>
   824c2:	f013 0901 	ands.w	r9, r3, #1
   824c6:	f040 8090 	bne.w	825ea <__sfvwrite_r+0x1b2>
   824ca:	464f      	mov	r7, r9
   824cc:	9601      	str	r6, [sp, #4]
   824ce:	2f00      	cmp	r7, #0
   824d0:	d056      	beq.n	82580 <__sfvwrite_r+0x148>
   824d2:	059a      	lsls	r2, r3, #22
   824d4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   824d8:	d55f      	bpl.n	8259a <__sfvwrite_r+0x162>
   824da:	4547      	cmp	r7, r8
   824dc:	46c2      	mov	sl, r8
   824de:	f0c0 80bf 	bcc.w	82660 <__sfvwrite_r+0x228>
   824e2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   824e6:	f000 80bd 	beq.w	82664 <__sfvwrite_r+0x22c>
   824ea:	6962      	ldr	r2, [r4, #20]
   824ec:	6820      	ldr	r0, [r4, #0]
   824ee:	6921      	ldr	r1, [r4, #16]
   824f0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   824f4:	ebc1 0a00 	rsb	sl, r1, r0
   824f8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   824fc:	f10a 0001 	add.w	r0, sl, #1
   82500:	ea4f 0868 	mov.w	r8, r8, asr #1
   82504:	4438      	add	r0, r7
   82506:	4540      	cmp	r0, r8
   82508:	4642      	mov	r2, r8
   8250a:	bf84      	itt	hi
   8250c:	4680      	movhi	r8, r0
   8250e:	4642      	movhi	r2, r8
   82510:	055b      	lsls	r3, r3, #21
   82512:	f140 80f2 	bpl.w	826fa <__sfvwrite_r+0x2c2>
   82516:	4611      	mov	r1, r2
   82518:	9802      	ldr	r0, [sp, #8]
   8251a:	f000 f9bf 	bl	8289c <_malloc_r>
   8251e:	4683      	mov	fp, r0
   82520:	2800      	cmp	r0, #0
   82522:	f000 8105 	beq.w	82730 <__sfvwrite_r+0x2f8>
   82526:	4652      	mov	r2, sl
   82528:	6921      	ldr	r1, [r4, #16]
   8252a:	f000 fca9 	bl	82e80 <memcpy>
   8252e:	89a3      	ldrh	r3, [r4, #12]
   82530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82538:	81a3      	strh	r3, [r4, #12]
   8253a:	ebca 0308 	rsb	r3, sl, r8
   8253e:	eb0b 000a 	add.w	r0, fp, sl
   82542:	f8c4 8014 	str.w	r8, [r4, #20]
   82546:	46ba      	mov	sl, r7
   82548:	46b8      	mov	r8, r7
   8254a:	f8c4 b010 	str.w	fp, [r4, #16]
   8254e:	6020      	str	r0, [r4, #0]
   82550:	60a3      	str	r3, [r4, #8]
   82552:	4652      	mov	r2, sl
   82554:	4649      	mov	r1, r9
   82556:	f000 fd09 	bl	82f6c <memmove>
   8255a:	68a0      	ldr	r0, [r4, #8]
   8255c:	6823      	ldr	r3, [r4, #0]
   8255e:	ebc8 0000 	rsb	r0, r8, r0
   82562:	60a0      	str	r0, [r4, #8]
   82564:	4638      	mov	r0, r7
   82566:	4453      	add	r3, sl
   82568:	6023      	str	r3, [r4, #0]
   8256a:	9a01      	ldr	r2, [sp, #4]
   8256c:	4481      	add	r9, r0
   8256e:	6893      	ldr	r3, [r2, #8]
   82570:	1a3f      	subs	r7, r7, r0
   82572:	1a1b      	subs	r3, r3, r0
   82574:	6093      	str	r3, [r2, #8]
   82576:	2b00      	cmp	r3, #0
   82578:	d090      	beq.n	8249c <__sfvwrite_r+0x64>
   8257a:	89a3      	ldrh	r3, [r4, #12]
   8257c:	2f00      	cmp	r7, #0
   8257e:	d1a8      	bne.n	824d2 <__sfvwrite_r+0x9a>
   82580:	f8d5 9000 	ldr.w	r9, [r5]
   82584:	686f      	ldr	r7, [r5, #4]
   82586:	3508      	adds	r5, #8
   82588:	e7a1      	b.n	824ce <__sfvwrite_r+0x96>
   8258a:	f8d5 9000 	ldr.w	r9, [r5]
   8258e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82592:	3508      	adds	r5, #8
   82594:	e76a      	b.n	8246c <__sfvwrite_r+0x34>
   82596:	2000      	movs	r0, #0
   82598:	4770      	bx	lr
   8259a:	6820      	ldr	r0, [r4, #0]
   8259c:	6923      	ldr	r3, [r4, #16]
   8259e:	4298      	cmp	r0, r3
   825a0:	d803      	bhi.n	825aa <__sfvwrite_r+0x172>
   825a2:	6962      	ldr	r2, [r4, #20]
   825a4:	4297      	cmp	r7, r2
   825a6:	f080 8083 	bcs.w	826b0 <__sfvwrite_r+0x278>
   825aa:	45b8      	cmp	r8, r7
   825ac:	bf28      	it	cs
   825ae:	46b8      	movcs	r8, r7
   825b0:	4649      	mov	r1, r9
   825b2:	4642      	mov	r2, r8
   825b4:	f000 fcda 	bl	82f6c <memmove>
   825b8:	68a3      	ldr	r3, [r4, #8]
   825ba:	6822      	ldr	r2, [r4, #0]
   825bc:	ebc8 0303 	rsb	r3, r8, r3
   825c0:	4442      	add	r2, r8
   825c2:	60a3      	str	r3, [r4, #8]
   825c4:	6022      	str	r2, [r4, #0]
   825c6:	2b00      	cmp	r3, #0
   825c8:	d148      	bne.n	8265c <__sfvwrite_r+0x224>
   825ca:	4621      	mov	r1, r4
   825cc:	9802      	ldr	r0, [sp, #8]
   825ce:	f7ff fcef 	bl	81fb0 <_fflush_r>
   825d2:	2800      	cmp	r0, #0
   825d4:	d042      	beq.n	8265c <__sfvwrite_r+0x224>
   825d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   825da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825de:	f04f 30ff 	mov.w	r0, #4294967295
   825e2:	81a3      	strh	r3, [r4, #12]
   825e4:	b005      	add	sp, #20
   825e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825ea:	4680      	mov	r8, r0
   825ec:	4682      	mov	sl, r0
   825ee:	4681      	mov	r9, r0
   825f0:	9001      	str	r0, [sp, #4]
   825f2:	f1b9 0f00 	cmp.w	r9, #0
   825f6:	d029      	beq.n	8264c <__sfvwrite_r+0x214>
   825f8:	9b01      	ldr	r3, [sp, #4]
   825fa:	2b00      	cmp	r3, #0
   825fc:	d04b      	beq.n	82696 <__sfvwrite_r+0x25e>
   825fe:	45c8      	cmp	r8, r9
   82600:	46c3      	mov	fp, r8
   82602:	bf28      	it	cs
   82604:	46cb      	movcs	fp, r9
   82606:	6820      	ldr	r0, [r4, #0]
   82608:	6923      	ldr	r3, [r4, #16]
   8260a:	465f      	mov	r7, fp
   8260c:	4298      	cmp	r0, r3
   8260e:	6962      	ldr	r2, [r4, #20]
   82610:	d903      	bls.n	8261a <__sfvwrite_r+0x1e2>
   82612:	68a3      	ldr	r3, [r4, #8]
   82614:	4413      	add	r3, r2
   82616:	459b      	cmp	fp, r3
   82618:	dc5c      	bgt.n	826d4 <__sfvwrite_r+0x29c>
   8261a:	4593      	cmp	fp, r2
   8261c:	db24      	blt.n	82668 <__sfvwrite_r+0x230>
   8261e:	4613      	mov	r3, r2
   82620:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82622:	4652      	mov	r2, sl
   82624:	69e1      	ldr	r1, [r4, #28]
   82626:	9802      	ldr	r0, [sp, #8]
   82628:	47b8      	blx	r7
   8262a:	1e07      	subs	r7, r0, #0
   8262c:	ddd3      	ble.n	825d6 <__sfvwrite_r+0x19e>
   8262e:	ebb8 0807 	subs.w	r8, r8, r7
   82632:	d027      	beq.n	82684 <__sfvwrite_r+0x24c>
   82634:	68b3      	ldr	r3, [r6, #8]
   82636:	44ba      	add	sl, r7
   82638:	1bdb      	subs	r3, r3, r7
   8263a:	ebc7 0909 	rsb	r9, r7, r9
   8263e:	60b3      	str	r3, [r6, #8]
   82640:	2b00      	cmp	r3, #0
   82642:	f43f af2b 	beq.w	8249c <__sfvwrite_r+0x64>
   82646:	f1b9 0f00 	cmp.w	r9, #0
   8264a:	d1d5      	bne.n	825f8 <__sfvwrite_r+0x1c0>
   8264c:	2300      	movs	r3, #0
   8264e:	f8d5 a000 	ldr.w	sl, [r5]
   82652:	f8d5 9004 	ldr.w	r9, [r5, #4]
   82656:	9301      	str	r3, [sp, #4]
   82658:	3508      	adds	r5, #8
   8265a:	e7ca      	b.n	825f2 <__sfvwrite_r+0x1ba>
   8265c:	4640      	mov	r0, r8
   8265e:	e784      	b.n	8256a <__sfvwrite_r+0x132>
   82660:	46b8      	mov	r8, r7
   82662:	46ba      	mov	sl, r7
   82664:	6820      	ldr	r0, [r4, #0]
   82666:	e774      	b.n	82552 <__sfvwrite_r+0x11a>
   82668:	465a      	mov	r2, fp
   8266a:	4651      	mov	r1, sl
   8266c:	f000 fc7e 	bl	82f6c <memmove>
   82670:	68a2      	ldr	r2, [r4, #8]
   82672:	6823      	ldr	r3, [r4, #0]
   82674:	ebcb 0202 	rsb	r2, fp, r2
   82678:	445b      	add	r3, fp
   8267a:	ebb8 0807 	subs.w	r8, r8, r7
   8267e:	60a2      	str	r2, [r4, #8]
   82680:	6023      	str	r3, [r4, #0]
   82682:	d1d7      	bne.n	82634 <__sfvwrite_r+0x1fc>
   82684:	4621      	mov	r1, r4
   82686:	9802      	ldr	r0, [sp, #8]
   82688:	f7ff fc92 	bl	81fb0 <_fflush_r>
   8268c:	2800      	cmp	r0, #0
   8268e:	d1a2      	bne.n	825d6 <__sfvwrite_r+0x19e>
   82690:	f8cd 8004 	str.w	r8, [sp, #4]
   82694:	e7ce      	b.n	82634 <__sfvwrite_r+0x1fc>
   82696:	464a      	mov	r2, r9
   82698:	210a      	movs	r1, #10
   8269a:	4650      	mov	r0, sl
   8269c:	f000 fbaa 	bl	82df4 <memchr>
   826a0:	2800      	cmp	r0, #0
   826a2:	d03d      	beq.n	82720 <__sfvwrite_r+0x2e8>
   826a4:	3001      	adds	r0, #1
   826a6:	2301      	movs	r3, #1
   826a8:	ebca 0800 	rsb	r8, sl, r0
   826ac:	9301      	str	r3, [sp, #4]
   826ae:	e7a6      	b.n	825fe <__sfvwrite_r+0x1c6>
   826b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   826b4:	42bb      	cmp	r3, r7
   826b6:	bf28      	it	cs
   826b8:	463b      	movcs	r3, r7
   826ba:	fb93 f3f2 	sdiv	r3, r3, r2
   826be:	69e1      	ldr	r1, [r4, #28]
   826c0:	fb02 f303 	mul.w	r3, r2, r3
   826c4:	9802      	ldr	r0, [sp, #8]
   826c6:	464a      	mov	r2, r9
   826c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   826ca:	47b0      	blx	r6
   826cc:	2800      	cmp	r0, #0
   826ce:	f73f af4c 	bgt.w	8256a <__sfvwrite_r+0x132>
   826d2:	e780      	b.n	825d6 <__sfvwrite_r+0x19e>
   826d4:	461a      	mov	r2, r3
   826d6:	4651      	mov	r1, sl
   826d8:	9303      	str	r3, [sp, #12]
   826da:	f000 fc47 	bl	82f6c <memmove>
   826de:	6822      	ldr	r2, [r4, #0]
   826e0:	9b03      	ldr	r3, [sp, #12]
   826e2:	4621      	mov	r1, r4
   826e4:	441a      	add	r2, r3
   826e6:	6022      	str	r2, [r4, #0]
   826e8:	9802      	ldr	r0, [sp, #8]
   826ea:	f7ff fc61 	bl	81fb0 <_fflush_r>
   826ee:	9b03      	ldr	r3, [sp, #12]
   826f0:	2800      	cmp	r0, #0
   826f2:	f47f af70 	bne.w	825d6 <__sfvwrite_r+0x19e>
   826f6:	461f      	mov	r7, r3
   826f8:	e799      	b.n	8262e <__sfvwrite_r+0x1f6>
   826fa:	9802      	ldr	r0, [sp, #8]
   826fc:	f000 fc9e 	bl	8303c <_realloc_r>
   82700:	4683      	mov	fp, r0
   82702:	2800      	cmp	r0, #0
   82704:	f47f af19 	bne.w	8253a <__sfvwrite_r+0x102>
   82708:	9d02      	ldr	r5, [sp, #8]
   8270a:	6921      	ldr	r1, [r4, #16]
   8270c:	4628      	mov	r0, r5
   8270e:	f7ff fdab 	bl	82268 <_free_r>
   82712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82716:	220c      	movs	r2, #12
   82718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8271c:	602a      	str	r2, [r5, #0]
   8271e:	e75c      	b.n	825da <__sfvwrite_r+0x1a2>
   82720:	2301      	movs	r3, #1
   82722:	f109 0801 	add.w	r8, r9, #1
   82726:	9301      	str	r3, [sp, #4]
   82728:	e769      	b.n	825fe <__sfvwrite_r+0x1c6>
   8272a:	f04f 30ff 	mov.w	r0, #4294967295
   8272e:	e6b6      	b.n	8249e <__sfvwrite_r+0x66>
   82730:	9a02      	ldr	r2, [sp, #8]
   82732:	230c      	movs	r3, #12
   82734:	6013      	str	r3, [r2, #0]
   82736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8273a:	e74e      	b.n	825da <__sfvwrite_r+0x1a2>
   8273c:	7ffffc00 	.word	0x7ffffc00

00082740 <_fwalk_reent>:
   82740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82744:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82748:	d01e      	beq.n	82788 <_fwalk_reent+0x48>
   8274a:	4688      	mov	r8, r1
   8274c:	4607      	mov	r7, r0
   8274e:	f04f 0900 	mov.w	r9, #0
   82752:	6875      	ldr	r5, [r6, #4]
   82754:	68b4      	ldr	r4, [r6, #8]
   82756:	3d01      	subs	r5, #1
   82758:	d410      	bmi.n	8277c <_fwalk_reent+0x3c>
   8275a:	89a3      	ldrh	r3, [r4, #12]
   8275c:	3d01      	subs	r5, #1
   8275e:	2b01      	cmp	r3, #1
   82760:	d908      	bls.n	82774 <_fwalk_reent+0x34>
   82762:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82766:	3301      	adds	r3, #1
   82768:	d004      	beq.n	82774 <_fwalk_reent+0x34>
   8276a:	4621      	mov	r1, r4
   8276c:	4638      	mov	r0, r7
   8276e:	47c0      	blx	r8
   82770:	ea49 0900 	orr.w	r9, r9, r0
   82774:	1c6b      	adds	r3, r5, #1
   82776:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8277a:	d1ee      	bne.n	8275a <_fwalk_reent+0x1a>
   8277c:	6836      	ldr	r6, [r6, #0]
   8277e:	2e00      	cmp	r6, #0
   82780:	d1e7      	bne.n	82752 <_fwalk_reent+0x12>
   82782:	4648      	mov	r0, r9
   82784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82788:	46b1      	mov	r9, r6
   8278a:	4648      	mov	r0, r9
   8278c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082790 <__locale_charset>:
   82790:	4800      	ldr	r0, [pc, #0]	; (82794 <__locale_charset+0x4>)
   82792:	4770      	bx	lr
   82794:	2007055c 	.word	0x2007055c

00082798 <__locale_mb_cur_max>:
   82798:	4b01      	ldr	r3, [pc, #4]	; (827a0 <__locale_mb_cur_max+0x8>)
   8279a:	6818      	ldr	r0, [r3, #0]
   8279c:	4770      	bx	lr
   8279e:	bf00      	nop
   827a0:	2007057c 	.word	0x2007057c

000827a4 <__swhatbuf_r>:
   827a4:	b570      	push	{r4, r5, r6, lr}
   827a6:	460e      	mov	r6, r1
   827a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   827ac:	b090      	sub	sp, #64	; 0x40
   827ae:	2900      	cmp	r1, #0
   827b0:	4614      	mov	r4, r2
   827b2:	461d      	mov	r5, r3
   827b4:	db14      	blt.n	827e0 <__swhatbuf_r+0x3c>
   827b6:	aa01      	add	r2, sp, #4
   827b8:	f000 fff8 	bl	837ac <_fstat_r>
   827bc:	2800      	cmp	r0, #0
   827be:	db0f      	blt.n	827e0 <__swhatbuf_r+0x3c>
   827c0:	9a02      	ldr	r2, [sp, #8]
   827c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   827c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   827ca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   827ce:	fab2 f282 	clz	r2, r2
   827d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   827d6:	0952      	lsrs	r2, r2, #5
   827d8:	602a      	str	r2, [r5, #0]
   827da:	6023      	str	r3, [r4, #0]
   827dc:	b010      	add	sp, #64	; 0x40
   827de:	bd70      	pop	{r4, r5, r6, pc}
   827e0:	89b2      	ldrh	r2, [r6, #12]
   827e2:	2000      	movs	r0, #0
   827e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   827e8:	b292      	uxth	r2, r2
   827ea:	6028      	str	r0, [r5, #0]
   827ec:	b11a      	cbz	r2, 827f6 <__swhatbuf_r+0x52>
   827ee:	2340      	movs	r3, #64	; 0x40
   827f0:	6023      	str	r3, [r4, #0]
   827f2:	b010      	add	sp, #64	; 0x40
   827f4:	bd70      	pop	{r4, r5, r6, pc}
   827f6:	4610      	mov	r0, r2
   827f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   827fc:	6023      	str	r3, [r4, #0]
   827fe:	b010      	add	sp, #64	; 0x40
   82800:	bd70      	pop	{r4, r5, r6, pc}
   82802:	bf00      	nop

00082804 <__smakebuf_r>:
   82804:	898a      	ldrh	r2, [r1, #12]
   82806:	460b      	mov	r3, r1
   82808:	0792      	lsls	r2, r2, #30
   8280a:	d506      	bpl.n	8281a <__smakebuf_r+0x16>
   8280c:	f101 0243 	add.w	r2, r1, #67	; 0x43
   82810:	2101      	movs	r1, #1
   82812:	601a      	str	r2, [r3, #0]
   82814:	611a      	str	r2, [r3, #16]
   82816:	6159      	str	r1, [r3, #20]
   82818:	4770      	bx	lr
   8281a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8281c:	b083      	sub	sp, #12
   8281e:	ab01      	add	r3, sp, #4
   82820:	466a      	mov	r2, sp
   82822:	460c      	mov	r4, r1
   82824:	4605      	mov	r5, r0
   82826:	f7ff ffbd 	bl	827a4 <__swhatbuf_r>
   8282a:	9900      	ldr	r1, [sp, #0]
   8282c:	4606      	mov	r6, r0
   8282e:	4628      	mov	r0, r5
   82830:	f000 f834 	bl	8289c <_malloc_r>
   82834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82838:	b1d0      	cbz	r0, 82870 <__smakebuf_r+0x6c>
   8283a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8283e:	4f12      	ldr	r7, [pc, #72]	; (82888 <__smakebuf_r+0x84>)
   82840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82844:	63ef      	str	r7, [r5, #60]	; 0x3c
   82846:	81a3      	strh	r3, [r4, #12]
   82848:	6020      	str	r0, [r4, #0]
   8284a:	6120      	str	r0, [r4, #16]
   8284c:	6161      	str	r1, [r4, #20]
   8284e:	b91a      	cbnz	r2, 82858 <__smakebuf_r+0x54>
   82850:	4333      	orrs	r3, r6
   82852:	81a3      	strh	r3, [r4, #12]
   82854:	b003      	add	sp, #12
   82856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82858:	4628      	mov	r0, r5
   8285a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8285e:	f000 ffb9 	bl	837d4 <_isatty_r>
   82862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82866:	2800      	cmp	r0, #0
   82868:	d0f2      	beq.n	82850 <__smakebuf_r+0x4c>
   8286a:	f043 0301 	orr.w	r3, r3, #1
   8286e:	e7ef      	b.n	82850 <__smakebuf_r+0x4c>
   82870:	059a      	lsls	r2, r3, #22
   82872:	d4ef      	bmi.n	82854 <__smakebuf_r+0x50>
   82874:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82878:	f043 0302 	orr.w	r3, r3, #2
   8287c:	2101      	movs	r1, #1
   8287e:	81a3      	strh	r3, [r4, #12]
   82880:	6022      	str	r2, [r4, #0]
   82882:	6122      	str	r2, [r4, #16]
   82884:	6161      	str	r1, [r4, #20]
   82886:	e7e5      	b.n	82854 <__smakebuf_r+0x50>
   82888:	00081fdd 	.word	0x00081fdd

0008288c <malloc>:
   8288c:	4b02      	ldr	r3, [pc, #8]	; (82898 <malloc+0xc>)
   8288e:	4601      	mov	r1, r0
   82890:	6818      	ldr	r0, [r3, #0]
   82892:	f000 b803 	b.w	8289c <_malloc_r>
   82896:	bf00      	nop
   82898:	20070558 	.word	0x20070558

0008289c <_malloc_r>:
   8289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828a0:	f101 050b 	add.w	r5, r1, #11
   828a4:	2d16      	cmp	r5, #22
   828a6:	b083      	sub	sp, #12
   828a8:	4606      	mov	r6, r0
   828aa:	f240 80a0 	bls.w	829ee <_malloc_r+0x152>
   828ae:	f035 0507 	bics.w	r5, r5, #7
   828b2:	f100 80c0 	bmi.w	82a36 <_malloc_r+0x19a>
   828b6:	42a9      	cmp	r1, r5
   828b8:	f200 80bd 	bhi.w	82a36 <_malloc_r+0x19a>
   828bc:	f000 fbba 	bl	83034 <__malloc_lock>
   828c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   828c4:	f0c0 8290 	bcc.w	82de8 <_malloc_r+0x54c>
   828c8:	0a6b      	lsrs	r3, r5, #9
   828ca:	f000 80bb 	beq.w	82a44 <_malloc_r+0x1a8>
   828ce:	2b04      	cmp	r3, #4
   828d0:	f200 8177 	bhi.w	82bc2 <_malloc_r+0x326>
   828d4:	09a8      	lsrs	r0, r5, #6
   828d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   828da:	ea4f 014e 	mov.w	r1, lr, lsl #1
   828de:	3038      	adds	r0, #56	; 0x38
   828e0:	4fbe      	ldr	r7, [pc, #760]	; (82bdc <_malloc_r+0x340>)
   828e2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   828e6:	684c      	ldr	r4, [r1, #4]
   828e8:	3908      	subs	r1, #8
   828ea:	42a1      	cmp	r1, r4
   828ec:	d107      	bne.n	828fe <_malloc_r+0x62>
   828ee:	e0ae      	b.n	82a4e <_malloc_r+0x1b2>
   828f0:	2a00      	cmp	r2, #0
   828f2:	f280 80ae 	bge.w	82a52 <_malloc_r+0x1b6>
   828f6:	68e4      	ldr	r4, [r4, #12]
   828f8:	42a1      	cmp	r1, r4
   828fa:	f000 80a8 	beq.w	82a4e <_malloc_r+0x1b2>
   828fe:	6863      	ldr	r3, [r4, #4]
   82900:	f023 0303 	bic.w	r3, r3, #3
   82904:	1b5a      	subs	r2, r3, r5
   82906:	2a0f      	cmp	r2, #15
   82908:	ddf2      	ble.n	828f0 <_malloc_r+0x54>
   8290a:	49b4      	ldr	r1, [pc, #720]	; (82bdc <_malloc_r+0x340>)
   8290c:	693c      	ldr	r4, [r7, #16]
   8290e:	f101 0e08 	add.w	lr, r1, #8
   82912:	4574      	cmp	r4, lr
   82914:	f000 81a8 	beq.w	82c68 <_malloc_r+0x3cc>
   82918:	6863      	ldr	r3, [r4, #4]
   8291a:	f023 0303 	bic.w	r3, r3, #3
   8291e:	1b5a      	subs	r2, r3, r5
   82920:	2a0f      	cmp	r2, #15
   82922:	f300 818e 	bgt.w	82c42 <_malloc_r+0x3a6>
   82926:	2a00      	cmp	r2, #0
   82928:	f8c1 e014 	str.w	lr, [r1, #20]
   8292c:	f8c1 e010 	str.w	lr, [r1, #16]
   82930:	f280 8093 	bge.w	82a5a <_malloc_r+0x1be>
   82934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82938:	f080 815c 	bcs.w	82bf4 <_malloc_r+0x358>
   8293c:	08db      	lsrs	r3, r3, #3
   8293e:	684a      	ldr	r2, [r1, #4]
   82940:	ea4f 09a3 	mov.w	r9, r3, asr #2
   82944:	f04f 0c01 	mov.w	ip, #1
   82948:	3301      	adds	r3, #1
   8294a:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   8294e:	fa0c f909 	lsl.w	r9, ip, r9
   82952:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   82956:	ea49 0202 	orr.w	r2, r9, r2
   8295a:	f1ac 0c08 	sub.w	ip, ip, #8
   8295e:	f8c4 c00c 	str.w	ip, [r4, #12]
   82962:	f8c4 8008 	str.w	r8, [r4, #8]
   82966:	604a      	str	r2, [r1, #4]
   82968:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8296c:	f8c8 400c 	str.w	r4, [r8, #12]
   82970:	1083      	asrs	r3, r0, #2
   82972:	2401      	movs	r4, #1
   82974:	409c      	lsls	r4, r3
   82976:	4294      	cmp	r4, r2
   82978:	d87c      	bhi.n	82a74 <_malloc_r+0x1d8>
   8297a:	4214      	tst	r4, r2
   8297c:	d106      	bne.n	8298c <_malloc_r+0xf0>
   8297e:	f020 0003 	bic.w	r0, r0, #3
   82982:	0064      	lsls	r4, r4, #1
   82984:	4214      	tst	r4, r2
   82986:	f100 0004 	add.w	r0, r0, #4
   8298a:	d0fa      	beq.n	82982 <_malloc_r+0xe6>
   8298c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82990:	46cc      	mov	ip, r9
   82992:	4680      	mov	r8, r0
   82994:	f8dc 100c 	ldr.w	r1, [ip, #12]
   82998:	458c      	cmp	ip, r1
   8299a:	d107      	bne.n	829ac <_malloc_r+0x110>
   8299c:	e166      	b.n	82c6c <_malloc_r+0x3d0>
   8299e:	2a00      	cmp	r2, #0
   829a0:	f280 8174 	bge.w	82c8c <_malloc_r+0x3f0>
   829a4:	68c9      	ldr	r1, [r1, #12]
   829a6:	458c      	cmp	ip, r1
   829a8:	f000 8160 	beq.w	82c6c <_malloc_r+0x3d0>
   829ac:	684b      	ldr	r3, [r1, #4]
   829ae:	f023 0303 	bic.w	r3, r3, #3
   829b2:	1b5a      	subs	r2, r3, r5
   829b4:	2a0f      	cmp	r2, #15
   829b6:	ddf2      	ble.n	8299e <_malloc_r+0x102>
   829b8:	460c      	mov	r4, r1
   829ba:	68cb      	ldr	r3, [r1, #12]
   829bc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   829c0:	f045 0801 	orr.w	r8, r5, #1
   829c4:	f8c1 8004 	str.w	r8, [r1, #4]
   829c8:	440d      	add	r5, r1
   829ca:	f042 0101 	orr.w	r1, r2, #1
   829ce:	f8cc 300c 	str.w	r3, [ip, #12]
   829d2:	4630      	mov	r0, r6
   829d4:	f8c3 c008 	str.w	ip, [r3, #8]
   829d8:	617d      	str	r5, [r7, #20]
   829da:	613d      	str	r5, [r7, #16]
   829dc:	f8c5 e00c 	str.w	lr, [r5, #12]
   829e0:	f8c5 e008 	str.w	lr, [r5, #8]
   829e4:	6069      	str	r1, [r5, #4]
   829e6:	50aa      	str	r2, [r5, r2]
   829e8:	f000 fb26 	bl	83038 <__malloc_unlock>
   829ec:	e01f      	b.n	82a2e <_malloc_r+0x192>
   829ee:	2910      	cmp	r1, #16
   829f0:	d821      	bhi.n	82a36 <_malloc_r+0x19a>
   829f2:	f000 fb1f 	bl	83034 <__malloc_lock>
   829f6:	2510      	movs	r5, #16
   829f8:	2306      	movs	r3, #6
   829fa:	2002      	movs	r0, #2
   829fc:	4f77      	ldr	r7, [pc, #476]	; (82bdc <_malloc_r+0x340>)
   829fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   82a02:	685c      	ldr	r4, [r3, #4]
   82a04:	f1a3 0208 	sub.w	r2, r3, #8
   82a08:	4294      	cmp	r4, r2
   82a0a:	f000 8138 	beq.w	82c7e <_malloc_r+0x3e2>
   82a0e:	6863      	ldr	r3, [r4, #4]
   82a10:	68e1      	ldr	r1, [r4, #12]
   82a12:	f023 0303 	bic.w	r3, r3, #3
   82a16:	4423      	add	r3, r4
   82a18:	685a      	ldr	r2, [r3, #4]
   82a1a:	68a5      	ldr	r5, [r4, #8]
   82a1c:	f042 0201 	orr.w	r2, r2, #1
   82a20:	60e9      	str	r1, [r5, #12]
   82a22:	4630      	mov	r0, r6
   82a24:	608d      	str	r5, [r1, #8]
   82a26:	605a      	str	r2, [r3, #4]
   82a28:	f000 fb06 	bl	83038 <__malloc_unlock>
   82a2c:	3408      	adds	r4, #8
   82a2e:	4620      	mov	r0, r4
   82a30:	b003      	add	sp, #12
   82a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a36:	2400      	movs	r4, #0
   82a38:	4620      	mov	r0, r4
   82a3a:	230c      	movs	r3, #12
   82a3c:	6033      	str	r3, [r6, #0]
   82a3e:	b003      	add	sp, #12
   82a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a44:	2180      	movs	r1, #128	; 0x80
   82a46:	f04f 0e40 	mov.w	lr, #64	; 0x40
   82a4a:	203f      	movs	r0, #63	; 0x3f
   82a4c:	e748      	b.n	828e0 <_malloc_r+0x44>
   82a4e:	4670      	mov	r0, lr
   82a50:	e75b      	b.n	8290a <_malloc_r+0x6e>
   82a52:	4423      	add	r3, r4
   82a54:	685a      	ldr	r2, [r3, #4]
   82a56:	68e1      	ldr	r1, [r4, #12]
   82a58:	e7df      	b.n	82a1a <_malloc_r+0x17e>
   82a5a:	4423      	add	r3, r4
   82a5c:	685a      	ldr	r2, [r3, #4]
   82a5e:	4630      	mov	r0, r6
   82a60:	f042 0201 	orr.w	r2, r2, #1
   82a64:	605a      	str	r2, [r3, #4]
   82a66:	3408      	adds	r4, #8
   82a68:	f000 fae6 	bl	83038 <__malloc_unlock>
   82a6c:	4620      	mov	r0, r4
   82a6e:	b003      	add	sp, #12
   82a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a74:	68bc      	ldr	r4, [r7, #8]
   82a76:	6863      	ldr	r3, [r4, #4]
   82a78:	f023 0803 	bic.w	r8, r3, #3
   82a7c:	45a8      	cmp	r8, r5
   82a7e:	d304      	bcc.n	82a8a <_malloc_r+0x1ee>
   82a80:	ebc5 0308 	rsb	r3, r5, r8
   82a84:	2b0f      	cmp	r3, #15
   82a86:	f300 808c 	bgt.w	82ba2 <_malloc_r+0x306>
   82a8a:	4b55      	ldr	r3, [pc, #340]	; (82be0 <_malloc_r+0x344>)
   82a8c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 82bf0 <_malloc_r+0x354>
   82a90:	681a      	ldr	r2, [r3, #0]
   82a92:	f8d9 3000 	ldr.w	r3, [r9]
   82a96:	442a      	add	r2, r5
   82a98:	3301      	adds	r3, #1
   82a9a:	eb04 0a08 	add.w	sl, r4, r8
   82a9e:	f000 8160 	beq.w	82d62 <_malloc_r+0x4c6>
   82aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   82aa6:	320f      	adds	r2, #15
   82aa8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82aac:	f022 020f 	bic.w	r2, r2, #15
   82ab0:	4611      	mov	r1, r2
   82ab2:	4630      	mov	r0, r6
   82ab4:	9201      	str	r2, [sp, #4]
   82ab6:	f000 fcab 	bl	83410 <_sbrk_r>
   82aba:	f1b0 3fff 	cmp.w	r0, #4294967295
   82abe:	4683      	mov	fp, r0
   82ac0:	9a01      	ldr	r2, [sp, #4]
   82ac2:	f000 8158 	beq.w	82d76 <_malloc_r+0x4da>
   82ac6:	4582      	cmp	sl, r0
   82ac8:	f200 80fc 	bhi.w	82cc4 <_malloc_r+0x428>
   82acc:	4b45      	ldr	r3, [pc, #276]	; (82be4 <_malloc_r+0x348>)
   82ace:	45da      	cmp	sl, fp
   82ad0:	6819      	ldr	r1, [r3, #0]
   82ad2:	4411      	add	r1, r2
   82ad4:	6019      	str	r1, [r3, #0]
   82ad6:	f000 8153 	beq.w	82d80 <_malloc_r+0x4e4>
   82ada:	f8d9 0000 	ldr.w	r0, [r9]
   82ade:	f8df e110 	ldr.w	lr, [pc, #272]	; 82bf0 <_malloc_r+0x354>
   82ae2:	3001      	adds	r0, #1
   82ae4:	bf1b      	ittet	ne
   82ae6:	ebca 0a0b 	rsbne	sl, sl, fp
   82aea:	4451      	addne	r1, sl
   82aec:	f8ce b000 	streq.w	fp, [lr]
   82af0:	6019      	strne	r1, [r3, #0]
   82af2:	f01b 0107 	ands.w	r1, fp, #7
   82af6:	f000 8117 	beq.w	82d28 <_malloc_r+0x48c>
   82afa:	f1c1 0008 	rsb	r0, r1, #8
   82afe:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82b02:	4483      	add	fp, r0
   82b04:	3108      	adds	r1, #8
   82b06:	445a      	add	r2, fp
   82b08:	f3c2 020b 	ubfx	r2, r2, #0, #12
   82b0c:	ebc2 0901 	rsb	r9, r2, r1
   82b10:	4649      	mov	r1, r9
   82b12:	4630      	mov	r0, r6
   82b14:	9301      	str	r3, [sp, #4]
   82b16:	f000 fc7b 	bl	83410 <_sbrk_r>
   82b1a:	1c43      	adds	r3, r0, #1
   82b1c:	9b01      	ldr	r3, [sp, #4]
   82b1e:	f000 813f 	beq.w	82da0 <_malloc_r+0x504>
   82b22:	ebcb 0200 	rsb	r2, fp, r0
   82b26:	444a      	add	r2, r9
   82b28:	f042 0201 	orr.w	r2, r2, #1
   82b2c:	6819      	ldr	r1, [r3, #0]
   82b2e:	42bc      	cmp	r4, r7
   82b30:	4449      	add	r1, r9
   82b32:	f8c7 b008 	str.w	fp, [r7, #8]
   82b36:	6019      	str	r1, [r3, #0]
   82b38:	f8cb 2004 	str.w	r2, [fp, #4]
   82b3c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 82be4 <_malloc_r+0x348>
   82b40:	d016      	beq.n	82b70 <_malloc_r+0x2d4>
   82b42:	f1b8 0f0f 	cmp.w	r8, #15
   82b46:	f240 80fd 	bls.w	82d44 <_malloc_r+0x4a8>
   82b4a:	6862      	ldr	r2, [r4, #4]
   82b4c:	f1a8 030c 	sub.w	r3, r8, #12
   82b50:	f023 0307 	bic.w	r3, r3, #7
   82b54:	f002 0201 	and.w	r2, r2, #1
   82b58:	18e0      	adds	r0, r4, r3
   82b5a:	f04f 0e05 	mov.w	lr, #5
   82b5e:	431a      	orrs	r2, r3
   82b60:	2b0f      	cmp	r3, #15
   82b62:	6062      	str	r2, [r4, #4]
   82b64:	f8c0 e004 	str.w	lr, [r0, #4]
   82b68:	f8c0 e008 	str.w	lr, [r0, #8]
   82b6c:	f200 811c 	bhi.w	82da8 <_malloc_r+0x50c>
   82b70:	4b1d      	ldr	r3, [pc, #116]	; (82be8 <_malloc_r+0x34c>)
   82b72:	68bc      	ldr	r4, [r7, #8]
   82b74:	681a      	ldr	r2, [r3, #0]
   82b76:	4291      	cmp	r1, r2
   82b78:	bf88      	it	hi
   82b7a:	6019      	strhi	r1, [r3, #0]
   82b7c:	4b1b      	ldr	r3, [pc, #108]	; (82bec <_malloc_r+0x350>)
   82b7e:	681a      	ldr	r2, [r3, #0]
   82b80:	4291      	cmp	r1, r2
   82b82:	6862      	ldr	r2, [r4, #4]
   82b84:	bf88      	it	hi
   82b86:	6019      	strhi	r1, [r3, #0]
   82b88:	f022 0203 	bic.w	r2, r2, #3
   82b8c:	4295      	cmp	r5, r2
   82b8e:	eba2 0305 	sub.w	r3, r2, r5
   82b92:	d801      	bhi.n	82b98 <_malloc_r+0x2fc>
   82b94:	2b0f      	cmp	r3, #15
   82b96:	dc04      	bgt.n	82ba2 <_malloc_r+0x306>
   82b98:	4630      	mov	r0, r6
   82b9a:	f000 fa4d 	bl	83038 <__malloc_unlock>
   82b9e:	2400      	movs	r4, #0
   82ba0:	e745      	b.n	82a2e <_malloc_r+0x192>
   82ba2:	f045 0201 	orr.w	r2, r5, #1
   82ba6:	f043 0301 	orr.w	r3, r3, #1
   82baa:	4425      	add	r5, r4
   82bac:	6062      	str	r2, [r4, #4]
   82bae:	4630      	mov	r0, r6
   82bb0:	60bd      	str	r5, [r7, #8]
   82bb2:	3408      	adds	r4, #8
   82bb4:	606b      	str	r3, [r5, #4]
   82bb6:	f000 fa3f 	bl	83038 <__malloc_unlock>
   82bba:	4620      	mov	r0, r4
   82bbc:	b003      	add	sp, #12
   82bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bc2:	2b14      	cmp	r3, #20
   82bc4:	d971      	bls.n	82caa <_malloc_r+0x40e>
   82bc6:	2b54      	cmp	r3, #84	; 0x54
   82bc8:	f200 80a4 	bhi.w	82d14 <_malloc_r+0x478>
   82bcc:	0b28      	lsrs	r0, r5, #12
   82bce:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   82bd2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   82bd6:	306e      	adds	r0, #110	; 0x6e
   82bd8:	e682      	b.n	828e0 <_malloc_r+0x44>
   82bda:	bf00      	nop
   82bdc:	20070580 	.word	0x20070580
   82be0:	20070a50 	.word	0x20070a50
   82be4:	20070a54 	.word	0x20070a54
   82be8:	20070a4c 	.word	0x20070a4c
   82bec:	20070a48 	.word	0x20070a48
   82bf0:	2007098c 	.word	0x2007098c
   82bf4:	0a5a      	lsrs	r2, r3, #9
   82bf6:	2a04      	cmp	r2, #4
   82bf8:	d95e      	bls.n	82cb8 <_malloc_r+0x41c>
   82bfa:	2a14      	cmp	r2, #20
   82bfc:	f200 80b3 	bhi.w	82d66 <_malloc_r+0x4ca>
   82c00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82c04:	0049      	lsls	r1, r1, #1
   82c06:	325b      	adds	r2, #91	; 0x5b
   82c08:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   82c0c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   82c10:	f1ac 0c08 	sub.w	ip, ip, #8
   82c14:	458c      	cmp	ip, r1
   82c16:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 82df0 <_malloc_r+0x554>
   82c1a:	f000 8088 	beq.w	82d2e <_malloc_r+0x492>
   82c1e:	684a      	ldr	r2, [r1, #4]
   82c20:	f022 0203 	bic.w	r2, r2, #3
   82c24:	4293      	cmp	r3, r2
   82c26:	d202      	bcs.n	82c2e <_malloc_r+0x392>
   82c28:	6889      	ldr	r1, [r1, #8]
   82c2a:	458c      	cmp	ip, r1
   82c2c:	d1f7      	bne.n	82c1e <_malloc_r+0x382>
   82c2e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   82c32:	687a      	ldr	r2, [r7, #4]
   82c34:	f8c4 c00c 	str.w	ip, [r4, #12]
   82c38:	60a1      	str	r1, [r4, #8]
   82c3a:	f8cc 4008 	str.w	r4, [ip, #8]
   82c3e:	60cc      	str	r4, [r1, #12]
   82c40:	e696      	b.n	82970 <_malloc_r+0xd4>
   82c42:	f045 0701 	orr.w	r7, r5, #1
   82c46:	f042 0301 	orr.w	r3, r2, #1
   82c4a:	4425      	add	r5, r4
   82c4c:	6067      	str	r7, [r4, #4]
   82c4e:	4630      	mov	r0, r6
   82c50:	614d      	str	r5, [r1, #20]
   82c52:	610d      	str	r5, [r1, #16]
   82c54:	f8c5 e00c 	str.w	lr, [r5, #12]
   82c58:	f8c5 e008 	str.w	lr, [r5, #8]
   82c5c:	606b      	str	r3, [r5, #4]
   82c5e:	50aa      	str	r2, [r5, r2]
   82c60:	3408      	adds	r4, #8
   82c62:	f000 f9e9 	bl	83038 <__malloc_unlock>
   82c66:	e6e2      	b.n	82a2e <_malloc_r+0x192>
   82c68:	684a      	ldr	r2, [r1, #4]
   82c6a:	e681      	b.n	82970 <_malloc_r+0xd4>
   82c6c:	f108 0801 	add.w	r8, r8, #1
   82c70:	f018 0f03 	tst.w	r8, #3
   82c74:	f10c 0c08 	add.w	ip, ip, #8
   82c78:	f47f ae8c 	bne.w	82994 <_malloc_r+0xf8>
   82c7c:	e030      	b.n	82ce0 <_malloc_r+0x444>
   82c7e:	68dc      	ldr	r4, [r3, #12]
   82c80:	42a3      	cmp	r3, r4
   82c82:	bf08      	it	eq
   82c84:	3002      	addeq	r0, #2
   82c86:	f43f ae40 	beq.w	8290a <_malloc_r+0x6e>
   82c8a:	e6c0      	b.n	82a0e <_malloc_r+0x172>
   82c8c:	460c      	mov	r4, r1
   82c8e:	440b      	add	r3, r1
   82c90:	685a      	ldr	r2, [r3, #4]
   82c92:	68c9      	ldr	r1, [r1, #12]
   82c94:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82c98:	f042 0201 	orr.w	r2, r2, #1
   82c9c:	605a      	str	r2, [r3, #4]
   82c9e:	4630      	mov	r0, r6
   82ca0:	60e9      	str	r1, [r5, #12]
   82ca2:	608d      	str	r5, [r1, #8]
   82ca4:	f000 f9c8 	bl	83038 <__malloc_unlock>
   82ca8:	e6c1      	b.n	82a2e <_malloc_r+0x192>
   82caa:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   82cae:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   82cb2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   82cb6:	e613      	b.n	828e0 <_malloc_r+0x44>
   82cb8:	099a      	lsrs	r2, r3, #6
   82cba:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82cbe:	0049      	lsls	r1, r1, #1
   82cc0:	3238      	adds	r2, #56	; 0x38
   82cc2:	e7a1      	b.n	82c08 <_malloc_r+0x36c>
   82cc4:	42bc      	cmp	r4, r7
   82cc6:	4b4a      	ldr	r3, [pc, #296]	; (82df0 <_malloc_r+0x554>)
   82cc8:	f43f af00 	beq.w	82acc <_malloc_r+0x230>
   82ccc:	689c      	ldr	r4, [r3, #8]
   82cce:	6862      	ldr	r2, [r4, #4]
   82cd0:	f022 0203 	bic.w	r2, r2, #3
   82cd4:	e75a      	b.n	82b8c <_malloc_r+0x2f0>
   82cd6:	f859 3908 	ldr.w	r3, [r9], #-8
   82cda:	4599      	cmp	r9, r3
   82cdc:	f040 8082 	bne.w	82de4 <_malloc_r+0x548>
   82ce0:	f010 0f03 	tst.w	r0, #3
   82ce4:	f100 30ff 	add.w	r0, r0, #4294967295
   82ce8:	d1f5      	bne.n	82cd6 <_malloc_r+0x43a>
   82cea:	687b      	ldr	r3, [r7, #4]
   82cec:	ea23 0304 	bic.w	r3, r3, r4
   82cf0:	607b      	str	r3, [r7, #4]
   82cf2:	0064      	lsls	r4, r4, #1
   82cf4:	429c      	cmp	r4, r3
   82cf6:	f63f aebd 	bhi.w	82a74 <_malloc_r+0x1d8>
   82cfa:	2c00      	cmp	r4, #0
   82cfc:	f43f aeba 	beq.w	82a74 <_malloc_r+0x1d8>
   82d00:	421c      	tst	r4, r3
   82d02:	4640      	mov	r0, r8
   82d04:	f47f ae42 	bne.w	8298c <_malloc_r+0xf0>
   82d08:	0064      	lsls	r4, r4, #1
   82d0a:	421c      	tst	r4, r3
   82d0c:	f100 0004 	add.w	r0, r0, #4
   82d10:	d0fa      	beq.n	82d08 <_malloc_r+0x46c>
   82d12:	e63b      	b.n	8298c <_malloc_r+0xf0>
   82d14:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82d18:	d818      	bhi.n	82d4c <_malloc_r+0x4b0>
   82d1a:	0be8      	lsrs	r0, r5, #15
   82d1c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   82d20:	ea4f 014e 	mov.w	r1, lr, lsl #1
   82d24:	3077      	adds	r0, #119	; 0x77
   82d26:	e5db      	b.n	828e0 <_malloc_r+0x44>
   82d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82d2c:	e6eb      	b.n	82b06 <_malloc_r+0x26a>
   82d2e:	2101      	movs	r1, #1
   82d30:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82d34:	1092      	asrs	r2, r2, #2
   82d36:	fa01 f202 	lsl.w	r2, r1, r2
   82d3a:	431a      	orrs	r2, r3
   82d3c:	f8c8 2004 	str.w	r2, [r8, #4]
   82d40:	4661      	mov	r1, ip
   82d42:	e777      	b.n	82c34 <_malloc_r+0x398>
   82d44:	2301      	movs	r3, #1
   82d46:	f8cb 3004 	str.w	r3, [fp, #4]
   82d4a:	e725      	b.n	82b98 <_malloc_r+0x2fc>
   82d4c:	f240 5254 	movw	r2, #1364	; 0x554
   82d50:	4293      	cmp	r3, r2
   82d52:	d820      	bhi.n	82d96 <_malloc_r+0x4fa>
   82d54:	0ca8      	lsrs	r0, r5, #18
   82d56:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   82d5a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   82d5e:	307c      	adds	r0, #124	; 0x7c
   82d60:	e5be      	b.n	828e0 <_malloc_r+0x44>
   82d62:	3210      	adds	r2, #16
   82d64:	e6a4      	b.n	82ab0 <_malloc_r+0x214>
   82d66:	2a54      	cmp	r2, #84	; 0x54
   82d68:	d826      	bhi.n	82db8 <_malloc_r+0x51c>
   82d6a:	0b1a      	lsrs	r2, r3, #12
   82d6c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82d70:	0049      	lsls	r1, r1, #1
   82d72:	326e      	adds	r2, #110	; 0x6e
   82d74:	e748      	b.n	82c08 <_malloc_r+0x36c>
   82d76:	68bc      	ldr	r4, [r7, #8]
   82d78:	6862      	ldr	r2, [r4, #4]
   82d7a:	f022 0203 	bic.w	r2, r2, #3
   82d7e:	e705      	b.n	82b8c <_malloc_r+0x2f0>
   82d80:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82d84:	2800      	cmp	r0, #0
   82d86:	f47f aea8 	bne.w	82ada <_malloc_r+0x23e>
   82d8a:	4442      	add	r2, r8
   82d8c:	68bb      	ldr	r3, [r7, #8]
   82d8e:	f042 0201 	orr.w	r2, r2, #1
   82d92:	605a      	str	r2, [r3, #4]
   82d94:	e6ec      	b.n	82b70 <_malloc_r+0x2d4>
   82d96:	21fe      	movs	r1, #254	; 0xfe
   82d98:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   82d9c:	207e      	movs	r0, #126	; 0x7e
   82d9e:	e59f      	b.n	828e0 <_malloc_r+0x44>
   82da0:	2201      	movs	r2, #1
   82da2:	f04f 0900 	mov.w	r9, #0
   82da6:	e6c1      	b.n	82b2c <_malloc_r+0x290>
   82da8:	f104 0108 	add.w	r1, r4, #8
   82dac:	4630      	mov	r0, r6
   82dae:	f7ff fa5b 	bl	82268 <_free_r>
   82db2:	f8d9 1000 	ldr.w	r1, [r9]
   82db6:	e6db      	b.n	82b70 <_malloc_r+0x2d4>
   82db8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82dbc:	d805      	bhi.n	82dca <_malloc_r+0x52e>
   82dbe:	0bda      	lsrs	r2, r3, #15
   82dc0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   82dc4:	0049      	lsls	r1, r1, #1
   82dc6:	3277      	adds	r2, #119	; 0x77
   82dc8:	e71e      	b.n	82c08 <_malloc_r+0x36c>
   82dca:	f240 5154 	movw	r1, #1364	; 0x554
   82dce:	428a      	cmp	r2, r1
   82dd0:	d805      	bhi.n	82dde <_malloc_r+0x542>
   82dd2:	0c9a      	lsrs	r2, r3, #18
   82dd4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82dd8:	0049      	lsls	r1, r1, #1
   82dda:	327c      	adds	r2, #124	; 0x7c
   82ddc:	e714      	b.n	82c08 <_malloc_r+0x36c>
   82dde:	21fe      	movs	r1, #254	; 0xfe
   82de0:	227e      	movs	r2, #126	; 0x7e
   82de2:	e711      	b.n	82c08 <_malloc_r+0x36c>
   82de4:	687b      	ldr	r3, [r7, #4]
   82de6:	e784      	b.n	82cf2 <_malloc_r+0x456>
   82de8:	08e8      	lsrs	r0, r5, #3
   82dea:	1c43      	adds	r3, r0, #1
   82dec:	005b      	lsls	r3, r3, #1
   82dee:	e605      	b.n	829fc <_malloc_r+0x160>
   82df0:	20070580 	.word	0x20070580

00082df4 <memchr>:
   82df4:	0783      	lsls	r3, r0, #30
   82df6:	b470      	push	{r4, r5, r6}
   82df8:	b2cd      	uxtb	r5, r1
   82dfa:	d03d      	beq.n	82e78 <memchr+0x84>
   82dfc:	1e53      	subs	r3, r2, #1
   82dfe:	b302      	cbz	r2, 82e42 <memchr+0x4e>
   82e00:	7802      	ldrb	r2, [r0, #0]
   82e02:	42aa      	cmp	r2, r5
   82e04:	d01e      	beq.n	82e44 <memchr+0x50>
   82e06:	1c42      	adds	r2, r0, #1
   82e08:	e004      	b.n	82e14 <memchr+0x20>
   82e0a:	b1d3      	cbz	r3, 82e42 <memchr+0x4e>
   82e0c:	7804      	ldrb	r4, [r0, #0]
   82e0e:	3b01      	subs	r3, #1
   82e10:	42ac      	cmp	r4, r5
   82e12:	d017      	beq.n	82e44 <memchr+0x50>
   82e14:	f012 0f03 	tst.w	r2, #3
   82e18:	4610      	mov	r0, r2
   82e1a:	f102 0201 	add.w	r2, r2, #1
   82e1e:	d1f4      	bne.n	82e0a <memchr+0x16>
   82e20:	2b03      	cmp	r3, #3
   82e22:	d811      	bhi.n	82e48 <memchr+0x54>
   82e24:	b353      	cbz	r3, 82e7c <memchr+0x88>
   82e26:	7802      	ldrb	r2, [r0, #0]
   82e28:	42aa      	cmp	r2, r5
   82e2a:	d00b      	beq.n	82e44 <memchr+0x50>
   82e2c:	4403      	add	r3, r0
   82e2e:	1c42      	adds	r2, r0, #1
   82e30:	e002      	b.n	82e38 <memchr+0x44>
   82e32:	7801      	ldrb	r1, [r0, #0]
   82e34:	42a9      	cmp	r1, r5
   82e36:	d005      	beq.n	82e44 <memchr+0x50>
   82e38:	4293      	cmp	r3, r2
   82e3a:	4610      	mov	r0, r2
   82e3c:	f102 0201 	add.w	r2, r2, #1
   82e40:	d1f7      	bne.n	82e32 <memchr+0x3e>
   82e42:	2000      	movs	r0, #0
   82e44:	bc70      	pop	{r4, r5, r6}
   82e46:	4770      	bx	lr
   82e48:	4604      	mov	r4, r0
   82e4a:	020e      	lsls	r6, r1, #8
   82e4c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   82e50:	432e      	orrs	r6, r5
   82e52:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82e56:	6822      	ldr	r2, [r4, #0]
   82e58:	4620      	mov	r0, r4
   82e5a:	4072      	eors	r2, r6
   82e5c:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   82e60:	ea21 0202 	bic.w	r2, r1, r2
   82e64:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82e68:	f104 0404 	add.w	r4, r4, #4
   82e6c:	d1db      	bne.n	82e26 <memchr+0x32>
   82e6e:	3b04      	subs	r3, #4
   82e70:	2b03      	cmp	r3, #3
   82e72:	4620      	mov	r0, r4
   82e74:	d8ef      	bhi.n	82e56 <memchr+0x62>
   82e76:	e7d5      	b.n	82e24 <memchr+0x30>
   82e78:	4613      	mov	r3, r2
   82e7a:	e7d1      	b.n	82e20 <memchr+0x2c>
   82e7c:	4618      	mov	r0, r3
   82e7e:	e7e1      	b.n	82e44 <memchr+0x50>

00082e80 <memcpy>:
   82e80:	4684      	mov	ip, r0
   82e82:	ea41 0300 	orr.w	r3, r1, r0
   82e86:	f013 0303 	ands.w	r3, r3, #3
   82e8a:	d149      	bne.n	82f20 <memcpy+0xa0>
   82e8c:	3a40      	subs	r2, #64	; 0x40
   82e8e:	d323      	bcc.n	82ed8 <memcpy+0x58>
   82e90:	680b      	ldr	r3, [r1, #0]
   82e92:	6003      	str	r3, [r0, #0]
   82e94:	684b      	ldr	r3, [r1, #4]
   82e96:	6043      	str	r3, [r0, #4]
   82e98:	688b      	ldr	r3, [r1, #8]
   82e9a:	6083      	str	r3, [r0, #8]
   82e9c:	68cb      	ldr	r3, [r1, #12]
   82e9e:	60c3      	str	r3, [r0, #12]
   82ea0:	690b      	ldr	r3, [r1, #16]
   82ea2:	6103      	str	r3, [r0, #16]
   82ea4:	694b      	ldr	r3, [r1, #20]
   82ea6:	6143      	str	r3, [r0, #20]
   82ea8:	698b      	ldr	r3, [r1, #24]
   82eaa:	6183      	str	r3, [r0, #24]
   82eac:	69cb      	ldr	r3, [r1, #28]
   82eae:	61c3      	str	r3, [r0, #28]
   82eb0:	6a0b      	ldr	r3, [r1, #32]
   82eb2:	6203      	str	r3, [r0, #32]
   82eb4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82eb6:	6243      	str	r3, [r0, #36]	; 0x24
   82eb8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82eba:	6283      	str	r3, [r0, #40]	; 0x28
   82ebc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82ebe:	62c3      	str	r3, [r0, #44]	; 0x2c
   82ec0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82ec2:	6303      	str	r3, [r0, #48]	; 0x30
   82ec4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82ec6:	6343      	str	r3, [r0, #52]	; 0x34
   82ec8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82eca:	6383      	str	r3, [r0, #56]	; 0x38
   82ecc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82ece:	63c3      	str	r3, [r0, #60]	; 0x3c
   82ed0:	3040      	adds	r0, #64	; 0x40
   82ed2:	3140      	adds	r1, #64	; 0x40
   82ed4:	3a40      	subs	r2, #64	; 0x40
   82ed6:	d2db      	bcs.n	82e90 <memcpy+0x10>
   82ed8:	3230      	adds	r2, #48	; 0x30
   82eda:	d30b      	bcc.n	82ef4 <memcpy+0x74>
   82edc:	680b      	ldr	r3, [r1, #0]
   82ede:	6003      	str	r3, [r0, #0]
   82ee0:	684b      	ldr	r3, [r1, #4]
   82ee2:	6043      	str	r3, [r0, #4]
   82ee4:	688b      	ldr	r3, [r1, #8]
   82ee6:	6083      	str	r3, [r0, #8]
   82ee8:	68cb      	ldr	r3, [r1, #12]
   82eea:	60c3      	str	r3, [r0, #12]
   82eec:	3010      	adds	r0, #16
   82eee:	3110      	adds	r1, #16
   82ef0:	3a10      	subs	r2, #16
   82ef2:	d2f3      	bcs.n	82edc <memcpy+0x5c>
   82ef4:	320c      	adds	r2, #12
   82ef6:	d305      	bcc.n	82f04 <memcpy+0x84>
   82ef8:	f851 3b04 	ldr.w	r3, [r1], #4
   82efc:	f840 3b04 	str.w	r3, [r0], #4
   82f00:	3a04      	subs	r2, #4
   82f02:	d2f9      	bcs.n	82ef8 <memcpy+0x78>
   82f04:	3204      	adds	r2, #4
   82f06:	d008      	beq.n	82f1a <memcpy+0x9a>
   82f08:	07d2      	lsls	r2, r2, #31
   82f0a:	bf1c      	itt	ne
   82f0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82f10:	f800 3b01 	strbne.w	r3, [r0], #1
   82f14:	d301      	bcc.n	82f1a <memcpy+0x9a>
   82f16:	880b      	ldrh	r3, [r1, #0]
   82f18:	8003      	strh	r3, [r0, #0]
   82f1a:	4660      	mov	r0, ip
   82f1c:	4770      	bx	lr
   82f1e:	bf00      	nop
   82f20:	2a08      	cmp	r2, #8
   82f22:	d313      	bcc.n	82f4c <memcpy+0xcc>
   82f24:	078b      	lsls	r3, r1, #30
   82f26:	d0b1      	beq.n	82e8c <memcpy+0xc>
   82f28:	f010 0303 	ands.w	r3, r0, #3
   82f2c:	d0ae      	beq.n	82e8c <memcpy+0xc>
   82f2e:	f1c3 0304 	rsb	r3, r3, #4
   82f32:	1ad2      	subs	r2, r2, r3
   82f34:	07db      	lsls	r3, r3, #31
   82f36:	bf1c      	itt	ne
   82f38:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82f3c:	f800 3b01 	strbne.w	r3, [r0], #1
   82f40:	d3a4      	bcc.n	82e8c <memcpy+0xc>
   82f42:	f831 3b02 	ldrh.w	r3, [r1], #2
   82f46:	f820 3b02 	strh.w	r3, [r0], #2
   82f4a:	e79f      	b.n	82e8c <memcpy+0xc>
   82f4c:	3a04      	subs	r2, #4
   82f4e:	d3d9      	bcc.n	82f04 <memcpy+0x84>
   82f50:	3a01      	subs	r2, #1
   82f52:	f811 3b01 	ldrb.w	r3, [r1], #1
   82f56:	f800 3b01 	strb.w	r3, [r0], #1
   82f5a:	d2f9      	bcs.n	82f50 <memcpy+0xd0>
   82f5c:	780b      	ldrb	r3, [r1, #0]
   82f5e:	7003      	strb	r3, [r0, #0]
   82f60:	784b      	ldrb	r3, [r1, #1]
   82f62:	7043      	strb	r3, [r0, #1]
   82f64:	788b      	ldrb	r3, [r1, #2]
   82f66:	7083      	strb	r3, [r0, #2]
   82f68:	4660      	mov	r0, ip
   82f6a:	4770      	bx	lr

00082f6c <memmove>:
   82f6c:	4288      	cmp	r0, r1
   82f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f70:	d90d      	bls.n	82f8e <memmove+0x22>
   82f72:	188b      	adds	r3, r1, r2
   82f74:	4298      	cmp	r0, r3
   82f76:	d20a      	bcs.n	82f8e <memmove+0x22>
   82f78:	1881      	adds	r1, r0, r2
   82f7a:	2a00      	cmp	r2, #0
   82f7c:	d051      	beq.n	83022 <memmove+0xb6>
   82f7e:	1a9a      	subs	r2, r3, r2
   82f80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82f84:	4293      	cmp	r3, r2
   82f86:	f801 4d01 	strb.w	r4, [r1, #-1]!
   82f8a:	d1f9      	bne.n	82f80 <memmove+0x14>
   82f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f8e:	2a0f      	cmp	r2, #15
   82f90:	d948      	bls.n	83024 <memmove+0xb8>
   82f92:	ea41 0300 	orr.w	r3, r1, r0
   82f96:	079b      	lsls	r3, r3, #30
   82f98:	d146      	bne.n	83028 <memmove+0xbc>
   82f9a:	4615      	mov	r5, r2
   82f9c:	f100 0410 	add.w	r4, r0, #16
   82fa0:	f101 0310 	add.w	r3, r1, #16
   82fa4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   82fa8:	3d10      	subs	r5, #16
   82faa:	f844 6c10 	str.w	r6, [r4, #-16]
   82fae:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   82fb2:	2d0f      	cmp	r5, #15
   82fb4:	f844 6c0c 	str.w	r6, [r4, #-12]
   82fb8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82fbc:	f104 0410 	add.w	r4, r4, #16
   82fc0:	f844 6c18 	str.w	r6, [r4, #-24]
   82fc4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82fc8:	f103 0310 	add.w	r3, r3, #16
   82fcc:	f844 6c14 	str.w	r6, [r4, #-20]
   82fd0:	d8e8      	bhi.n	82fa4 <memmove+0x38>
   82fd2:	f1a2 0310 	sub.w	r3, r2, #16
   82fd6:	f023 030f 	bic.w	r3, r3, #15
   82fda:	f002 0e0f 	and.w	lr, r2, #15
   82fde:	3310      	adds	r3, #16
   82fe0:	f1be 0f03 	cmp.w	lr, #3
   82fe4:	4419      	add	r1, r3
   82fe6:	4403      	add	r3, r0
   82fe8:	d921      	bls.n	8302e <memmove+0xc2>
   82fea:	460e      	mov	r6, r1
   82fec:	4674      	mov	r4, lr
   82fee:	1f1d      	subs	r5, r3, #4
   82ff0:	f856 7b04 	ldr.w	r7, [r6], #4
   82ff4:	3c04      	subs	r4, #4
   82ff6:	2c03      	cmp	r4, #3
   82ff8:	f845 7f04 	str.w	r7, [r5, #4]!
   82ffc:	d8f8      	bhi.n	82ff0 <memmove+0x84>
   82ffe:	f1ae 0404 	sub.w	r4, lr, #4
   83002:	f024 0403 	bic.w	r4, r4, #3
   83006:	3404      	adds	r4, #4
   83008:	4423      	add	r3, r4
   8300a:	4421      	add	r1, r4
   8300c:	f002 0203 	and.w	r2, r2, #3
   83010:	b162      	cbz	r2, 8302c <memmove+0xc0>
   83012:	3b01      	subs	r3, #1
   83014:	440a      	add	r2, r1
   83016:	f811 4b01 	ldrb.w	r4, [r1], #1
   8301a:	428a      	cmp	r2, r1
   8301c:	f803 4f01 	strb.w	r4, [r3, #1]!
   83020:	d1f9      	bne.n	83016 <memmove+0xaa>
   83022:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83024:	4603      	mov	r3, r0
   83026:	e7f3      	b.n	83010 <memmove+0xa4>
   83028:	4603      	mov	r3, r0
   8302a:	e7f2      	b.n	83012 <memmove+0xa6>
   8302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8302e:	4672      	mov	r2, lr
   83030:	e7ee      	b.n	83010 <memmove+0xa4>
   83032:	bf00      	nop

00083034 <__malloc_lock>:
   83034:	4770      	bx	lr
   83036:	bf00      	nop

00083038 <__malloc_unlock>:
   83038:	4770      	bx	lr
   8303a:	bf00      	nop

0008303c <_realloc_r>:
   8303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83040:	4617      	mov	r7, r2
   83042:	b083      	sub	sp, #12
   83044:	2900      	cmp	r1, #0
   83046:	f000 808f 	beq.w	83168 <_realloc_r+0x12c>
   8304a:	460d      	mov	r5, r1
   8304c:	4681      	mov	r9, r0
   8304e:	f107 040b 	add.w	r4, r7, #11
   83052:	f7ff ffef 	bl	83034 <__malloc_lock>
   83056:	f855 ec04 	ldr.w	lr, [r5, #-4]
   8305a:	2c16      	cmp	r4, #22
   8305c:	f02e 0603 	bic.w	r6, lr, #3
   83060:	f1a5 0808 	sub.w	r8, r5, #8
   83064:	d83c      	bhi.n	830e0 <_realloc_r+0xa4>
   83066:	2210      	movs	r2, #16
   83068:	4614      	mov	r4, r2
   8306a:	42a7      	cmp	r7, r4
   8306c:	d83d      	bhi.n	830ea <_realloc_r+0xae>
   8306e:	4296      	cmp	r6, r2
   83070:	da42      	bge.n	830f8 <_realloc_r+0xbc>
   83072:	4bc6      	ldr	r3, [pc, #792]	; (8338c <_realloc_r+0x350>)
   83074:	eb08 0006 	add.w	r0, r8, r6
   83078:	6899      	ldr	r1, [r3, #8]
   8307a:	4288      	cmp	r0, r1
   8307c:	6841      	ldr	r1, [r0, #4]
   8307e:	f000 80d7 	beq.w	83230 <_realloc_r+0x1f4>
   83082:	f021 0301 	bic.w	r3, r1, #1
   83086:	4403      	add	r3, r0
   83088:	685b      	ldr	r3, [r3, #4]
   8308a:	07db      	lsls	r3, r3, #31
   8308c:	d54c      	bpl.n	83128 <_realloc_r+0xec>
   8308e:	f01e 0f01 	tst.w	lr, #1
   83092:	f000 809d 	beq.w	831d0 <_realloc_r+0x194>
   83096:	4639      	mov	r1, r7
   83098:	4648      	mov	r0, r9
   8309a:	f7ff fbff 	bl	8289c <_malloc_r>
   8309e:	4607      	mov	r7, r0
   830a0:	2800      	cmp	r0, #0
   830a2:	d03a      	beq.n	8311a <_realloc_r+0xde>
   830a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   830a8:	f1a0 0208 	sub.w	r2, r0, #8
   830ac:	f023 0301 	bic.w	r3, r3, #1
   830b0:	4443      	add	r3, r8
   830b2:	429a      	cmp	r2, r3
   830b4:	f000 813e 	beq.w	83334 <_realloc_r+0x2f8>
   830b8:	1f32      	subs	r2, r6, #4
   830ba:	2a24      	cmp	r2, #36	; 0x24
   830bc:	f200 812b 	bhi.w	83316 <_realloc_r+0x2da>
   830c0:	2a13      	cmp	r2, #19
   830c2:	f200 80ff 	bhi.w	832c4 <_realloc_r+0x288>
   830c6:	4603      	mov	r3, r0
   830c8:	462a      	mov	r2, r5
   830ca:	6811      	ldr	r1, [r2, #0]
   830cc:	6019      	str	r1, [r3, #0]
   830ce:	6851      	ldr	r1, [r2, #4]
   830d0:	6059      	str	r1, [r3, #4]
   830d2:	6892      	ldr	r2, [r2, #8]
   830d4:	609a      	str	r2, [r3, #8]
   830d6:	4629      	mov	r1, r5
   830d8:	4648      	mov	r0, r9
   830da:	f7ff f8c5 	bl	82268 <_free_r>
   830de:	e01c      	b.n	8311a <_realloc_r+0xde>
   830e0:	f024 0407 	bic.w	r4, r4, #7
   830e4:	2c00      	cmp	r4, #0
   830e6:	4622      	mov	r2, r4
   830e8:	dabf      	bge.n	8306a <_realloc_r+0x2e>
   830ea:	230c      	movs	r3, #12
   830ec:	2000      	movs	r0, #0
   830ee:	f8c9 3000 	str.w	r3, [r9]
   830f2:	b003      	add	sp, #12
   830f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830f8:	462f      	mov	r7, r5
   830fa:	1b33      	subs	r3, r6, r4
   830fc:	2b0f      	cmp	r3, #15
   830fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83102:	d81d      	bhi.n	83140 <_realloc_r+0x104>
   83104:	f002 0201 	and.w	r2, r2, #1
   83108:	4332      	orrs	r2, r6
   8310a:	eb08 0106 	add.w	r1, r8, r6
   8310e:	f8c8 2004 	str.w	r2, [r8, #4]
   83112:	684b      	ldr	r3, [r1, #4]
   83114:	f043 0301 	orr.w	r3, r3, #1
   83118:	604b      	str	r3, [r1, #4]
   8311a:	4648      	mov	r0, r9
   8311c:	f7ff ff8c 	bl	83038 <__malloc_unlock>
   83120:	4638      	mov	r0, r7
   83122:	b003      	add	sp, #12
   83124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83128:	f021 0103 	bic.w	r1, r1, #3
   8312c:	4431      	add	r1, r6
   8312e:	4291      	cmp	r1, r2
   83130:	db20      	blt.n	83174 <_realloc_r+0x138>
   83132:	68c3      	ldr	r3, [r0, #12]
   83134:	6882      	ldr	r2, [r0, #8]
   83136:	462f      	mov	r7, r5
   83138:	60d3      	str	r3, [r2, #12]
   8313a:	460e      	mov	r6, r1
   8313c:	609a      	str	r2, [r3, #8]
   8313e:	e7dc      	b.n	830fa <_realloc_r+0xbe>
   83140:	f002 0201 	and.w	r2, r2, #1
   83144:	eb08 0104 	add.w	r1, r8, r4
   83148:	4314      	orrs	r4, r2
   8314a:	f043 0201 	orr.w	r2, r3, #1
   8314e:	f8c8 4004 	str.w	r4, [r8, #4]
   83152:	440b      	add	r3, r1
   83154:	604a      	str	r2, [r1, #4]
   83156:	685a      	ldr	r2, [r3, #4]
   83158:	3108      	adds	r1, #8
   8315a:	f042 0201 	orr.w	r2, r2, #1
   8315e:	605a      	str	r2, [r3, #4]
   83160:	4648      	mov	r0, r9
   83162:	f7ff f881 	bl	82268 <_free_r>
   83166:	e7d8      	b.n	8311a <_realloc_r+0xde>
   83168:	4611      	mov	r1, r2
   8316a:	b003      	add	sp, #12
   8316c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83170:	f7ff bb94 	b.w	8289c <_malloc_r>
   83174:	f01e 0f01 	tst.w	lr, #1
   83178:	d18d      	bne.n	83096 <_realloc_r+0x5a>
   8317a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8317e:	ebc3 0a08 	rsb	sl, r3, r8
   83182:	f8da 3004 	ldr.w	r3, [sl, #4]
   83186:	f023 0c03 	bic.w	ip, r3, #3
   8318a:	eb01 0e0c 	add.w	lr, r1, ip
   8318e:	4596      	cmp	lr, r2
   83190:	db26      	blt.n	831e0 <_realloc_r+0x1a4>
   83192:	4657      	mov	r7, sl
   83194:	68c3      	ldr	r3, [r0, #12]
   83196:	6881      	ldr	r1, [r0, #8]
   83198:	1f32      	subs	r2, r6, #4
   8319a:	60cb      	str	r3, [r1, #12]
   8319c:	6099      	str	r1, [r3, #8]
   8319e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   831a2:	f8da 300c 	ldr.w	r3, [sl, #12]
   831a6:	2a24      	cmp	r2, #36	; 0x24
   831a8:	60cb      	str	r3, [r1, #12]
   831aa:	6099      	str	r1, [r3, #8]
   831ac:	f200 80c9 	bhi.w	83342 <_realloc_r+0x306>
   831b0:	2a13      	cmp	r2, #19
   831b2:	f240 8092 	bls.w	832da <_realloc_r+0x29e>
   831b6:	682b      	ldr	r3, [r5, #0]
   831b8:	2a1b      	cmp	r2, #27
   831ba:	f8ca 3008 	str.w	r3, [sl, #8]
   831be:	686b      	ldr	r3, [r5, #4]
   831c0:	f8ca 300c 	str.w	r3, [sl, #12]
   831c4:	f200 80cd 	bhi.w	83362 <_realloc_r+0x326>
   831c8:	3508      	adds	r5, #8
   831ca:	f10a 0310 	add.w	r3, sl, #16
   831ce:	e085      	b.n	832dc <_realloc_r+0x2a0>
   831d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   831d4:	ebc3 0a08 	rsb	sl, r3, r8
   831d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   831dc:	f023 0c03 	bic.w	ip, r3, #3
   831e0:	eb06 030c 	add.w	r3, r6, ip
   831e4:	4293      	cmp	r3, r2
   831e6:	f6ff af56 	blt.w	83096 <_realloc_r+0x5a>
   831ea:	4657      	mov	r7, sl
   831ec:	f8da 100c 	ldr.w	r1, [sl, #12]
   831f0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   831f4:	1f32      	subs	r2, r6, #4
   831f6:	2a24      	cmp	r2, #36	; 0x24
   831f8:	60c1      	str	r1, [r0, #12]
   831fa:	6088      	str	r0, [r1, #8]
   831fc:	f200 80aa 	bhi.w	83354 <_realloc_r+0x318>
   83200:	2a13      	cmp	r2, #19
   83202:	f240 80a5 	bls.w	83350 <_realloc_r+0x314>
   83206:	6829      	ldr	r1, [r5, #0]
   83208:	2a1b      	cmp	r2, #27
   8320a:	f8ca 1008 	str.w	r1, [sl, #8]
   8320e:	6869      	ldr	r1, [r5, #4]
   83210:	f8ca 100c 	str.w	r1, [sl, #12]
   83214:	f200 80bc 	bhi.w	83390 <_realloc_r+0x354>
   83218:	3508      	adds	r5, #8
   8321a:	f10a 0210 	add.w	r2, sl, #16
   8321e:	6829      	ldr	r1, [r5, #0]
   83220:	461e      	mov	r6, r3
   83222:	6011      	str	r1, [r2, #0]
   83224:	6869      	ldr	r1, [r5, #4]
   83226:	46d0      	mov	r8, sl
   83228:	6051      	str	r1, [r2, #4]
   8322a:	68ab      	ldr	r3, [r5, #8]
   8322c:	6093      	str	r3, [r2, #8]
   8322e:	e764      	b.n	830fa <_realloc_r+0xbe>
   83230:	f021 0b03 	bic.w	fp, r1, #3
   83234:	f104 0010 	add.w	r0, r4, #16
   83238:	44b3      	add	fp, r6
   8323a:	4583      	cmp	fp, r0
   8323c:	da57      	bge.n	832ee <_realloc_r+0x2b2>
   8323e:	f01e 0f01 	tst.w	lr, #1
   83242:	f47f af28 	bne.w	83096 <_realloc_r+0x5a>
   83246:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8324a:	ebc1 0a08 	rsb	sl, r1, r8
   8324e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83252:	f021 0c03 	bic.w	ip, r1, #3
   83256:	44e3      	add	fp, ip
   83258:	4558      	cmp	r0, fp
   8325a:	dcc1      	bgt.n	831e0 <_realloc_r+0x1a4>
   8325c:	4657      	mov	r7, sl
   8325e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83262:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83266:	1f32      	subs	r2, r6, #4
   83268:	2a24      	cmp	r2, #36	; 0x24
   8326a:	60c1      	str	r1, [r0, #12]
   8326c:	6088      	str	r0, [r1, #8]
   8326e:	f200 80b1 	bhi.w	833d4 <_realloc_r+0x398>
   83272:	2a13      	cmp	r2, #19
   83274:	f240 80a2 	bls.w	833bc <_realloc_r+0x380>
   83278:	6829      	ldr	r1, [r5, #0]
   8327a:	2a1b      	cmp	r2, #27
   8327c:	f8ca 1008 	str.w	r1, [sl, #8]
   83280:	6869      	ldr	r1, [r5, #4]
   83282:	f8ca 100c 	str.w	r1, [sl, #12]
   83286:	f200 80ac 	bhi.w	833e2 <_realloc_r+0x3a6>
   8328a:	3508      	adds	r5, #8
   8328c:	f10a 0210 	add.w	r2, sl, #16
   83290:	6829      	ldr	r1, [r5, #0]
   83292:	6011      	str	r1, [r2, #0]
   83294:	6869      	ldr	r1, [r5, #4]
   83296:	6051      	str	r1, [r2, #4]
   83298:	68a9      	ldr	r1, [r5, #8]
   8329a:	6091      	str	r1, [r2, #8]
   8329c:	ebc4 020b 	rsb	r2, r4, fp
   832a0:	eb0a 0104 	add.w	r1, sl, r4
   832a4:	f042 0201 	orr.w	r2, r2, #1
   832a8:	6099      	str	r1, [r3, #8]
   832aa:	604a      	str	r2, [r1, #4]
   832ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   832b0:	4648      	mov	r0, r9
   832b2:	f003 0301 	and.w	r3, r3, #1
   832b6:	431c      	orrs	r4, r3
   832b8:	f8ca 4004 	str.w	r4, [sl, #4]
   832bc:	f7ff febc 	bl	83038 <__malloc_unlock>
   832c0:	4638      	mov	r0, r7
   832c2:	e72e      	b.n	83122 <_realloc_r+0xe6>
   832c4:	682b      	ldr	r3, [r5, #0]
   832c6:	2a1b      	cmp	r2, #27
   832c8:	6003      	str	r3, [r0, #0]
   832ca:	686b      	ldr	r3, [r5, #4]
   832cc:	6043      	str	r3, [r0, #4]
   832ce:	d826      	bhi.n	8331e <_realloc_r+0x2e2>
   832d0:	f100 0308 	add.w	r3, r0, #8
   832d4:	f105 0208 	add.w	r2, r5, #8
   832d8:	e6f7      	b.n	830ca <_realloc_r+0x8e>
   832da:	463b      	mov	r3, r7
   832dc:	682a      	ldr	r2, [r5, #0]
   832de:	4676      	mov	r6, lr
   832e0:	601a      	str	r2, [r3, #0]
   832e2:	686a      	ldr	r2, [r5, #4]
   832e4:	46d0      	mov	r8, sl
   832e6:	605a      	str	r2, [r3, #4]
   832e8:	68aa      	ldr	r2, [r5, #8]
   832ea:	609a      	str	r2, [r3, #8]
   832ec:	e705      	b.n	830fa <_realloc_r+0xbe>
   832ee:	ebc4 0b0b 	rsb	fp, r4, fp
   832f2:	eb08 0104 	add.w	r1, r8, r4
   832f6:	f04b 0201 	orr.w	r2, fp, #1
   832fa:	6099      	str	r1, [r3, #8]
   832fc:	604a      	str	r2, [r1, #4]
   832fe:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83302:	4648      	mov	r0, r9
   83304:	f003 0301 	and.w	r3, r3, #1
   83308:	431c      	orrs	r4, r3
   8330a:	f845 4c04 	str.w	r4, [r5, #-4]
   8330e:	f7ff fe93 	bl	83038 <__malloc_unlock>
   83312:	4628      	mov	r0, r5
   83314:	e705      	b.n	83122 <_realloc_r+0xe6>
   83316:	4629      	mov	r1, r5
   83318:	f7ff fe28 	bl	82f6c <memmove>
   8331c:	e6db      	b.n	830d6 <_realloc_r+0x9a>
   8331e:	68ab      	ldr	r3, [r5, #8]
   83320:	2a24      	cmp	r2, #36	; 0x24
   83322:	6083      	str	r3, [r0, #8]
   83324:	68eb      	ldr	r3, [r5, #12]
   83326:	60c3      	str	r3, [r0, #12]
   83328:	d027      	beq.n	8337a <_realloc_r+0x33e>
   8332a:	f100 0310 	add.w	r3, r0, #16
   8332e:	f105 0210 	add.w	r2, r5, #16
   83332:	e6ca      	b.n	830ca <_realloc_r+0x8e>
   83334:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83338:	462f      	mov	r7, r5
   8333a:	f023 0303 	bic.w	r3, r3, #3
   8333e:	441e      	add	r6, r3
   83340:	e6db      	b.n	830fa <_realloc_r+0xbe>
   83342:	4629      	mov	r1, r5
   83344:	4638      	mov	r0, r7
   83346:	4676      	mov	r6, lr
   83348:	46d0      	mov	r8, sl
   8334a:	f7ff fe0f 	bl	82f6c <memmove>
   8334e:	e6d4      	b.n	830fa <_realloc_r+0xbe>
   83350:	463a      	mov	r2, r7
   83352:	e764      	b.n	8321e <_realloc_r+0x1e2>
   83354:	4629      	mov	r1, r5
   83356:	4638      	mov	r0, r7
   83358:	461e      	mov	r6, r3
   8335a:	46d0      	mov	r8, sl
   8335c:	f7ff fe06 	bl	82f6c <memmove>
   83360:	e6cb      	b.n	830fa <_realloc_r+0xbe>
   83362:	68ab      	ldr	r3, [r5, #8]
   83364:	2a24      	cmp	r2, #36	; 0x24
   83366:	f8ca 3010 	str.w	r3, [sl, #16]
   8336a:	68eb      	ldr	r3, [r5, #12]
   8336c:	f8ca 3014 	str.w	r3, [sl, #20]
   83370:	d01a      	beq.n	833a8 <_realloc_r+0x36c>
   83372:	3510      	adds	r5, #16
   83374:	f10a 0318 	add.w	r3, sl, #24
   83378:	e7b0      	b.n	832dc <_realloc_r+0x2a0>
   8337a:	692a      	ldr	r2, [r5, #16]
   8337c:	f100 0318 	add.w	r3, r0, #24
   83380:	6102      	str	r2, [r0, #16]
   83382:	6969      	ldr	r1, [r5, #20]
   83384:	f105 0218 	add.w	r2, r5, #24
   83388:	6141      	str	r1, [r0, #20]
   8338a:	e69e      	b.n	830ca <_realloc_r+0x8e>
   8338c:	20070580 	.word	0x20070580
   83390:	68a9      	ldr	r1, [r5, #8]
   83392:	2a24      	cmp	r2, #36	; 0x24
   83394:	f8ca 1010 	str.w	r1, [sl, #16]
   83398:	68e9      	ldr	r1, [r5, #12]
   8339a:	f8ca 1014 	str.w	r1, [sl, #20]
   8339e:	d00f      	beq.n	833c0 <_realloc_r+0x384>
   833a0:	3510      	adds	r5, #16
   833a2:	f10a 0218 	add.w	r2, sl, #24
   833a6:	e73a      	b.n	8321e <_realloc_r+0x1e2>
   833a8:	692a      	ldr	r2, [r5, #16]
   833aa:	f10a 0320 	add.w	r3, sl, #32
   833ae:	f8ca 2018 	str.w	r2, [sl, #24]
   833b2:	696a      	ldr	r2, [r5, #20]
   833b4:	3518      	adds	r5, #24
   833b6:	f8ca 201c 	str.w	r2, [sl, #28]
   833ba:	e78f      	b.n	832dc <_realloc_r+0x2a0>
   833bc:	463a      	mov	r2, r7
   833be:	e767      	b.n	83290 <_realloc_r+0x254>
   833c0:	6929      	ldr	r1, [r5, #16]
   833c2:	f10a 0220 	add.w	r2, sl, #32
   833c6:	f8ca 1018 	str.w	r1, [sl, #24]
   833ca:	6969      	ldr	r1, [r5, #20]
   833cc:	3518      	adds	r5, #24
   833ce:	f8ca 101c 	str.w	r1, [sl, #28]
   833d2:	e724      	b.n	8321e <_realloc_r+0x1e2>
   833d4:	4629      	mov	r1, r5
   833d6:	4638      	mov	r0, r7
   833d8:	9301      	str	r3, [sp, #4]
   833da:	f7ff fdc7 	bl	82f6c <memmove>
   833de:	9b01      	ldr	r3, [sp, #4]
   833e0:	e75c      	b.n	8329c <_realloc_r+0x260>
   833e2:	68a9      	ldr	r1, [r5, #8]
   833e4:	2a24      	cmp	r2, #36	; 0x24
   833e6:	f8ca 1010 	str.w	r1, [sl, #16]
   833ea:	68e9      	ldr	r1, [r5, #12]
   833ec:	f8ca 1014 	str.w	r1, [sl, #20]
   833f0:	d003      	beq.n	833fa <_realloc_r+0x3be>
   833f2:	3510      	adds	r5, #16
   833f4:	f10a 0218 	add.w	r2, sl, #24
   833f8:	e74a      	b.n	83290 <_realloc_r+0x254>
   833fa:	6929      	ldr	r1, [r5, #16]
   833fc:	f10a 0220 	add.w	r2, sl, #32
   83400:	f8ca 1018 	str.w	r1, [sl, #24]
   83404:	6969      	ldr	r1, [r5, #20]
   83406:	3518      	adds	r5, #24
   83408:	f8ca 101c 	str.w	r1, [sl, #28]
   8340c:	e740      	b.n	83290 <_realloc_r+0x254>
   8340e:	bf00      	nop

00083410 <_sbrk_r>:
   83410:	b538      	push	{r3, r4, r5, lr}
   83412:	4c07      	ldr	r4, [pc, #28]	; (83430 <_sbrk_r+0x20>)
   83414:	2300      	movs	r3, #0
   83416:	4605      	mov	r5, r0
   83418:	4608      	mov	r0, r1
   8341a:	6023      	str	r3, [r4, #0]
   8341c:	f7fd fa8a 	bl	80934 <_sbrk>
   83420:	1c43      	adds	r3, r0, #1
   83422:	d000      	beq.n	83426 <_sbrk_r+0x16>
   83424:	bd38      	pop	{r3, r4, r5, pc}
   83426:	6823      	ldr	r3, [r4, #0]
   83428:	2b00      	cmp	r3, #0
   8342a:	d0fb      	beq.n	83424 <_sbrk_r+0x14>
   8342c:	602b      	str	r3, [r5, #0]
   8342e:	bd38      	pop	{r3, r4, r5, pc}
   83430:	20070a88 	.word	0x20070a88

00083434 <__sread>:
   83434:	b510      	push	{r4, lr}
   83436:	460c      	mov	r4, r1
   83438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8343c:	f000 f9f2 	bl	83824 <_read_r>
   83440:	2800      	cmp	r0, #0
   83442:	db03      	blt.n	8344c <__sread+0x18>
   83444:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83446:	4403      	add	r3, r0
   83448:	6523      	str	r3, [r4, #80]	; 0x50
   8344a:	bd10      	pop	{r4, pc}
   8344c:	89a3      	ldrh	r3, [r4, #12]
   8344e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83452:	81a3      	strh	r3, [r4, #12]
   83454:	bd10      	pop	{r4, pc}
   83456:	bf00      	nop

00083458 <__swrite>:
   83458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8345c:	460c      	mov	r4, r1
   8345e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83462:	461f      	mov	r7, r3
   83464:	05cb      	lsls	r3, r1, #23
   83466:	4616      	mov	r6, r2
   83468:	4605      	mov	r5, r0
   8346a:	d507      	bpl.n	8347c <__swrite+0x24>
   8346c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83470:	2302      	movs	r3, #2
   83472:	2200      	movs	r2, #0
   83474:	f000 f9c0 	bl	837f8 <_lseek_r>
   83478:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8347c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83480:	81a1      	strh	r1, [r4, #12]
   83482:	463b      	mov	r3, r7
   83484:	4632      	mov	r2, r6
   83486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8348a:	4628      	mov	r0, r5
   8348c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83490:	f000 b8d0 	b.w	83634 <_write_r>

00083494 <__sseek>:
   83494:	b510      	push	{r4, lr}
   83496:	460c      	mov	r4, r1
   83498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8349c:	f000 f9ac 	bl	837f8 <_lseek_r>
   834a0:	89a3      	ldrh	r3, [r4, #12]
   834a2:	1c42      	adds	r2, r0, #1
   834a4:	bf0e      	itee	eq
   834a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   834aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   834ae:	6520      	strne	r0, [r4, #80]	; 0x50
   834b0:	81a3      	strh	r3, [r4, #12]
   834b2:	bd10      	pop	{r4, pc}

000834b4 <__sclose>:
   834b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   834b8:	f000 b924 	b.w	83704 <_close_r>

000834bc <strlen>:
   834bc:	f020 0103 	bic.w	r1, r0, #3
   834c0:	f010 0003 	ands.w	r0, r0, #3
   834c4:	f1c0 0000 	rsb	r0, r0, #0
   834c8:	f851 3b04 	ldr.w	r3, [r1], #4
   834cc:	f100 0c04 	add.w	ip, r0, #4
   834d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   834d4:	f06f 0200 	mvn.w	r2, #0
   834d8:	bf1c      	itt	ne
   834da:	fa22 f20c 	lsrne.w	r2, r2, ip
   834de:	4313      	orrne	r3, r2
   834e0:	f04f 0c01 	mov.w	ip, #1
   834e4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   834e8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   834ec:	eba3 020c 	sub.w	r2, r3, ip
   834f0:	ea22 0203 	bic.w	r2, r2, r3
   834f4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   834f8:	bf04      	itt	eq
   834fa:	f851 3b04 	ldreq.w	r3, [r1], #4
   834fe:	3004      	addeq	r0, #4
   83500:	d0f4      	beq.n	834ec <strlen+0x30>
   83502:	f1c2 0100 	rsb	r1, r2, #0
   83506:	ea02 0201 	and.w	r2, r2, r1
   8350a:	fab2 f282 	clz	r2, r2
   8350e:	f1c2 021f 	rsb	r2, r2, #31
   83512:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83516:	4770      	bx	lr

00083518 <__swbuf_r>:
   83518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8351a:	460e      	mov	r6, r1
   8351c:	4614      	mov	r4, r2
   8351e:	4607      	mov	r7, r0
   83520:	b110      	cbz	r0, 83528 <__swbuf_r+0x10>
   83522:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83524:	2b00      	cmp	r3, #0
   83526:	d04a      	beq.n	835be <__swbuf_r+0xa6>
   83528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8352c:	69a3      	ldr	r3, [r4, #24]
   8352e:	b291      	uxth	r1, r2
   83530:	0708      	lsls	r0, r1, #28
   83532:	60a3      	str	r3, [r4, #8]
   83534:	d538      	bpl.n	835a8 <__swbuf_r+0x90>
   83536:	6923      	ldr	r3, [r4, #16]
   83538:	2b00      	cmp	r3, #0
   8353a:	d035      	beq.n	835a8 <__swbuf_r+0x90>
   8353c:	0489      	lsls	r1, r1, #18
   8353e:	b2f5      	uxtb	r5, r6
   83540:	d515      	bpl.n	8356e <__swbuf_r+0x56>
   83542:	6822      	ldr	r2, [r4, #0]
   83544:	6961      	ldr	r1, [r4, #20]
   83546:	1ad3      	subs	r3, r2, r3
   83548:	428b      	cmp	r3, r1
   8354a:	da1c      	bge.n	83586 <__swbuf_r+0x6e>
   8354c:	3301      	adds	r3, #1
   8354e:	68a1      	ldr	r1, [r4, #8]
   83550:	1c50      	adds	r0, r2, #1
   83552:	3901      	subs	r1, #1
   83554:	60a1      	str	r1, [r4, #8]
   83556:	6020      	str	r0, [r4, #0]
   83558:	7016      	strb	r6, [r2, #0]
   8355a:	6962      	ldr	r2, [r4, #20]
   8355c:	429a      	cmp	r2, r3
   8355e:	d01a      	beq.n	83596 <__swbuf_r+0x7e>
   83560:	89a3      	ldrh	r3, [r4, #12]
   83562:	07db      	lsls	r3, r3, #31
   83564:	d501      	bpl.n	8356a <__swbuf_r+0x52>
   83566:	2d0a      	cmp	r5, #10
   83568:	d015      	beq.n	83596 <__swbuf_r+0x7e>
   8356a:	4628      	mov	r0, r5
   8356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8356e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83574:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83578:	81a2      	strh	r2, [r4, #12]
   8357a:	6822      	ldr	r2, [r4, #0]
   8357c:	6661      	str	r1, [r4, #100]	; 0x64
   8357e:	6961      	ldr	r1, [r4, #20]
   83580:	1ad3      	subs	r3, r2, r3
   83582:	428b      	cmp	r3, r1
   83584:	dbe2      	blt.n	8354c <__swbuf_r+0x34>
   83586:	4621      	mov	r1, r4
   83588:	4638      	mov	r0, r7
   8358a:	f7fe fd11 	bl	81fb0 <_fflush_r>
   8358e:	b940      	cbnz	r0, 835a2 <__swbuf_r+0x8a>
   83590:	6822      	ldr	r2, [r4, #0]
   83592:	2301      	movs	r3, #1
   83594:	e7db      	b.n	8354e <__swbuf_r+0x36>
   83596:	4621      	mov	r1, r4
   83598:	4638      	mov	r0, r7
   8359a:	f7fe fd09 	bl	81fb0 <_fflush_r>
   8359e:	2800      	cmp	r0, #0
   835a0:	d0e3      	beq.n	8356a <__swbuf_r+0x52>
   835a2:	f04f 30ff 	mov.w	r0, #4294967295
   835a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835a8:	4621      	mov	r1, r4
   835aa:	4638      	mov	r0, r7
   835ac:	f7fe fbe8 	bl	81d80 <__swsetup_r>
   835b0:	2800      	cmp	r0, #0
   835b2:	d1f6      	bne.n	835a2 <__swbuf_r+0x8a>
   835b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   835b8:	6923      	ldr	r3, [r4, #16]
   835ba:	b291      	uxth	r1, r2
   835bc:	e7be      	b.n	8353c <__swbuf_r+0x24>
   835be:	f7fe fd8b 	bl	820d8 <__sinit>
   835c2:	e7b1      	b.n	83528 <__swbuf_r+0x10>

000835c4 <_wcrtomb_r>:
   835c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835c8:	4605      	mov	r5, r0
   835ca:	b086      	sub	sp, #24
   835cc:	461e      	mov	r6, r3
   835ce:	460c      	mov	r4, r1
   835d0:	b1a1      	cbz	r1, 835fc <_wcrtomb_r+0x38>
   835d2:	4b10      	ldr	r3, [pc, #64]	; (83614 <_wcrtomb_r+0x50>)
   835d4:	4617      	mov	r7, r2
   835d6:	f8d3 8000 	ldr.w	r8, [r3]
   835da:	f7ff f8d9 	bl	82790 <__locale_charset>
   835de:	9600      	str	r6, [sp, #0]
   835e0:	4603      	mov	r3, r0
   835e2:	463a      	mov	r2, r7
   835e4:	4621      	mov	r1, r4
   835e6:	4628      	mov	r0, r5
   835e8:	47c0      	blx	r8
   835ea:	1c43      	adds	r3, r0, #1
   835ec:	d103      	bne.n	835f6 <_wcrtomb_r+0x32>
   835ee:	2200      	movs	r2, #0
   835f0:	238a      	movs	r3, #138	; 0x8a
   835f2:	6032      	str	r2, [r6, #0]
   835f4:	602b      	str	r3, [r5, #0]
   835f6:	b006      	add	sp, #24
   835f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835fc:	4b05      	ldr	r3, [pc, #20]	; (83614 <_wcrtomb_r+0x50>)
   835fe:	681f      	ldr	r7, [r3, #0]
   83600:	f7ff f8c6 	bl	82790 <__locale_charset>
   83604:	9600      	str	r6, [sp, #0]
   83606:	4603      	mov	r3, r0
   83608:	4622      	mov	r2, r4
   8360a:	a903      	add	r1, sp, #12
   8360c:	4628      	mov	r0, r5
   8360e:	47b8      	blx	r7
   83610:	e7eb      	b.n	835ea <_wcrtomb_r+0x26>
   83612:	bf00      	nop
   83614:	20070990 	.word	0x20070990

00083618 <__ascii_wctomb>:
   83618:	b121      	cbz	r1, 83624 <__ascii_wctomb+0xc>
   8361a:	2aff      	cmp	r2, #255	; 0xff
   8361c:	d804      	bhi.n	83628 <__ascii_wctomb+0x10>
   8361e:	700a      	strb	r2, [r1, #0]
   83620:	2001      	movs	r0, #1
   83622:	4770      	bx	lr
   83624:	4608      	mov	r0, r1
   83626:	4770      	bx	lr
   83628:	238a      	movs	r3, #138	; 0x8a
   8362a:	6003      	str	r3, [r0, #0]
   8362c:	f04f 30ff 	mov.w	r0, #4294967295
   83630:	4770      	bx	lr
   83632:	bf00      	nop

00083634 <_write_r>:
   83634:	b570      	push	{r4, r5, r6, lr}
   83636:	460d      	mov	r5, r1
   83638:	4c08      	ldr	r4, [pc, #32]	; (8365c <_write_r+0x28>)
   8363a:	4611      	mov	r1, r2
   8363c:	4606      	mov	r6, r0
   8363e:	461a      	mov	r2, r3
   83640:	4628      	mov	r0, r5
   83642:	2300      	movs	r3, #0
   83644:	6023      	str	r3, [r4, #0]
   83646:	f7fc fdd3 	bl	801f0 <_write>
   8364a:	1c43      	adds	r3, r0, #1
   8364c:	d000      	beq.n	83650 <_write_r+0x1c>
   8364e:	bd70      	pop	{r4, r5, r6, pc}
   83650:	6823      	ldr	r3, [r4, #0]
   83652:	2b00      	cmp	r3, #0
   83654:	d0fb      	beq.n	8364e <_write_r+0x1a>
   83656:	6033      	str	r3, [r6, #0]
   83658:	bd70      	pop	{r4, r5, r6, pc}
   8365a:	bf00      	nop
   8365c:	20070a88 	.word	0x20070a88

00083660 <__register_exitproc>:
   83660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83664:	4c25      	ldr	r4, [pc, #148]	; (836fc <__register_exitproc+0x9c>)
   83666:	4606      	mov	r6, r0
   83668:	6825      	ldr	r5, [r4, #0]
   8366a:	4688      	mov	r8, r1
   8366c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83670:	4692      	mov	sl, r2
   83672:	4699      	mov	r9, r3
   83674:	b3c4      	cbz	r4, 836e8 <__register_exitproc+0x88>
   83676:	6860      	ldr	r0, [r4, #4]
   83678:	281f      	cmp	r0, #31
   8367a:	dc17      	bgt.n	836ac <__register_exitproc+0x4c>
   8367c:	1c41      	adds	r1, r0, #1
   8367e:	b176      	cbz	r6, 8369e <__register_exitproc+0x3e>
   83680:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83684:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83688:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8368c:	2201      	movs	r2, #1
   8368e:	4082      	lsls	r2, r0
   83690:	4315      	orrs	r5, r2
   83692:	2e02      	cmp	r6, #2
   83694:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83698:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8369c:	d01e      	beq.n	836dc <__register_exitproc+0x7c>
   8369e:	1c83      	adds	r3, r0, #2
   836a0:	6061      	str	r1, [r4, #4]
   836a2:	2000      	movs	r0, #0
   836a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   836a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   836ac:	4b14      	ldr	r3, [pc, #80]	; (83700 <__register_exitproc+0xa0>)
   836ae:	b303      	cbz	r3, 836f2 <__register_exitproc+0x92>
   836b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   836b4:	f7ff f8ea 	bl	8288c <malloc>
   836b8:	4604      	mov	r4, r0
   836ba:	b1d0      	cbz	r0, 836f2 <__register_exitproc+0x92>
   836bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   836c0:	2700      	movs	r7, #0
   836c2:	e884 0088 	stmia.w	r4, {r3, r7}
   836c6:	4638      	mov	r0, r7
   836c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   836cc:	2101      	movs	r1, #1
   836ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   836d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   836d6:	2e00      	cmp	r6, #0
   836d8:	d0e1      	beq.n	8369e <__register_exitproc+0x3e>
   836da:	e7d1      	b.n	83680 <__register_exitproc+0x20>
   836dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   836e0:	431a      	orrs	r2, r3
   836e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   836e6:	e7da      	b.n	8369e <__register_exitproc+0x3e>
   836e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   836ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   836f0:	e7c1      	b.n	83676 <__register_exitproc+0x16>
   836f2:	f04f 30ff 	mov.w	r0, #4294967295
   836f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   836fa:	bf00      	nop
   836fc:	00083b9c 	.word	0x00083b9c
   83700:	0008288d 	.word	0x0008288d

00083704 <_close_r>:
   83704:	b538      	push	{r3, r4, r5, lr}
   83706:	4c07      	ldr	r4, [pc, #28]	; (83724 <_close_r+0x20>)
   83708:	2300      	movs	r3, #0
   8370a:	4605      	mov	r5, r0
   8370c:	4608      	mov	r0, r1
   8370e:	6023      	str	r3, [r4, #0]
   83710:	f7fd f92a 	bl	80968 <_close>
   83714:	1c43      	adds	r3, r0, #1
   83716:	d000      	beq.n	8371a <_close_r+0x16>
   83718:	bd38      	pop	{r3, r4, r5, pc}
   8371a:	6823      	ldr	r3, [r4, #0]
   8371c:	2b00      	cmp	r3, #0
   8371e:	d0fb      	beq.n	83718 <_close_r+0x14>
   83720:	602b      	str	r3, [r5, #0]
   83722:	bd38      	pop	{r3, r4, r5, pc}
   83724:	20070a88 	.word	0x20070a88

00083728 <_fclose_r>:
   83728:	2900      	cmp	r1, #0
   8372a:	d03d      	beq.n	837a8 <_fclose_r+0x80>
   8372c:	b570      	push	{r4, r5, r6, lr}
   8372e:	4605      	mov	r5, r0
   83730:	460c      	mov	r4, r1
   83732:	b108      	cbz	r0, 83738 <_fclose_r+0x10>
   83734:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83736:	b37b      	cbz	r3, 83798 <_fclose_r+0x70>
   83738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8373c:	b90b      	cbnz	r3, 83742 <_fclose_r+0x1a>
   8373e:	2000      	movs	r0, #0
   83740:	bd70      	pop	{r4, r5, r6, pc}
   83742:	4621      	mov	r1, r4
   83744:	4628      	mov	r0, r5
   83746:	f7fe fb8f 	bl	81e68 <__sflush_r>
   8374a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8374c:	4606      	mov	r6, r0
   8374e:	b133      	cbz	r3, 8375e <_fclose_r+0x36>
   83750:	69e1      	ldr	r1, [r4, #28]
   83752:	4628      	mov	r0, r5
   83754:	4798      	blx	r3
   83756:	2800      	cmp	r0, #0
   83758:	bfb8      	it	lt
   8375a:	f04f 36ff 	movlt.w	r6, #4294967295
   8375e:	89a3      	ldrh	r3, [r4, #12]
   83760:	061b      	lsls	r3, r3, #24
   83762:	d41c      	bmi.n	8379e <_fclose_r+0x76>
   83764:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83766:	b141      	cbz	r1, 8377a <_fclose_r+0x52>
   83768:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8376c:	4299      	cmp	r1, r3
   8376e:	d002      	beq.n	83776 <_fclose_r+0x4e>
   83770:	4628      	mov	r0, r5
   83772:	f7fe fd79 	bl	82268 <_free_r>
   83776:	2300      	movs	r3, #0
   83778:	6323      	str	r3, [r4, #48]	; 0x30
   8377a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8377c:	b121      	cbz	r1, 83788 <_fclose_r+0x60>
   8377e:	4628      	mov	r0, r5
   83780:	f7fe fd72 	bl	82268 <_free_r>
   83784:	2300      	movs	r3, #0
   83786:	6463      	str	r3, [r4, #68]	; 0x44
   83788:	f7fe fcac 	bl	820e4 <__sfp_lock_acquire>
   8378c:	2300      	movs	r3, #0
   8378e:	81a3      	strh	r3, [r4, #12]
   83790:	f7fe fcaa 	bl	820e8 <__sfp_lock_release>
   83794:	4630      	mov	r0, r6
   83796:	bd70      	pop	{r4, r5, r6, pc}
   83798:	f7fe fc9e 	bl	820d8 <__sinit>
   8379c:	e7cc      	b.n	83738 <_fclose_r+0x10>
   8379e:	6921      	ldr	r1, [r4, #16]
   837a0:	4628      	mov	r0, r5
   837a2:	f7fe fd61 	bl	82268 <_free_r>
   837a6:	e7dd      	b.n	83764 <_fclose_r+0x3c>
   837a8:	2000      	movs	r0, #0
   837aa:	4770      	bx	lr

000837ac <_fstat_r>:
   837ac:	b538      	push	{r3, r4, r5, lr}
   837ae:	460b      	mov	r3, r1
   837b0:	4c07      	ldr	r4, [pc, #28]	; (837d0 <_fstat_r+0x24>)
   837b2:	4605      	mov	r5, r0
   837b4:	4611      	mov	r1, r2
   837b6:	4618      	mov	r0, r3
   837b8:	2300      	movs	r3, #0
   837ba:	6023      	str	r3, [r4, #0]
   837bc:	f7fd f8d8 	bl	80970 <_fstat>
   837c0:	1c43      	adds	r3, r0, #1
   837c2:	d000      	beq.n	837c6 <_fstat_r+0x1a>
   837c4:	bd38      	pop	{r3, r4, r5, pc}
   837c6:	6823      	ldr	r3, [r4, #0]
   837c8:	2b00      	cmp	r3, #0
   837ca:	d0fb      	beq.n	837c4 <_fstat_r+0x18>
   837cc:	602b      	str	r3, [r5, #0]
   837ce:	bd38      	pop	{r3, r4, r5, pc}
   837d0:	20070a88 	.word	0x20070a88

000837d4 <_isatty_r>:
   837d4:	b538      	push	{r3, r4, r5, lr}
   837d6:	4c07      	ldr	r4, [pc, #28]	; (837f4 <_isatty_r+0x20>)
   837d8:	2300      	movs	r3, #0
   837da:	4605      	mov	r5, r0
   837dc:	4608      	mov	r0, r1
   837de:	6023      	str	r3, [r4, #0]
   837e0:	f7fd f8cc 	bl	8097c <_isatty>
   837e4:	1c43      	adds	r3, r0, #1
   837e6:	d000      	beq.n	837ea <_isatty_r+0x16>
   837e8:	bd38      	pop	{r3, r4, r5, pc}
   837ea:	6823      	ldr	r3, [r4, #0]
   837ec:	2b00      	cmp	r3, #0
   837ee:	d0fb      	beq.n	837e8 <_isatty_r+0x14>
   837f0:	602b      	str	r3, [r5, #0]
   837f2:	bd38      	pop	{r3, r4, r5, pc}
   837f4:	20070a88 	.word	0x20070a88

000837f8 <_lseek_r>:
   837f8:	b570      	push	{r4, r5, r6, lr}
   837fa:	460d      	mov	r5, r1
   837fc:	4c08      	ldr	r4, [pc, #32]	; (83820 <_lseek_r+0x28>)
   837fe:	4611      	mov	r1, r2
   83800:	4606      	mov	r6, r0
   83802:	461a      	mov	r2, r3
   83804:	4628      	mov	r0, r5
   83806:	2300      	movs	r3, #0
   83808:	6023      	str	r3, [r4, #0]
   8380a:	f7fd f8b9 	bl	80980 <_lseek>
   8380e:	1c43      	adds	r3, r0, #1
   83810:	d000      	beq.n	83814 <_lseek_r+0x1c>
   83812:	bd70      	pop	{r4, r5, r6, pc}
   83814:	6823      	ldr	r3, [r4, #0]
   83816:	2b00      	cmp	r3, #0
   83818:	d0fb      	beq.n	83812 <_lseek_r+0x1a>
   8381a:	6033      	str	r3, [r6, #0]
   8381c:	bd70      	pop	{r4, r5, r6, pc}
   8381e:	bf00      	nop
   83820:	20070a88 	.word	0x20070a88

00083824 <_read_r>:
   83824:	b570      	push	{r4, r5, r6, lr}
   83826:	460d      	mov	r5, r1
   83828:	4c08      	ldr	r4, [pc, #32]	; (8384c <_read_r+0x28>)
   8382a:	4611      	mov	r1, r2
   8382c:	4606      	mov	r6, r0
   8382e:	461a      	mov	r2, r3
   83830:	4628      	mov	r0, r5
   83832:	2300      	movs	r3, #0
   83834:	6023      	str	r3, [r4, #0]
   83836:	f7fc fcbd 	bl	801b4 <_read>
   8383a:	1c43      	adds	r3, r0, #1
   8383c:	d000      	beq.n	83840 <_read_r+0x1c>
   8383e:	bd70      	pop	{r4, r5, r6, pc}
   83840:	6823      	ldr	r3, [r4, #0]
   83842:	2b00      	cmp	r3, #0
   83844:	d0fb      	beq.n	8383e <_read_r+0x1a>
   83846:	6033      	str	r3, [r6, #0]
   83848:	bd70      	pop	{r4, r5, r6, pc}
   8384a:	bf00      	nop
   8384c:	20070a88 	.word	0x20070a88

00083850 <__aeabi_uldivmod>:
   83850:	b953      	cbnz	r3, 83868 <__aeabi_uldivmod+0x18>
   83852:	b94a      	cbnz	r2, 83868 <__aeabi_uldivmod+0x18>
   83854:	2900      	cmp	r1, #0
   83856:	bf08      	it	eq
   83858:	2800      	cmpeq	r0, #0
   8385a:	bf1c      	itt	ne
   8385c:	f04f 31ff 	movne.w	r1, #4294967295
   83860:	f04f 30ff 	movne.w	r0, #4294967295
   83864:	f000 b982 	b.w	83b6c <__aeabi_idiv0>
   83868:	f1ad 0c08 	sub.w	ip, sp, #8
   8386c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83870:	f000 f806 	bl	83880 <__udivmoddi4>
   83874:	f8dd e004 	ldr.w	lr, [sp, #4]
   83878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8387c:	b004      	add	sp, #16
   8387e:	4770      	bx	lr

00083880 <__udivmoddi4>:
   83880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83884:	468c      	mov	ip, r1
   83886:	460c      	mov	r4, r1
   83888:	4605      	mov	r5, r0
   8388a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   8388c:	2b00      	cmp	r3, #0
   8388e:	d14f      	bne.n	83930 <__udivmoddi4+0xb0>
   83890:	428a      	cmp	r2, r1
   83892:	4617      	mov	r7, r2
   83894:	d96b      	bls.n	8396e <__udivmoddi4+0xee>
   83896:	fab2 fe82 	clz	lr, r2
   8389a:	f1be 0f00 	cmp.w	lr, #0
   8389e:	d00b      	beq.n	838b8 <__udivmoddi4+0x38>
   838a0:	f1ce 0520 	rsb	r5, lr, #32
   838a4:	fa20 f505 	lsr.w	r5, r0, r5
   838a8:	fa01 f30e 	lsl.w	r3, r1, lr
   838ac:	ea45 0c03 	orr.w	ip, r5, r3
   838b0:	fa02 f70e 	lsl.w	r7, r2, lr
   838b4:	fa00 f50e 	lsl.w	r5, r0, lr
   838b8:	0c39      	lsrs	r1, r7, #16
   838ba:	fbbc f0f1 	udiv	r0, ip, r1
   838be:	b2ba      	uxth	r2, r7
   838c0:	fb01 c310 	mls	r3, r1, r0, ip
   838c4:	fb00 f802 	mul.w	r8, r0, r2
   838c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   838cc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   838d0:	45a0      	cmp	r8, r4
   838d2:	d909      	bls.n	838e8 <__udivmoddi4+0x68>
   838d4:	19e4      	adds	r4, r4, r7
   838d6:	f100 33ff 	add.w	r3, r0, #4294967295
   838da:	f080 8128 	bcs.w	83b2e <__udivmoddi4+0x2ae>
   838de:	45a0      	cmp	r8, r4
   838e0:	f240 8125 	bls.w	83b2e <__udivmoddi4+0x2ae>
   838e4:	3802      	subs	r0, #2
   838e6:	443c      	add	r4, r7
   838e8:	ebc8 0404 	rsb	r4, r8, r4
   838ec:	fbb4 f3f1 	udiv	r3, r4, r1
   838f0:	fb01 4c13 	mls	ip, r1, r3, r4
   838f4:	fb03 f202 	mul.w	r2, r3, r2
   838f8:	b2ac      	uxth	r4, r5
   838fa:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   838fe:	428a      	cmp	r2, r1
   83900:	d909      	bls.n	83916 <__udivmoddi4+0x96>
   83902:	19c9      	adds	r1, r1, r7
   83904:	f103 34ff 	add.w	r4, r3, #4294967295
   83908:	f080 810f 	bcs.w	83b2a <__udivmoddi4+0x2aa>
   8390c:	428a      	cmp	r2, r1
   8390e:	f240 810c 	bls.w	83b2a <__udivmoddi4+0x2aa>
   83912:	3b02      	subs	r3, #2
   83914:	4439      	add	r1, r7
   83916:	1a8a      	subs	r2, r1, r2
   83918:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8391c:	2100      	movs	r1, #0
   8391e:	2e00      	cmp	r6, #0
   83920:	d063      	beq.n	839ea <__udivmoddi4+0x16a>
   83922:	fa22 f20e 	lsr.w	r2, r2, lr
   83926:	2300      	movs	r3, #0
   83928:	e886 000c 	stmia.w	r6, {r2, r3}
   8392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83930:	428b      	cmp	r3, r1
   83932:	d907      	bls.n	83944 <__udivmoddi4+0xc4>
   83934:	2e00      	cmp	r6, #0
   83936:	d056      	beq.n	839e6 <__udivmoddi4+0x166>
   83938:	2100      	movs	r1, #0
   8393a:	e886 0011 	stmia.w	r6, {r0, r4}
   8393e:	4608      	mov	r0, r1
   83940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83944:	fab3 f183 	clz	r1, r3
   83948:	2900      	cmp	r1, #0
   8394a:	f040 8093 	bne.w	83a74 <__udivmoddi4+0x1f4>
   8394e:	42a3      	cmp	r3, r4
   83950:	d302      	bcc.n	83958 <__udivmoddi4+0xd8>
   83952:	4282      	cmp	r2, r0
   83954:	f200 80fe 	bhi.w	83b54 <__udivmoddi4+0x2d4>
   83958:	1a85      	subs	r5, r0, r2
   8395a:	eb64 0303 	sbc.w	r3, r4, r3
   8395e:	469c      	mov	ip, r3
   83960:	2001      	movs	r0, #1
   83962:	2e00      	cmp	r6, #0
   83964:	d041      	beq.n	839ea <__udivmoddi4+0x16a>
   83966:	e886 1020 	stmia.w	r6, {r5, ip}
   8396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8396e:	b912      	cbnz	r2, 83976 <__udivmoddi4+0xf6>
   83970:	2701      	movs	r7, #1
   83972:	fbb7 f7f2 	udiv	r7, r7, r2
   83976:	fab7 fe87 	clz	lr, r7
   8397a:	f1be 0f00 	cmp.w	lr, #0
   8397e:	d136      	bne.n	839ee <__udivmoddi4+0x16e>
   83980:	1be4      	subs	r4, r4, r7
   83982:	ea4f 4817 	mov.w	r8, r7, lsr #16
   83986:	fa1f f987 	uxth.w	r9, r7
   8398a:	2101      	movs	r1, #1
   8398c:	fbb4 f3f8 	udiv	r3, r4, r8
   83990:	fb08 4413 	mls	r4, r8, r3, r4
   83994:	fb09 f203 	mul.w	r2, r9, r3
   83998:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8399c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   839a0:	42a2      	cmp	r2, r4
   839a2:	d907      	bls.n	839b4 <__udivmoddi4+0x134>
   839a4:	19e4      	adds	r4, r4, r7
   839a6:	f103 30ff 	add.w	r0, r3, #4294967295
   839aa:	d202      	bcs.n	839b2 <__udivmoddi4+0x132>
   839ac:	42a2      	cmp	r2, r4
   839ae:	f200 80d3 	bhi.w	83b58 <__udivmoddi4+0x2d8>
   839b2:	4603      	mov	r3, r0
   839b4:	1aa4      	subs	r4, r4, r2
   839b6:	fbb4 f0f8 	udiv	r0, r4, r8
   839ba:	fb08 4810 	mls	r8, r8, r0, r4
   839be:	fb09 f900 	mul.w	r9, r9, r0
   839c2:	b2ac      	uxth	r4, r5
   839c4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   839c8:	4591      	cmp	r9, r2
   839ca:	d907      	bls.n	839dc <__udivmoddi4+0x15c>
   839cc:	19d2      	adds	r2, r2, r7
   839ce:	f100 34ff 	add.w	r4, r0, #4294967295
   839d2:	d202      	bcs.n	839da <__udivmoddi4+0x15a>
   839d4:	4591      	cmp	r9, r2
   839d6:	f200 80ba 	bhi.w	83b4e <__udivmoddi4+0x2ce>
   839da:	4620      	mov	r0, r4
   839dc:	ebc9 0202 	rsb	r2, r9, r2
   839e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   839e4:	e79b      	b.n	8391e <__udivmoddi4+0x9e>
   839e6:	4631      	mov	r1, r6
   839e8:	4630      	mov	r0, r6
   839ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839ee:	fa07 f70e 	lsl.w	r7, r7, lr
   839f2:	f1ce 0c20 	rsb	ip, lr, #32
   839f6:	fa24 f30c 	lsr.w	r3, r4, ip
   839fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
   839fe:	fbb3 faf8 	udiv	sl, r3, r8
   83a02:	fa1f f987 	uxth.w	r9, r7
   83a06:	fb08 351a 	mls	r5, r8, sl, r3
   83a0a:	fa20 fc0c 	lsr.w	ip, r0, ip
   83a0e:	fa04 f40e 	lsl.w	r4, r4, lr
   83a12:	fb0a fb09 	mul.w	fp, sl, r9
   83a16:	ea4c 0c04 	orr.w	ip, ip, r4
   83a1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
   83a1e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   83a22:	459b      	cmp	fp, r3
   83a24:	fa00 f50e 	lsl.w	r5, r0, lr
   83a28:	d90a      	bls.n	83a40 <__udivmoddi4+0x1c0>
   83a2a:	19db      	adds	r3, r3, r7
   83a2c:	f10a 32ff 	add.w	r2, sl, #4294967295
   83a30:	f080 808b 	bcs.w	83b4a <__udivmoddi4+0x2ca>
   83a34:	459b      	cmp	fp, r3
   83a36:	f240 8088 	bls.w	83b4a <__udivmoddi4+0x2ca>
   83a3a:	f1aa 0a02 	sub.w	sl, sl, #2
   83a3e:	443b      	add	r3, r7
   83a40:	ebcb 0303 	rsb	r3, fp, r3
   83a44:	fbb3 f0f8 	udiv	r0, r3, r8
   83a48:	fb08 3310 	mls	r3, r8, r0, r3
   83a4c:	fb00 f409 	mul.w	r4, r0, r9
   83a50:	fa1f fc8c 	uxth.w	ip, ip
   83a54:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   83a58:	429c      	cmp	r4, r3
   83a5a:	d907      	bls.n	83a6c <__udivmoddi4+0x1ec>
   83a5c:	19db      	adds	r3, r3, r7
   83a5e:	f100 32ff 	add.w	r2, r0, #4294967295
   83a62:	d26e      	bcs.n	83b42 <__udivmoddi4+0x2c2>
   83a64:	429c      	cmp	r4, r3
   83a66:	d96c      	bls.n	83b42 <__udivmoddi4+0x2c2>
   83a68:	3802      	subs	r0, #2
   83a6a:	443b      	add	r3, r7
   83a6c:	1b1c      	subs	r4, r3, r4
   83a6e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   83a72:	e78b      	b.n	8398c <__udivmoddi4+0x10c>
   83a74:	f1c1 0e20 	rsb	lr, r1, #32
   83a78:	408b      	lsls	r3, r1
   83a7a:	fa22 fc0e 	lsr.w	ip, r2, lr
   83a7e:	ea4c 0c03 	orr.w	ip, ip, r3
   83a82:	fa24 f70e 	lsr.w	r7, r4, lr
   83a86:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83a8a:	fbb7 faf9 	udiv	sl, r7, r9
   83a8e:	fa1f f38c 	uxth.w	r3, ip
   83a92:	fb09 771a 	mls	r7, r9, sl, r7
   83a96:	fa20 f80e 	lsr.w	r8, r0, lr
   83a9a:	408c      	lsls	r4, r1
   83a9c:	fb0a f503 	mul.w	r5, sl, r3
   83aa0:	ea48 0404 	orr.w	r4, r8, r4
   83aa4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83aa8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83aac:	42bd      	cmp	r5, r7
   83aae:	fa02 f201 	lsl.w	r2, r2, r1
   83ab2:	fa00 fb01 	lsl.w	fp, r0, r1
   83ab6:	d909      	bls.n	83acc <__udivmoddi4+0x24c>
   83ab8:	eb17 070c 	adds.w	r7, r7, ip
   83abc:	f10a 30ff 	add.w	r0, sl, #4294967295
   83ac0:	d241      	bcs.n	83b46 <__udivmoddi4+0x2c6>
   83ac2:	42bd      	cmp	r5, r7
   83ac4:	d93f      	bls.n	83b46 <__udivmoddi4+0x2c6>
   83ac6:	f1aa 0a02 	sub.w	sl, sl, #2
   83aca:	4467      	add	r7, ip
   83acc:	1b7f      	subs	r7, r7, r5
   83ace:	fbb7 f5f9 	udiv	r5, r7, r9
   83ad2:	fb09 7715 	mls	r7, r9, r5, r7
   83ad6:	fb05 f303 	mul.w	r3, r5, r3
   83ada:	b2a4      	uxth	r4, r4
   83adc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   83ae0:	42bb      	cmp	r3, r7
   83ae2:	d908      	bls.n	83af6 <__udivmoddi4+0x276>
   83ae4:	eb17 070c 	adds.w	r7, r7, ip
   83ae8:	f105 30ff 	add.w	r0, r5, #4294967295
   83aec:	d227      	bcs.n	83b3e <__udivmoddi4+0x2be>
   83aee:	42bb      	cmp	r3, r7
   83af0:	d925      	bls.n	83b3e <__udivmoddi4+0x2be>
   83af2:	3d02      	subs	r5, #2
   83af4:	4467      	add	r7, ip
   83af6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   83afa:	fba0 8902 	umull	r8, r9, r0, r2
   83afe:	1aff      	subs	r7, r7, r3
   83b00:	454f      	cmp	r7, r9
   83b02:	4645      	mov	r5, r8
   83b04:	464c      	mov	r4, r9
   83b06:	d314      	bcc.n	83b32 <__udivmoddi4+0x2b2>
   83b08:	d029      	beq.n	83b5e <__udivmoddi4+0x2de>
   83b0a:	b366      	cbz	r6, 83b66 <__udivmoddi4+0x2e6>
   83b0c:	ebbb 0305 	subs.w	r3, fp, r5
   83b10:	eb67 0704 	sbc.w	r7, r7, r4
   83b14:	fa07 fe0e 	lsl.w	lr, r7, lr
   83b18:	40cb      	lsrs	r3, r1
   83b1a:	40cf      	lsrs	r7, r1
   83b1c:	ea4e 0303 	orr.w	r3, lr, r3
   83b20:	e886 0088 	stmia.w	r6, {r3, r7}
   83b24:	2100      	movs	r1, #0
   83b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b2a:	4623      	mov	r3, r4
   83b2c:	e6f3      	b.n	83916 <__udivmoddi4+0x96>
   83b2e:	4618      	mov	r0, r3
   83b30:	e6da      	b.n	838e8 <__udivmoddi4+0x68>
   83b32:	ebb8 0502 	subs.w	r5, r8, r2
   83b36:	eb69 040c 	sbc.w	r4, r9, ip
   83b3a:	3801      	subs	r0, #1
   83b3c:	e7e5      	b.n	83b0a <__udivmoddi4+0x28a>
   83b3e:	4605      	mov	r5, r0
   83b40:	e7d9      	b.n	83af6 <__udivmoddi4+0x276>
   83b42:	4610      	mov	r0, r2
   83b44:	e792      	b.n	83a6c <__udivmoddi4+0x1ec>
   83b46:	4682      	mov	sl, r0
   83b48:	e7c0      	b.n	83acc <__udivmoddi4+0x24c>
   83b4a:	4692      	mov	sl, r2
   83b4c:	e778      	b.n	83a40 <__udivmoddi4+0x1c0>
   83b4e:	3802      	subs	r0, #2
   83b50:	443a      	add	r2, r7
   83b52:	e743      	b.n	839dc <__udivmoddi4+0x15c>
   83b54:	4608      	mov	r0, r1
   83b56:	e704      	b.n	83962 <__udivmoddi4+0xe2>
   83b58:	3b02      	subs	r3, #2
   83b5a:	443c      	add	r4, r7
   83b5c:	e72a      	b.n	839b4 <__udivmoddi4+0x134>
   83b5e:	45c3      	cmp	fp, r8
   83b60:	d3e7      	bcc.n	83b32 <__udivmoddi4+0x2b2>
   83b62:	463c      	mov	r4, r7
   83b64:	e7d1      	b.n	83b0a <__udivmoddi4+0x28a>
   83b66:	4631      	mov	r1, r6
   83b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00083b6c <__aeabi_idiv0>:
   83b6c:	4770      	bx	lr
   83b6e:	bf00      	nop
   83b70:	54534554 	.word	0x54534554
   83b74:	45545345 	.word	0x45545345
   83b78:	53455453 	.word	0x53455453
   83b7c:	54534554 	.word	0x54534554
   83b80:	45545345 	.word	0x45545345
   83b84:	53455453 	.word	0x53455453
   83b88:	00000054 	.word	0x00000054
   83b8c:	3a3a6425 	.word	0x3a3a6425
   83b90:	00000000 	.word	0x00000000
   83b94:	00000a0d 	.word	0x00000a0d
   83b98:	00000043 	.word	0x00000043

00083b9c <_global_impure_ptr>:
   83b9c:	20070130                                0.. 

00083ba0 <zeroes.6993>:
   83ba0:	30303030 30303030 30303030 30303030     0000000000000000
   83bb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   83bc0:	00000000 33323130 37363534 62613938     ....0123456789ab
   83bd0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00083be0 <blanks.6992>:
   83be0:	20202020 20202020 20202020 20202020                     

00083bf0 <_init>:
   83bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bf2:	bf00      	nop
   83bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83bf6:	bc08      	pop	{r3}
   83bf8:	469e      	mov	lr, r3
   83bfa:	4770      	bx	lr

00083bfc <__init_array_start>:
   83bfc:	00081e49 	.word	0x00081e49

00083c00 <__frame_dummy_init_array_entry>:
   83c00:	00080119                                ....

00083c04 <_fini>:
   83c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c06:	bf00      	nop
   83c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c0a:	bc08      	pop	{r3}
   83c0c:	469e      	mov	lr, r3
   83c0e:	4770      	bx	lr

00083c10 <__fini_array_start>:
   83c10:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00083b98 00000000 00000000 00000000     .;..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	00083619                                .6..
