
PWM_Decoder_v0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c30  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083c30  00083c30  0000bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00083c38  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000fc  20070994  000845cc  00010994  2**2
                  ALLOC
  4 .stack        00002000  20070a90  000846c8  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009aec  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b99  00000000  00000000  0001a504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000403e  00000000  00000000  0001c09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000998  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008c0  00000000  00000000  00020a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016d8f  00000000  00000000  00021333  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b5f7  00000000  00000000  000380c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062fae  00000000  00000000  000436b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020cc  00000000  00000000  000a6668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a90 	.word	0x20072a90
   80004:	00080771 	.word	0x00080771
   80008:	0008076d 	.word	0x0008076d
   8000c:	0008076d 	.word	0x0008076d
   80010:	0008076d 	.word	0x0008076d
   80014:	0008076d 	.word	0x0008076d
   80018:	0008076d 	.word	0x0008076d
	...
   8002c:	0008076d 	.word	0x0008076d
   80030:	0008076d 	.word	0x0008076d
   80034:	00000000 	.word	0x00000000
   80038:	0008076d 	.word	0x0008076d
   8003c:	0008076d 	.word	0x0008076d
   80040:	0008076d 	.word	0x0008076d
   80044:	0008076d 	.word	0x0008076d
   80048:	0008076d 	.word	0x0008076d
   8004c:	0008076d 	.word	0x0008076d
   80050:	0008076d 	.word	0x0008076d
   80054:	0008076d 	.word	0x0008076d
   80058:	0008076d 	.word	0x0008076d
   8005c:	0008076d 	.word	0x0008076d
   80060:	0008076d 	.word	0x0008076d
   80064:	0008076d 	.word	0x0008076d
   80068:	00000000 	.word	0x00000000
   8006c:	00080519 	.word	0x00080519
   80070:	0008052d 	.word	0x0008052d
   80074:	00080541 	.word	0x00080541
   80078:	00080555 	.word	0x00080555
	...
   80084:	0008076d 	.word	0x0008076d
   80088:	0008076d 	.word	0x0008076d
   8008c:	0008076d 	.word	0x0008076d
   80090:	0008076d 	.word	0x0008076d
   80094:	0008076d 	.word	0x0008076d
   80098:	0008076d 	.word	0x0008076d
   8009c:	0008076d 	.word	0x0008076d
   800a0:	0008076d 	.word	0x0008076d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008076d 	.word	0x0008076d
   800ac:	0008076d 	.word	0x0008076d
   800b0:	0008076d 	.word	0x0008076d
   800b4:	0008076d 	.word	0x0008076d
   800b8:	0008076d 	.word	0x0008076d
   800bc:	0008076d 	.word	0x0008076d
   800c0:	0008076d 	.word	0x0008076d
   800c4:	00080ad1 	.word	0x00080ad1
   800c8:	0008076d 	.word	0x0008076d
   800cc:	0008076d 	.word	0x0008076d
   800d0:	0008076d 	.word	0x0008076d
   800d4:	0008076d 	.word	0x0008076d
   800d8:	0008076d 	.word	0x0008076d
   800dc:	0008076d 	.word	0x0008076d
   800e0:	0008076d 	.word	0x0008076d
   800e4:	0008076d 	.word	0x0008076d
   800e8:	0008076d 	.word	0x0008076d
   800ec:	0008076d 	.word	0x0008076d
   800f0:	0008076d 	.word	0x0008076d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00083c38 	.word	0x00083c38

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00083c38 	.word	0x00083c38
   80144:	20070998 	.word	0x20070998
   80148:	00083c38 	.word	0x00083c38
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000805d1 	.word	0x000805d1
   80198:	00080625 	.word	0x00080625
   8019c:	00080635 	.word	0x00080635
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080645 	.word	0x00080645
   801ac:	00080569 	.word	0x00080569
   801b0:	00080821 	.word	0x00080821

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	20070a88 	.word	0x20070a88
   801ec:	20070a80 	.word	0x20070a80

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d818      	bhi.n	80228 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b182      	cbz	r2, 80222 <_write+0x32>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80222:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8022c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a84 	.word	0x20070a84
   8023c:	20070a88 	.word	0x20070a88

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b12      	ldr	r3, [pc, #72]	; (80290 <board_init+0x50>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c11      	ldr	r4, [pc, #68]	; (80294 <board_init+0x54>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c0d      	ldr	r4, [pc, #52]	; (80298 <board_init+0x58>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	4908      	ldr	r1, [pc, #32]	; (8029c <board_init+0x5c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	4908      	ldr	r1, [pc, #32]	; (802a0 <board_init+0x60>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	4808      	ldr	r0, [pc, #32]	; (802a4 <board_init+0x64>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a07      	ldr	r2, [pc, #28]	; (802a8 <board_init+0x68>)
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <board_init+0x6c>)
   8028c:	4798      	blx	r3
   8028e:	bd10      	pop	{r4, pc}
   80290:	400e1a50 	.word	0x400e1a50
   80294:	00080655 	.word	0x00080655
   80298:	00080355 	.word	0x00080355
   8029c:	28000079 	.word	0x28000079
   802a0:	28000001 	.word	0x28000001
   802a4:	400e0e00 	.word	0x400e0e00
   802a8:	08000001 	.word	0x08000001
   802ac:	00080429 	.word	0x00080429

000802b0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802b0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802b6:	d016      	beq.n	802e6 <pio_set_peripheral+0x36>
   802b8:	d804      	bhi.n	802c4 <pio_set_peripheral+0x14>
   802ba:	b1c1      	cbz	r1, 802ee <pio_set_peripheral+0x3e>
   802bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802c0:	d00a      	beq.n	802d8 <pio_set_peripheral+0x28>
   802c2:	e013      	b.n	802ec <pio_set_peripheral+0x3c>
   802c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802c8:	d011      	beq.n	802ee <pio_set_peripheral+0x3e>
   802ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802ce:	d00e      	beq.n	802ee <pio_set_peripheral+0x3e>
   802d0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802d4:	d10a      	bne.n	802ec <pio_set_peripheral+0x3c>
   802d6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802da:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802dc:	400b      	ands	r3, r1
   802de:	ea23 0302 	bic.w	r3, r3, r2
   802e2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802e4:	e002      	b.n	802ec <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802e8:	4313      	orrs	r3, r2
   802ea:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802ec:	6042      	str	r2, [r0, #4]
   802ee:	4770      	bx	lr

000802f0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802f0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802f2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802f6:	bf14      	ite	ne
   802f8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802fa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802fc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80300:	bf14      	ite	ne
   80302:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80304:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80306:	f012 0f02 	tst.w	r2, #2
   8030a:	d002      	beq.n	80312 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8030c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80310:	e004      	b.n	8031c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80312:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80316:	bf18      	it	ne
   80318:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8031c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8031e:	6001      	str	r1, [r0, #0]
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80324:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80326:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80328:	9c01      	ldr	r4, [sp, #4]
   8032a:	b10c      	cbz	r4, 80330 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8032c:	6641      	str	r1, [r0, #100]	; 0x64
   8032e:	e000      	b.n	80332 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80330:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80332:	b10b      	cbz	r3, 80338 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80334:	6501      	str	r1, [r0, #80]	; 0x50
   80336:	e000      	b.n	8033a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80338:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8033a:	b10a      	cbz	r2, 80340 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8033c:	6301      	str	r1, [r0, #48]	; 0x30
   8033e:	e000      	b.n	80342 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80340:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80342:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80344:	6001      	str	r1, [r0, #0]
}
   80346:	f85d 4b04 	ldr.w	r4, [sp], #4
   8034a:	4770      	bx	lr

0008034c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8034c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8034e:	4770      	bx	lr

00080350 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80350:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80352:	4770      	bx	lr

00080354 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80354:	b570      	push	{r4, r5, r6, lr}
   80356:	b082      	sub	sp, #8
   80358:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8035a:	0943      	lsrs	r3, r0, #5
   8035c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80360:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80364:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80366:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8036a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8036e:	d030      	beq.n	803d2 <pio_configure_pin+0x7e>
   80370:	d806      	bhi.n	80380 <pio_configure_pin+0x2c>
   80372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80376:	d00a      	beq.n	8038e <pio_configure_pin+0x3a>
   80378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8037c:	d018      	beq.n	803b0 <pio_configure_pin+0x5c>
   8037e:	e049      	b.n	80414 <pio_configure_pin+0xc0>
   80380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80384:	d030      	beq.n	803e8 <pio_configure_pin+0x94>
   80386:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8038a:	d02d      	beq.n	803e8 <pio_configure_pin+0x94>
   8038c:	e042      	b.n	80414 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8038e:	f000 001f 	and.w	r0, r0, #31
   80392:	2601      	movs	r6, #1
   80394:	4086      	lsls	r6, r0
   80396:	4620      	mov	r0, r4
   80398:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8039c:	4632      	mov	r2, r6
   8039e:	4b1f      	ldr	r3, [pc, #124]	; (8041c <pio_configure_pin+0xc8>)
   803a0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803a2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803a6:	bf14      	ite	ne
   803a8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803aa:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ac:	2001      	movs	r0, #1
   803ae:	e032      	b.n	80416 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803b0:	f000 001f 	and.w	r0, r0, #31
   803b4:	2601      	movs	r6, #1
   803b6:	4086      	lsls	r6, r0
   803b8:	4620      	mov	r0, r4
   803ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803be:	4632      	mov	r2, r6
   803c0:	4b16      	ldr	r3, [pc, #88]	; (8041c <pio_configure_pin+0xc8>)
   803c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803c8:	bf14      	ite	ne
   803ca:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803cc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ce:	2001      	movs	r0, #1
   803d0:	e021      	b.n	80416 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803d2:	f000 031f 	and.w	r3, r0, #31
   803d6:	2601      	movs	r6, #1
   803d8:	4620      	mov	r0, r4
   803da:	fa06 f103 	lsl.w	r1, r6, r3
   803de:	462a      	mov	r2, r5
   803e0:	4b0f      	ldr	r3, [pc, #60]	; (80420 <pio_configure_pin+0xcc>)
   803e2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803e4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803e6:	e016      	b.n	80416 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803e8:	f000 031f 	and.w	r3, r0, #31
   803ec:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803f2:	ea05 0106 	and.w	r1, r5, r6
   803f6:	9100      	str	r1, [sp, #0]
   803f8:	4620      	mov	r0, r4
   803fa:	fa06 f103 	lsl.w	r1, r6, r3
   803fe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80402:	bf14      	ite	ne
   80404:	2200      	movne	r2, #0
   80406:	2201      	moveq	r2, #1
   80408:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8040c:	4c05      	ldr	r4, [pc, #20]	; (80424 <pio_configure_pin+0xd0>)
   8040e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80410:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80412:	e000      	b.n	80416 <pio_configure_pin+0xc2>

	default:
		return 0;
   80414:	2000      	movs	r0, #0
	}

	return 1;
}
   80416:	b002      	add	sp, #8
   80418:	bd70      	pop	{r4, r5, r6, pc}
   8041a:	bf00      	nop
   8041c:	000802b1 	.word	0x000802b1
   80420:	000802f1 	.word	0x000802f1
   80424:	00080325 	.word	0x00080325

00080428 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80428:	b570      	push	{r4, r5, r6, lr}
   8042a:	b082      	sub	sp, #8
   8042c:	4606      	mov	r6, r0
   8042e:	460d      	mov	r5, r1
   80430:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80432:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80436:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8043a:	d026      	beq.n	8048a <pio_configure_pin_group+0x62>
   8043c:	d806      	bhi.n	8044c <pio_configure_pin_group+0x24>
   8043e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80442:	d00a      	beq.n	8045a <pio_configure_pin_group+0x32>
   80444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80448:	d013      	beq.n	80472 <pio_configure_pin_group+0x4a>
   8044a:	e034      	b.n	804b6 <pio_configure_pin_group+0x8e>
   8044c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80450:	d01f      	beq.n	80492 <pio_configure_pin_group+0x6a>
   80452:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80456:	d01c      	beq.n	80492 <pio_configure_pin_group+0x6a>
   80458:	e02d      	b.n	804b6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8045a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8045e:	462a      	mov	r2, r5
   80460:	4b16      	ldr	r3, [pc, #88]	; (804bc <pio_configure_pin_group+0x94>)
   80462:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80464:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80468:	bf14      	ite	ne
   8046a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8046c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8046e:	2001      	movs	r0, #1
   80470:	e022      	b.n	804b8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80476:	462a      	mov	r2, r5
   80478:	4b10      	ldr	r3, [pc, #64]	; (804bc <pio_configure_pin_group+0x94>)
   8047a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8047c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80480:	bf14      	ite	ne
   80482:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80484:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80486:	2001      	movs	r0, #1
   80488:	e016      	b.n	804b8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8048a:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <pio_configure_pin_group+0x98>)
   8048c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8048e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80490:	e012      	b.n	804b8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80492:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80496:	f004 0301 	and.w	r3, r4, #1
   8049a:	9300      	str	r3, [sp, #0]
   8049c:	4630      	mov	r0, r6
   8049e:	4629      	mov	r1, r5
   804a0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804a4:	bf14      	ite	ne
   804a6:	2200      	movne	r2, #0
   804a8:	2201      	moveq	r2, #1
   804aa:	f3c4 0380 	ubfx	r3, r4, #2, #1
   804ae:	4c05      	ldr	r4, [pc, #20]	; (804c4 <pio_configure_pin_group+0x9c>)
   804b0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804b2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804b4:	e000      	b.n	804b8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   804b6:	2000      	movs	r0, #0
	}

	return 1;
}
   804b8:	b002      	add	sp, #8
   804ba:	bd70      	pop	{r4, r5, r6, pc}
   804bc:	000802b1 	.word	0x000802b1
   804c0:	000802f1 	.word	0x000802f1
   804c4:	00080325 	.word	0x00080325

000804c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804cc:	4604      	mov	r4, r0
   804ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804d0:	4b0e      	ldr	r3, [pc, #56]	; (8050c <pio_handler_process+0x44>)
   804d2:	4798      	blx	r3
   804d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804d6:	4620      	mov	r0, r4
   804d8:	4b0d      	ldr	r3, [pc, #52]	; (80510 <pio_handler_process+0x48>)
   804da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804dc:	4005      	ands	r5, r0
   804de:	d013      	beq.n	80508 <pio_handler_process+0x40>
   804e0:	4c0c      	ldr	r4, [pc, #48]	; (80514 <pio_handler_process+0x4c>)
   804e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804e6:	6823      	ldr	r3, [r4, #0]
   804e8:	4543      	cmp	r3, r8
   804ea:	d108      	bne.n	804fe <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804ec:	6861      	ldr	r1, [r4, #4]
   804ee:	4229      	tst	r1, r5
   804f0:	d005      	beq.n	804fe <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   804f2:	68e3      	ldr	r3, [r4, #12]
   804f4:	4640      	mov	r0, r8
   804f6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   804f8:	6863      	ldr	r3, [r4, #4]
   804fa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   804fe:	42b4      	cmp	r4, r6
   80500:	d002      	beq.n	80508 <pio_handler_process+0x40>
   80502:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80504:	2d00      	cmp	r5, #0
   80506:	d1ee      	bne.n	804e6 <pio_handler_process+0x1e>
   80508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8050c:	0008034d 	.word	0x0008034d
   80510:	00080351 	.word	0x00080351
   80514:	200709b0 	.word	0x200709b0

00080518 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80518:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8051a:	4802      	ldr	r0, [pc, #8]	; (80524 <PIOA_Handler+0xc>)
   8051c:	210b      	movs	r1, #11
   8051e:	4b02      	ldr	r3, [pc, #8]	; (80528 <PIOA_Handler+0x10>)
   80520:	4798      	blx	r3
   80522:	bd08      	pop	{r3, pc}
   80524:	400e0e00 	.word	0x400e0e00
   80528:	000804c9 	.word	0x000804c9

0008052c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8052c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8052e:	4802      	ldr	r0, [pc, #8]	; (80538 <PIOB_Handler+0xc>)
   80530:	210c      	movs	r1, #12
   80532:	4b02      	ldr	r3, [pc, #8]	; (8053c <PIOB_Handler+0x10>)
   80534:	4798      	blx	r3
   80536:	bd08      	pop	{r3, pc}
   80538:	400e1000 	.word	0x400e1000
   8053c:	000804c9 	.word	0x000804c9

00080540 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80540:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80542:	4802      	ldr	r0, [pc, #8]	; (8054c <PIOC_Handler+0xc>)
   80544:	210d      	movs	r1, #13
   80546:	4b02      	ldr	r3, [pc, #8]	; (80550 <PIOC_Handler+0x10>)
   80548:	4798      	blx	r3
   8054a:	bd08      	pop	{r3, pc}
   8054c:	400e1200 	.word	0x400e1200
   80550:	000804c9 	.word	0x000804c9

00080554 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80554:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80556:	4802      	ldr	r0, [pc, #8]	; (80560 <PIOD_Handler+0xc>)
   80558:	210e      	movs	r1, #14
   8055a:	4b02      	ldr	r3, [pc, #8]	; (80564 <PIOD_Handler+0x10>)
   8055c:	4798      	blx	r3
   8055e:	bd08      	pop	{r3, pc}
   80560:	400e1400 	.word	0x400e1400
   80564:	000804c9 	.word	0x000804c9

00080568 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80568:	4a18      	ldr	r2, [pc, #96]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   8056a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8056c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80570:	4318      	orrs	r0, r3
   80572:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80574:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80576:	f013 0f08 	tst.w	r3, #8
   8057a:	d003      	beq.n	80584 <pmc_switch_mck_to_pllack+0x1c>
   8057c:	e009      	b.n	80592 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8057e:	3b01      	subs	r3, #1
   80580:	d103      	bne.n	8058a <pmc_switch_mck_to_pllack+0x22>
   80582:	e01e      	b.n	805c2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80584:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80588:	4910      	ldr	r1, [pc, #64]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   8058a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8058c:	f012 0f08 	tst.w	r2, #8
   80590:	d0f5      	beq.n	8057e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80592:	4a0e      	ldr	r2, [pc, #56]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   80594:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80596:	f023 0303 	bic.w	r3, r3, #3
   8059a:	f043 0302 	orr.w	r3, r3, #2
   8059e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805a0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   805a2:	f010 0008 	ands.w	r0, r0, #8
   805a6:	d004      	beq.n	805b2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   805a8:	2000      	movs	r0, #0
   805aa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   805ac:	3b01      	subs	r3, #1
   805ae:	d103      	bne.n	805b8 <pmc_switch_mck_to_pllack+0x50>
   805b0:	e009      	b.n	805c6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805b6:	4905      	ldr	r1, [pc, #20]	; (805cc <pmc_switch_mck_to_pllack+0x64>)
   805b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805ba:	f012 0f08 	tst.w	r2, #8
   805be:	d0f5      	beq.n	805ac <pmc_switch_mck_to_pllack+0x44>
   805c0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805c2:	2001      	movs	r0, #1
   805c4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805c6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805c8:	4770      	bx	lr
   805ca:	bf00      	nop
   805cc:	400e0600 	.word	0x400e0600

000805d0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   805d0:	b138      	cbz	r0, 805e2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805d2:	4911      	ldr	r1, [pc, #68]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   805d4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   805d6:	4a11      	ldr	r2, [pc, #68]	; (8061c <pmc_switch_mainck_to_xtal+0x4c>)
   805d8:	401a      	ands	r2, r3
   805da:	4b11      	ldr	r3, [pc, #68]	; (80620 <pmc_switch_mainck_to_xtal+0x50>)
   805dc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805de:	620b      	str	r3, [r1, #32]
   805e0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805e2:	4a0d      	ldr	r2, [pc, #52]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   805e4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   805ea:	f023 0303 	bic.w	r3, r3, #3
   805ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   805f2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   805f6:	0209      	lsls	r1, r1, #8
   805f8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805fa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805fc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   805fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80600:	f013 0f01 	tst.w	r3, #1
   80604:	d0fb      	beq.n	805fe <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80606:	4a04      	ldr	r2, [pc, #16]	; (80618 <pmc_switch_mainck_to_xtal+0x48>)
   80608:	6a13      	ldr	r3, [r2, #32]
   8060a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8060e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80612:	6213      	str	r3, [r2, #32]
   80614:	4770      	bx	lr
   80616:	bf00      	nop
   80618:	400e0600 	.word	0x400e0600
   8061c:	fec8fffc 	.word	0xfec8fffc
   80620:	01370002 	.word	0x01370002

00080624 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80624:	4b02      	ldr	r3, [pc, #8]	; (80630 <pmc_osc_is_ready_mainck+0xc>)
   80626:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80628:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8062c:	4770      	bx	lr
   8062e:	bf00      	nop
   80630:	400e0600 	.word	0x400e0600

00080634 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80634:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80638:	4b01      	ldr	r3, [pc, #4]	; (80640 <pmc_disable_pllack+0xc>)
   8063a:	629a      	str	r2, [r3, #40]	; 0x28
   8063c:	4770      	bx	lr
   8063e:	bf00      	nop
   80640:	400e0600 	.word	0x400e0600

00080644 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80644:	4b02      	ldr	r3, [pc, #8]	; (80650 <pmc_is_locked_pllack+0xc>)
   80646:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80648:	f000 0002 	and.w	r0, r0, #2
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	400e0600 	.word	0x400e0600

00080654 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80654:	282c      	cmp	r0, #44	; 0x2c
   80656:	d81e      	bhi.n	80696 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80658:	281f      	cmp	r0, #31
   8065a:	d80c      	bhi.n	80676 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8065c:	4b11      	ldr	r3, [pc, #68]	; (806a4 <pmc_enable_periph_clk+0x50>)
   8065e:	699a      	ldr	r2, [r3, #24]
   80660:	2301      	movs	r3, #1
   80662:	4083      	lsls	r3, r0
   80664:	401a      	ands	r2, r3
   80666:	4293      	cmp	r3, r2
   80668:	d017      	beq.n	8069a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8066a:	2301      	movs	r3, #1
   8066c:	4083      	lsls	r3, r0
   8066e:	4a0d      	ldr	r2, [pc, #52]	; (806a4 <pmc_enable_periph_clk+0x50>)
   80670:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80672:	2000      	movs	r0, #0
   80674:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80676:	4b0b      	ldr	r3, [pc, #44]	; (806a4 <pmc_enable_periph_clk+0x50>)
   80678:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8067c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8067e:	2301      	movs	r3, #1
   80680:	4083      	lsls	r3, r0
   80682:	401a      	ands	r2, r3
   80684:	4293      	cmp	r3, r2
   80686:	d00a      	beq.n	8069e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80688:	2301      	movs	r3, #1
   8068a:	4083      	lsls	r3, r0
   8068c:	4a05      	ldr	r2, [pc, #20]	; (806a4 <pmc_enable_periph_clk+0x50>)
   8068e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80692:	2000      	movs	r0, #0
   80694:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80696:	2001      	movs	r0, #1
   80698:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8069a:	2000      	movs	r0, #0
   8069c:	4770      	bx	lr
   8069e:	2000      	movs	r0, #0
}
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop
   806a4:	400e0600 	.word	0x400e0600

000806a8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   806a8:	b410      	push	{r4}
   806aa:	0189      	lsls	r1, r1, #6
   806ac:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   806ae:	2402      	movs	r4, #2
   806b0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   806b2:	f04f 31ff 	mov.w	r1, #4294967295
   806b6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   806b8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   806ba:	605a      	str	r2, [r3, #4]
}
   806bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   806c0:	4770      	bx	lr
   806c2:	bf00      	nop

000806c4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   806c4:	0189      	lsls	r1, r1, #6
   806c6:	2305      	movs	r3, #5
   806c8:	5043      	str	r3, [r0, r1]
   806ca:	4770      	bx	lr

000806cc <tc_read_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
   806cc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806d0:	6988      	ldr	r0, [r1, #24]
}
   806d2:	4770      	bx	lr

000806d4 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
   806d4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806d8:	624a      	str	r2, [r1, #36]	; 0x24
   806da:	4770      	bx	lr

000806dc <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
   806dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806e0:	6a08      	ldr	r0, [r1, #32]
}
   806e2:	4770      	bx	lr

000806e4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   806e4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   806e6:	23ac      	movs	r3, #172	; 0xac
   806e8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   806ea:	680b      	ldr	r3, [r1, #0]
   806ec:	684a      	ldr	r2, [r1, #4]
   806ee:	fbb3 f3f2 	udiv	r3, r3, r2
   806f2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   806f4:	1e5c      	subs	r4, r3, #1
   806f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   806fa:	4294      	cmp	r4, r2
   806fc:	d80a      	bhi.n	80714 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   806fe:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80700:	688b      	ldr	r3, [r1, #8]
   80702:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80704:	f240 2302 	movw	r3, #514	; 0x202
   80708:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8070c:	2350      	movs	r3, #80	; 0x50
   8070e:	6003      	str	r3, [r0, #0]

	return 0;
   80710:	2000      	movs	r0, #0
   80712:	e000      	b.n	80716 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80714:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80716:	f85d 4b04 	ldr.w	r4, [sp], #4
   8071a:	4770      	bx	lr

0008071c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8071c:	6943      	ldr	r3, [r0, #20]
   8071e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80722:	bf1a      	itte	ne
   80724:	61c1      	strne	r1, [r0, #28]
	return 0;
   80726:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80728:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8072a:	4770      	bx	lr

0008072c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8072c:	6943      	ldr	r3, [r0, #20]
   8072e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80732:	bf1d      	ittte	ne
   80734:	6983      	ldrne	r3, [r0, #24]
   80736:	700b      	strbne	r3, [r1, #0]
	return 0;
   80738:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8073a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8073c:	4770      	bx	lr
   8073e:	bf00      	nop

00080740 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80740:	6943      	ldr	r3, [r0, #20]
   80742:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80746:	bf1d      	ittte	ne
   80748:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8074c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8074e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80750:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80752:	4770      	bx	lr

00080754 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80754:	6943      	ldr	r3, [r0, #20]
   80756:	f013 0f01 	tst.w	r3, #1
   8075a:	d005      	beq.n	80768 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8075c:	6983      	ldr	r3, [r0, #24]
   8075e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80762:	600b      	str	r3, [r1, #0]

	return 0;
   80764:	2000      	movs	r0, #0
   80766:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80768:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8076a:	4770      	bx	lr

0008076c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   8076c:	e7fe      	b.n	8076c <Dummy_Handler>
   8076e:	bf00      	nop

00080770 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80770:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80772:	4b1f      	ldr	r3, [pc, #124]	; (807f0 <Reset_Handler+0x80>)
   80774:	4a1f      	ldr	r2, [pc, #124]	; (807f4 <Reset_Handler+0x84>)
   80776:	429a      	cmp	r2, r3
   80778:	d003      	beq.n	80782 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8077a:	4b1f      	ldr	r3, [pc, #124]	; (807f8 <Reset_Handler+0x88>)
   8077c:	4a1c      	ldr	r2, [pc, #112]	; (807f0 <Reset_Handler+0x80>)
   8077e:	429a      	cmp	r2, r3
   80780:	d304      	bcc.n	8078c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80782:	4b1e      	ldr	r3, [pc, #120]	; (807fc <Reset_Handler+0x8c>)
   80784:	4a1e      	ldr	r2, [pc, #120]	; (80800 <Reset_Handler+0x90>)
   80786:	429a      	cmp	r2, r3
   80788:	d310      	bcc.n	807ac <Reset_Handler+0x3c>
   8078a:	e01b      	b.n	807c4 <Reset_Handler+0x54>
   8078c:	4918      	ldr	r1, [pc, #96]	; (807f0 <Reset_Handler+0x80>)
   8078e:	1d0a      	adds	r2, r1, #4
   80790:	4b1c      	ldr	r3, [pc, #112]	; (80804 <Reset_Handler+0x94>)
   80792:	1a9b      	subs	r3, r3, r2
   80794:	f023 0303 	bic.w	r3, r3, #3
   80798:	3304      	adds	r3, #4
   8079a:	4a16      	ldr	r2, [pc, #88]	; (807f4 <Reset_Handler+0x84>)
   8079c:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8079e:	f852 0b04 	ldr.w	r0, [r2], #4
   807a2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807a6:	429a      	cmp	r2, r3
   807a8:	d1f9      	bne.n	8079e <Reset_Handler+0x2e>
   807aa:	e7ea      	b.n	80782 <Reset_Handler+0x12>
   807ac:	4b16      	ldr	r3, [pc, #88]	; (80808 <Reset_Handler+0x98>)
   807ae:	4a17      	ldr	r2, [pc, #92]	; (8080c <Reset_Handler+0x9c>)
   807b0:	1ad2      	subs	r2, r2, r3
   807b2:	f022 0203 	bic.w	r2, r2, #3
   807b6:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807b8:	3b04      	subs	r3, #4
		*pDest++ = 0;
   807ba:	2100      	movs	r1, #0
   807bc:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807c0:	4293      	cmp	r3, r2
   807c2:	d1fb      	bne.n	807bc <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   807c4:	4b12      	ldr	r3, [pc, #72]	; (80810 <Reset_Handler+0xa0>)
   807c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   807ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   807ce:	4911      	ldr	r1, [pc, #68]	; (80814 <Reset_Handler+0xa4>)
   807d0:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   807d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   807d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807da:	d203      	bcs.n	807e4 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   807dc:	688b      	ldr	r3, [r1, #8]
   807de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   807e2:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   807e4:	4b0c      	ldr	r3, [pc, #48]	; (80818 <Reset_Handler+0xa8>)
   807e6:	4798      	blx	r3

	/* Branch to main function */
	main();
   807e8:	4b0c      	ldr	r3, [pc, #48]	; (8081c <Reset_Handler+0xac>)
   807ea:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   807ec:	e7fe      	b.n	807ec <Reset_Handler+0x7c>
   807ee:	bf00      	nop
   807f0:	20070000 	.word	0x20070000
   807f4:	00083c38 	.word	0x00083c38
   807f8:	20070994 	.word	0x20070994
   807fc:	20070a90 	.word	0x20070a90
   80800:	20070994 	.word	0x20070994
   80804:	20070997 	.word	0x20070997
   80808:	20070998 	.word	0x20070998
   8080c:	20070a93 	.word	0x20070a93
   80810:	00080000 	.word	0x00080000
   80814:	e000ed00 	.word	0xe000ed00
   80818:	00080c49 	.word	0x00080c49
   8081c:	00080b3d 	.word	0x00080b3d

00080820 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80820:	4b3e      	ldr	r3, [pc, #248]	; (8091c <SystemCoreClockUpdate+0xfc>)
   80822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80824:	f003 0303 	and.w	r3, r3, #3
   80828:	2b03      	cmp	r3, #3
   8082a:	d85f      	bhi.n	808ec <SystemCoreClockUpdate+0xcc>
   8082c:	e8df f003 	tbb	[pc, r3]
   80830:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80834:	4b3a      	ldr	r3, [pc, #232]	; (80920 <SystemCoreClockUpdate+0x100>)
   80836:	695b      	ldr	r3, [r3, #20]
   80838:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8083c:	bf14      	ite	ne
   8083e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80842:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80846:	4b37      	ldr	r3, [pc, #220]	; (80924 <SystemCoreClockUpdate+0x104>)
   80848:	601a      	str	r2, [r3, #0]
   8084a:	e04f      	b.n	808ec <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8084c:	4b33      	ldr	r3, [pc, #204]	; (8091c <SystemCoreClockUpdate+0xfc>)
   8084e:	6a1b      	ldr	r3, [r3, #32]
   80850:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80854:	d003      	beq.n	8085e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80856:	4a34      	ldr	r2, [pc, #208]	; (80928 <SystemCoreClockUpdate+0x108>)
   80858:	4b32      	ldr	r3, [pc, #200]	; (80924 <SystemCoreClockUpdate+0x104>)
   8085a:	601a      	str	r2, [r3, #0]
   8085c:	e046      	b.n	808ec <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8085e:	4a33      	ldr	r2, [pc, #204]	; (8092c <SystemCoreClockUpdate+0x10c>)
   80860:	4b30      	ldr	r3, [pc, #192]	; (80924 <SystemCoreClockUpdate+0x104>)
   80862:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80864:	4b2d      	ldr	r3, [pc, #180]	; (8091c <SystemCoreClockUpdate+0xfc>)
   80866:	6a1b      	ldr	r3, [r3, #32]
   80868:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8086c:	2b10      	cmp	r3, #16
   8086e:	d002      	beq.n	80876 <SystemCoreClockUpdate+0x56>
   80870:	2b20      	cmp	r3, #32
   80872:	d004      	beq.n	8087e <SystemCoreClockUpdate+0x5e>
   80874:	e03a      	b.n	808ec <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80876:	4a2e      	ldr	r2, [pc, #184]	; (80930 <SystemCoreClockUpdate+0x110>)
   80878:	4b2a      	ldr	r3, [pc, #168]	; (80924 <SystemCoreClockUpdate+0x104>)
   8087a:	601a      	str	r2, [r3, #0]
				break;
   8087c:	e036      	b.n	808ec <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8087e:	4a2a      	ldr	r2, [pc, #168]	; (80928 <SystemCoreClockUpdate+0x108>)
   80880:	4b28      	ldr	r3, [pc, #160]	; (80924 <SystemCoreClockUpdate+0x104>)
   80882:	601a      	str	r2, [r3, #0]
				break;
   80884:	e032      	b.n	808ec <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80886:	4b25      	ldr	r3, [pc, #148]	; (8091c <SystemCoreClockUpdate+0xfc>)
   80888:	6a1b      	ldr	r3, [r3, #32]
   8088a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8088e:	d003      	beq.n	80898 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80890:	4a25      	ldr	r2, [pc, #148]	; (80928 <SystemCoreClockUpdate+0x108>)
   80892:	4b24      	ldr	r3, [pc, #144]	; (80924 <SystemCoreClockUpdate+0x104>)
   80894:	601a      	str	r2, [r3, #0]
   80896:	e012      	b.n	808be <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80898:	4a24      	ldr	r2, [pc, #144]	; (8092c <SystemCoreClockUpdate+0x10c>)
   8089a:	4b22      	ldr	r3, [pc, #136]	; (80924 <SystemCoreClockUpdate+0x104>)
   8089c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8089e:	4b1f      	ldr	r3, [pc, #124]	; (8091c <SystemCoreClockUpdate+0xfc>)
   808a0:	6a1b      	ldr	r3, [r3, #32]
   808a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808a6:	2b10      	cmp	r3, #16
   808a8:	d002      	beq.n	808b0 <SystemCoreClockUpdate+0x90>
   808aa:	2b20      	cmp	r3, #32
   808ac:	d004      	beq.n	808b8 <SystemCoreClockUpdate+0x98>
   808ae:	e006      	b.n	808be <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808b0:	4a1f      	ldr	r2, [pc, #124]	; (80930 <SystemCoreClockUpdate+0x110>)
   808b2:	4b1c      	ldr	r3, [pc, #112]	; (80924 <SystemCoreClockUpdate+0x104>)
   808b4:	601a      	str	r2, [r3, #0]
				break;
   808b6:	e002      	b.n	808be <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808b8:	4a1b      	ldr	r2, [pc, #108]	; (80928 <SystemCoreClockUpdate+0x108>)
   808ba:	4b1a      	ldr	r3, [pc, #104]	; (80924 <SystemCoreClockUpdate+0x104>)
   808bc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   808be:	4b17      	ldr	r3, [pc, #92]	; (8091c <SystemCoreClockUpdate+0xfc>)
   808c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808c2:	f003 0303 	and.w	r3, r3, #3
   808c6:	2b02      	cmp	r3, #2
   808c8:	d10d      	bne.n	808e6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   808ca:	4a14      	ldr	r2, [pc, #80]	; (8091c <SystemCoreClockUpdate+0xfc>)
   808cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   808ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
   808d0:	4814      	ldr	r0, [pc, #80]	; (80924 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   808d2:	f3c3 410a 	ubfx	r1, r3, #16, #11
   808d6:	6803      	ldr	r3, [r0, #0]
   808d8:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   808dc:	b2d2      	uxtb	r2, r2
   808de:	fbb3 f3f2 	udiv	r3, r3, r2
   808e2:	6003      	str	r3, [r0, #0]
   808e4:	e002      	b.n	808ec <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   808e6:	4a13      	ldr	r2, [pc, #76]	; (80934 <SystemCoreClockUpdate+0x114>)
   808e8:	4b0e      	ldr	r3, [pc, #56]	; (80924 <SystemCoreClockUpdate+0x104>)
   808ea:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808ec:	4b0b      	ldr	r3, [pc, #44]	; (8091c <SystemCoreClockUpdate+0xfc>)
   808ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808f4:	2b70      	cmp	r3, #112	; 0x70
   808f6:	d107      	bne.n	80908 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   808f8:	4a0a      	ldr	r2, [pc, #40]	; (80924 <SystemCoreClockUpdate+0x104>)
   808fa:	6813      	ldr	r3, [r2, #0]
   808fc:	490e      	ldr	r1, [pc, #56]	; (80938 <SystemCoreClockUpdate+0x118>)
   808fe:	fba1 1303 	umull	r1, r3, r1, r3
   80902:	085b      	lsrs	r3, r3, #1
   80904:	6013      	str	r3, [r2, #0]
   80906:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80908:	4b04      	ldr	r3, [pc, #16]	; (8091c <SystemCoreClockUpdate+0xfc>)
   8090a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8090c:	4905      	ldr	r1, [pc, #20]	; (80924 <SystemCoreClockUpdate+0x104>)
   8090e:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80912:	680b      	ldr	r3, [r1, #0]
   80914:	40d3      	lsrs	r3, r2
   80916:	600b      	str	r3, [r1, #0]
   80918:	4770      	bx	lr
   8091a:	bf00      	nop
   8091c:	400e0600 	.word	0x400e0600
   80920:	400e1a10 	.word	0x400e1a10
   80924:	2007012c 	.word	0x2007012c
   80928:	00b71b00 	.word	0x00b71b00
   8092c:	003d0900 	.word	0x003d0900
   80930:	007a1200 	.word	0x007a1200
   80934:	0e4e1c00 	.word	0x0e4e1c00
   80938:	aaaaaaab 	.word	0xaaaaaaab

0008093c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8093c:	4b09      	ldr	r3, [pc, #36]	; (80964 <_sbrk+0x28>)
   8093e:	681b      	ldr	r3, [r3, #0]
   80940:	b913      	cbnz	r3, 80948 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80942:	4a09      	ldr	r2, [pc, #36]	; (80968 <_sbrk+0x2c>)
   80944:	4b07      	ldr	r3, [pc, #28]	; (80964 <_sbrk+0x28>)
   80946:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80948:	4b06      	ldr	r3, [pc, #24]	; (80964 <_sbrk+0x28>)
   8094a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8094c:	181a      	adds	r2, r3, r0
   8094e:	4907      	ldr	r1, [pc, #28]	; (8096c <_sbrk+0x30>)
   80950:	4291      	cmp	r1, r2
   80952:	db04      	blt.n	8095e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80954:	4610      	mov	r0, r2
   80956:	4a03      	ldr	r2, [pc, #12]	; (80964 <_sbrk+0x28>)
   80958:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8095a:	4618      	mov	r0, r3
   8095c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8095e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80962:	4770      	bx	lr
   80964:	20070a20 	.word	0x20070a20
   80968:	20072a90 	.word	0x20072a90
   8096c:	20087ffc 	.word	0x20087ffc

00080970 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80970:	f04f 30ff 	mov.w	r0, #4294967295
   80974:	4770      	bx	lr
   80976:	bf00      	nop

00080978 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8097c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8097e:	2000      	movs	r0, #0
   80980:	4770      	bx	lr
   80982:	bf00      	nop

00080984 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80984:	2001      	movs	r0, #1
   80986:	4770      	bx	lr

00080988 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80988:	2000      	movs	r0, #0
   8098a:	4770      	bx	lr

0008098c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8098c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8098e:	b083      	sub	sp, #12
   80990:	4604      	mov	r4, r0
   80992:	460d      	mov	r5, r1
	uint32_t val = 0;
   80994:	2300      	movs	r3, #0
   80996:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80998:	4b1f      	ldr	r3, [pc, #124]	; (80a18 <usart_serial_getchar+0x8c>)
   8099a:	4298      	cmp	r0, r3
   8099c:	d107      	bne.n	809ae <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8099e:	461f      	mov	r7, r3
   809a0:	4e1e      	ldr	r6, [pc, #120]	; (80a1c <usart_serial_getchar+0x90>)
   809a2:	4638      	mov	r0, r7
   809a4:	4629      	mov	r1, r5
   809a6:	47b0      	blx	r6
   809a8:	2800      	cmp	r0, #0
   809aa:	d1fa      	bne.n	809a2 <usart_serial_getchar+0x16>
   809ac:	e019      	b.n	809e2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   809ae:	4b1c      	ldr	r3, [pc, #112]	; (80a20 <usart_serial_getchar+0x94>)
   809b0:	4298      	cmp	r0, r3
   809b2:	d109      	bne.n	809c8 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   809b4:	461f      	mov	r7, r3
   809b6:	4e1b      	ldr	r6, [pc, #108]	; (80a24 <usart_serial_getchar+0x98>)
   809b8:	4638      	mov	r0, r7
   809ba:	a901      	add	r1, sp, #4
   809bc:	47b0      	blx	r6
   809be:	2800      	cmp	r0, #0
   809c0:	d1fa      	bne.n	809b8 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   809c2:	9b01      	ldr	r3, [sp, #4]
   809c4:	702b      	strb	r3, [r5, #0]
   809c6:	e019      	b.n	809fc <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   809c8:	4b17      	ldr	r3, [pc, #92]	; (80a28 <usart_serial_getchar+0x9c>)
   809ca:	4298      	cmp	r0, r3
   809cc:	d109      	bne.n	809e2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   809ce:	461e      	mov	r6, r3
   809d0:	4c14      	ldr	r4, [pc, #80]	; (80a24 <usart_serial_getchar+0x98>)
   809d2:	4630      	mov	r0, r6
   809d4:	a901      	add	r1, sp, #4
   809d6:	47a0      	blx	r4
   809d8:	2800      	cmp	r0, #0
   809da:	d1fa      	bne.n	809d2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   809dc:	9b01      	ldr	r3, [sp, #4]
   809de:	702b      	strb	r3, [r5, #0]
   809e0:	e018      	b.n	80a14 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   809e2:	4b12      	ldr	r3, [pc, #72]	; (80a2c <usart_serial_getchar+0xa0>)
   809e4:	429c      	cmp	r4, r3
   809e6:	d109      	bne.n	809fc <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   809e8:	461e      	mov	r6, r3
   809ea:	4c0e      	ldr	r4, [pc, #56]	; (80a24 <usart_serial_getchar+0x98>)
   809ec:	4630      	mov	r0, r6
   809ee:	a901      	add	r1, sp, #4
   809f0:	47a0      	blx	r4
   809f2:	2800      	cmp	r0, #0
   809f4:	d1fa      	bne.n	809ec <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   809f6:	9b01      	ldr	r3, [sp, #4]
   809f8:	702b      	strb	r3, [r5, #0]
   809fa:	e00b      	b.n	80a14 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809fc:	4b0c      	ldr	r3, [pc, #48]	; (80a30 <usart_serial_getchar+0xa4>)
   809fe:	429c      	cmp	r4, r3
   80a00:	d108      	bne.n	80a14 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80a02:	461e      	mov	r6, r3
   80a04:	4c07      	ldr	r4, [pc, #28]	; (80a24 <usart_serial_getchar+0x98>)
   80a06:	4630      	mov	r0, r6
   80a08:	a901      	add	r1, sp, #4
   80a0a:	47a0      	blx	r4
   80a0c:	2800      	cmp	r0, #0
   80a0e:	d1fa      	bne.n	80a06 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80a10:	9b01      	ldr	r3, [sp, #4]
   80a12:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80a14:	b003      	add	sp, #12
   80a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a18:	400e0800 	.word	0x400e0800
   80a1c:	0008072d 	.word	0x0008072d
   80a20:	40098000 	.word	0x40098000
   80a24:	00080755 	.word	0x00080755
   80a28:	4009c000 	.word	0x4009c000
   80a2c:	400a0000 	.word	0x400a0000
   80a30:	400a4000 	.word	0x400a4000

00080a34 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80a34:	b570      	push	{r4, r5, r6, lr}
   80a36:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80a38:	4b1e      	ldr	r3, [pc, #120]	; (80ab4 <usart_serial_putchar+0x80>)
   80a3a:	4298      	cmp	r0, r3
   80a3c:	d108      	bne.n	80a50 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80a3e:	461e      	mov	r6, r3
   80a40:	4d1d      	ldr	r5, [pc, #116]	; (80ab8 <usart_serial_putchar+0x84>)
   80a42:	4630      	mov	r0, r6
   80a44:	4621      	mov	r1, r4
   80a46:	47a8      	blx	r5
   80a48:	2800      	cmp	r0, #0
   80a4a:	d1fa      	bne.n	80a42 <usart_serial_putchar+0xe>
		return 1;
   80a4c:	2001      	movs	r0, #1
   80a4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80a50:	4b1a      	ldr	r3, [pc, #104]	; (80abc <usart_serial_putchar+0x88>)
   80a52:	4298      	cmp	r0, r3
   80a54:	d108      	bne.n	80a68 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80a56:	461e      	mov	r6, r3
   80a58:	4d19      	ldr	r5, [pc, #100]	; (80ac0 <usart_serial_putchar+0x8c>)
   80a5a:	4630      	mov	r0, r6
   80a5c:	4621      	mov	r1, r4
   80a5e:	47a8      	blx	r5
   80a60:	2800      	cmp	r0, #0
   80a62:	d1fa      	bne.n	80a5a <usart_serial_putchar+0x26>
		return 1;
   80a64:	2001      	movs	r0, #1
   80a66:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80a68:	4b16      	ldr	r3, [pc, #88]	; (80ac4 <usart_serial_putchar+0x90>)
   80a6a:	4298      	cmp	r0, r3
   80a6c:	d108      	bne.n	80a80 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80a6e:	461e      	mov	r6, r3
   80a70:	4d13      	ldr	r5, [pc, #76]	; (80ac0 <usart_serial_putchar+0x8c>)
   80a72:	4630      	mov	r0, r6
   80a74:	4621      	mov	r1, r4
   80a76:	47a8      	blx	r5
   80a78:	2800      	cmp	r0, #0
   80a7a:	d1fa      	bne.n	80a72 <usart_serial_putchar+0x3e>
		return 1;
   80a7c:	2001      	movs	r0, #1
   80a7e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a80:	4b11      	ldr	r3, [pc, #68]	; (80ac8 <usart_serial_putchar+0x94>)
   80a82:	4298      	cmp	r0, r3
   80a84:	d108      	bne.n	80a98 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80a86:	461e      	mov	r6, r3
   80a88:	4d0d      	ldr	r5, [pc, #52]	; (80ac0 <usart_serial_putchar+0x8c>)
   80a8a:	4630      	mov	r0, r6
   80a8c:	4621      	mov	r1, r4
   80a8e:	47a8      	blx	r5
   80a90:	2800      	cmp	r0, #0
   80a92:	d1fa      	bne.n	80a8a <usart_serial_putchar+0x56>
		return 1;
   80a94:	2001      	movs	r0, #1
   80a96:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a98:	4b0c      	ldr	r3, [pc, #48]	; (80acc <usart_serial_putchar+0x98>)
   80a9a:	4298      	cmp	r0, r3
   80a9c:	d108      	bne.n	80ab0 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80a9e:	461e      	mov	r6, r3
   80aa0:	4d07      	ldr	r5, [pc, #28]	; (80ac0 <usart_serial_putchar+0x8c>)
   80aa2:	4630      	mov	r0, r6
   80aa4:	4621      	mov	r1, r4
   80aa6:	47a8      	blx	r5
   80aa8:	2800      	cmp	r0, #0
   80aaa:	d1fa      	bne.n	80aa2 <usart_serial_putchar+0x6e>
		return 1;
   80aac:	2001      	movs	r0, #1
   80aae:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80ab0:	2000      	movs	r0, #0
}
   80ab2:	bd70      	pop	{r4, r5, r6, pc}
   80ab4:	400e0800 	.word	0x400e0800
   80ab8:	0008071d 	.word	0x0008071d
   80abc:	40098000 	.word	0x40098000
   80ac0:	00080741 	.word	0x00080741
   80ac4:	4009c000 	.word	0x4009c000
   80ac8:	400a0000 	.word	0x400a0000
   80acc:	400a4000 	.word	0x400a4000

00080ad0 <TC6_Handler>:
static int CHANNEL[8];

static int channel_id = 0;

void TC_Handler(void)
{
   80ad0:	b508      	push	{r3, lr}
	if ((tc_get_status(TC, TC_CHANNEL_CAPTURE) & TC_SR_LDRBS) == TC_SR_LDRBS) {
   80ad2:	4813      	ldr	r0, [pc, #76]	; (80b20 <TC6_Handler+0x50>)
   80ad4:	2100      	movs	r1, #0
   80ad6:	4b13      	ldr	r3, [pc, #76]	; (80b24 <TC6_Handler+0x54>)
   80ad8:	4798      	blx	r3
   80ada:	f010 0f40 	tst.w	r0, #64	; 0x40
   80ade:	d01e      	beq.n	80b1e <TC6_Handler+0x4e>
		uint16_t micros = 0;
		gs_ul_captured_rb = tc_read_rb(TC, TC_CHANNEL_CAPTURE);
   80ae0:	480f      	ldr	r0, [pc, #60]	; (80b20 <TC6_Handler+0x50>)
   80ae2:	2100      	movs	r1, #0
   80ae4:	4b10      	ldr	r3, [pc, #64]	; (80b28 <TC6_Handler+0x58>)
   80ae6:	4798      	blx	r3
   80ae8:	4b10      	ldr	r3, [pc, #64]	; (80b2c <TC6_Handler+0x5c>)
   80aea:	6018      	str	r0, [r3, #0]
		micros = (gs_ul_captured_rb * 8) / 21; // clock is Master Clock with prescaler 32 at 84 MHz Master Clock
   80aec:	00c0      	lsls	r0, r0, #3
   80aee:	4b10      	ldr	r3, [pc, #64]	; (80b30 <TC6_Handler+0x60>)
   80af0:	fba3 2300 	umull	r2, r3, r3, r0
   80af4:	1ac0      	subs	r0, r0, r3
   80af6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
   80afa:	091b      	lsrs	r3, r3, #4
		if (micros > 3000) {
   80afc:	b299      	uxth	r1, r3
   80afe:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80b02:	4291      	cmp	r1, r2
   80b04:	d903      	bls.n	80b0e <TC6_Handler+0x3e>
			// sync pulse
			channel_id = 0;
   80b06:	2200      	movs	r2, #0
   80b08:	4b0a      	ldr	r3, [pc, #40]	; (80b34 <TC6_Handler+0x64>)
   80b0a:	601a      	str	r2, [r3, #0]
			return;
   80b0c:	bd08      	pop	{r3, pc}
		}
		CHANNEL[channel_id] = micros;
   80b0e:	4909      	ldr	r1, [pc, #36]	; (80b34 <TC6_Handler+0x64>)
   80b10:	680a      	ldr	r2, [r1, #0]
   80b12:	b29b      	uxth	r3, r3
   80b14:	4808      	ldr	r0, [pc, #32]	; (80b38 <TC6_Handler+0x68>)
   80b16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		channel_id++;		
   80b1a:	3201      	adds	r2, #1
   80b1c:	600a      	str	r2, [r1, #0]
   80b1e:	bd08      	pop	{r3, pc}
   80b20:	40088000 	.word	0x40088000
   80b24:	000806dd 	.word	0x000806dd
   80b28:	000806cd 	.word	0x000806cd
   80b2c:	20070a24 	.word	0x20070a24
   80b30:	86186187 	.word	0x86186187
   80b34:	20070a28 	.word	0x20070a28
   80b38:	20070a2c 	.word	0x20070a2c

00080b3c <main>:

	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
   80b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b40:	b085      	sub	sp, #20
	sysclk_init();
   80b42:	4b2a      	ldr	r3, [pc, #168]	; (80bec <main+0xb0>)
   80b44:	4798      	blx	r3
	board_init();
   80b46:	4b2a      	ldr	r3, [pc, #168]	; (80bf0 <main+0xb4>)
   80b48:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b4a:	4d2a      	ldr	r5, [pc, #168]	; (80bf4 <main+0xb8>)
   80b4c:	4b2a      	ldr	r3, [pc, #168]	; (80bf8 <main+0xbc>)
   80b4e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b50:	4a2a      	ldr	r2, [pc, #168]	; (80bfc <main+0xc0>)
   80b52:	4b2b      	ldr	r3, [pc, #172]	; (80c00 <main+0xc4>)
   80b54:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80b56:	4a2b      	ldr	r2, [pc, #172]	; (80c04 <main+0xc8>)
   80b58:	4b2b      	ldr	r3, [pc, #172]	; (80c08 <main+0xcc>)
   80b5a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80b5c:	4b2b      	ldr	r3, [pc, #172]	; (80c0c <main+0xd0>)
   80b5e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80b60:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   80b64:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b6a:	9303      	str	r3, [sp, #12]
   80b6c:	2008      	movs	r0, #8
   80b6e:	4c28      	ldr	r4, [pc, #160]	; (80c10 <main+0xd4>)
   80b70:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80b72:	4628      	mov	r0, r5
   80b74:	a901      	add	r1, sp, #4
   80b76:	4b27      	ldr	r3, [pc, #156]	; (80c14 <main+0xd8>)
   80b78:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80b7a:	4e27      	ldr	r6, [pc, #156]	; (80c18 <main+0xdc>)
   80b7c:	6833      	ldr	r3, [r6, #0]
   80b7e:	6898      	ldr	r0, [r3, #8]
   80b80:	2100      	movs	r1, #0
   80b82:	4d26      	ldr	r5, [pc, #152]	; (80c1c <main+0xe0>)
   80b84:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80b86:	6833      	ldr	r3, [r6, #0]
   80b88:	6858      	ldr	r0, [r3, #4]
   80b8a:	2100      	movs	r1, #0
   80b8c:	47a8      	blx	r5

	configure_console(); 
	pmc_enable_periph_clk(ID_TC_CAPTURE);
   80b8e:	2021      	movs	r0, #33	; 0x21
   80b90:	47a0      	blx	r4
	tc_init(TC, TC_CHANNEL_CAPTURE,
   80b92:	4d23      	ldr	r5, [pc, #140]	; (80c20 <main+0xe4>)
   80b94:	4628      	mov	r0, r5
   80b96:	2100      	movs	r1, #0
   80b98:	4a22      	ldr	r2, [pc, #136]	; (80c24 <main+0xe8>)
   80b9a:	4b23      	ldr	r3, [pc, #140]	; (80c28 <main+0xec>)
   80b9c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80b9e:	4b23      	ldr	r3, [pc, #140]	; (80c2c <main+0xf0>)
   80ba0:	2202      	movs	r2, #2
   80ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80ba6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80baa:	2400      	movs	r4, #0
   80bac:	f883 4321 	strb.w	r4, [r3, #801]	; 0x321

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bb0:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(TC_IRQn);
	NVIC_ClearPendingIRQ(TC_IRQn);
	NVIC_SetPriority(TC_IRQn, 0);
	NVIC_EnableIRQ(TC_IRQn);
	
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
   80bb2:	4628      	mov	r0, r5
   80bb4:	4621      	mov	r1, r4
   80bb6:	2240      	movs	r2, #64	; 0x40
   80bb8:	4b1d      	ldr	r3, [pc, #116]	; (80c30 <main+0xf4>)
   80bba:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL_CAPTURE);
   80bbc:	4628      	mov	r0, r5
   80bbe:	4621      	mov	r1, r4
   80bc0:	4b1c      	ldr	r3, [pc, #112]	; (80c34 <main+0xf8>)
   80bc2:	4798      	blx	r3
   80bc4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80c40 <main+0x104>
   80bc8:	f108 071c 	add.w	r7, r8, #28
	
	while(1) {
		for (int i = 0; i < 8; i++) {
			printf("%d::", CHANNEL[i]);
   80bcc:	4e1a      	ldr	r6, [pc, #104]	; (80c38 <main+0xfc>)
   80bce:	4d1b      	ldr	r5, [pc, #108]	; (80c3c <main+0x100>)
			
		}
		printf("\r\n");		
   80bd0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80c44 <main+0x108>
   80bd4:	f1a8 0404 	sub.w	r4, r8, #4
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
	tc_start(TC, TC_CHANNEL_CAPTURE);
	
	while(1) {
		for (int i = 0; i < 8; i++) {
			printf("%d::", CHANNEL[i]);
   80bd8:	4630      	mov	r0, r6
   80bda:	f854 1f04 	ldr.w	r1, [r4, #4]!
   80bde:	47a8      	blx	r5
	
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
	tc_start(TC, TC_CHANNEL_CAPTURE);
	
	while(1) {
		for (int i = 0; i < 8; i++) {
   80be0:	42bc      	cmp	r4, r7
   80be2:	d1f9      	bne.n	80bd8 <main+0x9c>
			printf("%d::", CHANNEL[i]);
			
		}
		printf("\r\n");		
   80be4:	4648      	mov	r0, r9
   80be6:	47a8      	blx	r5
	}
   80be8:	e7f4      	b.n	80bd4 <main+0x98>
   80bea:	bf00      	nop
   80bec:	00080151 	.word	0x00080151
   80bf0:	00080241 	.word	0x00080241
   80bf4:	400e0800 	.word	0x400e0800
   80bf8:	20070a88 	.word	0x20070a88
   80bfc:	00080a35 	.word	0x00080a35
   80c00:	20070a84 	.word	0x20070a84
   80c04:	0008098d 	.word	0x0008098d
   80c08:	20070a80 	.word	0x20070a80
   80c0c:	0501bd00 	.word	0x0501bd00
   80c10:	00080655 	.word	0x00080655
   80c14:	000806e5 	.word	0x000806e5
   80c18:	20070558 	.word	0x20070558
   80c1c:	00080d5d 	.word	0x00080d5d
   80c20:	40088000 	.word	0x40088000
   80c24:	00060502 	.word	0x00060502
   80c28:	000806a9 	.word	0x000806a9
   80c2c:	e000e100 	.word	0xe000e100
   80c30:	000806d5 	.word	0x000806d5
   80c34:	000806c5 	.word	0x000806c5
   80c38:	00083ba8 	.word	0x00083ba8
   80c3c:	00080c99 	.word	0x00080c99
   80c40:	20070a2c 	.word	0x20070a2c
   80c44:	00083bb0 	.word	0x00083bb0

00080c48 <__libc_init_array>:
   80c48:	b570      	push	{r4, r5, r6, lr}
   80c4a:	4e0f      	ldr	r6, [pc, #60]	; (80c88 <__libc_init_array+0x40>)
   80c4c:	4d0f      	ldr	r5, [pc, #60]	; (80c8c <__libc_init_array+0x44>)
   80c4e:	1b76      	subs	r6, r6, r5
   80c50:	10b6      	asrs	r6, r6, #2
   80c52:	bf18      	it	ne
   80c54:	2400      	movne	r4, #0
   80c56:	d005      	beq.n	80c64 <__libc_init_array+0x1c>
   80c58:	3401      	adds	r4, #1
   80c5a:	f855 3b04 	ldr.w	r3, [r5], #4
   80c5e:	4798      	blx	r3
   80c60:	42a6      	cmp	r6, r4
   80c62:	d1f9      	bne.n	80c58 <__libc_init_array+0x10>
   80c64:	4e0a      	ldr	r6, [pc, #40]	; (80c90 <__libc_init_array+0x48>)
   80c66:	4d0b      	ldr	r5, [pc, #44]	; (80c94 <__libc_init_array+0x4c>)
   80c68:	f002 ffd0 	bl	83c0c <_init>
   80c6c:	1b76      	subs	r6, r6, r5
   80c6e:	10b6      	asrs	r6, r6, #2
   80c70:	bf18      	it	ne
   80c72:	2400      	movne	r4, #0
   80c74:	d006      	beq.n	80c84 <__libc_init_array+0x3c>
   80c76:	3401      	adds	r4, #1
   80c78:	f855 3b04 	ldr.w	r3, [r5], #4
   80c7c:	4798      	blx	r3
   80c7e:	42a6      	cmp	r6, r4
   80c80:	d1f9      	bne.n	80c76 <__libc_init_array+0x2e>
   80c82:	bd70      	pop	{r4, r5, r6, pc}
   80c84:	bd70      	pop	{r4, r5, r6, pc}
   80c86:	bf00      	nop
   80c88:	00083c18 	.word	0x00083c18
   80c8c:	00083c18 	.word	0x00083c18
   80c90:	00083c20 	.word	0x00083c20
   80c94:	00083c18 	.word	0x00083c18

00080c98 <iprintf>:
   80c98:	b40f      	push	{r0, r1, r2, r3}
   80c9a:	b510      	push	{r4, lr}
   80c9c:	4b07      	ldr	r3, [pc, #28]	; (80cbc <iprintf+0x24>)
   80c9e:	b082      	sub	sp, #8
   80ca0:	ac04      	add	r4, sp, #16
   80ca2:	f854 2b04 	ldr.w	r2, [r4], #4
   80ca6:	6818      	ldr	r0, [r3, #0]
   80ca8:	4623      	mov	r3, r4
   80caa:	6881      	ldr	r1, [r0, #8]
   80cac:	9401      	str	r4, [sp, #4]
   80cae:	f000 f915 	bl	80edc <_vfiprintf_r>
   80cb2:	b002      	add	sp, #8
   80cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80cb8:	b004      	add	sp, #16
   80cba:	4770      	bx	lr
   80cbc:	20070558 	.word	0x20070558

00080cc0 <memset>:
   80cc0:	b470      	push	{r4, r5, r6}
   80cc2:	0784      	lsls	r4, r0, #30
   80cc4:	d046      	beq.n	80d54 <memset+0x94>
   80cc6:	1e54      	subs	r4, r2, #1
   80cc8:	2a00      	cmp	r2, #0
   80cca:	d041      	beq.n	80d50 <memset+0x90>
   80ccc:	b2cd      	uxtb	r5, r1
   80cce:	4603      	mov	r3, r0
   80cd0:	e002      	b.n	80cd8 <memset+0x18>
   80cd2:	1e62      	subs	r2, r4, #1
   80cd4:	b3e4      	cbz	r4, 80d50 <memset+0x90>
   80cd6:	4614      	mov	r4, r2
   80cd8:	f803 5b01 	strb.w	r5, [r3], #1
   80cdc:	079a      	lsls	r2, r3, #30
   80cde:	d1f8      	bne.n	80cd2 <memset+0x12>
   80ce0:	2c03      	cmp	r4, #3
   80ce2:	d92e      	bls.n	80d42 <memset+0x82>
   80ce4:	b2cd      	uxtb	r5, r1
   80ce6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80cea:	2c0f      	cmp	r4, #15
   80cec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80cf0:	d919      	bls.n	80d26 <memset+0x66>
   80cf2:	4626      	mov	r6, r4
   80cf4:	f103 0210 	add.w	r2, r3, #16
   80cf8:	3e10      	subs	r6, #16
   80cfa:	2e0f      	cmp	r6, #15
   80cfc:	f842 5c10 	str.w	r5, [r2, #-16]
   80d00:	f842 5c0c 	str.w	r5, [r2, #-12]
   80d04:	f842 5c08 	str.w	r5, [r2, #-8]
   80d08:	f842 5c04 	str.w	r5, [r2, #-4]
   80d0c:	f102 0210 	add.w	r2, r2, #16
   80d10:	d8f2      	bhi.n	80cf8 <memset+0x38>
   80d12:	f1a4 0210 	sub.w	r2, r4, #16
   80d16:	f022 020f 	bic.w	r2, r2, #15
   80d1a:	f004 040f 	and.w	r4, r4, #15
   80d1e:	3210      	adds	r2, #16
   80d20:	2c03      	cmp	r4, #3
   80d22:	4413      	add	r3, r2
   80d24:	d90d      	bls.n	80d42 <memset+0x82>
   80d26:	461e      	mov	r6, r3
   80d28:	4622      	mov	r2, r4
   80d2a:	3a04      	subs	r2, #4
   80d2c:	2a03      	cmp	r2, #3
   80d2e:	f846 5b04 	str.w	r5, [r6], #4
   80d32:	d8fa      	bhi.n	80d2a <memset+0x6a>
   80d34:	1f22      	subs	r2, r4, #4
   80d36:	f022 0203 	bic.w	r2, r2, #3
   80d3a:	3204      	adds	r2, #4
   80d3c:	4413      	add	r3, r2
   80d3e:	f004 0403 	and.w	r4, r4, #3
   80d42:	b12c      	cbz	r4, 80d50 <memset+0x90>
   80d44:	b2c9      	uxtb	r1, r1
   80d46:	441c      	add	r4, r3
   80d48:	f803 1b01 	strb.w	r1, [r3], #1
   80d4c:	42a3      	cmp	r3, r4
   80d4e:	d1fb      	bne.n	80d48 <memset+0x88>
   80d50:	bc70      	pop	{r4, r5, r6}
   80d52:	4770      	bx	lr
   80d54:	4614      	mov	r4, r2
   80d56:	4603      	mov	r3, r0
   80d58:	e7c2      	b.n	80ce0 <memset+0x20>
   80d5a:	bf00      	nop

00080d5c <setbuf>:
   80d5c:	2900      	cmp	r1, #0
   80d5e:	bf0c      	ite	eq
   80d60:	2202      	moveq	r2, #2
   80d62:	2200      	movne	r2, #0
   80d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80d68:	f000 b800 	b.w	80d6c <setvbuf>

00080d6c <setvbuf>:
   80d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d70:	4d3a      	ldr	r5, [pc, #232]	; (80e5c <setvbuf+0xf0>)
   80d72:	4604      	mov	r4, r0
   80d74:	682e      	ldr	r6, [r5, #0]
   80d76:	4690      	mov	r8, r2
   80d78:	460d      	mov	r5, r1
   80d7a:	461f      	mov	r7, r3
   80d7c:	b116      	cbz	r6, 80d84 <setvbuf+0x18>
   80d7e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   80d80:	2b00      	cmp	r3, #0
   80d82:	d03c      	beq.n	80dfe <setvbuf+0x92>
   80d84:	f1b8 0f02 	cmp.w	r8, #2
   80d88:	d82f      	bhi.n	80dea <setvbuf+0x7e>
   80d8a:	2f00      	cmp	r7, #0
   80d8c:	db2d      	blt.n	80dea <setvbuf+0x7e>
   80d8e:	4621      	mov	r1, r4
   80d90:	4630      	mov	r0, r6
   80d92:	f000 ffff 	bl	81d94 <_fflush_r>
   80d96:	89a1      	ldrh	r1, [r4, #12]
   80d98:	2300      	movs	r3, #0
   80d9a:	6063      	str	r3, [r4, #4]
   80d9c:	61a3      	str	r3, [r4, #24]
   80d9e:	060b      	lsls	r3, r1, #24
   80da0:	d427      	bmi.n	80df2 <setvbuf+0x86>
   80da2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   80da6:	b289      	uxth	r1, r1
   80da8:	f1b8 0f02 	cmp.w	r8, #2
   80dac:	81a1      	strh	r1, [r4, #12]
   80dae:	d02a      	beq.n	80e06 <setvbuf+0x9a>
   80db0:	2d00      	cmp	r5, #0
   80db2:	d036      	beq.n	80e22 <setvbuf+0xb6>
   80db4:	f1b8 0f01 	cmp.w	r8, #1
   80db8:	d011      	beq.n	80dde <setvbuf+0x72>
   80dba:	b289      	uxth	r1, r1
   80dbc:	f001 0008 	and.w	r0, r1, #8
   80dc0:	4b27      	ldr	r3, [pc, #156]	; (80e60 <setvbuf+0xf4>)
   80dc2:	b280      	uxth	r0, r0
   80dc4:	63f3      	str	r3, [r6, #60]	; 0x3c
   80dc6:	6025      	str	r5, [r4, #0]
   80dc8:	6125      	str	r5, [r4, #16]
   80dca:	6167      	str	r7, [r4, #20]
   80dcc:	b178      	cbz	r0, 80dee <setvbuf+0x82>
   80dce:	f011 0f03 	tst.w	r1, #3
   80dd2:	bf18      	it	ne
   80dd4:	2700      	movne	r7, #0
   80dd6:	2000      	movs	r0, #0
   80dd8:	60a7      	str	r7, [r4, #8]
   80dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dde:	f041 0101 	orr.w	r1, r1, #1
   80de2:	427b      	negs	r3, r7
   80de4:	81a1      	strh	r1, [r4, #12]
   80de6:	61a3      	str	r3, [r4, #24]
   80de8:	e7e7      	b.n	80dba <setvbuf+0x4e>
   80dea:	f04f 30ff 	mov.w	r0, #4294967295
   80dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80df2:	6921      	ldr	r1, [r4, #16]
   80df4:	4630      	mov	r0, r6
   80df6:	f001 f939 	bl	8206c <_free_r>
   80dfa:	89a1      	ldrh	r1, [r4, #12]
   80dfc:	e7d1      	b.n	80da2 <setvbuf+0x36>
   80dfe:	4630      	mov	r0, r6
   80e00:	f001 f85c 	bl	81ebc <__sinit>
   80e04:	e7be      	b.n	80d84 <setvbuf+0x18>
   80e06:	2000      	movs	r0, #0
   80e08:	f104 0343 	add.w	r3, r4, #67	; 0x43
   80e0c:	f041 0102 	orr.w	r1, r1, #2
   80e10:	2500      	movs	r5, #0
   80e12:	2201      	movs	r2, #1
   80e14:	81a1      	strh	r1, [r4, #12]
   80e16:	60a5      	str	r5, [r4, #8]
   80e18:	6023      	str	r3, [r4, #0]
   80e1a:	6123      	str	r3, [r4, #16]
   80e1c:	6162      	str	r2, [r4, #20]
   80e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e22:	2f00      	cmp	r7, #0
   80e24:	bf08      	it	eq
   80e26:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80e2a:	4638      	mov	r0, r7
   80e2c:	f001 fc28 	bl	82680 <malloc>
   80e30:	4605      	mov	r5, r0
   80e32:	b128      	cbz	r0, 80e40 <setvbuf+0xd4>
   80e34:	89a1      	ldrh	r1, [r4, #12]
   80e36:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80e3a:	b289      	uxth	r1, r1
   80e3c:	81a1      	strh	r1, [r4, #12]
   80e3e:	e7b9      	b.n	80db4 <setvbuf+0x48>
   80e40:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80e44:	f001 fc1c 	bl	82680 <malloc>
   80e48:	4605      	mov	r5, r0
   80e4a:	b918      	cbnz	r0, 80e54 <setvbuf+0xe8>
   80e4c:	89a1      	ldrh	r1, [r4, #12]
   80e4e:	f04f 30ff 	mov.w	r0, #4294967295
   80e52:	e7d9      	b.n	80e08 <setvbuf+0x9c>
   80e54:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80e58:	e7ec      	b.n	80e34 <setvbuf+0xc8>
   80e5a:	bf00      	nop
   80e5c:	20070558 	.word	0x20070558
   80e60:	00081dc1 	.word	0x00081dc1

00080e64 <__sprint_r.part.0>:
   80e64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80e6a:	049c      	lsls	r4, r3, #18
   80e6c:	460f      	mov	r7, r1
   80e6e:	4692      	mov	sl, r2
   80e70:	d52b      	bpl.n	80eca <__sprint_r.part.0+0x66>
   80e72:	6893      	ldr	r3, [r2, #8]
   80e74:	6812      	ldr	r2, [r2, #0]
   80e76:	b333      	cbz	r3, 80ec6 <__sprint_r.part.0+0x62>
   80e78:	4680      	mov	r8, r0
   80e7a:	f102 0908 	add.w	r9, r2, #8
   80e7e:	e919 0060 	ldmdb	r9, {r5, r6}
   80e82:	08b6      	lsrs	r6, r6, #2
   80e84:	d017      	beq.n	80eb6 <__sprint_r.part.0+0x52>
   80e86:	3d04      	subs	r5, #4
   80e88:	2400      	movs	r4, #0
   80e8a:	e001      	b.n	80e90 <__sprint_r.part.0+0x2c>
   80e8c:	42a6      	cmp	r6, r4
   80e8e:	d010      	beq.n	80eb2 <__sprint_r.part.0+0x4e>
   80e90:	4640      	mov	r0, r8
   80e92:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80e96:	463a      	mov	r2, r7
   80e98:	f001 f888 	bl	81fac <_fputwc_r>
   80e9c:	1c43      	adds	r3, r0, #1
   80e9e:	f104 0401 	add.w	r4, r4, #1
   80ea2:	d1f3      	bne.n	80e8c <__sprint_r.part.0+0x28>
   80ea4:	2300      	movs	r3, #0
   80ea6:	f8ca 3008 	str.w	r3, [sl, #8]
   80eaa:	f8ca 3004 	str.w	r3, [sl, #4]
   80eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80eb2:	f8da 3008 	ldr.w	r3, [sl, #8]
   80eb6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   80eba:	f8ca 3008 	str.w	r3, [sl, #8]
   80ebe:	f109 0908 	add.w	r9, r9, #8
   80ec2:	2b00      	cmp	r3, #0
   80ec4:	d1db      	bne.n	80e7e <__sprint_r.part.0+0x1a>
   80ec6:	2000      	movs	r0, #0
   80ec8:	e7ec      	b.n	80ea4 <__sprint_r.part.0+0x40>
   80eca:	f001 f9a7 	bl	8221c <__sfvwrite_r>
   80ece:	2300      	movs	r3, #0
   80ed0:	f8ca 3008 	str.w	r3, [sl, #8]
   80ed4:	f8ca 3004 	str.w	r3, [sl, #4]
   80ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00080edc <_vfiprintf_r>:
   80edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ee0:	b0ab      	sub	sp, #172	; 0xac
   80ee2:	461c      	mov	r4, r3
   80ee4:	9100      	str	r1, [sp, #0]
   80ee6:	4693      	mov	fp, r2
   80ee8:	9304      	str	r3, [sp, #16]
   80eea:	9001      	str	r0, [sp, #4]
   80eec:	b118      	cbz	r0, 80ef6 <_vfiprintf_r+0x1a>
   80eee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80ef0:	2b00      	cmp	r3, #0
   80ef2:	f000 80e3 	beq.w	810bc <_vfiprintf_r+0x1e0>
   80ef6:	9b00      	ldr	r3, [sp, #0]
   80ef8:	8999      	ldrh	r1, [r3, #12]
   80efa:	b28a      	uxth	r2, r1
   80efc:	0490      	lsls	r0, r2, #18
   80efe:	d408      	bmi.n	80f12 <_vfiprintf_r+0x36>
   80f00:	4618      	mov	r0, r3
   80f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   80f04:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   80f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   80f0c:	8182      	strh	r2, [r0, #12]
   80f0e:	6643      	str	r3, [r0, #100]	; 0x64
   80f10:	b292      	uxth	r2, r2
   80f12:	0711      	lsls	r1, r2, #28
   80f14:	f140 80b2 	bpl.w	8107c <_vfiprintf_r+0x1a0>
   80f18:	9b00      	ldr	r3, [sp, #0]
   80f1a:	691b      	ldr	r3, [r3, #16]
   80f1c:	2b00      	cmp	r3, #0
   80f1e:	f000 80ad 	beq.w	8107c <_vfiprintf_r+0x1a0>
   80f22:	f002 021a 	and.w	r2, r2, #26
   80f26:	2a0a      	cmp	r2, #10
   80f28:	f000 80b4 	beq.w	81094 <_vfiprintf_r+0x1b8>
   80f2c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   80f30:	4654      	mov	r4, sl
   80f32:	2300      	movs	r3, #0
   80f34:	9309      	str	r3, [sp, #36]	; 0x24
   80f36:	9302      	str	r3, [sp, #8]
   80f38:	930f      	str	r3, [sp, #60]	; 0x3c
   80f3a:	930e      	str	r3, [sp, #56]	; 0x38
   80f3c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   80f40:	f89b 3000 	ldrb.w	r3, [fp]
   80f44:	2b00      	cmp	r3, #0
   80f46:	f000 84a3 	beq.w	81890 <_vfiprintf_r+0x9b4>
   80f4a:	2b25      	cmp	r3, #37	; 0x25
   80f4c:	f000 84a0 	beq.w	81890 <_vfiprintf_r+0x9b4>
   80f50:	465a      	mov	r2, fp
   80f52:	e001      	b.n	80f58 <_vfiprintf_r+0x7c>
   80f54:	2b25      	cmp	r3, #37	; 0x25
   80f56:	d003      	beq.n	80f60 <_vfiprintf_r+0x84>
   80f58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   80f5c:	2b00      	cmp	r3, #0
   80f5e:	d1f9      	bne.n	80f54 <_vfiprintf_r+0x78>
   80f60:	ebcb 0602 	rsb	r6, fp, r2
   80f64:	4615      	mov	r5, r2
   80f66:	b196      	cbz	r6, 80f8e <_vfiprintf_r+0xb2>
   80f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   80f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   80f6c:	3301      	adds	r3, #1
   80f6e:	4432      	add	r2, r6
   80f70:	2b07      	cmp	r3, #7
   80f72:	f8c4 b000 	str.w	fp, [r4]
   80f76:	6066      	str	r6, [r4, #4]
   80f78:	920f      	str	r2, [sp, #60]	; 0x3c
   80f7a:	930e      	str	r3, [sp, #56]	; 0x38
   80f7c:	dd79      	ble.n	81072 <_vfiprintf_r+0x196>
   80f7e:	2a00      	cmp	r2, #0
   80f80:	f040 84ad 	bne.w	818de <_vfiprintf_r+0xa02>
   80f84:	4654      	mov	r4, sl
   80f86:	9b02      	ldr	r3, [sp, #8]
   80f88:	920e      	str	r2, [sp, #56]	; 0x38
   80f8a:	4433      	add	r3, r6
   80f8c:	9302      	str	r3, [sp, #8]
   80f8e:	782b      	ldrb	r3, [r5, #0]
   80f90:	2b00      	cmp	r3, #0
   80f92:	f000 835f 	beq.w	81654 <_vfiprintf_r+0x778>
   80f96:	f04f 0300 	mov.w	r3, #0
   80f9a:	2100      	movs	r1, #0
   80f9c:	f04f 3cff 	mov.w	ip, #4294967295
   80fa0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   80fa4:	1c68      	adds	r0, r5, #1
   80fa6:	786b      	ldrb	r3, [r5, #1]
   80fa8:	4688      	mov	r8, r1
   80faa:	460d      	mov	r5, r1
   80fac:	4666      	mov	r6, ip
   80fae:	f100 0b01 	add.w	fp, r0, #1
   80fb2:	f1a3 0220 	sub.w	r2, r3, #32
   80fb6:	2a58      	cmp	r2, #88	; 0x58
   80fb8:	f200 82aa 	bhi.w	81510 <_vfiprintf_r+0x634>
   80fbc:	e8df f012 	tbh	[pc, r2, lsl #1]
   80fc0:	02a8029a 	.word	0x02a8029a
   80fc4:	02a202a8 	.word	0x02a202a8
   80fc8:	02a802a8 	.word	0x02a802a8
   80fcc:	02a802a8 	.word	0x02a802a8
   80fd0:	02a802a8 	.word	0x02a802a8
   80fd4:	02600254 	.word	0x02600254
   80fd8:	010d02a8 	.word	0x010d02a8
   80fdc:	02a8026c 	.word	0x02a8026c
   80fe0:	012f0129 	.word	0x012f0129
   80fe4:	012f012f 	.word	0x012f012f
   80fe8:	012f012f 	.word	0x012f012f
   80fec:	012f012f 	.word	0x012f012f
   80ff0:	012f012f 	.word	0x012f012f
   80ff4:	02a802a8 	.word	0x02a802a8
   80ff8:	02a802a8 	.word	0x02a802a8
   80ffc:	02a802a8 	.word	0x02a802a8
   81000:	02a802a8 	.word	0x02a802a8
   81004:	02a802a8 	.word	0x02a802a8
   81008:	02a8013d 	.word	0x02a8013d
   8100c:	02a802a8 	.word	0x02a802a8
   81010:	02a802a8 	.word	0x02a802a8
   81014:	02a802a8 	.word	0x02a802a8
   81018:	02a802a8 	.word	0x02a802a8
   8101c:	017402a8 	.word	0x017402a8
   81020:	02a802a8 	.word	0x02a802a8
   81024:	02a802a8 	.word	0x02a802a8
   81028:	018b02a8 	.word	0x018b02a8
   8102c:	02a802a8 	.word	0x02a802a8
   81030:	02a801a3 	.word	0x02a801a3
   81034:	02a802a8 	.word	0x02a802a8
   81038:	02a802a8 	.word	0x02a802a8
   8103c:	02a802a8 	.word	0x02a802a8
   81040:	02a802a8 	.word	0x02a802a8
   81044:	01c702a8 	.word	0x01c702a8
   81048:	02a801da 	.word	0x02a801da
   8104c:	02a802a8 	.word	0x02a802a8
   81050:	01da0123 	.word	0x01da0123
   81054:	02a802a8 	.word	0x02a802a8
   81058:	02a8024b 	.word	0x02a8024b
   8105c:	01130288 	.word	0x01130288
   81060:	020701f4 	.word	0x020701f4
   81064:	020d02a8 	.word	0x020d02a8
   81068:	008102a8 	.word	0x008102a8
   8106c:	02a802a8 	.word	0x02a802a8
   81070:	0232      	.short	0x0232
   81072:	3408      	adds	r4, #8
   81074:	9b02      	ldr	r3, [sp, #8]
   81076:	4433      	add	r3, r6
   81078:	9302      	str	r3, [sp, #8]
   8107a:	e788      	b.n	80f8e <_vfiprintf_r+0xb2>
   8107c:	9801      	ldr	r0, [sp, #4]
   8107e:	9900      	ldr	r1, [sp, #0]
   81080:	f000 fd72 	bl	81b68 <__swsetup_r>
   81084:	b9a8      	cbnz	r0, 810b2 <_vfiprintf_r+0x1d6>
   81086:	9b00      	ldr	r3, [sp, #0]
   81088:	899a      	ldrh	r2, [r3, #12]
   8108a:	f002 021a 	and.w	r2, r2, #26
   8108e:	2a0a      	cmp	r2, #10
   81090:	f47f af4c 	bne.w	80f2c <_vfiprintf_r+0x50>
   81094:	9b00      	ldr	r3, [sp, #0]
   81096:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   8109a:	2b00      	cmp	r3, #0
   8109c:	f6ff af46 	blt.w	80f2c <_vfiprintf_r+0x50>
   810a0:	9801      	ldr	r0, [sp, #4]
   810a2:	9900      	ldr	r1, [sp, #0]
   810a4:	465a      	mov	r2, fp
   810a6:	4623      	mov	r3, r4
   810a8:	f000 fd20 	bl	81aec <__sbprintf>
   810ac:	b02b      	add	sp, #172	; 0xac
   810ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810b2:	f04f 30ff 	mov.w	r0, #4294967295
   810b6:	b02b      	add	sp, #172	; 0xac
   810b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810bc:	f000 fefe 	bl	81ebc <__sinit>
   810c0:	e719      	b.n	80ef6 <_vfiprintf_r+0x1a>
   810c2:	f018 0f20 	tst.w	r8, #32
   810c6:	9503      	str	r5, [sp, #12]
   810c8:	46b4      	mov	ip, r6
   810ca:	f000 810c 	beq.w	812e6 <_vfiprintf_r+0x40a>
   810ce:	9b04      	ldr	r3, [sp, #16]
   810d0:	3307      	adds	r3, #7
   810d2:	f023 0307 	bic.w	r3, r3, #7
   810d6:	f103 0208 	add.w	r2, r3, #8
   810da:	e9d3 6700 	ldrd	r6, r7, [r3]
   810de:	9204      	str	r2, [sp, #16]
   810e0:	2301      	movs	r3, #1
   810e2:	f04f 0200 	mov.w	r2, #0
   810e6:	46e1      	mov	r9, ip
   810e8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   810ec:	2500      	movs	r5, #0
   810ee:	f1bc 0f00 	cmp.w	ip, #0
   810f2:	bfa8      	it	ge
   810f4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   810f8:	ea56 0207 	orrs.w	r2, r6, r7
   810fc:	f040 80c4 	bne.w	81288 <_vfiprintf_r+0x3ac>
   81100:	f1bc 0f00 	cmp.w	ip, #0
   81104:	f000 8380 	beq.w	81808 <_vfiprintf_r+0x92c>
   81108:	2b01      	cmp	r3, #1
   8110a:	f000 80c5 	beq.w	81298 <_vfiprintf_r+0x3bc>
   8110e:	2b02      	cmp	r3, #2
   81110:	f000 8386 	beq.w	81820 <_vfiprintf_r+0x944>
   81114:	4651      	mov	r1, sl
   81116:	08f2      	lsrs	r2, r6, #3
   81118:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8111c:	08f8      	lsrs	r0, r7, #3
   8111e:	f006 0307 	and.w	r3, r6, #7
   81122:	4607      	mov	r7, r0
   81124:	4616      	mov	r6, r2
   81126:	3330      	adds	r3, #48	; 0x30
   81128:	ea56 0207 	orrs.w	r2, r6, r7
   8112c:	f801 3d01 	strb.w	r3, [r1, #-1]!
   81130:	d1f1      	bne.n	81116 <_vfiprintf_r+0x23a>
   81132:	f018 0f01 	tst.w	r8, #1
   81136:	9107      	str	r1, [sp, #28]
   81138:	f040 83fa 	bne.w	81930 <_vfiprintf_r+0xa54>
   8113c:	ebc1 090a 	rsb	r9, r1, sl
   81140:	45e1      	cmp	r9, ip
   81142:	464e      	mov	r6, r9
   81144:	bfb8      	it	lt
   81146:	4666      	movlt	r6, ip
   81148:	b105      	cbz	r5, 8114c <_vfiprintf_r+0x270>
   8114a:	3601      	adds	r6, #1
   8114c:	f018 0302 	ands.w	r3, r8, #2
   81150:	9305      	str	r3, [sp, #20]
   81152:	bf18      	it	ne
   81154:	3602      	addne	r6, #2
   81156:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   8115a:	9306      	str	r3, [sp, #24]
   8115c:	f040 81f9 	bne.w	81552 <_vfiprintf_r+0x676>
   81160:	9b03      	ldr	r3, [sp, #12]
   81162:	1b9d      	subs	r5, r3, r6
   81164:	2d00      	cmp	r5, #0
   81166:	f340 81f4 	ble.w	81552 <_vfiprintf_r+0x676>
   8116a:	2d10      	cmp	r5, #16
   8116c:	f340 848a 	ble.w	81a84 <_vfiprintf_r+0xba8>
   81170:	4620      	mov	r0, r4
   81172:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   81176:	4664      	mov	r4, ip
   81178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8117a:	4fc4      	ldr	r7, [pc, #784]	; (8148c <_vfiprintf_r+0x5b0>)
   8117c:	2310      	movs	r3, #16
   8117e:	4671      	mov	r1, lr
   81180:	4684      	mov	ip, r0
   81182:	e007      	b.n	81194 <_vfiprintf_r+0x2b8>
   81184:	f101 0e02 	add.w	lr, r1, #2
   81188:	4601      	mov	r1, r0
   8118a:	f10c 0c08 	add.w	ip, ip, #8
   8118e:	3d10      	subs	r5, #16
   81190:	2d10      	cmp	r5, #16
   81192:	dd13      	ble.n	811bc <_vfiprintf_r+0x2e0>
   81194:	1c48      	adds	r0, r1, #1
   81196:	3210      	adds	r2, #16
   81198:	2807      	cmp	r0, #7
   8119a:	920f      	str	r2, [sp, #60]	; 0x3c
   8119c:	f8cc 7000 	str.w	r7, [ip]
   811a0:	f8cc 3004 	str.w	r3, [ip, #4]
   811a4:	900e      	str	r0, [sp, #56]	; 0x38
   811a6:	dded      	ble.n	81184 <_vfiprintf_r+0x2a8>
   811a8:	2a00      	cmp	r2, #0
   811aa:	f040 81c2 	bne.w	81532 <_vfiprintf_r+0x656>
   811ae:	3d10      	subs	r5, #16
   811b0:	2d10      	cmp	r5, #16
   811b2:	4611      	mov	r1, r2
   811b4:	f04f 0e01 	mov.w	lr, #1
   811b8:	46d4      	mov	ip, sl
   811ba:	dceb      	bgt.n	81194 <_vfiprintf_r+0x2b8>
   811bc:	4663      	mov	r3, ip
   811be:	4671      	mov	r1, lr
   811c0:	46a4      	mov	ip, r4
   811c2:	461c      	mov	r4, r3
   811c4:	442a      	add	r2, r5
   811c6:	2907      	cmp	r1, #7
   811c8:	920f      	str	r2, [sp, #60]	; 0x3c
   811ca:	6027      	str	r7, [r4, #0]
   811cc:	6065      	str	r5, [r4, #4]
   811ce:	910e      	str	r1, [sp, #56]	; 0x38
   811d0:	f300 8346 	bgt.w	81860 <_vfiprintf_r+0x984>
   811d4:	3408      	adds	r4, #8
   811d6:	1c48      	adds	r0, r1, #1
   811d8:	e1be      	b.n	81558 <_vfiprintf_r+0x67c>
   811da:	4658      	mov	r0, fp
   811dc:	f048 0804 	orr.w	r8, r8, #4
   811e0:	f89b 3000 	ldrb.w	r3, [fp]
   811e4:	e6e3      	b.n	80fae <_vfiprintf_r+0xd2>
   811e6:	f018 0320 	ands.w	r3, r8, #32
   811ea:	9503      	str	r5, [sp, #12]
   811ec:	46b4      	mov	ip, r6
   811ee:	d062      	beq.n	812b6 <_vfiprintf_r+0x3da>
   811f0:	9b04      	ldr	r3, [sp, #16]
   811f2:	3307      	adds	r3, #7
   811f4:	f023 0307 	bic.w	r3, r3, #7
   811f8:	f103 0208 	add.w	r2, r3, #8
   811fc:	e9d3 6700 	ldrd	r6, r7, [r3]
   81200:	9204      	str	r2, [sp, #16]
   81202:	2300      	movs	r3, #0
   81204:	e76d      	b.n	810e2 <_vfiprintf_r+0x206>
   81206:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   8120a:	f89b 3000 	ldrb.w	r3, [fp]
   8120e:	4658      	mov	r0, fp
   81210:	e6cd      	b.n	80fae <_vfiprintf_r+0xd2>
   81212:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   81216:	f89b 3000 	ldrb.w	r3, [fp]
   8121a:	4658      	mov	r0, fp
   8121c:	e6c7      	b.n	80fae <_vfiprintf_r+0xd2>
   8121e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81222:	2500      	movs	r5, #0
   81224:	f81b 3b01 	ldrb.w	r3, [fp], #1
   81228:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8122c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81230:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81234:	2a09      	cmp	r2, #9
   81236:	d9f5      	bls.n	81224 <_vfiprintf_r+0x348>
   81238:	e6bb      	b.n	80fb2 <_vfiprintf_r+0xd6>
   8123a:	f048 0810 	orr.w	r8, r8, #16
   8123e:	f018 0f20 	tst.w	r8, #32
   81242:	9503      	str	r5, [sp, #12]
   81244:	46b4      	mov	ip, r6
   81246:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8124a:	f000 809b 	beq.w	81384 <_vfiprintf_r+0x4a8>
   8124e:	9904      	ldr	r1, [sp, #16]
   81250:	3107      	adds	r1, #7
   81252:	f021 0107 	bic.w	r1, r1, #7
   81256:	e9d1 2300 	ldrd	r2, r3, [r1]
   8125a:	4616      	mov	r6, r2
   8125c:	461f      	mov	r7, r3
   8125e:	3108      	adds	r1, #8
   81260:	9104      	str	r1, [sp, #16]
   81262:	2a00      	cmp	r2, #0
   81264:	f173 0300 	sbcs.w	r3, r3, #0
   81268:	f2c0 83a4 	blt.w	819b4 <_vfiprintf_r+0xad8>
   8126c:	f1bc 0f00 	cmp.w	ip, #0
   81270:	bfa8      	it	ge
   81272:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   81276:	ea56 0207 	orrs.w	r2, r6, r7
   8127a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8127e:	46e1      	mov	r9, ip
   81280:	f04f 0301 	mov.w	r3, #1
   81284:	f43f af3c 	beq.w	81100 <_vfiprintf_r+0x224>
   81288:	2b01      	cmp	r3, #1
   8128a:	f47f af40 	bne.w	8110e <_vfiprintf_r+0x232>
   8128e:	2f00      	cmp	r7, #0
   81290:	bf08      	it	eq
   81292:	2e0a      	cmpeq	r6, #10
   81294:	f080 8332 	bcs.w	818fc <_vfiprintf_r+0xa20>
   81298:	ab2a      	add	r3, sp, #168	; 0xa8
   8129a:	3630      	adds	r6, #48	; 0x30
   8129c:	f803 6d41 	strb.w	r6, [r3, #-65]!
   812a0:	ebc3 090a 	rsb	r9, r3, sl
   812a4:	9307      	str	r3, [sp, #28]
   812a6:	e74b      	b.n	81140 <_vfiprintf_r+0x264>
   812a8:	f048 0810 	orr.w	r8, r8, #16
   812ac:	f018 0320 	ands.w	r3, r8, #32
   812b0:	9503      	str	r5, [sp, #12]
   812b2:	46b4      	mov	ip, r6
   812b4:	d19c      	bne.n	811f0 <_vfiprintf_r+0x314>
   812b6:	f018 0210 	ands.w	r2, r8, #16
   812ba:	f040 82f7 	bne.w	818ac <_vfiprintf_r+0x9d0>
   812be:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   812c2:	f000 82f3 	beq.w	818ac <_vfiprintf_r+0x9d0>
   812c6:	9904      	ldr	r1, [sp, #16]
   812c8:	4613      	mov	r3, r2
   812ca:	460a      	mov	r2, r1
   812cc:	3204      	adds	r2, #4
   812ce:	880e      	ldrh	r6, [r1, #0]
   812d0:	2700      	movs	r7, #0
   812d2:	9204      	str	r2, [sp, #16]
   812d4:	e705      	b.n	810e2 <_vfiprintf_r+0x206>
   812d6:	f048 0810 	orr.w	r8, r8, #16
   812da:	f018 0f20 	tst.w	r8, #32
   812de:	9503      	str	r5, [sp, #12]
   812e0:	46b4      	mov	ip, r6
   812e2:	f47f aef4 	bne.w	810ce <_vfiprintf_r+0x1f2>
   812e6:	9a04      	ldr	r2, [sp, #16]
   812e8:	f018 0f10 	tst.w	r8, #16
   812ec:	4613      	mov	r3, r2
   812ee:	f040 82e4 	bne.w	818ba <_vfiprintf_r+0x9de>
   812f2:	f018 0f40 	tst.w	r8, #64	; 0x40
   812f6:	f000 82e0 	beq.w	818ba <_vfiprintf_r+0x9de>
   812fa:	8816      	ldrh	r6, [r2, #0]
   812fc:	3204      	adds	r2, #4
   812fe:	2700      	movs	r7, #0
   81300:	2301      	movs	r3, #1
   81302:	9204      	str	r2, [sp, #16]
   81304:	e6ed      	b.n	810e2 <_vfiprintf_r+0x206>
   81306:	4a62      	ldr	r2, [pc, #392]	; (81490 <_vfiprintf_r+0x5b4>)
   81308:	f018 0f20 	tst.w	r8, #32
   8130c:	9503      	str	r5, [sp, #12]
   8130e:	46b4      	mov	ip, r6
   81310:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81314:	9209      	str	r2, [sp, #36]	; 0x24
   81316:	f000 808f 	beq.w	81438 <_vfiprintf_r+0x55c>
   8131a:	9a04      	ldr	r2, [sp, #16]
   8131c:	3207      	adds	r2, #7
   8131e:	f022 0207 	bic.w	r2, r2, #7
   81322:	f102 0108 	add.w	r1, r2, #8
   81326:	9104      	str	r1, [sp, #16]
   81328:	e9d2 6700 	ldrd	r6, r7, [r2]
   8132c:	f018 0f01 	tst.w	r8, #1
   81330:	f000 828f 	beq.w	81852 <_vfiprintf_r+0x976>
   81334:	ea56 0207 	orrs.w	r2, r6, r7
   81338:	f000 828b 	beq.w	81852 <_vfiprintf_r+0x976>
   8133c:	2230      	movs	r2, #48	; 0x30
   8133e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81342:	f048 0802 	orr.w	r8, r8, #2
   81346:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8134a:	2302      	movs	r3, #2
   8134c:	e6c9      	b.n	810e2 <_vfiprintf_r+0x206>
   8134e:	9a04      	ldr	r2, [sp, #16]
   81350:	2601      	movs	r6, #1
   81352:	6813      	ldr	r3, [r2, #0]
   81354:	f04f 0100 	mov.w	r1, #0
   81358:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8135c:	4613      	mov	r3, r2
   8135e:	46b1      	mov	r9, r6
   81360:	3304      	adds	r3, #4
   81362:	9304      	str	r3, [sp, #16]
   81364:	ab10      	add	r3, sp, #64	; 0x40
   81366:	9503      	str	r5, [sp, #12]
   81368:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8136c:	9307      	str	r3, [sp, #28]
   8136e:	f04f 0c00 	mov.w	ip, #0
   81372:	e6eb      	b.n	8114c <_vfiprintf_r+0x270>
   81374:	f018 0f20 	tst.w	r8, #32
   81378:	9503      	str	r5, [sp, #12]
   8137a:	46b4      	mov	ip, r6
   8137c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81380:	f47f af65 	bne.w	8124e <_vfiprintf_r+0x372>
   81384:	9a04      	ldr	r2, [sp, #16]
   81386:	f018 0f10 	tst.w	r8, #16
   8138a:	4613      	mov	r3, r2
   8138c:	f040 82a0 	bne.w	818d0 <_vfiprintf_r+0x9f4>
   81390:	f018 0f40 	tst.w	r8, #64	; 0x40
   81394:	f000 829c 	beq.w	818d0 <_vfiprintf_r+0x9f4>
   81398:	f9b2 6000 	ldrsh.w	r6, [r2]
   8139c:	3304      	adds	r3, #4
   8139e:	17f7      	asrs	r7, r6, #31
   813a0:	9304      	str	r3, [sp, #16]
   813a2:	4632      	mov	r2, r6
   813a4:	463b      	mov	r3, r7
   813a6:	e75c      	b.n	81262 <_vfiprintf_r+0x386>
   813a8:	9904      	ldr	r1, [sp, #16]
   813aa:	2378      	movs	r3, #120	; 0x78
   813ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   813b0:	4b38      	ldr	r3, [pc, #224]	; (81494 <_vfiprintf_r+0x5b8>)
   813b2:	46b4      	mov	ip, r6
   813b4:	2230      	movs	r2, #48	; 0x30
   813b6:	680e      	ldr	r6, [r1, #0]
   813b8:	3104      	adds	r1, #4
   813ba:	9309      	str	r3, [sp, #36]	; 0x24
   813bc:	9503      	str	r5, [sp, #12]
   813be:	f048 0802 	orr.w	r8, r8, #2
   813c2:	9104      	str	r1, [sp, #16]
   813c4:	2700      	movs	r7, #0
   813c6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   813ca:	2302      	movs	r3, #2
   813cc:	e689      	b.n	810e2 <_vfiprintf_r+0x206>
   813ce:	f048 0820 	orr.w	r8, r8, #32
   813d2:	f89b 3000 	ldrb.w	r3, [fp]
   813d6:	4658      	mov	r0, fp
   813d8:	e5e9      	b.n	80fae <_vfiprintf_r+0xd2>
   813da:	f04f 0100 	mov.w	r1, #0
   813de:	9a04      	ldr	r2, [sp, #16]
   813e0:	9503      	str	r5, [sp, #12]
   813e2:	6813      	ldr	r3, [r2, #0]
   813e4:	46b4      	mov	ip, r6
   813e6:	9307      	str	r3, [sp, #28]
   813e8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   813ec:	1d15      	adds	r5, r2, #4
   813ee:	2b00      	cmp	r3, #0
   813f0:	f000 834e 	beq.w	81a90 <_vfiprintf_r+0xbb4>
   813f4:	2e00      	cmp	r6, #0
   813f6:	f2c0 8329 	blt.w	81a4c <_vfiprintf_r+0xb70>
   813fa:	9e07      	ldr	r6, [sp, #28]
   813fc:	4662      	mov	r2, ip
   813fe:	4630      	mov	r0, r6
   81400:	2100      	movs	r1, #0
   81402:	f8cd c010 	str.w	ip, [sp, #16]
   81406:	f001 fbc9 	bl	82b9c <memchr>
   8140a:	f8dd c010 	ldr.w	ip, [sp, #16]
   8140e:	2800      	cmp	r0, #0
   81410:	f000 834e 	beq.w	81ab0 <_vfiprintf_r+0xbd4>
   81414:	9504      	str	r5, [sp, #16]
   81416:	ebc6 0900 	rsb	r9, r6, r0
   8141a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8141e:	f04f 0c00 	mov.w	ip, #0
   81422:	e68d      	b.n	81140 <_vfiprintf_r+0x264>
   81424:	4a1b      	ldr	r2, [pc, #108]	; (81494 <_vfiprintf_r+0x5b8>)
   81426:	f018 0f20 	tst.w	r8, #32
   8142a:	9503      	str	r5, [sp, #12]
   8142c:	46b4      	mov	ip, r6
   8142e:	9209      	str	r2, [sp, #36]	; 0x24
   81430:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81434:	f47f af71 	bne.w	8131a <_vfiprintf_r+0x43e>
   81438:	9904      	ldr	r1, [sp, #16]
   8143a:	f018 0f10 	tst.w	r8, #16
   8143e:	460a      	mov	r2, r1
   81440:	f040 8241 	bne.w	818c6 <_vfiprintf_r+0x9ea>
   81444:	f018 0f40 	tst.w	r8, #64	; 0x40
   81448:	f000 823d 	beq.w	818c6 <_vfiprintf_r+0x9ea>
   8144c:	3204      	adds	r2, #4
   8144e:	880e      	ldrh	r6, [r1, #0]
   81450:	2700      	movs	r7, #0
   81452:	9204      	str	r2, [sp, #16]
   81454:	e76a      	b.n	8132c <_vfiprintf_r+0x450>
   81456:	f89b 3000 	ldrb.w	r3, [fp]
   8145a:	2b6c      	cmp	r3, #108	; 0x6c
   8145c:	f000 82e9 	beq.w	81a32 <_vfiprintf_r+0xb56>
   81460:	f048 0810 	orr.w	r8, r8, #16
   81464:	4658      	mov	r0, fp
   81466:	e5a2      	b.n	80fae <_vfiprintf_r+0xd2>
   81468:	9a04      	ldr	r2, [sp, #16]
   8146a:	4613      	mov	r3, r2
   8146c:	6815      	ldr	r5, [r2, #0]
   8146e:	3304      	adds	r3, #4
   81470:	2d00      	cmp	r5, #0
   81472:	f2c0 82e6 	blt.w	81a42 <_vfiprintf_r+0xb66>
   81476:	9304      	str	r3, [sp, #16]
   81478:	f89b 3000 	ldrb.w	r3, [fp]
   8147c:	4658      	mov	r0, fp
   8147e:	e596      	b.n	80fae <_vfiprintf_r+0xd2>
   81480:	f89b 3000 	ldrb.w	r3, [fp]
   81484:	4658      	mov	r0, fp
   81486:	212b      	movs	r1, #43	; 0x2b
   81488:	e591      	b.n	80fae <_vfiprintf_r+0xd2>
   8148a:	bf00      	nop
   8148c:	00083bfc 	.word	0x00083bfc
   81490:	00083bcc 	.word	0x00083bcc
   81494:	00083be0 	.word	0x00083be0
   81498:	f89b 3000 	ldrb.w	r3, [fp]
   8149c:	f10b 0001 	add.w	r0, fp, #1
   814a0:	2b2a      	cmp	r3, #42	; 0x2a
   814a2:	f000 830f 	beq.w	81ac4 <_vfiprintf_r+0xbe8>
   814a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814aa:	2a09      	cmp	r2, #9
   814ac:	4683      	mov	fp, r0
   814ae:	f04f 0600 	mov.w	r6, #0
   814b2:	f63f ad7e 	bhi.w	80fb2 <_vfiprintf_r+0xd6>
   814b6:	f81b 3b01 	ldrb.w	r3, [fp], #1
   814ba:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   814be:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   814c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814c6:	2a09      	cmp	r2, #9
   814c8:	d9f5      	bls.n	814b6 <_vfiprintf_r+0x5da>
   814ca:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   814ce:	e570      	b.n	80fb2 <_vfiprintf_r+0xd6>
   814d0:	f018 0f20 	tst.w	r8, #32
   814d4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   814d8:	f000 8283 	beq.w	819e2 <_vfiprintf_r+0xb06>
   814dc:	9a04      	ldr	r2, [sp, #16]
   814de:	4613      	mov	r3, r2
   814e0:	3304      	adds	r3, #4
   814e2:	9304      	str	r3, [sp, #16]
   814e4:	9b02      	ldr	r3, [sp, #8]
   814e6:	6811      	ldr	r1, [r2, #0]
   814e8:	17df      	asrs	r7, r3, #31
   814ea:	461a      	mov	r2, r3
   814ec:	463b      	mov	r3, r7
   814ee:	e9c1 2300 	strd	r2, r3, [r1]
   814f2:	e525      	b.n	80f40 <_vfiprintf_r+0x64>
   814f4:	4658      	mov	r0, fp
   814f6:	f89b 3000 	ldrb.w	r3, [fp]
   814fa:	2900      	cmp	r1, #0
   814fc:	f47f ad57 	bne.w	80fae <_vfiprintf_r+0xd2>
   81500:	2120      	movs	r1, #32
   81502:	e554      	b.n	80fae <_vfiprintf_r+0xd2>
   81504:	f048 0801 	orr.w	r8, r8, #1
   81508:	4658      	mov	r0, fp
   8150a:	f89b 3000 	ldrb.w	r3, [fp]
   8150e:	e54e      	b.n	80fae <_vfiprintf_r+0xd2>
   81510:	9503      	str	r5, [sp, #12]
   81512:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81516:	2b00      	cmp	r3, #0
   81518:	f000 809c 	beq.w	81654 <_vfiprintf_r+0x778>
   8151c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81520:	f04f 0300 	mov.w	r3, #0
   81524:	2601      	movs	r6, #1
   81526:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8152a:	ab10      	add	r3, sp, #64	; 0x40
   8152c:	46b1      	mov	r9, r6
   8152e:	9307      	str	r3, [sp, #28]
   81530:	e71d      	b.n	8136e <_vfiprintf_r+0x492>
   81532:	9801      	ldr	r0, [sp, #4]
   81534:	9900      	ldr	r1, [sp, #0]
   81536:	aa0d      	add	r2, sp, #52	; 0x34
   81538:	9308      	str	r3, [sp, #32]
   8153a:	f7ff fc93 	bl	80e64 <__sprint_r.part.0>
   8153e:	2800      	cmp	r0, #0
   81540:	f040 808f 	bne.w	81662 <_vfiprintf_r+0x786>
   81544:	990e      	ldr	r1, [sp, #56]	; 0x38
   81546:	46d4      	mov	ip, sl
   81548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8154a:	f101 0e01 	add.w	lr, r1, #1
   8154e:	9b08      	ldr	r3, [sp, #32]
   81550:	e61d      	b.n	8118e <_vfiprintf_r+0x2b2>
   81552:	990e      	ldr	r1, [sp, #56]	; 0x38
   81554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81556:	1c48      	adds	r0, r1, #1
   81558:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8155c:	b16b      	cbz	r3, 8157a <_vfiprintf_r+0x69e>
   8155e:	3201      	adds	r2, #1
   81560:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   81564:	2101      	movs	r1, #1
   81566:	2807      	cmp	r0, #7
   81568:	920f      	str	r2, [sp, #60]	; 0x3c
   8156a:	900e      	str	r0, [sp, #56]	; 0x38
   8156c:	6023      	str	r3, [r4, #0]
   8156e:	6061      	str	r1, [r4, #4]
   81570:	f300 8134 	bgt.w	817dc <_vfiprintf_r+0x900>
   81574:	4601      	mov	r1, r0
   81576:	3408      	adds	r4, #8
   81578:	3001      	adds	r0, #1
   8157a:	9b05      	ldr	r3, [sp, #20]
   8157c:	b163      	cbz	r3, 81598 <_vfiprintf_r+0x6bc>
   8157e:	3202      	adds	r2, #2
   81580:	a90c      	add	r1, sp, #48	; 0x30
   81582:	2302      	movs	r3, #2
   81584:	2807      	cmp	r0, #7
   81586:	920f      	str	r2, [sp, #60]	; 0x3c
   81588:	900e      	str	r0, [sp, #56]	; 0x38
   8158a:	e884 000a 	stmia.w	r4, {r1, r3}
   8158e:	f300 8134 	bgt.w	817fa <_vfiprintf_r+0x91e>
   81592:	4601      	mov	r1, r0
   81594:	3408      	adds	r4, #8
   81596:	3001      	adds	r0, #1
   81598:	9b06      	ldr	r3, [sp, #24]
   8159a:	2b80      	cmp	r3, #128	; 0x80
   8159c:	f000 80d4 	beq.w	81748 <_vfiprintf_r+0x86c>
   815a0:	ebc9 070c 	rsb	r7, r9, ip
   815a4:	2f00      	cmp	r7, #0
   815a6:	dd2b      	ble.n	81600 <_vfiprintf_r+0x724>
   815a8:	2f10      	cmp	r7, #16
   815aa:	4dab      	ldr	r5, [pc, #684]	; (81858 <_vfiprintf_r+0x97c>)
   815ac:	dd1f      	ble.n	815ee <_vfiprintf_r+0x712>
   815ae:	46a6      	mov	lr, r4
   815b0:	2310      	movs	r3, #16
   815b2:	9c01      	ldr	r4, [sp, #4]
   815b4:	e007      	b.n	815c6 <_vfiprintf_r+0x6ea>
   815b6:	f101 0c02 	add.w	ip, r1, #2
   815ba:	4601      	mov	r1, r0
   815bc:	f10e 0e08 	add.w	lr, lr, #8
   815c0:	3f10      	subs	r7, #16
   815c2:	2f10      	cmp	r7, #16
   815c4:	dd11      	ble.n	815ea <_vfiprintf_r+0x70e>
   815c6:	1c48      	adds	r0, r1, #1
   815c8:	3210      	adds	r2, #16
   815ca:	2807      	cmp	r0, #7
   815cc:	920f      	str	r2, [sp, #60]	; 0x3c
   815ce:	f8ce 5000 	str.w	r5, [lr]
   815d2:	f8ce 3004 	str.w	r3, [lr, #4]
   815d6:	900e      	str	r0, [sp, #56]	; 0x38
   815d8:	dded      	ble.n	815b6 <_vfiprintf_r+0x6da>
   815da:	bb6a      	cbnz	r2, 81638 <_vfiprintf_r+0x75c>
   815dc:	3f10      	subs	r7, #16
   815de:	2f10      	cmp	r7, #16
   815e0:	f04f 0c01 	mov.w	ip, #1
   815e4:	4611      	mov	r1, r2
   815e6:	46d6      	mov	lr, sl
   815e8:	dced      	bgt.n	815c6 <_vfiprintf_r+0x6ea>
   815ea:	4674      	mov	r4, lr
   815ec:	4660      	mov	r0, ip
   815ee:	443a      	add	r2, r7
   815f0:	2807      	cmp	r0, #7
   815f2:	920f      	str	r2, [sp, #60]	; 0x3c
   815f4:	e884 00a0 	stmia.w	r4, {r5, r7}
   815f8:	900e      	str	r0, [sp, #56]	; 0x38
   815fa:	dc3b      	bgt.n	81674 <_vfiprintf_r+0x798>
   815fc:	3408      	adds	r4, #8
   815fe:	3001      	adds	r0, #1
   81600:	eb02 0309 	add.w	r3, r2, r9
   81604:	9a07      	ldr	r2, [sp, #28]
   81606:	2807      	cmp	r0, #7
   81608:	930f      	str	r3, [sp, #60]	; 0x3c
   8160a:	e884 0204 	stmia.w	r4, {r2, r9}
   8160e:	900e      	str	r0, [sp, #56]	; 0x38
   81610:	dd3d      	ble.n	8168e <_vfiprintf_r+0x7b2>
   81612:	2b00      	cmp	r3, #0
   81614:	f040 813f 	bne.w	81896 <_vfiprintf_r+0x9ba>
   81618:	f018 0f04 	tst.w	r8, #4
   8161c:	930e      	str	r3, [sp, #56]	; 0x38
   8161e:	f040 8130 	bne.w	81882 <_vfiprintf_r+0x9a6>
   81622:	9b02      	ldr	r3, [sp, #8]
   81624:	9a03      	ldr	r2, [sp, #12]
   81626:	4296      	cmp	r6, r2
   81628:	bfac      	ite	ge
   8162a:	199b      	addge	r3, r3, r6
   8162c:	189b      	addlt	r3, r3, r2
   8162e:	9302      	str	r3, [sp, #8]
   81630:	2300      	movs	r3, #0
   81632:	930e      	str	r3, [sp, #56]	; 0x38
   81634:	4654      	mov	r4, sl
   81636:	e483      	b.n	80f40 <_vfiprintf_r+0x64>
   81638:	4620      	mov	r0, r4
   8163a:	9900      	ldr	r1, [sp, #0]
   8163c:	aa0d      	add	r2, sp, #52	; 0x34
   8163e:	9305      	str	r3, [sp, #20]
   81640:	f7ff fc10 	bl	80e64 <__sprint_r.part.0>
   81644:	b968      	cbnz	r0, 81662 <_vfiprintf_r+0x786>
   81646:	990e      	ldr	r1, [sp, #56]	; 0x38
   81648:	46d6      	mov	lr, sl
   8164a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8164c:	f101 0c01 	add.w	ip, r1, #1
   81650:	9b05      	ldr	r3, [sp, #20]
   81652:	e7b5      	b.n	815c0 <_vfiprintf_r+0x6e4>
   81654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81656:	b123      	cbz	r3, 81662 <_vfiprintf_r+0x786>
   81658:	9801      	ldr	r0, [sp, #4]
   8165a:	9900      	ldr	r1, [sp, #0]
   8165c:	aa0d      	add	r2, sp, #52	; 0x34
   8165e:	f7ff fc01 	bl	80e64 <__sprint_r.part.0>
   81662:	9b00      	ldr	r3, [sp, #0]
   81664:	899b      	ldrh	r3, [r3, #12]
   81666:	065b      	lsls	r3, r3, #25
   81668:	f53f ad23 	bmi.w	810b2 <_vfiprintf_r+0x1d6>
   8166c:	9802      	ldr	r0, [sp, #8]
   8166e:	b02b      	add	sp, #172	; 0xac
   81670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81674:	2a00      	cmp	r2, #0
   81676:	f040 8190 	bne.w	8199a <_vfiprintf_r+0xabe>
   8167a:	464b      	mov	r3, r9
   8167c:	4654      	mov	r4, sl
   8167e:	9907      	ldr	r1, [sp, #28]
   81680:	2201      	movs	r2, #1
   81682:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   81686:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8168a:	911a      	str	r1, [sp, #104]	; 0x68
   8168c:	920e      	str	r2, [sp, #56]	; 0x38
   8168e:	f104 0208 	add.w	r2, r4, #8
   81692:	f018 0f04 	tst.w	r8, #4
   81696:	d039      	beq.n	8170c <_vfiprintf_r+0x830>
   81698:	9903      	ldr	r1, [sp, #12]
   8169a:	1b8d      	subs	r5, r1, r6
   8169c:	2d00      	cmp	r5, #0
   8169e:	dd35      	ble.n	8170c <_vfiprintf_r+0x830>
   816a0:	2d10      	cmp	r5, #16
   816a2:	f340 8200 	ble.w	81aa6 <_vfiprintf_r+0xbca>
   816a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   816a8:	4f6c      	ldr	r7, [pc, #432]	; (8185c <_vfiprintf_r+0x980>)
   816aa:	2410      	movs	r4, #16
   816ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   816b0:	f8dd 9000 	ldr.w	r9, [sp]
   816b4:	e006      	b.n	816c4 <_vfiprintf_r+0x7e8>
   816b6:	f100 0e02 	add.w	lr, r0, #2
   816ba:	4608      	mov	r0, r1
   816bc:	3208      	adds	r2, #8
   816be:	3d10      	subs	r5, #16
   816c0:	2d10      	cmp	r5, #16
   816c2:	dd10      	ble.n	816e6 <_vfiprintf_r+0x80a>
   816c4:	1c41      	adds	r1, r0, #1
   816c6:	3310      	adds	r3, #16
   816c8:	2907      	cmp	r1, #7
   816ca:	930f      	str	r3, [sp, #60]	; 0x3c
   816cc:	6017      	str	r7, [r2, #0]
   816ce:	6054      	str	r4, [r2, #4]
   816d0:	910e      	str	r1, [sp, #56]	; 0x38
   816d2:	ddf0      	ble.n	816b6 <_vfiprintf_r+0x7da>
   816d4:	2b00      	cmp	r3, #0
   816d6:	d12a      	bne.n	8172e <_vfiprintf_r+0x852>
   816d8:	3d10      	subs	r5, #16
   816da:	2d10      	cmp	r5, #16
   816dc:	f04f 0e01 	mov.w	lr, #1
   816e0:	4618      	mov	r0, r3
   816e2:	4652      	mov	r2, sl
   816e4:	dcee      	bgt.n	816c4 <_vfiprintf_r+0x7e8>
   816e6:	442b      	add	r3, r5
   816e8:	f1be 0f07 	cmp.w	lr, #7
   816ec:	930f      	str	r3, [sp, #60]	; 0x3c
   816ee:	6017      	str	r7, [r2, #0]
   816f0:	6055      	str	r5, [r2, #4]
   816f2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   816f6:	dd09      	ble.n	8170c <_vfiprintf_r+0x830>
   816f8:	2b00      	cmp	r3, #0
   816fa:	d092      	beq.n	81622 <_vfiprintf_r+0x746>
   816fc:	9801      	ldr	r0, [sp, #4]
   816fe:	9900      	ldr	r1, [sp, #0]
   81700:	aa0d      	add	r2, sp, #52	; 0x34
   81702:	f7ff fbaf 	bl	80e64 <__sprint_r.part.0>
   81706:	2800      	cmp	r0, #0
   81708:	d1ab      	bne.n	81662 <_vfiprintf_r+0x786>
   8170a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8170c:	9a02      	ldr	r2, [sp, #8]
   8170e:	9903      	ldr	r1, [sp, #12]
   81710:	428e      	cmp	r6, r1
   81712:	bfac      	ite	ge
   81714:	1992      	addge	r2, r2, r6
   81716:	1852      	addlt	r2, r2, r1
   81718:	9202      	str	r2, [sp, #8]
   8171a:	2b00      	cmp	r3, #0
   8171c:	d088      	beq.n	81630 <_vfiprintf_r+0x754>
   8171e:	9801      	ldr	r0, [sp, #4]
   81720:	9900      	ldr	r1, [sp, #0]
   81722:	aa0d      	add	r2, sp, #52	; 0x34
   81724:	f7ff fb9e 	bl	80e64 <__sprint_r.part.0>
   81728:	2800      	cmp	r0, #0
   8172a:	d081      	beq.n	81630 <_vfiprintf_r+0x754>
   8172c:	e799      	b.n	81662 <_vfiprintf_r+0x786>
   8172e:	4640      	mov	r0, r8
   81730:	4649      	mov	r1, r9
   81732:	aa0d      	add	r2, sp, #52	; 0x34
   81734:	f7ff fb96 	bl	80e64 <__sprint_r.part.0>
   81738:	2800      	cmp	r0, #0
   8173a:	d192      	bne.n	81662 <_vfiprintf_r+0x786>
   8173c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8173e:	4652      	mov	r2, sl
   81740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81742:	f100 0e01 	add.w	lr, r0, #1
   81746:	e7ba      	b.n	816be <_vfiprintf_r+0x7e2>
   81748:	9b03      	ldr	r3, [sp, #12]
   8174a:	1b9f      	subs	r7, r3, r6
   8174c:	2f00      	cmp	r7, #0
   8174e:	f77f af27 	ble.w	815a0 <_vfiprintf_r+0x6c4>
   81752:	2f10      	cmp	r7, #16
   81754:	f340 81b3 	ble.w	81abe <_vfiprintf_r+0xbe2>
   81758:	4620      	mov	r0, r4
   8175a:	4d3f      	ldr	r5, [pc, #252]	; (81858 <_vfiprintf_r+0x97c>)
   8175c:	4664      	mov	r4, ip
   8175e:	2310      	movs	r3, #16
   81760:	4684      	mov	ip, r0
   81762:	e007      	b.n	81774 <_vfiprintf_r+0x898>
   81764:	f101 0e02 	add.w	lr, r1, #2
   81768:	4601      	mov	r1, r0
   8176a:	f10c 0c08 	add.w	ip, ip, #8
   8176e:	3f10      	subs	r7, #16
   81770:	2f10      	cmp	r7, #16
   81772:	dd11      	ble.n	81798 <_vfiprintf_r+0x8bc>
   81774:	1c48      	adds	r0, r1, #1
   81776:	3210      	adds	r2, #16
   81778:	2807      	cmp	r0, #7
   8177a:	920f      	str	r2, [sp, #60]	; 0x3c
   8177c:	f8cc 5000 	str.w	r5, [ip]
   81780:	f8cc 3004 	str.w	r3, [ip, #4]
   81784:	900e      	str	r0, [sp, #56]	; 0x38
   81786:	dded      	ble.n	81764 <_vfiprintf_r+0x888>
   81788:	b9c2      	cbnz	r2, 817bc <_vfiprintf_r+0x8e0>
   8178a:	3f10      	subs	r7, #16
   8178c:	2f10      	cmp	r7, #16
   8178e:	f04f 0e01 	mov.w	lr, #1
   81792:	4611      	mov	r1, r2
   81794:	46d4      	mov	ip, sl
   81796:	dced      	bgt.n	81774 <_vfiprintf_r+0x898>
   81798:	4663      	mov	r3, ip
   8179a:	46a4      	mov	ip, r4
   8179c:	461c      	mov	r4, r3
   8179e:	443a      	add	r2, r7
   817a0:	f1be 0f07 	cmp.w	lr, #7
   817a4:	920f      	str	r2, [sp, #60]	; 0x3c
   817a6:	e884 00a0 	stmia.w	r4, {r5, r7}
   817aa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   817ae:	f300 80ee 	bgt.w	8198e <_vfiprintf_r+0xab2>
   817b2:	3408      	adds	r4, #8
   817b4:	f10e 0001 	add.w	r0, lr, #1
   817b8:	4671      	mov	r1, lr
   817ba:	e6f1      	b.n	815a0 <_vfiprintf_r+0x6c4>
   817bc:	9801      	ldr	r0, [sp, #4]
   817be:	9900      	ldr	r1, [sp, #0]
   817c0:	aa0d      	add	r2, sp, #52	; 0x34
   817c2:	9305      	str	r3, [sp, #20]
   817c4:	f7ff fb4e 	bl	80e64 <__sprint_r.part.0>
   817c8:	2800      	cmp	r0, #0
   817ca:	f47f af4a 	bne.w	81662 <_vfiprintf_r+0x786>
   817ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   817d0:	46d4      	mov	ip, sl
   817d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   817d4:	f101 0e01 	add.w	lr, r1, #1
   817d8:	9b05      	ldr	r3, [sp, #20]
   817da:	e7c8      	b.n	8176e <_vfiprintf_r+0x892>
   817dc:	2a00      	cmp	r2, #0
   817de:	f040 80c5 	bne.w	8196c <_vfiprintf_r+0xa90>
   817e2:	9b05      	ldr	r3, [sp, #20]
   817e4:	2b00      	cmp	r3, #0
   817e6:	f000 8085 	beq.w	818f4 <_vfiprintf_r+0xa18>
   817ea:	aa0c      	add	r2, sp, #48	; 0x30
   817ec:	2302      	movs	r3, #2
   817ee:	921a      	str	r2, [sp, #104]	; 0x68
   817f0:	4608      	mov	r0, r1
   817f2:	931b      	str	r3, [sp, #108]	; 0x6c
   817f4:	461a      	mov	r2, r3
   817f6:	4654      	mov	r4, sl
   817f8:	e6cb      	b.n	81592 <_vfiprintf_r+0x6b6>
   817fa:	2a00      	cmp	r2, #0
   817fc:	f040 80a5 	bne.w	8194a <_vfiprintf_r+0xa6e>
   81800:	2001      	movs	r0, #1
   81802:	4611      	mov	r1, r2
   81804:	4654      	mov	r4, sl
   81806:	e6c7      	b.n	81598 <_vfiprintf_r+0x6bc>
   81808:	bb03      	cbnz	r3, 8184c <_vfiprintf_r+0x970>
   8180a:	f018 0f01 	tst.w	r8, #1
   8180e:	d01d      	beq.n	8184c <_vfiprintf_r+0x970>
   81810:	ab2a      	add	r3, sp, #168	; 0xa8
   81812:	2230      	movs	r2, #48	; 0x30
   81814:	f803 2d41 	strb.w	r2, [r3, #-65]!
   81818:	ebc3 090a 	rsb	r9, r3, sl
   8181c:	9307      	str	r3, [sp, #28]
   8181e:	e48f      	b.n	81140 <_vfiprintf_r+0x264>
   81820:	46d1      	mov	r9, sl
   81822:	9809      	ldr	r0, [sp, #36]	; 0x24
   81824:	0933      	lsrs	r3, r6, #4
   81826:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   8182a:	0939      	lsrs	r1, r7, #4
   8182c:	f006 020f 	and.w	r2, r6, #15
   81830:	460f      	mov	r7, r1
   81832:	461e      	mov	r6, r3
   81834:	5c83      	ldrb	r3, [r0, r2]
   81836:	f809 3d01 	strb.w	r3, [r9, #-1]!
   8183a:	ea56 0307 	orrs.w	r3, r6, r7
   8183e:	d1f1      	bne.n	81824 <_vfiprintf_r+0x948>
   81840:	464b      	mov	r3, r9
   81842:	f8cd 901c 	str.w	r9, [sp, #28]
   81846:	ebc3 090a 	rsb	r9, r3, sl
   8184a:	e479      	b.n	81140 <_vfiprintf_r+0x264>
   8184c:	f8cd a01c 	str.w	sl, [sp, #28]
   81850:	e476      	b.n	81140 <_vfiprintf_r+0x264>
   81852:	2302      	movs	r3, #2
   81854:	e445      	b.n	810e2 <_vfiprintf_r+0x206>
   81856:	bf00      	nop
   81858:	00083bbc 	.word	0x00083bbc
   8185c:	00083bfc 	.word	0x00083bfc
   81860:	2a00      	cmp	r2, #0
   81862:	f040 80d5 	bne.w	81a10 <_vfiprintf_r+0xb34>
   81866:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8186a:	2b00      	cmp	r3, #0
   8186c:	f000 80ac 	beq.w	819c8 <_vfiprintf_r+0xaec>
   81870:	2301      	movs	r3, #1
   81872:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81876:	4618      	mov	r0, r3
   81878:	931b      	str	r3, [sp, #108]	; 0x6c
   8187a:	461a      	mov	r2, r3
   8187c:	911a      	str	r1, [sp, #104]	; 0x68
   8187e:	4654      	mov	r4, sl
   81880:	e678      	b.n	81574 <_vfiprintf_r+0x698>
   81882:	9a03      	ldr	r2, [sp, #12]
   81884:	1b95      	subs	r5, r2, r6
   81886:	2d00      	cmp	r5, #0
   81888:	4652      	mov	r2, sl
   8188a:	f73f af09 	bgt.w	816a0 <_vfiprintf_r+0x7c4>
   8188e:	e6c8      	b.n	81622 <_vfiprintf_r+0x746>
   81890:	465d      	mov	r5, fp
   81892:	f7ff bb7c 	b.w	80f8e <_vfiprintf_r+0xb2>
   81896:	9801      	ldr	r0, [sp, #4]
   81898:	9900      	ldr	r1, [sp, #0]
   8189a:	aa0d      	add	r2, sp, #52	; 0x34
   8189c:	f7ff fae2 	bl	80e64 <__sprint_r.part.0>
   818a0:	2800      	cmp	r0, #0
   818a2:	f47f aede 	bne.w	81662 <_vfiprintf_r+0x786>
   818a6:	4652      	mov	r2, sl
   818a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   818aa:	e6f2      	b.n	81692 <_vfiprintf_r+0x7b6>
   818ac:	9904      	ldr	r1, [sp, #16]
   818ae:	2700      	movs	r7, #0
   818b0:	460a      	mov	r2, r1
   818b2:	3204      	adds	r2, #4
   818b4:	680e      	ldr	r6, [r1, #0]
   818b6:	9204      	str	r2, [sp, #16]
   818b8:	e413      	b.n	810e2 <_vfiprintf_r+0x206>
   818ba:	3204      	adds	r2, #4
   818bc:	681e      	ldr	r6, [r3, #0]
   818be:	2700      	movs	r7, #0
   818c0:	2301      	movs	r3, #1
   818c2:	9204      	str	r2, [sp, #16]
   818c4:	e40d      	b.n	810e2 <_vfiprintf_r+0x206>
   818c6:	6816      	ldr	r6, [r2, #0]
   818c8:	3204      	adds	r2, #4
   818ca:	9204      	str	r2, [sp, #16]
   818cc:	2700      	movs	r7, #0
   818ce:	e52d      	b.n	8132c <_vfiprintf_r+0x450>
   818d0:	681e      	ldr	r6, [r3, #0]
   818d2:	3304      	adds	r3, #4
   818d4:	17f7      	asrs	r7, r6, #31
   818d6:	9304      	str	r3, [sp, #16]
   818d8:	4632      	mov	r2, r6
   818da:	463b      	mov	r3, r7
   818dc:	e4c1      	b.n	81262 <_vfiprintf_r+0x386>
   818de:	9801      	ldr	r0, [sp, #4]
   818e0:	9900      	ldr	r1, [sp, #0]
   818e2:	aa0d      	add	r2, sp, #52	; 0x34
   818e4:	f7ff fabe 	bl	80e64 <__sprint_r.part.0>
   818e8:	2800      	cmp	r0, #0
   818ea:	f47f aeba 	bne.w	81662 <_vfiprintf_r+0x786>
   818ee:	4654      	mov	r4, sl
   818f0:	f7ff bbc0 	b.w	81074 <_vfiprintf_r+0x198>
   818f4:	4608      	mov	r0, r1
   818f6:	4654      	mov	r4, sl
   818f8:	4611      	mov	r1, r2
   818fa:	e64d      	b.n	81598 <_vfiprintf_r+0x6bc>
   818fc:	46d1      	mov	r9, sl
   818fe:	f8cd c014 	str.w	ip, [sp, #20]
   81902:	4630      	mov	r0, r6
   81904:	4639      	mov	r1, r7
   81906:	220a      	movs	r2, #10
   81908:	2300      	movs	r3, #0
   8190a:	f001 fe75 	bl	835f8 <__aeabi_uldivmod>
   8190e:	3230      	adds	r2, #48	; 0x30
   81910:	4630      	mov	r0, r6
   81912:	4639      	mov	r1, r7
   81914:	f809 2d01 	strb.w	r2, [r9, #-1]!
   81918:	2300      	movs	r3, #0
   8191a:	220a      	movs	r2, #10
   8191c:	f001 fe6c 	bl	835f8 <__aeabi_uldivmod>
   81920:	4606      	mov	r6, r0
   81922:	460f      	mov	r7, r1
   81924:	ea56 0307 	orrs.w	r3, r6, r7
   81928:	d1eb      	bne.n	81902 <_vfiprintf_r+0xa26>
   8192a:	f8dd c014 	ldr.w	ip, [sp, #20]
   8192e:	e787      	b.n	81840 <_vfiprintf_r+0x964>
   81930:	2b30      	cmp	r3, #48	; 0x30
   81932:	9b07      	ldr	r3, [sp, #28]
   81934:	d087      	beq.n	81846 <_vfiprintf_r+0x96a>
   81936:	3b01      	subs	r3, #1
   81938:	461a      	mov	r2, r3
   8193a:	9307      	str	r3, [sp, #28]
   8193c:	2330      	movs	r3, #48	; 0x30
   8193e:	ebc2 090a 	rsb	r9, r2, sl
   81942:	f801 3c01 	strb.w	r3, [r1, #-1]
   81946:	f7ff bbfb 	b.w	81140 <_vfiprintf_r+0x264>
   8194a:	9801      	ldr	r0, [sp, #4]
   8194c:	9900      	ldr	r1, [sp, #0]
   8194e:	aa0d      	add	r2, sp, #52	; 0x34
   81950:	f8cd c014 	str.w	ip, [sp, #20]
   81954:	f7ff fa86 	bl	80e64 <__sprint_r.part.0>
   81958:	2800      	cmp	r0, #0
   8195a:	f47f ae82 	bne.w	81662 <_vfiprintf_r+0x786>
   8195e:	990e      	ldr	r1, [sp, #56]	; 0x38
   81960:	4654      	mov	r4, sl
   81962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81964:	1c48      	adds	r0, r1, #1
   81966:	f8dd c014 	ldr.w	ip, [sp, #20]
   8196a:	e615      	b.n	81598 <_vfiprintf_r+0x6bc>
   8196c:	9801      	ldr	r0, [sp, #4]
   8196e:	9900      	ldr	r1, [sp, #0]
   81970:	aa0d      	add	r2, sp, #52	; 0x34
   81972:	f8cd c020 	str.w	ip, [sp, #32]
   81976:	f7ff fa75 	bl	80e64 <__sprint_r.part.0>
   8197a:	2800      	cmp	r0, #0
   8197c:	f47f ae71 	bne.w	81662 <_vfiprintf_r+0x786>
   81980:	990e      	ldr	r1, [sp, #56]	; 0x38
   81982:	4654      	mov	r4, sl
   81984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81986:	1c48      	adds	r0, r1, #1
   81988:	f8dd c020 	ldr.w	ip, [sp, #32]
   8198c:	e5f5      	b.n	8157a <_vfiprintf_r+0x69e>
   8198e:	2a00      	cmp	r2, #0
   81990:	d167      	bne.n	81a62 <_vfiprintf_r+0xb86>
   81992:	2001      	movs	r0, #1
   81994:	4611      	mov	r1, r2
   81996:	4654      	mov	r4, sl
   81998:	e602      	b.n	815a0 <_vfiprintf_r+0x6c4>
   8199a:	9801      	ldr	r0, [sp, #4]
   8199c:	9900      	ldr	r1, [sp, #0]
   8199e:	aa0d      	add	r2, sp, #52	; 0x34
   819a0:	f7ff fa60 	bl	80e64 <__sprint_r.part.0>
   819a4:	2800      	cmp	r0, #0
   819a6:	f47f ae5c 	bne.w	81662 <_vfiprintf_r+0x786>
   819aa:	980e      	ldr	r0, [sp, #56]	; 0x38
   819ac:	4654      	mov	r4, sl
   819ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   819b0:	3001      	adds	r0, #1
   819b2:	e625      	b.n	81600 <_vfiprintf_r+0x724>
   819b4:	252d      	movs	r5, #45	; 0x2d
   819b6:	4276      	negs	r6, r6
   819b8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   819bc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   819c0:	46e1      	mov	r9, ip
   819c2:	2301      	movs	r3, #1
   819c4:	f7ff bb93 	b.w	810ee <_vfiprintf_r+0x212>
   819c8:	9b05      	ldr	r3, [sp, #20]
   819ca:	4611      	mov	r1, r2
   819cc:	2001      	movs	r0, #1
   819ce:	4654      	mov	r4, sl
   819d0:	2b00      	cmp	r3, #0
   819d2:	f43f ade5 	beq.w	815a0 <_vfiprintf_r+0x6c4>
   819d6:	aa0c      	add	r2, sp, #48	; 0x30
   819d8:	2302      	movs	r3, #2
   819da:	e88a 000c 	stmia.w	sl, {r2, r3}
   819de:	461a      	mov	r2, r3
   819e0:	e5d7      	b.n	81592 <_vfiprintf_r+0x6b6>
   819e2:	f018 0f10 	tst.w	r8, #16
   819e6:	d10b      	bne.n	81a00 <_vfiprintf_r+0xb24>
   819e8:	f018 0f40 	tst.w	r8, #64	; 0x40
   819ec:	d008      	beq.n	81a00 <_vfiprintf_r+0xb24>
   819ee:	9a04      	ldr	r2, [sp, #16]
   819f0:	6813      	ldr	r3, [r2, #0]
   819f2:	3204      	adds	r2, #4
   819f4:	9204      	str	r2, [sp, #16]
   819f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   819fa:	801a      	strh	r2, [r3, #0]
   819fc:	f7ff baa0 	b.w	80f40 <_vfiprintf_r+0x64>
   81a00:	9a04      	ldr	r2, [sp, #16]
   81a02:	6813      	ldr	r3, [r2, #0]
   81a04:	3204      	adds	r2, #4
   81a06:	9204      	str	r2, [sp, #16]
   81a08:	9a02      	ldr	r2, [sp, #8]
   81a0a:	601a      	str	r2, [r3, #0]
   81a0c:	f7ff ba98 	b.w	80f40 <_vfiprintf_r+0x64>
   81a10:	9801      	ldr	r0, [sp, #4]
   81a12:	9900      	ldr	r1, [sp, #0]
   81a14:	aa0d      	add	r2, sp, #52	; 0x34
   81a16:	f8cd c020 	str.w	ip, [sp, #32]
   81a1a:	f7ff fa23 	bl	80e64 <__sprint_r.part.0>
   81a1e:	2800      	cmp	r0, #0
   81a20:	f47f ae1f 	bne.w	81662 <_vfiprintf_r+0x786>
   81a24:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a26:	4654      	mov	r4, sl
   81a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a2a:	1c48      	adds	r0, r1, #1
   81a2c:	f8dd c020 	ldr.w	ip, [sp, #32]
   81a30:	e592      	b.n	81558 <_vfiprintf_r+0x67c>
   81a32:	f048 0820 	orr.w	r8, r8, #32
   81a36:	f10b 0001 	add.w	r0, fp, #1
   81a3a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81a3e:	f7ff bab6 	b.w	80fae <_vfiprintf_r+0xd2>
   81a42:	426d      	negs	r5, r5
   81a44:	9304      	str	r3, [sp, #16]
   81a46:	4658      	mov	r0, fp
   81a48:	f7ff bbc8 	b.w	811dc <_vfiprintf_r+0x300>
   81a4c:	9807      	ldr	r0, [sp, #28]
   81a4e:	9504      	str	r5, [sp, #16]
   81a50:	f001 fc10 	bl	83274 <strlen>
   81a54:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81a58:	4681      	mov	r9, r0
   81a5a:	f04f 0c00 	mov.w	ip, #0
   81a5e:	f7ff bb6f 	b.w	81140 <_vfiprintf_r+0x264>
   81a62:	9801      	ldr	r0, [sp, #4]
   81a64:	9900      	ldr	r1, [sp, #0]
   81a66:	aa0d      	add	r2, sp, #52	; 0x34
   81a68:	f8cd c014 	str.w	ip, [sp, #20]
   81a6c:	f7ff f9fa 	bl	80e64 <__sprint_r.part.0>
   81a70:	2800      	cmp	r0, #0
   81a72:	f47f adf6 	bne.w	81662 <_vfiprintf_r+0x786>
   81a76:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a78:	4654      	mov	r4, sl
   81a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a7c:	1c48      	adds	r0, r1, #1
   81a7e:	f8dd c014 	ldr.w	ip, [sp, #20]
   81a82:	e58d      	b.n	815a0 <_vfiprintf_r+0x6c4>
   81a84:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a88:	3101      	adds	r1, #1
   81a8a:	4f15      	ldr	r7, [pc, #84]	; (81ae0 <_vfiprintf_r+0xc04>)
   81a8c:	f7ff bb9a 	b.w	811c4 <_vfiprintf_r+0x2e8>
   81a90:	2e06      	cmp	r6, #6
   81a92:	4b14      	ldr	r3, [pc, #80]	; (81ae4 <_vfiprintf_r+0xc08>)
   81a94:	bf28      	it	cs
   81a96:	f04f 0c06 	movcs.w	ip, #6
   81a9a:	46e1      	mov	r9, ip
   81a9c:	9504      	str	r5, [sp, #16]
   81a9e:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   81aa2:	9307      	str	r3, [sp, #28]
   81aa4:	e463      	b.n	8136e <_vfiprintf_r+0x492>
   81aa6:	990e      	ldr	r1, [sp, #56]	; 0x38
   81aa8:	4f0d      	ldr	r7, [pc, #52]	; (81ae0 <_vfiprintf_r+0xc04>)
   81aaa:	f101 0e01 	add.w	lr, r1, #1
   81aae:	e61a      	b.n	816e6 <_vfiprintf_r+0x80a>
   81ab0:	46e1      	mov	r9, ip
   81ab2:	9504      	str	r5, [sp, #16]
   81ab4:	4684      	mov	ip, r0
   81ab6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81aba:	f7ff bb41 	b.w	81140 <_vfiprintf_r+0x264>
   81abe:	4686      	mov	lr, r0
   81ac0:	4d09      	ldr	r5, [pc, #36]	; (81ae8 <_vfiprintf_r+0xc0c>)
   81ac2:	e66c      	b.n	8179e <_vfiprintf_r+0x8c2>
   81ac4:	9a04      	ldr	r2, [sp, #16]
   81ac6:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81aca:	6816      	ldr	r6, [r2, #0]
   81acc:	3204      	adds	r2, #4
   81ace:	2e00      	cmp	r6, #0
   81ad0:	9204      	str	r2, [sp, #16]
   81ad2:	f6bf aa6c 	bge.w	80fae <_vfiprintf_r+0xd2>
   81ad6:	f04f 36ff 	mov.w	r6, #4294967295
   81ada:	f7ff ba68 	b.w	80fae <_vfiprintf_r+0xd2>
   81ade:	bf00      	nop
   81ae0:	00083bfc 	.word	0x00083bfc
   81ae4:	00083bf4 	.word	0x00083bf4
   81ae8:	00083bbc 	.word	0x00083bbc

00081aec <__sbprintf>:
   81aec:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   81af0:	4688      	mov	r8, r1
   81af2:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81af4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81af8:	9719      	str	r7, [sp, #100]	; 0x64
   81afa:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81afe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   81b02:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   81b06:	9707      	str	r7, [sp, #28]
   81b08:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81b0c:	ac1a      	add	r4, sp, #104	; 0x68
   81b0e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81b12:	f02e 0e02 	bic.w	lr, lr, #2
   81b16:	2600      	movs	r6, #0
   81b18:	4669      	mov	r1, sp
   81b1a:	9400      	str	r4, [sp, #0]
   81b1c:	9404      	str	r4, [sp, #16]
   81b1e:	9502      	str	r5, [sp, #8]
   81b20:	9505      	str	r5, [sp, #20]
   81b22:	f8ad e00c 	strh.w	lr, [sp, #12]
   81b26:	f8ad a00e 	strh.w	sl, [sp, #14]
   81b2a:	9709      	str	r7, [sp, #36]	; 0x24
   81b2c:	9606      	str	r6, [sp, #24]
   81b2e:	4605      	mov	r5, r0
   81b30:	f7ff f9d4 	bl	80edc <_vfiprintf_r>
   81b34:	1e04      	subs	r4, r0, #0
   81b36:	db07      	blt.n	81b48 <__sbprintf+0x5c>
   81b38:	4628      	mov	r0, r5
   81b3a:	4669      	mov	r1, sp
   81b3c:	f000 f92a 	bl	81d94 <_fflush_r>
   81b40:	42b0      	cmp	r0, r6
   81b42:	bf18      	it	ne
   81b44:	f04f 34ff 	movne.w	r4, #4294967295
   81b48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81b4c:	065b      	lsls	r3, r3, #25
   81b4e:	d505      	bpl.n	81b5c <__sbprintf+0x70>
   81b50:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81b58:	f8a8 300c 	strh.w	r3, [r8, #12]
   81b5c:	4620      	mov	r0, r4
   81b5e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   81b62:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   81b66:	bf00      	nop

00081b68 <__swsetup_r>:
   81b68:	b538      	push	{r3, r4, r5, lr}
   81b6a:	4b2f      	ldr	r3, [pc, #188]	; (81c28 <__swsetup_r+0xc0>)
   81b6c:	4605      	mov	r5, r0
   81b6e:	6818      	ldr	r0, [r3, #0]
   81b70:	460c      	mov	r4, r1
   81b72:	b110      	cbz	r0, 81b7a <__swsetup_r+0x12>
   81b74:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81b76:	2b00      	cmp	r3, #0
   81b78:	d036      	beq.n	81be8 <__swsetup_r+0x80>
   81b7a:	89a2      	ldrh	r2, [r4, #12]
   81b7c:	b293      	uxth	r3, r2
   81b7e:	0718      	lsls	r0, r3, #28
   81b80:	d50c      	bpl.n	81b9c <__swsetup_r+0x34>
   81b82:	6920      	ldr	r0, [r4, #16]
   81b84:	b1a8      	cbz	r0, 81bb2 <__swsetup_r+0x4a>
   81b86:	f013 0201 	ands.w	r2, r3, #1
   81b8a:	d01e      	beq.n	81bca <__swsetup_r+0x62>
   81b8c:	6963      	ldr	r3, [r4, #20]
   81b8e:	2200      	movs	r2, #0
   81b90:	425b      	negs	r3, r3
   81b92:	61a3      	str	r3, [r4, #24]
   81b94:	60a2      	str	r2, [r4, #8]
   81b96:	b1f0      	cbz	r0, 81bd6 <__swsetup_r+0x6e>
   81b98:	2000      	movs	r0, #0
   81b9a:	bd38      	pop	{r3, r4, r5, pc}
   81b9c:	06d9      	lsls	r1, r3, #27
   81b9e:	d53a      	bpl.n	81c16 <__swsetup_r+0xae>
   81ba0:	0758      	lsls	r0, r3, #29
   81ba2:	d424      	bmi.n	81bee <__swsetup_r+0x86>
   81ba4:	6920      	ldr	r0, [r4, #16]
   81ba6:	f042 0308 	orr.w	r3, r2, #8
   81baa:	81a3      	strh	r3, [r4, #12]
   81bac:	b29b      	uxth	r3, r3
   81bae:	2800      	cmp	r0, #0
   81bb0:	d1e9      	bne.n	81b86 <__swsetup_r+0x1e>
   81bb2:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81bb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81bba:	d0e4      	beq.n	81b86 <__swsetup_r+0x1e>
   81bbc:	4628      	mov	r0, r5
   81bbe:	4621      	mov	r1, r4
   81bc0:	f000 fcee 	bl	825a0 <__smakebuf_r>
   81bc4:	89a3      	ldrh	r3, [r4, #12]
   81bc6:	6920      	ldr	r0, [r4, #16]
   81bc8:	e7dd      	b.n	81b86 <__swsetup_r+0x1e>
   81bca:	0799      	lsls	r1, r3, #30
   81bcc:	bf58      	it	pl
   81bce:	6962      	ldrpl	r2, [r4, #20]
   81bd0:	60a2      	str	r2, [r4, #8]
   81bd2:	2800      	cmp	r0, #0
   81bd4:	d1e0      	bne.n	81b98 <__swsetup_r+0x30>
   81bd6:	89a3      	ldrh	r3, [r4, #12]
   81bd8:	061a      	lsls	r2, r3, #24
   81bda:	d5de      	bpl.n	81b9a <__swsetup_r+0x32>
   81bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81be0:	81a3      	strh	r3, [r4, #12]
   81be2:	f04f 30ff 	mov.w	r0, #4294967295
   81be6:	bd38      	pop	{r3, r4, r5, pc}
   81be8:	f000 f968 	bl	81ebc <__sinit>
   81bec:	e7c5      	b.n	81b7a <__swsetup_r+0x12>
   81bee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81bf0:	b149      	cbz	r1, 81c06 <__swsetup_r+0x9e>
   81bf2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81bf6:	4299      	cmp	r1, r3
   81bf8:	d003      	beq.n	81c02 <__swsetup_r+0x9a>
   81bfa:	4628      	mov	r0, r5
   81bfc:	f000 fa36 	bl	8206c <_free_r>
   81c00:	89a2      	ldrh	r2, [r4, #12]
   81c02:	2300      	movs	r3, #0
   81c04:	6323      	str	r3, [r4, #48]	; 0x30
   81c06:	6920      	ldr	r0, [r4, #16]
   81c08:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81c0c:	2300      	movs	r3, #0
   81c0e:	b292      	uxth	r2, r2
   81c10:	e884 0009 	stmia.w	r4, {r0, r3}
   81c14:	e7c7      	b.n	81ba6 <__swsetup_r+0x3e>
   81c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81c1a:	2309      	movs	r3, #9
   81c1c:	602b      	str	r3, [r5, #0]
   81c1e:	f04f 30ff 	mov.w	r0, #4294967295
   81c22:	81a2      	strh	r2, [r4, #12]
   81c24:	bd38      	pop	{r3, r4, r5, pc}
   81c26:	bf00      	nop
   81c28:	20070558 	.word	0x20070558

00081c2c <register_fini>:
   81c2c:	4b02      	ldr	r3, [pc, #8]	; (81c38 <register_fini+0xc>)
   81c2e:	b113      	cbz	r3, 81c36 <register_fini+0xa>
   81c30:	4802      	ldr	r0, [pc, #8]	; (81c3c <register_fini+0x10>)
   81c32:	f000 b805 	b.w	81c40 <atexit>
   81c36:	4770      	bx	lr
   81c38:	00000000 	.word	0x00000000
   81c3c:	00081ed1 	.word	0x00081ed1

00081c40 <atexit>:
   81c40:	4601      	mov	r1, r0
   81c42:	2000      	movs	r0, #0
   81c44:	4602      	mov	r2, r0
   81c46:	4603      	mov	r3, r0
   81c48:	f001 bbe2 	b.w	83410 <__register_exitproc>

00081c4c <__sflush_r>:
   81c4c:	898b      	ldrh	r3, [r1, #12]
   81c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c52:	b29a      	uxth	r2, r3
   81c54:	460d      	mov	r5, r1
   81c56:	0711      	lsls	r1, r2, #28
   81c58:	4680      	mov	r8, r0
   81c5a:	d43c      	bmi.n	81cd6 <__sflush_r+0x8a>
   81c5c:	686a      	ldr	r2, [r5, #4]
   81c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81c62:	2a00      	cmp	r2, #0
   81c64:	81ab      	strh	r3, [r5, #12]
   81c66:	dd65      	ble.n	81d34 <__sflush_r+0xe8>
   81c68:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81c6a:	2e00      	cmp	r6, #0
   81c6c:	d04b      	beq.n	81d06 <__sflush_r+0xba>
   81c6e:	b29b      	uxth	r3, r3
   81c70:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81c74:	2100      	movs	r1, #0
   81c76:	b292      	uxth	r2, r2
   81c78:	f8d8 4000 	ldr.w	r4, [r8]
   81c7c:	f8c8 1000 	str.w	r1, [r8]
   81c80:	2a00      	cmp	r2, #0
   81c82:	d05b      	beq.n	81d3c <__sflush_r+0xf0>
   81c84:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81c86:	075f      	lsls	r7, r3, #29
   81c88:	d505      	bpl.n	81c96 <__sflush_r+0x4a>
   81c8a:	6869      	ldr	r1, [r5, #4]
   81c8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81c8e:	1a52      	subs	r2, r2, r1
   81c90:	b10b      	cbz	r3, 81c96 <__sflush_r+0x4a>
   81c92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81c94:	1ad2      	subs	r2, r2, r3
   81c96:	4640      	mov	r0, r8
   81c98:	69e9      	ldr	r1, [r5, #28]
   81c9a:	2300      	movs	r3, #0
   81c9c:	47b0      	blx	r6
   81c9e:	1c46      	adds	r6, r0, #1
   81ca0:	d056      	beq.n	81d50 <__sflush_r+0x104>
   81ca2:	89ab      	ldrh	r3, [r5, #12]
   81ca4:	692a      	ldr	r2, [r5, #16]
   81ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81caa:	b29b      	uxth	r3, r3
   81cac:	2100      	movs	r1, #0
   81cae:	602a      	str	r2, [r5, #0]
   81cb0:	04da      	lsls	r2, r3, #19
   81cb2:	81ab      	strh	r3, [r5, #12]
   81cb4:	6069      	str	r1, [r5, #4]
   81cb6:	d43b      	bmi.n	81d30 <__sflush_r+0xe4>
   81cb8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81cba:	f8c8 4000 	str.w	r4, [r8]
   81cbe:	b311      	cbz	r1, 81d06 <__sflush_r+0xba>
   81cc0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81cc4:	4299      	cmp	r1, r3
   81cc6:	d002      	beq.n	81cce <__sflush_r+0x82>
   81cc8:	4640      	mov	r0, r8
   81cca:	f000 f9cf 	bl	8206c <_free_r>
   81cce:	2000      	movs	r0, #0
   81cd0:	6328      	str	r0, [r5, #48]	; 0x30
   81cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cd6:	692e      	ldr	r6, [r5, #16]
   81cd8:	b1ae      	cbz	r6, 81d06 <__sflush_r+0xba>
   81cda:	0791      	lsls	r1, r2, #30
   81cdc:	682c      	ldr	r4, [r5, #0]
   81cde:	bf0c      	ite	eq
   81ce0:	696b      	ldreq	r3, [r5, #20]
   81ce2:	2300      	movne	r3, #0
   81ce4:	602e      	str	r6, [r5, #0]
   81ce6:	1ba4      	subs	r4, r4, r6
   81ce8:	60ab      	str	r3, [r5, #8]
   81cea:	e00a      	b.n	81d02 <__sflush_r+0xb6>
   81cec:	4632      	mov	r2, r6
   81cee:	4623      	mov	r3, r4
   81cf0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81cf2:	4640      	mov	r0, r8
   81cf4:	69e9      	ldr	r1, [r5, #28]
   81cf6:	47b8      	blx	r7
   81cf8:	2800      	cmp	r0, #0
   81cfa:	eba4 0400 	sub.w	r4, r4, r0
   81cfe:	4406      	add	r6, r0
   81d00:	dd04      	ble.n	81d0c <__sflush_r+0xc0>
   81d02:	2c00      	cmp	r4, #0
   81d04:	dcf2      	bgt.n	81cec <__sflush_r+0xa0>
   81d06:	2000      	movs	r0, #0
   81d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d0c:	89ab      	ldrh	r3, [r5, #12]
   81d0e:	f04f 30ff 	mov.w	r0, #4294967295
   81d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d16:	81ab      	strh	r3, [r5, #12]
   81d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d1c:	89ab      	ldrh	r3, [r5, #12]
   81d1e:	692a      	ldr	r2, [r5, #16]
   81d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81d24:	b29b      	uxth	r3, r3
   81d26:	81ab      	strh	r3, [r5, #12]
   81d28:	04db      	lsls	r3, r3, #19
   81d2a:	6069      	str	r1, [r5, #4]
   81d2c:	602a      	str	r2, [r5, #0]
   81d2e:	d5c3      	bpl.n	81cb8 <__sflush_r+0x6c>
   81d30:	6528      	str	r0, [r5, #80]	; 0x50
   81d32:	e7c1      	b.n	81cb8 <__sflush_r+0x6c>
   81d34:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81d36:	2a00      	cmp	r2, #0
   81d38:	dc96      	bgt.n	81c68 <__sflush_r+0x1c>
   81d3a:	e7e4      	b.n	81d06 <__sflush_r+0xba>
   81d3c:	2301      	movs	r3, #1
   81d3e:	4640      	mov	r0, r8
   81d40:	69e9      	ldr	r1, [r5, #28]
   81d42:	47b0      	blx	r6
   81d44:	1c43      	adds	r3, r0, #1
   81d46:	4602      	mov	r2, r0
   81d48:	d019      	beq.n	81d7e <__sflush_r+0x132>
   81d4a:	89ab      	ldrh	r3, [r5, #12]
   81d4c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81d4e:	e79a      	b.n	81c86 <__sflush_r+0x3a>
   81d50:	f8d8 1000 	ldr.w	r1, [r8]
   81d54:	2900      	cmp	r1, #0
   81d56:	d0e1      	beq.n	81d1c <__sflush_r+0xd0>
   81d58:	291d      	cmp	r1, #29
   81d5a:	d007      	beq.n	81d6c <__sflush_r+0x120>
   81d5c:	2916      	cmp	r1, #22
   81d5e:	d005      	beq.n	81d6c <__sflush_r+0x120>
   81d60:	89ab      	ldrh	r3, [r5, #12]
   81d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d66:	81ab      	strh	r3, [r5, #12]
   81d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d6c:	89ab      	ldrh	r3, [r5, #12]
   81d6e:	6929      	ldr	r1, [r5, #16]
   81d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81d74:	2200      	movs	r2, #0
   81d76:	81ab      	strh	r3, [r5, #12]
   81d78:	e885 0006 	stmia.w	r5, {r1, r2}
   81d7c:	e79c      	b.n	81cb8 <__sflush_r+0x6c>
   81d7e:	f8d8 3000 	ldr.w	r3, [r8]
   81d82:	2b00      	cmp	r3, #0
   81d84:	d0e1      	beq.n	81d4a <__sflush_r+0xfe>
   81d86:	2b1d      	cmp	r3, #29
   81d88:	d001      	beq.n	81d8e <__sflush_r+0x142>
   81d8a:	2b16      	cmp	r3, #22
   81d8c:	d1be      	bne.n	81d0c <__sflush_r+0xc0>
   81d8e:	f8c8 4000 	str.w	r4, [r8]
   81d92:	e7b8      	b.n	81d06 <__sflush_r+0xba>

00081d94 <_fflush_r>:
   81d94:	b510      	push	{r4, lr}
   81d96:	4604      	mov	r4, r0
   81d98:	b082      	sub	sp, #8
   81d9a:	b108      	cbz	r0, 81da0 <_fflush_r+0xc>
   81d9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81d9e:	b153      	cbz	r3, 81db6 <_fflush_r+0x22>
   81da0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81da4:	b908      	cbnz	r0, 81daa <_fflush_r+0x16>
   81da6:	b002      	add	sp, #8
   81da8:	bd10      	pop	{r4, pc}
   81daa:	4620      	mov	r0, r4
   81dac:	b002      	add	sp, #8
   81dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81db2:	f7ff bf4b 	b.w	81c4c <__sflush_r>
   81db6:	9101      	str	r1, [sp, #4]
   81db8:	f000 f880 	bl	81ebc <__sinit>
   81dbc:	9901      	ldr	r1, [sp, #4]
   81dbe:	e7ef      	b.n	81da0 <_fflush_r+0xc>

00081dc0 <_cleanup_r>:
   81dc0:	4901      	ldr	r1, [pc, #4]	; (81dc8 <_cleanup_r+0x8>)
   81dc2:	f000 bbbb 	b.w	8253c <_fwalk_reent>
   81dc6:	bf00      	nop
   81dc8:	000834d9 	.word	0x000834d9

00081dcc <__sinit.part.1>:
   81dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81dd0:	4607      	mov	r7, r0
   81dd2:	4835      	ldr	r0, [pc, #212]	; (81ea8 <__sinit.part.1+0xdc>)
   81dd4:	687d      	ldr	r5, [r7, #4]
   81dd6:	2400      	movs	r4, #0
   81dd8:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81ddc:	2304      	movs	r3, #4
   81dde:	2103      	movs	r1, #3
   81de0:	63f8      	str	r0, [r7, #60]	; 0x3c
   81de2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81de6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81dea:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81dee:	b083      	sub	sp, #12
   81df0:	602c      	str	r4, [r5, #0]
   81df2:	606c      	str	r4, [r5, #4]
   81df4:	60ac      	str	r4, [r5, #8]
   81df6:	666c      	str	r4, [r5, #100]	; 0x64
   81df8:	81ec      	strh	r4, [r5, #14]
   81dfa:	612c      	str	r4, [r5, #16]
   81dfc:	616c      	str	r4, [r5, #20]
   81dfe:	61ac      	str	r4, [r5, #24]
   81e00:	81ab      	strh	r3, [r5, #12]
   81e02:	4621      	mov	r1, r4
   81e04:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81e08:	2208      	movs	r2, #8
   81e0a:	f7fe ff59 	bl	80cc0 <memset>
   81e0e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81eac <__sinit.part.1+0xe0>
   81e12:	68be      	ldr	r6, [r7, #8]
   81e14:	f8df a098 	ldr.w	sl, [pc, #152]	; 81eb0 <__sinit.part.1+0xe4>
   81e18:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81eb4 <__sinit.part.1+0xe8>
   81e1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81eb8 <__sinit.part.1+0xec>
   81e20:	2301      	movs	r3, #1
   81e22:	2209      	movs	r2, #9
   81e24:	f8c5 b020 	str.w	fp, [r5, #32]
   81e28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81e2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81e30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81e34:	61ed      	str	r5, [r5, #28]
   81e36:	4621      	mov	r1, r4
   81e38:	81f3      	strh	r3, [r6, #14]
   81e3a:	81b2      	strh	r2, [r6, #12]
   81e3c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81e40:	6034      	str	r4, [r6, #0]
   81e42:	6074      	str	r4, [r6, #4]
   81e44:	60b4      	str	r4, [r6, #8]
   81e46:	6674      	str	r4, [r6, #100]	; 0x64
   81e48:	6134      	str	r4, [r6, #16]
   81e4a:	6174      	str	r4, [r6, #20]
   81e4c:	61b4      	str	r4, [r6, #24]
   81e4e:	2208      	movs	r2, #8
   81e50:	9301      	str	r3, [sp, #4]
   81e52:	f7fe ff35 	bl	80cc0 <memset>
   81e56:	68fd      	ldr	r5, [r7, #12]
   81e58:	2012      	movs	r0, #18
   81e5a:	2202      	movs	r2, #2
   81e5c:	61f6      	str	r6, [r6, #28]
   81e5e:	f8c6 b020 	str.w	fp, [r6, #32]
   81e62:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81e66:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   81e6a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   81e6e:	4621      	mov	r1, r4
   81e70:	81a8      	strh	r0, [r5, #12]
   81e72:	81ea      	strh	r2, [r5, #14]
   81e74:	602c      	str	r4, [r5, #0]
   81e76:	606c      	str	r4, [r5, #4]
   81e78:	60ac      	str	r4, [r5, #8]
   81e7a:	666c      	str	r4, [r5, #100]	; 0x64
   81e7c:	612c      	str	r4, [r5, #16]
   81e7e:	616c      	str	r4, [r5, #20]
   81e80:	61ac      	str	r4, [r5, #24]
   81e82:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81e86:	2208      	movs	r2, #8
   81e88:	f7fe ff1a 	bl	80cc0 <memset>
   81e8c:	9b01      	ldr	r3, [sp, #4]
   81e8e:	61ed      	str	r5, [r5, #28]
   81e90:	f8c5 b020 	str.w	fp, [r5, #32]
   81e94:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81e98:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81e9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   81ea2:	b003      	add	sp, #12
   81ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ea8:	00081dc1 	.word	0x00081dc1
   81eac:	000831f1 	.word	0x000831f1
   81eb0:	00083215 	.word	0x00083215
   81eb4:	0008324d 	.word	0x0008324d
   81eb8:	0008326d 	.word	0x0008326d

00081ebc <__sinit>:
   81ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81ebe:	b103      	cbz	r3, 81ec2 <__sinit+0x6>
   81ec0:	4770      	bx	lr
   81ec2:	f7ff bf83 	b.w	81dcc <__sinit.part.1>
   81ec6:	bf00      	nop

00081ec8 <__sfp_lock_acquire>:
   81ec8:	4770      	bx	lr
   81eca:	bf00      	nop

00081ecc <__sfp_lock_release>:
   81ecc:	4770      	bx	lr
   81ece:	bf00      	nop

00081ed0 <__libc_fini_array>:
   81ed0:	b538      	push	{r3, r4, r5, lr}
   81ed2:	4b08      	ldr	r3, [pc, #32]	; (81ef4 <__libc_fini_array+0x24>)
   81ed4:	4d08      	ldr	r5, [pc, #32]	; (81ef8 <__libc_fini_array+0x28>)
   81ed6:	1aed      	subs	r5, r5, r3
   81ed8:	10ac      	asrs	r4, r5, #2
   81eda:	bf18      	it	ne
   81edc:	18ed      	addne	r5, r5, r3
   81ede:	d005      	beq.n	81eec <__libc_fini_array+0x1c>
   81ee0:	3c01      	subs	r4, #1
   81ee2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81ee6:	4798      	blx	r3
   81ee8:	2c00      	cmp	r4, #0
   81eea:	d1f9      	bne.n	81ee0 <__libc_fini_array+0x10>
   81eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ef0:	f001 be96 	b.w	83c20 <_fini>
   81ef4:	00083c2c 	.word	0x00083c2c
   81ef8:	00083c30 	.word	0x00083c30

00081efc <__fputwc>:
   81efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f00:	b082      	sub	sp, #8
   81f02:	4607      	mov	r7, r0
   81f04:	460e      	mov	r6, r1
   81f06:	4614      	mov	r4, r2
   81f08:	f000 fb44 	bl	82594 <__locale_mb_cur_max>
   81f0c:	2801      	cmp	r0, #1
   81f0e:	d040      	beq.n	81f92 <__fputwc+0x96>
   81f10:	4638      	mov	r0, r7
   81f12:	a901      	add	r1, sp, #4
   81f14:	4632      	mov	r2, r6
   81f16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   81f1a:	f001 fa2d 	bl	83378 <_wcrtomb_r>
   81f1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81f22:	4680      	mov	r8, r0
   81f24:	d02e      	beq.n	81f84 <__fputwc+0x88>
   81f26:	2800      	cmp	r0, #0
   81f28:	d03b      	beq.n	81fa2 <__fputwc+0xa6>
   81f2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   81f2e:	2500      	movs	r5, #0
   81f30:	e009      	b.n	81f46 <__fputwc+0x4a>
   81f32:	6823      	ldr	r3, [r4, #0]
   81f34:	7019      	strb	r1, [r3, #0]
   81f36:	6823      	ldr	r3, [r4, #0]
   81f38:	3301      	adds	r3, #1
   81f3a:	6023      	str	r3, [r4, #0]
   81f3c:	3501      	adds	r5, #1
   81f3e:	45a8      	cmp	r8, r5
   81f40:	d92f      	bls.n	81fa2 <__fputwc+0xa6>
   81f42:	ab01      	add	r3, sp, #4
   81f44:	5d59      	ldrb	r1, [r3, r5]
   81f46:	68a3      	ldr	r3, [r4, #8]
   81f48:	3b01      	subs	r3, #1
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	60a3      	str	r3, [r4, #8]
   81f4e:	daf0      	bge.n	81f32 <__fputwc+0x36>
   81f50:	69a2      	ldr	r2, [r4, #24]
   81f52:	4293      	cmp	r3, r2
   81f54:	db06      	blt.n	81f64 <__fputwc+0x68>
   81f56:	6823      	ldr	r3, [r4, #0]
   81f58:	7019      	strb	r1, [r3, #0]
   81f5a:	6823      	ldr	r3, [r4, #0]
   81f5c:	7819      	ldrb	r1, [r3, #0]
   81f5e:	3301      	adds	r3, #1
   81f60:	290a      	cmp	r1, #10
   81f62:	d1ea      	bne.n	81f3a <__fputwc+0x3e>
   81f64:	4638      	mov	r0, r7
   81f66:	4622      	mov	r2, r4
   81f68:	f001 f9b2 	bl	832d0 <__swbuf_r>
   81f6c:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   81f70:	fab0 f080 	clz	r0, r0
   81f74:	0940      	lsrs	r0, r0, #5
   81f76:	2800      	cmp	r0, #0
   81f78:	d0e0      	beq.n	81f3c <__fputwc+0x40>
   81f7a:	f04f 30ff 	mov.w	r0, #4294967295
   81f7e:	b002      	add	sp, #8
   81f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f84:	89a3      	ldrh	r3, [r4, #12]
   81f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f8a:	81a3      	strh	r3, [r4, #12]
   81f8c:	b002      	add	sp, #8
   81f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f92:	1e73      	subs	r3, r6, #1
   81f94:	2bfe      	cmp	r3, #254	; 0xfe
   81f96:	d8bb      	bhi.n	81f10 <__fputwc+0x14>
   81f98:	b2f1      	uxtb	r1, r6
   81f9a:	4680      	mov	r8, r0
   81f9c:	f88d 1004 	strb.w	r1, [sp, #4]
   81fa0:	e7c5      	b.n	81f2e <__fputwc+0x32>
   81fa2:	4630      	mov	r0, r6
   81fa4:	b002      	add	sp, #8
   81fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81faa:	bf00      	nop

00081fac <_fputwc_r>:
   81fac:	8993      	ldrh	r3, [r2, #12]
   81fae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   81fb2:	d10b      	bne.n	81fcc <_fputwc_r+0x20>
   81fb4:	b410      	push	{r4}
   81fb6:	6e54      	ldr	r4, [r2, #100]	; 0x64
   81fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81fbc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   81fc0:	6654      	str	r4, [r2, #100]	; 0x64
   81fc2:	8193      	strh	r3, [r2, #12]
   81fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   81fc8:	f7ff bf98 	b.w	81efc <__fputwc>
   81fcc:	f7ff bf96 	b.w	81efc <__fputwc>

00081fd0 <_malloc_trim_r>:
   81fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fd2:	460c      	mov	r4, r1
   81fd4:	4f22      	ldr	r7, [pc, #136]	; (82060 <_malloc_trim_r+0x90>)
   81fd6:	4606      	mov	r6, r0
   81fd8:	f000 ff04 	bl	82de4 <__malloc_lock>
   81fdc:	68bb      	ldr	r3, [r7, #8]
   81fde:	685d      	ldr	r5, [r3, #4]
   81fe0:	f025 0503 	bic.w	r5, r5, #3
   81fe4:	1b29      	subs	r1, r5, r4
   81fe6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   81fea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81fee:	f021 010f 	bic.w	r1, r1, #15
   81ff2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   81ff6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   81ffa:	db07      	blt.n	8200c <_malloc_trim_r+0x3c>
   81ffc:	4630      	mov	r0, r6
   81ffe:	2100      	movs	r1, #0
   82000:	f001 f8e4 	bl	831cc <_sbrk_r>
   82004:	68bb      	ldr	r3, [r7, #8]
   82006:	442b      	add	r3, r5
   82008:	4298      	cmp	r0, r3
   8200a:	d004      	beq.n	82016 <_malloc_trim_r+0x46>
   8200c:	4630      	mov	r0, r6
   8200e:	f000 feeb 	bl	82de8 <__malloc_unlock>
   82012:	2000      	movs	r0, #0
   82014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82016:	4630      	mov	r0, r6
   82018:	4261      	negs	r1, r4
   8201a:	f001 f8d7 	bl	831cc <_sbrk_r>
   8201e:	3001      	adds	r0, #1
   82020:	d00d      	beq.n	8203e <_malloc_trim_r+0x6e>
   82022:	4b10      	ldr	r3, [pc, #64]	; (82064 <_malloc_trim_r+0x94>)
   82024:	68ba      	ldr	r2, [r7, #8]
   82026:	6819      	ldr	r1, [r3, #0]
   82028:	1b2d      	subs	r5, r5, r4
   8202a:	f045 0501 	orr.w	r5, r5, #1
   8202e:	4630      	mov	r0, r6
   82030:	1b09      	subs	r1, r1, r4
   82032:	6055      	str	r5, [r2, #4]
   82034:	6019      	str	r1, [r3, #0]
   82036:	f000 fed7 	bl	82de8 <__malloc_unlock>
   8203a:	2001      	movs	r0, #1
   8203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8203e:	4630      	mov	r0, r6
   82040:	2100      	movs	r1, #0
   82042:	f001 f8c3 	bl	831cc <_sbrk_r>
   82046:	68ba      	ldr	r2, [r7, #8]
   82048:	1a83      	subs	r3, r0, r2
   8204a:	2b0f      	cmp	r3, #15
   8204c:	ddde      	ble.n	8200c <_malloc_trim_r+0x3c>
   8204e:	4c06      	ldr	r4, [pc, #24]	; (82068 <_malloc_trim_r+0x98>)
   82050:	4904      	ldr	r1, [pc, #16]	; (82064 <_malloc_trim_r+0x94>)
   82052:	6824      	ldr	r4, [r4, #0]
   82054:	f043 0301 	orr.w	r3, r3, #1
   82058:	1b00      	subs	r0, r0, r4
   8205a:	6053      	str	r3, [r2, #4]
   8205c:	6008      	str	r0, [r1, #0]
   8205e:	e7d5      	b.n	8200c <_malloc_trim_r+0x3c>
   82060:	20070580 	.word	0x20070580
   82064:	20070a58 	.word	0x20070a58
   82068:	2007098c 	.word	0x2007098c

0008206c <_free_r>:
   8206c:	2900      	cmp	r1, #0
   8206e:	d04e      	beq.n	8210e <_free_r+0xa2>
   82070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82074:	460c      	mov	r4, r1
   82076:	4680      	mov	r8, r0
   82078:	f000 feb4 	bl	82de4 <__malloc_lock>
   8207c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   82080:	4962      	ldr	r1, [pc, #392]	; (8220c <_free_r+0x1a0>)
   82082:	f1a4 0508 	sub.w	r5, r4, #8
   82086:	f027 0201 	bic.w	r2, r7, #1
   8208a:	18ab      	adds	r3, r5, r2
   8208c:	688e      	ldr	r6, [r1, #8]
   8208e:	6858      	ldr	r0, [r3, #4]
   82090:	429e      	cmp	r6, r3
   82092:	f020 0003 	bic.w	r0, r0, #3
   82096:	d05a      	beq.n	8214e <_free_r+0xe2>
   82098:	07fe      	lsls	r6, r7, #31
   8209a:	6058      	str	r0, [r3, #4]
   8209c:	d40b      	bmi.n	820b6 <_free_r+0x4a>
   8209e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   820a2:	f101 0e08 	add.w	lr, r1, #8
   820a6:	1bed      	subs	r5, r5, r7
   820a8:	68ac      	ldr	r4, [r5, #8]
   820aa:	443a      	add	r2, r7
   820ac:	4574      	cmp	r4, lr
   820ae:	d067      	beq.n	82180 <_free_r+0x114>
   820b0:	68ef      	ldr	r7, [r5, #12]
   820b2:	60e7      	str	r7, [r4, #12]
   820b4:	60bc      	str	r4, [r7, #8]
   820b6:	181c      	adds	r4, r3, r0
   820b8:	6864      	ldr	r4, [r4, #4]
   820ba:	07e4      	lsls	r4, r4, #31
   820bc:	d40c      	bmi.n	820d8 <_free_r+0x6c>
   820be:	4f54      	ldr	r7, [pc, #336]	; (82210 <_free_r+0x1a4>)
   820c0:	689c      	ldr	r4, [r3, #8]
   820c2:	4402      	add	r2, r0
   820c4:	42bc      	cmp	r4, r7
   820c6:	d07c      	beq.n	821c2 <_free_r+0x156>
   820c8:	68d8      	ldr	r0, [r3, #12]
   820ca:	f042 0301 	orr.w	r3, r2, #1
   820ce:	60e0      	str	r0, [r4, #12]
   820d0:	6084      	str	r4, [r0, #8]
   820d2:	606b      	str	r3, [r5, #4]
   820d4:	50aa      	str	r2, [r5, r2]
   820d6:	e003      	b.n	820e0 <_free_r+0x74>
   820d8:	f042 0301 	orr.w	r3, r2, #1
   820dc:	606b      	str	r3, [r5, #4]
   820de:	50aa      	str	r2, [r5, r2]
   820e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   820e4:	d214      	bcs.n	82110 <_free_r+0xa4>
   820e6:	08d2      	lsrs	r2, r2, #3
   820e8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   820ec:	2401      	movs	r4, #1
   820ee:	6848      	ldr	r0, [r1, #4]
   820f0:	1092      	asrs	r2, r2, #2
   820f2:	fa04 f202 	lsl.w	r2, r4, r2
   820f6:	689c      	ldr	r4, [r3, #8]
   820f8:	4310      	orrs	r0, r2
   820fa:	60ac      	str	r4, [r5, #8]
   820fc:	60eb      	str	r3, [r5, #12]
   820fe:	6048      	str	r0, [r1, #4]
   82100:	609d      	str	r5, [r3, #8]
   82102:	60e5      	str	r5, [r4, #12]
   82104:	4640      	mov	r0, r8
   82106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8210a:	f000 be6d 	b.w	82de8 <__malloc_unlock>
   8210e:	4770      	bx	lr
   82110:	0a53      	lsrs	r3, r2, #9
   82112:	2b04      	cmp	r3, #4
   82114:	d847      	bhi.n	821a6 <_free_r+0x13a>
   82116:	0993      	lsrs	r3, r2, #6
   82118:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8211c:	0060      	lsls	r0, r4, #1
   8211e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   82122:	6883      	ldr	r3, [r0, #8]
   82124:	4939      	ldr	r1, [pc, #228]	; (8220c <_free_r+0x1a0>)
   82126:	4283      	cmp	r3, r0
   82128:	d043      	beq.n	821b2 <_free_r+0x146>
   8212a:	6859      	ldr	r1, [r3, #4]
   8212c:	f021 0103 	bic.w	r1, r1, #3
   82130:	4291      	cmp	r1, r2
   82132:	d902      	bls.n	8213a <_free_r+0xce>
   82134:	689b      	ldr	r3, [r3, #8]
   82136:	4298      	cmp	r0, r3
   82138:	d1f7      	bne.n	8212a <_free_r+0xbe>
   8213a:	68da      	ldr	r2, [r3, #12]
   8213c:	60ea      	str	r2, [r5, #12]
   8213e:	60ab      	str	r3, [r5, #8]
   82140:	4640      	mov	r0, r8
   82142:	6095      	str	r5, [r2, #8]
   82144:	60dd      	str	r5, [r3, #12]
   82146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8214a:	f000 be4d 	b.w	82de8 <__malloc_unlock>
   8214e:	07ff      	lsls	r7, r7, #31
   82150:	4402      	add	r2, r0
   82152:	d407      	bmi.n	82164 <_free_r+0xf8>
   82154:	f854 4c08 	ldr.w	r4, [r4, #-8]
   82158:	1b2d      	subs	r5, r5, r4
   8215a:	68eb      	ldr	r3, [r5, #12]
   8215c:	68a8      	ldr	r0, [r5, #8]
   8215e:	4422      	add	r2, r4
   82160:	60c3      	str	r3, [r0, #12]
   82162:	6098      	str	r0, [r3, #8]
   82164:	4b2b      	ldr	r3, [pc, #172]	; (82214 <_free_r+0x1a8>)
   82166:	f042 0001 	orr.w	r0, r2, #1
   8216a:	681b      	ldr	r3, [r3, #0]
   8216c:	6068      	str	r0, [r5, #4]
   8216e:	429a      	cmp	r2, r3
   82170:	608d      	str	r5, [r1, #8]
   82172:	d3c7      	bcc.n	82104 <_free_r+0x98>
   82174:	4b28      	ldr	r3, [pc, #160]	; (82218 <_free_r+0x1ac>)
   82176:	4640      	mov	r0, r8
   82178:	6819      	ldr	r1, [r3, #0]
   8217a:	f7ff ff29 	bl	81fd0 <_malloc_trim_r>
   8217e:	e7c1      	b.n	82104 <_free_r+0x98>
   82180:	1819      	adds	r1, r3, r0
   82182:	6849      	ldr	r1, [r1, #4]
   82184:	07c9      	lsls	r1, r1, #31
   82186:	d409      	bmi.n	8219c <_free_r+0x130>
   82188:	68d9      	ldr	r1, [r3, #12]
   8218a:	4402      	add	r2, r0
   8218c:	689b      	ldr	r3, [r3, #8]
   8218e:	f042 0001 	orr.w	r0, r2, #1
   82192:	60d9      	str	r1, [r3, #12]
   82194:	608b      	str	r3, [r1, #8]
   82196:	6068      	str	r0, [r5, #4]
   82198:	50aa      	str	r2, [r5, r2]
   8219a:	e7b3      	b.n	82104 <_free_r+0x98>
   8219c:	f042 0301 	orr.w	r3, r2, #1
   821a0:	606b      	str	r3, [r5, #4]
   821a2:	50aa      	str	r2, [r5, r2]
   821a4:	e7ae      	b.n	82104 <_free_r+0x98>
   821a6:	2b14      	cmp	r3, #20
   821a8:	d814      	bhi.n	821d4 <_free_r+0x168>
   821aa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   821ae:	0060      	lsls	r0, r4, #1
   821b0:	e7b5      	b.n	8211e <_free_r+0xb2>
   821b2:	684a      	ldr	r2, [r1, #4]
   821b4:	10a4      	asrs	r4, r4, #2
   821b6:	2001      	movs	r0, #1
   821b8:	40a0      	lsls	r0, r4
   821ba:	4302      	orrs	r2, r0
   821bc:	604a      	str	r2, [r1, #4]
   821be:	461a      	mov	r2, r3
   821c0:	e7bc      	b.n	8213c <_free_r+0xd0>
   821c2:	f042 0301 	orr.w	r3, r2, #1
   821c6:	614d      	str	r5, [r1, #20]
   821c8:	610d      	str	r5, [r1, #16]
   821ca:	60ec      	str	r4, [r5, #12]
   821cc:	60ac      	str	r4, [r5, #8]
   821ce:	606b      	str	r3, [r5, #4]
   821d0:	50aa      	str	r2, [r5, r2]
   821d2:	e797      	b.n	82104 <_free_r+0x98>
   821d4:	2b54      	cmp	r3, #84	; 0x54
   821d6:	d804      	bhi.n	821e2 <_free_r+0x176>
   821d8:	0b13      	lsrs	r3, r2, #12
   821da:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   821de:	0060      	lsls	r0, r4, #1
   821e0:	e79d      	b.n	8211e <_free_r+0xb2>
   821e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   821e6:	d804      	bhi.n	821f2 <_free_r+0x186>
   821e8:	0bd3      	lsrs	r3, r2, #15
   821ea:	f103 0477 	add.w	r4, r3, #119	; 0x77
   821ee:	0060      	lsls	r0, r4, #1
   821f0:	e795      	b.n	8211e <_free_r+0xb2>
   821f2:	f240 5054 	movw	r0, #1364	; 0x554
   821f6:	4283      	cmp	r3, r0
   821f8:	d804      	bhi.n	82204 <_free_r+0x198>
   821fa:	0c93      	lsrs	r3, r2, #18
   821fc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82200:	0060      	lsls	r0, r4, #1
   82202:	e78c      	b.n	8211e <_free_r+0xb2>
   82204:	20fc      	movs	r0, #252	; 0xfc
   82206:	247e      	movs	r4, #126	; 0x7e
   82208:	e789      	b.n	8211e <_free_r+0xb2>
   8220a:	bf00      	nop
   8220c:	20070580 	.word	0x20070580
   82210:	20070588 	.word	0x20070588
   82214:	20070988 	.word	0x20070988
   82218:	20070a54 	.word	0x20070a54

0008221c <__sfvwrite_r>:
   8221c:	6893      	ldr	r3, [r2, #8]
   8221e:	2b00      	cmp	r3, #0
   82220:	f000 80b1 	beq.w	82386 <__sfvwrite_r+0x16a>
   82224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82228:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8222c:	b083      	sub	sp, #12
   8222e:	f01e 0f08 	tst.w	lr, #8
   82232:	460c      	mov	r4, r1
   82234:	4681      	mov	r9, r0
   82236:	4616      	mov	r6, r2
   82238:	d028      	beq.n	8228c <__sfvwrite_r+0x70>
   8223a:	690b      	ldr	r3, [r1, #16]
   8223c:	b333      	cbz	r3, 8228c <__sfvwrite_r+0x70>
   8223e:	f00e 0802 	and.w	r8, lr, #2
   82242:	fa1f f088 	uxth.w	r0, r8
   82246:	6835      	ldr	r5, [r6, #0]
   82248:	b380      	cbz	r0, 822ac <__sfvwrite_r+0x90>
   8224a:	f04f 0b00 	mov.w	fp, #0
   8224e:	46d8      	mov	r8, fp
   82250:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 82538 <__sfvwrite_r+0x31c>
   82254:	f1b8 0f00 	cmp.w	r8, #0
   82258:	f000 808f 	beq.w	8237a <__sfvwrite_r+0x15e>
   8225c:	45d0      	cmp	r8, sl
   8225e:	4643      	mov	r3, r8
   82260:	4648      	mov	r0, r9
   82262:	bf28      	it	cs
   82264:	4653      	movcs	r3, sl
   82266:	69e1      	ldr	r1, [r4, #28]
   82268:	465a      	mov	r2, fp
   8226a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8226c:	47b8      	blx	r7
   8226e:	2800      	cmp	r0, #0
   82270:	f340 80a8 	ble.w	823c4 <__sfvwrite_r+0x1a8>
   82274:	68b3      	ldr	r3, [r6, #8]
   82276:	4483      	add	fp, r0
   82278:	1a1b      	subs	r3, r3, r0
   8227a:	ebc0 0808 	rsb	r8, r0, r8
   8227e:	60b3      	str	r3, [r6, #8]
   82280:	2b00      	cmp	r3, #0
   82282:	d1e7      	bne.n	82254 <__sfvwrite_r+0x38>
   82284:	2000      	movs	r0, #0
   82286:	b003      	add	sp, #12
   82288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8228c:	4648      	mov	r0, r9
   8228e:	4621      	mov	r1, r4
   82290:	f7ff fc6a 	bl	81b68 <__swsetup_r>
   82294:	2800      	cmp	r0, #0
   82296:	f040 8146 	bne.w	82526 <__sfvwrite_r+0x30a>
   8229a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8229e:	6835      	ldr	r5, [r6, #0]
   822a0:	f00e 0802 	and.w	r8, lr, #2
   822a4:	fa1f f088 	uxth.w	r0, r8
   822a8:	2800      	cmp	r0, #0
   822aa:	d1ce      	bne.n	8224a <__sfvwrite_r+0x2e>
   822ac:	f01e 0b01 	ands.w	fp, lr, #1
   822b0:	f040 8091 	bne.w	823d6 <__sfvwrite_r+0x1ba>
   822b4:	46d8      	mov	r8, fp
   822b6:	f1b8 0f00 	cmp.w	r8, #0
   822ba:	d058      	beq.n	8236e <__sfvwrite_r+0x152>
   822bc:	f41e 7f00 	tst.w	lr, #512	; 0x200
   822c0:	68a7      	ldr	r7, [r4, #8]
   822c2:	d062      	beq.n	8238a <__sfvwrite_r+0x16e>
   822c4:	45b8      	cmp	r8, r7
   822c6:	46ba      	mov	sl, r7
   822c8:	f0c0 80c2 	bcc.w	82450 <__sfvwrite_r+0x234>
   822cc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   822d0:	f000 80c0 	beq.w	82454 <__sfvwrite_r+0x238>
   822d4:	6967      	ldr	r7, [r4, #20]
   822d6:	6921      	ldr	r1, [r4, #16]
   822d8:	6823      	ldr	r3, [r4, #0]
   822da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   822de:	1a5b      	subs	r3, r3, r1
   822e0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   822e4:	1c58      	adds	r0, r3, #1
   822e6:	107f      	asrs	r7, r7, #1
   822e8:	4440      	add	r0, r8
   822ea:	4287      	cmp	r7, r0
   822ec:	463a      	mov	r2, r7
   822ee:	bf3c      	itt	cc
   822f0:	4607      	movcc	r7, r0
   822f2:	463a      	movcc	r2, r7
   822f4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   822f8:	9300      	str	r3, [sp, #0]
   822fa:	f000 80fb 	beq.w	824f4 <__sfvwrite_r+0x2d8>
   822fe:	4611      	mov	r1, r2
   82300:	4648      	mov	r0, r9
   82302:	f000 f9c5 	bl	82690 <_malloc_r>
   82306:	9b00      	ldr	r3, [sp, #0]
   82308:	4682      	mov	sl, r0
   8230a:	2800      	cmp	r0, #0
   8230c:	f000 810e 	beq.w	8252c <__sfvwrite_r+0x310>
   82310:	461a      	mov	r2, r3
   82312:	6921      	ldr	r1, [r4, #16]
   82314:	9300      	str	r3, [sp, #0]
   82316:	f000 fc8b 	bl	82c30 <memcpy>
   8231a:	89a2      	ldrh	r2, [r4, #12]
   8231c:	9b00      	ldr	r3, [sp, #0]
   8231e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82326:	81a2      	strh	r2, [r4, #12]
   82328:	eb0a 0003 	add.w	r0, sl, r3
   8232c:	f8c4 a010 	str.w	sl, [r4, #16]
   82330:	1afb      	subs	r3, r7, r3
   82332:	6167      	str	r7, [r4, #20]
   82334:	46c2      	mov	sl, r8
   82336:	4647      	mov	r7, r8
   82338:	6020      	str	r0, [r4, #0]
   8233a:	60a3      	str	r3, [r4, #8]
   8233c:	4652      	mov	r2, sl
   8233e:	4659      	mov	r1, fp
   82340:	f000 fcec 	bl	82d1c <memmove>
   82344:	68a0      	ldr	r0, [r4, #8]
   82346:	6822      	ldr	r2, [r4, #0]
   82348:	1bc0      	subs	r0, r0, r7
   8234a:	60a0      	str	r0, [r4, #8]
   8234c:	4640      	mov	r0, r8
   8234e:	eb02 030a 	add.w	r3, r2, sl
   82352:	6023      	str	r3, [r4, #0]
   82354:	68b3      	ldr	r3, [r6, #8]
   82356:	4483      	add	fp, r0
   82358:	1a1b      	subs	r3, r3, r0
   8235a:	ebc0 0808 	rsb	r8, r0, r8
   8235e:	60b3      	str	r3, [r6, #8]
   82360:	2b00      	cmp	r3, #0
   82362:	d08f      	beq.n	82284 <__sfvwrite_r+0x68>
   82364:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   82368:	f1b8 0f00 	cmp.w	r8, #0
   8236c:	d1a6      	bne.n	822bc <__sfvwrite_r+0xa0>
   8236e:	f8d5 b000 	ldr.w	fp, [r5]
   82372:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82376:	3508      	adds	r5, #8
   82378:	e79d      	b.n	822b6 <__sfvwrite_r+0x9a>
   8237a:	f8d5 b000 	ldr.w	fp, [r5]
   8237e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82382:	3508      	adds	r5, #8
   82384:	e766      	b.n	82254 <__sfvwrite_r+0x38>
   82386:	2000      	movs	r0, #0
   82388:	4770      	bx	lr
   8238a:	6820      	ldr	r0, [r4, #0]
   8238c:	6923      	ldr	r3, [r4, #16]
   8238e:	4298      	cmp	r0, r3
   82390:	d803      	bhi.n	8239a <__sfvwrite_r+0x17e>
   82392:	6962      	ldr	r2, [r4, #20]
   82394:	4590      	cmp	r8, r2
   82396:	f080 8085 	bcs.w	824a4 <__sfvwrite_r+0x288>
   8239a:	4547      	cmp	r7, r8
   8239c:	bf28      	it	cs
   8239e:	4647      	movcs	r7, r8
   823a0:	4659      	mov	r1, fp
   823a2:	463a      	mov	r2, r7
   823a4:	f000 fcba 	bl	82d1c <memmove>
   823a8:	68a3      	ldr	r3, [r4, #8]
   823aa:	6822      	ldr	r2, [r4, #0]
   823ac:	1bdb      	subs	r3, r3, r7
   823ae:	443a      	add	r2, r7
   823b0:	60a3      	str	r3, [r4, #8]
   823b2:	6022      	str	r2, [r4, #0]
   823b4:	2b00      	cmp	r3, #0
   823b6:	d149      	bne.n	8244c <__sfvwrite_r+0x230>
   823b8:	4648      	mov	r0, r9
   823ba:	4621      	mov	r1, r4
   823bc:	f7ff fcea 	bl	81d94 <_fflush_r>
   823c0:	2800      	cmp	r0, #0
   823c2:	d043      	beq.n	8244c <__sfvwrite_r+0x230>
   823c4:	89a3      	ldrh	r3, [r4, #12]
   823c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ca:	f04f 30ff 	mov.w	r0, #4294967295
   823ce:	81a3      	strh	r3, [r4, #12]
   823d0:	b003      	add	sp, #12
   823d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823d6:	4680      	mov	r8, r0
   823d8:	4683      	mov	fp, r0
   823da:	4682      	mov	sl, r0
   823dc:	9000      	str	r0, [sp, #0]
   823de:	f1ba 0f00 	cmp.w	sl, #0
   823e2:	d02b      	beq.n	8243c <__sfvwrite_r+0x220>
   823e4:	9b00      	ldr	r3, [sp, #0]
   823e6:	2b00      	cmp	r3, #0
   823e8:	d04f      	beq.n	8248a <__sfvwrite_r+0x26e>
   823ea:	45d0      	cmp	r8, sl
   823ec:	4643      	mov	r3, r8
   823ee:	bf28      	it	cs
   823f0:	4653      	movcs	r3, sl
   823f2:	6820      	ldr	r0, [r4, #0]
   823f4:	6921      	ldr	r1, [r4, #16]
   823f6:	461f      	mov	r7, r3
   823f8:	4288      	cmp	r0, r1
   823fa:	f8d4 e008 	ldr.w	lr, [r4, #8]
   823fe:	6962      	ldr	r2, [r4, #20]
   82400:	d903      	bls.n	8240a <__sfvwrite_r+0x1ee>
   82402:	eb0e 0c02 	add.w	ip, lr, r2
   82406:	4563      	cmp	r3, ip
   82408:	dc5e      	bgt.n	824c8 <__sfvwrite_r+0x2ac>
   8240a:	4293      	cmp	r3, r2
   8240c:	db24      	blt.n	82458 <__sfvwrite_r+0x23c>
   8240e:	4613      	mov	r3, r2
   82410:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82412:	4648      	mov	r0, r9
   82414:	69e1      	ldr	r1, [r4, #28]
   82416:	465a      	mov	r2, fp
   82418:	47b8      	blx	r7
   8241a:	1e07      	subs	r7, r0, #0
   8241c:	ddd2      	ble.n	823c4 <__sfvwrite_r+0x1a8>
   8241e:	ebb8 0807 	subs.w	r8, r8, r7
   82422:	d029      	beq.n	82478 <__sfvwrite_r+0x25c>
   82424:	68b3      	ldr	r3, [r6, #8]
   82426:	44bb      	add	fp, r7
   82428:	1bdb      	subs	r3, r3, r7
   8242a:	ebc7 0a0a 	rsb	sl, r7, sl
   8242e:	60b3      	str	r3, [r6, #8]
   82430:	2b00      	cmp	r3, #0
   82432:	f43f af27 	beq.w	82284 <__sfvwrite_r+0x68>
   82436:	f1ba 0f00 	cmp.w	sl, #0
   8243a:	d1d3      	bne.n	823e4 <__sfvwrite_r+0x1c8>
   8243c:	2300      	movs	r3, #0
   8243e:	f8d5 b000 	ldr.w	fp, [r5]
   82442:	f8d5 a004 	ldr.w	sl, [r5, #4]
   82446:	9300      	str	r3, [sp, #0]
   82448:	3508      	adds	r5, #8
   8244a:	e7c8      	b.n	823de <__sfvwrite_r+0x1c2>
   8244c:	4638      	mov	r0, r7
   8244e:	e781      	b.n	82354 <__sfvwrite_r+0x138>
   82450:	4647      	mov	r7, r8
   82452:	46c2      	mov	sl, r8
   82454:	6820      	ldr	r0, [r4, #0]
   82456:	e771      	b.n	8233c <__sfvwrite_r+0x120>
   82458:	461a      	mov	r2, r3
   8245a:	4659      	mov	r1, fp
   8245c:	9301      	str	r3, [sp, #4]
   8245e:	f000 fc5d 	bl	82d1c <memmove>
   82462:	68a2      	ldr	r2, [r4, #8]
   82464:	6821      	ldr	r1, [r4, #0]
   82466:	9b01      	ldr	r3, [sp, #4]
   82468:	ebb8 0807 	subs.w	r8, r8, r7
   8246c:	eba2 0203 	sub.w	r2, r2, r3
   82470:	440b      	add	r3, r1
   82472:	60a2      	str	r2, [r4, #8]
   82474:	6023      	str	r3, [r4, #0]
   82476:	d1d5      	bne.n	82424 <__sfvwrite_r+0x208>
   82478:	4648      	mov	r0, r9
   8247a:	4621      	mov	r1, r4
   8247c:	f7ff fc8a 	bl	81d94 <_fflush_r>
   82480:	2800      	cmp	r0, #0
   82482:	d19f      	bne.n	823c4 <__sfvwrite_r+0x1a8>
   82484:	f8cd 8000 	str.w	r8, [sp]
   82488:	e7cc      	b.n	82424 <__sfvwrite_r+0x208>
   8248a:	4658      	mov	r0, fp
   8248c:	210a      	movs	r1, #10
   8248e:	4652      	mov	r2, sl
   82490:	f000 fb84 	bl	82b9c <memchr>
   82494:	2800      	cmp	r0, #0
   82496:	d041      	beq.n	8251c <__sfvwrite_r+0x300>
   82498:	3001      	adds	r0, #1
   8249a:	2301      	movs	r3, #1
   8249c:	ebcb 0800 	rsb	r8, fp, r0
   824a0:	9300      	str	r3, [sp, #0]
   824a2:	e7a2      	b.n	823ea <__sfvwrite_r+0x1ce>
   824a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   824a8:	4543      	cmp	r3, r8
   824aa:	bf28      	it	cs
   824ac:	4643      	movcs	r3, r8
   824ae:	fb93 f3f2 	sdiv	r3, r3, r2
   824b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   824b4:	fb03 f302 	mul.w	r3, r3, r2
   824b8:	4648      	mov	r0, r9
   824ba:	69e1      	ldr	r1, [r4, #28]
   824bc:	465a      	mov	r2, fp
   824be:	47b8      	blx	r7
   824c0:	2800      	cmp	r0, #0
   824c2:	f73f af47 	bgt.w	82354 <__sfvwrite_r+0x138>
   824c6:	e77d      	b.n	823c4 <__sfvwrite_r+0x1a8>
   824c8:	4662      	mov	r2, ip
   824ca:	4659      	mov	r1, fp
   824cc:	f8cd c004 	str.w	ip, [sp, #4]
   824d0:	f000 fc24 	bl	82d1c <memmove>
   824d4:	6823      	ldr	r3, [r4, #0]
   824d6:	f8dd c004 	ldr.w	ip, [sp, #4]
   824da:	4648      	mov	r0, r9
   824dc:	4463      	add	r3, ip
   824de:	6023      	str	r3, [r4, #0]
   824e0:	4621      	mov	r1, r4
   824e2:	f7ff fc57 	bl	81d94 <_fflush_r>
   824e6:	f8dd c004 	ldr.w	ip, [sp, #4]
   824ea:	2800      	cmp	r0, #0
   824ec:	f47f af6a 	bne.w	823c4 <__sfvwrite_r+0x1a8>
   824f0:	4667      	mov	r7, ip
   824f2:	e794      	b.n	8241e <__sfvwrite_r+0x202>
   824f4:	4648      	mov	r0, r9
   824f6:	f000 fc79 	bl	82dec <_realloc_r>
   824fa:	9b00      	ldr	r3, [sp, #0]
   824fc:	4682      	mov	sl, r0
   824fe:	2800      	cmp	r0, #0
   82500:	f47f af12 	bne.w	82328 <__sfvwrite_r+0x10c>
   82504:	4648      	mov	r0, r9
   82506:	6921      	ldr	r1, [r4, #16]
   82508:	f7ff fdb0 	bl	8206c <_free_r>
   8250c:	89a3      	ldrh	r3, [r4, #12]
   8250e:	220c      	movs	r2, #12
   82510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82514:	b29b      	uxth	r3, r3
   82516:	f8c9 2000 	str.w	r2, [r9]
   8251a:	e754      	b.n	823c6 <__sfvwrite_r+0x1aa>
   8251c:	2301      	movs	r3, #1
   8251e:	f10a 0801 	add.w	r8, sl, #1
   82522:	9300      	str	r3, [sp, #0]
   82524:	e761      	b.n	823ea <__sfvwrite_r+0x1ce>
   82526:	f04f 30ff 	mov.w	r0, #4294967295
   8252a:	e6ac      	b.n	82286 <__sfvwrite_r+0x6a>
   8252c:	230c      	movs	r3, #12
   8252e:	f8c9 3000 	str.w	r3, [r9]
   82532:	89a3      	ldrh	r3, [r4, #12]
   82534:	e747      	b.n	823c6 <__sfvwrite_r+0x1aa>
   82536:	bf00      	nop
   82538:	7ffffc00 	.word	0x7ffffc00

0008253c <_fwalk_reent>:
   8253c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82540:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82544:	d01e      	beq.n	82584 <_fwalk_reent+0x48>
   82546:	4688      	mov	r8, r1
   82548:	4607      	mov	r7, r0
   8254a:	f04f 0900 	mov.w	r9, #0
   8254e:	6875      	ldr	r5, [r6, #4]
   82550:	68b4      	ldr	r4, [r6, #8]
   82552:	3d01      	subs	r5, #1
   82554:	d410      	bmi.n	82578 <_fwalk_reent+0x3c>
   82556:	89a3      	ldrh	r3, [r4, #12]
   82558:	3d01      	subs	r5, #1
   8255a:	2b01      	cmp	r3, #1
   8255c:	d908      	bls.n	82570 <_fwalk_reent+0x34>
   8255e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82562:	3301      	adds	r3, #1
   82564:	d004      	beq.n	82570 <_fwalk_reent+0x34>
   82566:	4638      	mov	r0, r7
   82568:	4621      	mov	r1, r4
   8256a:	47c0      	blx	r8
   8256c:	ea49 0900 	orr.w	r9, r9, r0
   82570:	1c6b      	adds	r3, r5, #1
   82572:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82576:	d1ee      	bne.n	82556 <_fwalk_reent+0x1a>
   82578:	6836      	ldr	r6, [r6, #0]
   8257a:	2e00      	cmp	r6, #0
   8257c:	d1e7      	bne.n	8254e <_fwalk_reent+0x12>
   8257e:	4648      	mov	r0, r9
   82580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82584:	46b1      	mov	r9, r6
   82586:	4648      	mov	r0, r9
   82588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008258c <__locale_charset>:
   8258c:	4800      	ldr	r0, [pc, #0]	; (82590 <__locale_charset+0x4>)
   8258e:	4770      	bx	lr
   82590:	2007055c 	.word	0x2007055c

00082594 <__locale_mb_cur_max>:
   82594:	4b01      	ldr	r3, [pc, #4]	; (8259c <__locale_mb_cur_max+0x8>)
   82596:	6818      	ldr	r0, [r3, #0]
   82598:	4770      	bx	lr
   8259a:	bf00      	nop
   8259c:	2007057c 	.word	0x2007057c

000825a0 <__smakebuf_r>:
   825a0:	898b      	ldrh	r3, [r1, #12]
   825a2:	b29a      	uxth	r2, r3
   825a4:	f012 0f02 	tst.w	r2, #2
   825a8:	d13c      	bne.n	82624 <__smakebuf_r+0x84>
   825aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   825ac:	460c      	mov	r4, r1
   825ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   825b2:	b091      	sub	sp, #68	; 0x44
   825b4:	2900      	cmp	r1, #0
   825b6:	4605      	mov	r5, r0
   825b8:	db19      	blt.n	825ee <__smakebuf_r+0x4e>
   825ba:	aa01      	add	r2, sp, #4
   825bc:	f000 ffce 	bl	8355c <_fstat_r>
   825c0:	2800      	cmp	r0, #0
   825c2:	db12      	blt.n	825ea <__smakebuf_r+0x4a>
   825c4:	9b02      	ldr	r3, [sp, #8]
   825c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   825ca:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   825ce:	fab7 f787 	clz	r7, r7
   825d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   825d6:	ea4f 1757 	mov.w	r7, r7, lsr #5
   825da:	d02a      	beq.n	82632 <__smakebuf_r+0x92>
   825dc:	89a3      	ldrh	r3, [r4, #12]
   825de:	f44f 6680 	mov.w	r6, #1024	; 0x400
   825e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   825e6:	81a3      	strh	r3, [r4, #12]
   825e8:	e00b      	b.n	82602 <__smakebuf_r+0x62>
   825ea:	89a3      	ldrh	r3, [r4, #12]
   825ec:	b29a      	uxth	r2, r3
   825ee:	f012 0f80 	tst.w	r2, #128	; 0x80
   825f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   825f6:	81a3      	strh	r3, [r4, #12]
   825f8:	bf0c      	ite	eq
   825fa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   825fe:	2640      	movne	r6, #64	; 0x40
   82600:	2700      	movs	r7, #0
   82602:	4628      	mov	r0, r5
   82604:	4631      	mov	r1, r6
   82606:	f000 f843 	bl	82690 <_malloc_r>
   8260a:	89a3      	ldrh	r3, [r4, #12]
   8260c:	b340      	cbz	r0, 82660 <__smakebuf_r+0xc0>
   8260e:	4a1a      	ldr	r2, [pc, #104]	; (82678 <__smakebuf_r+0xd8>)
   82610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82614:	63ea      	str	r2, [r5, #60]	; 0x3c
   82616:	81a3      	strh	r3, [r4, #12]
   82618:	6020      	str	r0, [r4, #0]
   8261a:	6120      	str	r0, [r4, #16]
   8261c:	6166      	str	r6, [r4, #20]
   8261e:	b99f      	cbnz	r7, 82648 <__smakebuf_r+0xa8>
   82620:	b011      	add	sp, #68	; 0x44
   82622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82624:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82628:	2201      	movs	r2, #1
   8262a:	600b      	str	r3, [r1, #0]
   8262c:	610b      	str	r3, [r1, #16]
   8262e:	614a      	str	r2, [r1, #20]
   82630:	4770      	bx	lr
   82632:	4b12      	ldr	r3, [pc, #72]	; (8267c <__smakebuf_r+0xdc>)
   82634:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   82636:	429a      	cmp	r2, r3
   82638:	d1d0      	bne.n	825dc <__smakebuf_r+0x3c>
   8263a:	89a3      	ldrh	r3, [r4, #12]
   8263c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82640:	4333      	orrs	r3, r6
   82642:	81a3      	strh	r3, [r4, #12]
   82644:	64e6      	str	r6, [r4, #76]	; 0x4c
   82646:	e7dc      	b.n	82602 <__smakebuf_r+0x62>
   82648:	4628      	mov	r0, r5
   8264a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8264e:	f000 ff99 	bl	83584 <_isatty_r>
   82652:	2800      	cmp	r0, #0
   82654:	d0e4      	beq.n	82620 <__smakebuf_r+0x80>
   82656:	89a3      	ldrh	r3, [r4, #12]
   82658:	f043 0301 	orr.w	r3, r3, #1
   8265c:	81a3      	strh	r3, [r4, #12]
   8265e:	e7df      	b.n	82620 <__smakebuf_r+0x80>
   82660:	059a      	lsls	r2, r3, #22
   82662:	d4dd      	bmi.n	82620 <__smakebuf_r+0x80>
   82664:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82668:	f043 0302 	orr.w	r3, r3, #2
   8266c:	2101      	movs	r1, #1
   8266e:	81a3      	strh	r3, [r4, #12]
   82670:	6022      	str	r2, [r4, #0]
   82672:	6122      	str	r2, [r4, #16]
   82674:	6161      	str	r1, [r4, #20]
   82676:	e7d3      	b.n	82620 <__smakebuf_r+0x80>
   82678:	00081dc1 	.word	0x00081dc1
   8267c:	0008324d 	.word	0x0008324d

00082680 <malloc>:
   82680:	4b02      	ldr	r3, [pc, #8]	; (8268c <malloc+0xc>)
   82682:	4601      	mov	r1, r0
   82684:	6818      	ldr	r0, [r3, #0]
   82686:	f000 b803 	b.w	82690 <_malloc_r>
   8268a:	bf00      	nop
   8268c:	20070558 	.word	0x20070558

00082690 <_malloc_r>:
   82690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82694:	f101 050b 	add.w	r5, r1, #11
   82698:	2d16      	cmp	r5, #22
   8269a:	b083      	sub	sp, #12
   8269c:	4606      	mov	r6, r0
   8269e:	d927      	bls.n	826f0 <_malloc_r+0x60>
   826a0:	f035 0507 	bics.w	r5, r5, #7
   826a4:	f100 80b6 	bmi.w	82814 <_malloc_r+0x184>
   826a8:	42a9      	cmp	r1, r5
   826aa:	f200 80b3 	bhi.w	82814 <_malloc_r+0x184>
   826ae:	f000 fb99 	bl	82de4 <__malloc_lock>
   826b2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   826b6:	d222      	bcs.n	826fe <_malloc_r+0x6e>
   826b8:	4fbc      	ldr	r7, [pc, #752]	; (829ac <_malloc_r+0x31c>)
   826ba:	08e8      	lsrs	r0, r5, #3
   826bc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   826c0:	68dc      	ldr	r4, [r3, #12]
   826c2:	429c      	cmp	r4, r3
   826c4:	f000 81bc 	beq.w	82a40 <_malloc_r+0x3b0>
   826c8:	6863      	ldr	r3, [r4, #4]
   826ca:	68e1      	ldr	r1, [r4, #12]
   826cc:	f023 0303 	bic.w	r3, r3, #3
   826d0:	4423      	add	r3, r4
   826d2:	685a      	ldr	r2, [r3, #4]
   826d4:	68a5      	ldr	r5, [r4, #8]
   826d6:	f042 0201 	orr.w	r2, r2, #1
   826da:	60e9      	str	r1, [r5, #12]
   826dc:	4630      	mov	r0, r6
   826de:	608d      	str	r5, [r1, #8]
   826e0:	605a      	str	r2, [r3, #4]
   826e2:	f000 fb81 	bl	82de8 <__malloc_unlock>
   826e6:	3408      	adds	r4, #8
   826e8:	4620      	mov	r0, r4
   826ea:	b003      	add	sp, #12
   826ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826f0:	2910      	cmp	r1, #16
   826f2:	f200 808f 	bhi.w	82814 <_malloc_r+0x184>
   826f6:	f000 fb75 	bl	82de4 <__malloc_lock>
   826fa:	2510      	movs	r5, #16
   826fc:	e7dc      	b.n	826b8 <_malloc_r+0x28>
   826fe:	0a68      	lsrs	r0, r5, #9
   82700:	f000 808f 	beq.w	82822 <_malloc_r+0x192>
   82704:	2804      	cmp	r0, #4
   82706:	f200 8147 	bhi.w	82998 <_malloc_r+0x308>
   8270a:	09a8      	lsrs	r0, r5, #6
   8270c:	3038      	adds	r0, #56	; 0x38
   8270e:	0041      	lsls	r1, r0, #1
   82710:	4fa6      	ldr	r7, [pc, #664]	; (829ac <_malloc_r+0x31c>)
   82712:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82716:	68cc      	ldr	r4, [r1, #12]
   82718:	42a1      	cmp	r1, r4
   8271a:	d106      	bne.n	8272a <_malloc_r+0x9a>
   8271c:	e00c      	b.n	82738 <_malloc_r+0xa8>
   8271e:	2a00      	cmp	r2, #0
   82720:	f280 8082 	bge.w	82828 <_malloc_r+0x198>
   82724:	68e4      	ldr	r4, [r4, #12]
   82726:	42a1      	cmp	r1, r4
   82728:	d006      	beq.n	82738 <_malloc_r+0xa8>
   8272a:	6863      	ldr	r3, [r4, #4]
   8272c:	f023 0303 	bic.w	r3, r3, #3
   82730:	1b5a      	subs	r2, r3, r5
   82732:	2a0f      	cmp	r2, #15
   82734:	ddf3      	ble.n	8271e <_malloc_r+0x8e>
   82736:	3801      	subs	r0, #1
   82738:	3001      	adds	r0, #1
   8273a:	499c      	ldr	r1, [pc, #624]	; (829ac <_malloc_r+0x31c>)
   8273c:	693c      	ldr	r4, [r7, #16]
   8273e:	f101 0e08 	add.w	lr, r1, #8
   82742:	4574      	cmp	r4, lr
   82744:	f000 8171 	beq.w	82a2a <_malloc_r+0x39a>
   82748:	6863      	ldr	r3, [r4, #4]
   8274a:	f023 0303 	bic.w	r3, r3, #3
   8274e:	1b5a      	subs	r2, r3, r5
   82750:	2a0f      	cmp	r2, #15
   82752:	f300 8157 	bgt.w	82a04 <_malloc_r+0x374>
   82756:	2a00      	cmp	r2, #0
   82758:	f8c1 e014 	str.w	lr, [r1, #20]
   8275c:	f8c1 e010 	str.w	lr, [r1, #16]
   82760:	da66      	bge.n	82830 <_malloc_r+0x1a0>
   82762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82766:	f080 812d 	bcs.w	829c4 <_malloc_r+0x334>
   8276a:	08db      	lsrs	r3, r3, #3
   8276c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82770:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82774:	684a      	ldr	r2, [r1, #4]
   82776:	2301      	movs	r3, #1
   82778:	fa03 f30c 	lsl.w	r3, r3, ip
   8277c:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82780:	4313      	orrs	r3, r2
   82782:	f8c4 c008 	str.w	ip, [r4, #8]
   82786:	f8c4 800c 	str.w	r8, [r4, #12]
   8278a:	604b      	str	r3, [r1, #4]
   8278c:	f8c8 4008 	str.w	r4, [r8, #8]
   82790:	f8cc 400c 	str.w	r4, [ip, #12]
   82794:	1082      	asrs	r2, r0, #2
   82796:	2401      	movs	r4, #1
   82798:	4094      	lsls	r4, r2
   8279a:	429c      	cmp	r4, r3
   8279c:	d855      	bhi.n	8284a <_malloc_r+0x1ba>
   8279e:	4223      	tst	r3, r4
   827a0:	d106      	bne.n	827b0 <_malloc_r+0x120>
   827a2:	f020 0003 	bic.w	r0, r0, #3
   827a6:	0064      	lsls	r4, r4, #1
   827a8:	4223      	tst	r3, r4
   827aa:	f100 0004 	add.w	r0, r0, #4
   827ae:	d0fa      	beq.n	827a6 <_malloc_r+0x116>
   827b0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   827b4:	46c4      	mov	ip, r8
   827b6:	4681      	mov	r9, r0
   827b8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   827bc:	459c      	cmp	ip, r3
   827be:	d107      	bne.n	827d0 <_malloc_r+0x140>
   827c0:	e135      	b.n	82a2e <_malloc_r+0x39e>
   827c2:	2900      	cmp	r1, #0
   827c4:	f280 8145 	bge.w	82a52 <_malloc_r+0x3c2>
   827c8:	68db      	ldr	r3, [r3, #12]
   827ca:	459c      	cmp	ip, r3
   827cc:	f000 812f 	beq.w	82a2e <_malloc_r+0x39e>
   827d0:	685a      	ldr	r2, [r3, #4]
   827d2:	f022 0203 	bic.w	r2, r2, #3
   827d6:	1b51      	subs	r1, r2, r5
   827d8:	290f      	cmp	r1, #15
   827da:	ddf2      	ble.n	827c2 <_malloc_r+0x132>
   827dc:	461c      	mov	r4, r3
   827de:	68da      	ldr	r2, [r3, #12]
   827e0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   827e4:	f045 0901 	orr.w	r9, r5, #1
   827e8:	f041 0801 	orr.w	r8, r1, #1
   827ec:	441d      	add	r5, r3
   827ee:	f8c3 9004 	str.w	r9, [r3, #4]
   827f2:	4630      	mov	r0, r6
   827f4:	f8cc 200c 	str.w	r2, [ip, #12]
   827f8:	f8c2 c008 	str.w	ip, [r2, #8]
   827fc:	617d      	str	r5, [r7, #20]
   827fe:	613d      	str	r5, [r7, #16]
   82800:	f8c5 e00c 	str.w	lr, [r5, #12]
   82804:	f8c5 e008 	str.w	lr, [r5, #8]
   82808:	f8c5 8004 	str.w	r8, [r5, #4]
   8280c:	5069      	str	r1, [r5, r1]
   8280e:	f000 faeb 	bl	82de8 <__malloc_unlock>
   82812:	e769      	b.n	826e8 <_malloc_r+0x58>
   82814:	2400      	movs	r4, #0
   82816:	4620      	mov	r0, r4
   82818:	230c      	movs	r3, #12
   8281a:	6033      	str	r3, [r6, #0]
   8281c:	b003      	add	sp, #12
   8281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82822:	217e      	movs	r1, #126	; 0x7e
   82824:	203f      	movs	r0, #63	; 0x3f
   82826:	e773      	b.n	82710 <_malloc_r+0x80>
   82828:	4423      	add	r3, r4
   8282a:	685a      	ldr	r2, [r3, #4]
   8282c:	68e1      	ldr	r1, [r4, #12]
   8282e:	e751      	b.n	826d4 <_malloc_r+0x44>
   82830:	4423      	add	r3, r4
   82832:	685a      	ldr	r2, [r3, #4]
   82834:	4630      	mov	r0, r6
   82836:	f042 0201 	orr.w	r2, r2, #1
   8283a:	605a      	str	r2, [r3, #4]
   8283c:	3408      	adds	r4, #8
   8283e:	f000 fad3 	bl	82de8 <__malloc_unlock>
   82842:	4620      	mov	r0, r4
   82844:	b003      	add	sp, #12
   82846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8284a:	68bc      	ldr	r4, [r7, #8]
   8284c:	6863      	ldr	r3, [r4, #4]
   8284e:	f023 0803 	bic.w	r8, r3, #3
   82852:	4545      	cmp	r5, r8
   82854:	d804      	bhi.n	82860 <_malloc_r+0x1d0>
   82856:	ebc5 0308 	rsb	r3, r5, r8
   8285a:	2b0f      	cmp	r3, #15
   8285c:	f300 808c 	bgt.w	82978 <_malloc_r+0x2e8>
   82860:	4b53      	ldr	r3, [pc, #332]	; (829b0 <_malloc_r+0x320>)
   82862:	f8df a15c 	ldr.w	sl, [pc, #348]	; 829c0 <_malloc_r+0x330>
   82866:	681a      	ldr	r2, [r3, #0]
   82868:	f8da 3000 	ldr.w	r3, [sl]
   8286c:	442a      	add	r2, r5
   8286e:	3301      	adds	r3, #1
   82870:	eb04 0b08 	add.w	fp, r4, r8
   82874:	f000 8151 	beq.w	82b1a <_malloc_r+0x48a>
   82878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8287c:	320f      	adds	r2, #15
   8287e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82882:	f022 020f 	bic.w	r2, r2, #15
   82886:	4611      	mov	r1, r2
   82888:	4630      	mov	r0, r6
   8288a:	9201      	str	r2, [sp, #4]
   8288c:	f000 fc9e 	bl	831cc <_sbrk_r>
   82890:	f1b0 3fff 	cmp.w	r0, #4294967295
   82894:	4681      	mov	r9, r0
   82896:	9a01      	ldr	r2, [sp, #4]
   82898:	f000 8148 	beq.w	82b2c <_malloc_r+0x49c>
   8289c:	4583      	cmp	fp, r0
   8289e:	f200 80ef 	bhi.w	82a80 <_malloc_r+0x3f0>
   828a2:	4b44      	ldr	r3, [pc, #272]	; (829b4 <_malloc_r+0x324>)
   828a4:	45cb      	cmp	fp, r9
   828a6:	6819      	ldr	r1, [r3, #0]
   828a8:	4411      	add	r1, r2
   828aa:	6019      	str	r1, [r3, #0]
   828ac:	f000 8143 	beq.w	82b36 <_malloc_r+0x4a6>
   828b0:	f8da 0000 	ldr.w	r0, [sl]
   828b4:	f8df e108 	ldr.w	lr, [pc, #264]	; 829c0 <_malloc_r+0x330>
   828b8:	3001      	adds	r0, #1
   828ba:	bf1b      	ittet	ne
   828bc:	ebcb 0b09 	rsbne	fp, fp, r9
   828c0:	4459      	addne	r1, fp
   828c2:	f8ce 9000 	streq.w	r9, [lr]
   828c6:	6019      	strne	r1, [r3, #0]
   828c8:	f019 0107 	ands.w	r1, r9, #7
   828cc:	f000 8108 	beq.w	82ae0 <_malloc_r+0x450>
   828d0:	f1c1 0008 	rsb	r0, r1, #8
   828d4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   828d8:	4481      	add	r9, r0
   828da:	3108      	adds	r1, #8
   828dc:	444a      	add	r2, r9
   828de:	f3c2 020b 	ubfx	r2, r2, #0, #12
   828e2:	ebc2 0a01 	rsb	sl, r2, r1
   828e6:	4651      	mov	r1, sl
   828e8:	4630      	mov	r0, r6
   828ea:	9301      	str	r3, [sp, #4]
   828ec:	f000 fc6e 	bl	831cc <_sbrk_r>
   828f0:	1c43      	adds	r3, r0, #1
   828f2:	9b01      	ldr	r3, [sp, #4]
   828f4:	f000 812d 	beq.w	82b52 <_malloc_r+0x4c2>
   828f8:	ebc9 0200 	rsb	r2, r9, r0
   828fc:	4452      	add	r2, sl
   828fe:	f042 0201 	orr.w	r2, r2, #1
   82902:	6819      	ldr	r1, [r3, #0]
   82904:	42bc      	cmp	r4, r7
   82906:	4451      	add	r1, sl
   82908:	f8c7 9008 	str.w	r9, [r7, #8]
   8290c:	6019      	str	r1, [r3, #0]
   8290e:	f8c9 2004 	str.w	r2, [r9, #4]
   82912:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 829b4 <_malloc_r+0x324>
   82916:	d016      	beq.n	82946 <_malloc_r+0x2b6>
   82918:	f1b8 0f0f 	cmp.w	r8, #15
   8291c:	f240 80ef 	bls.w	82afe <_malloc_r+0x46e>
   82920:	6862      	ldr	r2, [r4, #4]
   82922:	f1a8 030c 	sub.w	r3, r8, #12
   82926:	f023 0307 	bic.w	r3, r3, #7
   8292a:	f002 0201 	and.w	r2, r2, #1
   8292e:	18e0      	adds	r0, r4, r3
   82930:	f04f 0e05 	mov.w	lr, #5
   82934:	431a      	orrs	r2, r3
   82936:	2b0f      	cmp	r3, #15
   82938:	6062      	str	r2, [r4, #4]
   8293a:	f8c0 e004 	str.w	lr, [r0, #4]
   8293e:	f8c0 e008 	str.w	lr, [r0, #8]
   82942:	f200 810a 	bhi.w	82b5a <_malloc_r+0x4ca>
   82946:	4b1c      	ldr	r3, [pc, #112]	; (829b8 <_malloc_r+0x328>)
   82948:	68bc      	ldr	r4, [r7, #8]
   8294a:	681a      	ldr	r2, [r3, #0]
   8294c:	4291      	cmp	r1, r2
   8294e:	bf88      	it	hi
   82950:	6019      	strhi	r1, [r3, #0]
   82952:	4b1a      	ldr	r3, [pc, #104]	; (829bc <_malloc_r+0x32c>)
   82954:	681a      	ldr	r2, [r3, #0]
   82956:	4291      	cmp	r1, r2
   82958:	6862      	ldr	r2, [r4, #4]
   8295a:	bf88      	it	hi
   8295c:	6019      	strhi	r1, [r3, #0]
   8295e:	f022 0203 	bic.w	r2, r2, #3
   82962:	4295      	cmp	r5, r2
   82964:	eba2 0305 	sub.w	r3, r2, r5
   82968:	d801      	bhi.n	8296e <_malloc_r+0x2de>
   8296a:	2b0f      	cmp	r3, #15
   8296c:	dc04      	bgt.n	82978 <_malloc_r+0x2e8>
   8296e:	4630      	mov	r0, r6
   82970:	f000 fa3a 	bl	82de8 <__malloc_unlock>
   82974:	2400      	movs	r4, #0
   82976:	e6b7      	b.n	826e8 <_malloc_r+0x58>
   82978:	f045 0201 	orr.w	r2, r5, #1
   8297c:	f043 0301 	orr.w	r3, r3, #1
   82980:	4425      	add	r5, r4
   82982:	6062      	str	r2, [r4, #4]
   82984:	4630      	mov	r0, r6
   82986:	60bd      	str	r5, [r7, #8]
   82988:	3408      	adds	r4, #8
   8298a:	606b      	str	r3, [r5, #4]
   8298c:	f000 fa2c 	bl	82de8 <__malloc_unlock>
   82990:	4620      	mov	r0, r4
   82992:	b003      	add	sp, #12
   82994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82998:	2814      	cmp	r0, #20
   8299a:	d969      	bls.n	82a70 <_malloc_r+0x3e0>
   8299c:	2854      	cmp	r0, #84	; 0x54
   8299e:	f200 8098 	bhi.w	82ad2 <_malloc_r+0x442>
   829a2:	0b28      	lsrs	r0, r5, #12
   829a4:	306e      	adds	r0, #110	; 0x6e
   829a6:	0041      	lsls	r1, r0, #1
   829a8:	e6b2      	b.n	82710 <_malloc_r+0x80>
   829aa:	bf00      	nop
   829ac:	20070580 	.word	0x20070580
   829b0:	20070a54 	.word	0x20070a54
   829b4:	20070a58 	.word	0x20070a58
   829b8:	20070a50 	.word	0x20070a50
   829bc:	20070a4c 	.word	0x20070a4c
   829c0:	2007098c 	.word	0x2007098c
   829c4:	0a5a      	lsrs	r2, r3, #9
   829c6:	2a04      	cmp	r2, #4
   829c8:	d955      	bls.n	82a76 <_malloc_r+0x3e6>
   829ca:	2a14      	cmp	r2, #20
   829cc:	f200 80a7 	bhi.w	82b1e <_malloc_r+0x48e>
   829d0:	325b      	adds	r2, #91	; 0x5b
   829d2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   829d6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   829da:	f8dc 1008 	ldr.w	r1, [ip, #8]
   829de:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82b98 <_malloc_r+0x508>
   829e2:	4561      	cmp	r1, ip
   829e4:	d07f      	beq.n	82ae6 <_malloc_r+0x456>
   829e6:	684a      	ldr	r2, [r1, #4]
   829e8:	f022 0203 	bic.w	r2, r2, #3
   829ec:	4293      	cmp	r3, r2
   829ee:	d202      	bcs.n	829f6 <_malloc_r+0x366>
   829f0:	6889      	ldr	r1, [r1, #8]
   829f2:	458c      	cmp	ip, r1
   829f4:	d1f7      	bne.n	829e6 <_malloc_r+0x356>
   829f6:	68ca      	ldr	r2, [r1, #12]
   829f8:	687b      	ldr	r3, [r7, #4]
   829fa:	60e2      	str	r2, [r4, #12]
   829fc:	60a1      	str	r1, [r4, #8]
   829fe:	6094      	str	r4, [r2, #8]
   82a00:	60cc      	str	r4, [r1, #12]
   82a02:	e6c7      	b.n	82794 <_malloc_r+0x104>
   82a04:	f045 0701 	orr.w	r7, r5, #1
   82a08:	f042 0301 	orr.w	r3, r2, #1
   82a0c:	4425      	add	r5, r4
   82a0e:	6067      	str	r7, [r4, #4]
   82a10:	4630      	mov	r0, r6
   82a12:	614d      	str	r5, [r1, #20]
   82a14:	610d      	str	r5, [r1, #16]
   82a16:	f8c5 e00c 	str.w	lr, [r5, #12]
   82a1a:	f8c5 e008 	str.w	lr, [r5, #8]
   82a1e:	606b      	str	r3, [r5, #4]
   82a20:	50aa      	str	r2, [r5, r2]
   82a22:	3408      	adds	r4, #8
   82a24:	f000 f9e0 	bl	82de8 <__malloc_unlock>
   82a28:	e65e      	b.n	826e8 <_malloc_r+0x58>
   82a2a:	684b      	ldr	r3, [r1, #4]
   82a2c:	e6b2      	b.n	82794 <_malloc_r+0x104>
   82a2e:	f109 0901 	add.w	r9, r9, #1
   82a32:	f019 0f03 	tst.w	r9, #3
   82a36:	f10c 0c08 	add.w	ip, ip, #8
   82a3a:	f47f aebd 	bne.w	827b8 <_malloc_r+0x128>
   82a3e:	e02c      	b.n	82a9a <_malloc_r+0x40a>
   82a40:	f104 0308 	add.w	r3, r4, #8
   82a44:	6964      	ldr	r4, [r4, #20]
   82a46:	42a3      	cmp	r3, r4
   82a48:	bf08      	it	eq
   82a4a:	3002      	addeq	r0, #2
   82a4c:	f43f ae75 	beq.w	8273a <_malloc_r+0xaa>
   82a50:	e63a      	b.n	826c8 <_malloc_r+0x38>
   82a52:	461c      	mov	r4, r3
   82a54:	441a      	add	r2, r3
   82a56:	6851      	ldr	r1, [r2, #4]
   82a58:	68db      	ldr	r3, [r3, #12]
   82a5a:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82a5e:	f041 0101 	orr.w	r1, r1, #1
   82a62:	6051      	str	r1, [r2, #4]
   82a64:	4630      	mov	r0, r6
   82a66:	60eb      	str	r3, [r5, #12]
   82a68:	609d      	str	r5, [r3, #8]
   82a6a:	f000 f9bd 	bl	82de8 <__malloc_unlock>
   82a6e:	e63b      	b.n	826e8 <_malloc_r+0x58>
   82a70:	305b      	adds	r0, #91	; 0x5b
   82a72:	0041      	lsls	r1, r0, #1
   82a74:	e64c      	b.n	82710 <_malloc_r+0x80>
   82a76:	099a      	lsrs	r2, r3, #6
   82a78:	3238      	adds	r2, #56	; 0x38
   82a7a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82a7e:	e7aa      	b.n	829d6 <_malloc_r+0x346>
   82a80:	42bc      	cmp	r4, r7
   82a82:	4b45      	ldr	r3, [pc, #276]	; (82b98 <_malloc_r+0x508>)
   82a84:	f43f af0d 	beq.w	828a2 <_malloc_r+0x212>
   82a88:	689c      	ldr	r4, [r3, #8]
   82a8a:	6862      	ldr	r2, [r4, #4]
   82a8c:	f022 0203 	bic.w	r2, r2, #3
   82a90:	e767      	b.n	82962 <_malloc_r+0x2d2>
   82a92:	f8d8 8000 	ldr.w	r8, [r8]
   82a96:	4598      	cmp	r8, r3
   82a98:	d17c      	bne.n	82b94 <_malloc_r+0x504>
   82a9a:	f010 0f03 	tst.w	r0, #3
   82a9e:	f1a8 0308 	sub.w	r3, r8, #8
   82aa2:	f100 30ff 	add.w	r0, r0, #4294967295
   82aa6:	d1f4      	bne.n	82a92 <_malloc_r+0x402>
   82aa8:	687b      	ldr	r3, [r7, #4]
   82aaa:	ea23 0304 	bic.w	r3, r3, r4
   82aae:	607b      	str	r3, [r7, #4]
   82ab0:	0064      	lsls	r4, r4, #1
   82ab2:	429c      	cmp	r4, r3
   82ab4:	f63f aec9 	bhi.w	8284a <_malloc_r+0x1ba>
   82ab8:	2c00      	cmp	r4, #0
   82aba:	f43f aec6 	beq.w	8284a <_malloc_r+0x1ba>
   82abe:	4223      	tst	r3, r4
   82ac0:	4648      	mov	r0, r9
   82ac2:	f47f ae75 	bne.w	827b0 <_malloc_r+0x120>
   82ac6:	0064      	lsls	r4, r4, #1
   82ac8:	4223      	tst	r3, r4
   82aca:	f100 0004 	add.w	r0, r0, #4
   82ace:	d0fa      	beq.n	82ac6 <_malloc_r+0x436>
   82ad0:	e66e      	b.n	827b0 <_malloc_r+0x120>
   82ad2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82ad6:	d818      	bhi.n	82b0a <_malloc_r+0x47a>
   82ad8:	0be8      	lsrs	r0, r5, #15
   82ada:	3077      	adds	r0, #119	; 0x77
   82adc:	0041      	lsls	r1, r0, #1
   82ade:	e617      	b.n	82710 <_malloc_r+0x80>
   82ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82ae4:	e6fa      	b.n	828dc <_malloc_r+0x24c>
   82ae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82aea:	1092      	asrs	r2, r2, #2
   82aec:	f04f 0c01 	mov.w	ip, #1
   82af0:	fa0c f202 	lsl.w	r2, ip, r2
   82af4:	4313      	orrs	r3, r2
   82af6:	f8c8 3004 	str.w	r3, [r8, #4]
   82afa:	460a      	mov	r2, r1
   82afc:	e77d      	b.n	829fa <_malloc_r+0x36a>
   82afe:	2301      	movs	r3, #1
   82b00:	f8c9 3004 	str.w	r3, [r9, #4]
   82b04:	464c      	mov	r4, r9
   82b06:	2200      	movs	r2, #0
   82b08:	e72b      	b.n	82962 <_malloc_r+0x2d2>
   82b0a:	f240 5354 	movw	r3, #1364	; 0x554
   82b0e:	4298      	cmp	r0, r3
   82b10:	d81c      	bhi.n	82b4c <_malloc_r+0x4bc>
   82b12:	0ca8      	lsrs	r0, r5, #18
   82b14:	307c      	adds	r0, #124	; 0x7c
   82b16:	0041      	lsls	r1, r0, #1
   82b18:	e5fa      	b.n	82710 <_malloc_r+0x80>
   82b1a:	3210      	adds	r2, #16
   82b1c:	e6b3      	b.n	82886 <_malloc_r+0x1f6>
   82b1e:	2a54      	cmp	r2, #84	; 0x54
   82b20:	d823      	bhi.n	82b6a <_malloc_r+0x4da>
   82b22:	0b1a      	lsrs	r2, r3, #12
   82b24:	326e      	adds	r2, #110	; 0x6e
   82b26:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82b2a:	e754      	b.n	829d6 <_malloc_r+0x346>
   82b2c:	68bc      	ldr	r4, [r7, #8]
   82b2e:	6862      	ldr	r2, [r4, #4]
   82b30:	f022 0203 	bic.w	r2, r2, #3
   82b34:	e715      	b.n	82962 <_malloc_r+0x2d2>
   82b36:	f3cb 000b 	ubfx	r0, fp, #0, #12
   82b3a:	2800      	cmp	r0, #0
   82b3c:	f47f aeb8 	bne.w	828b0 <_malloc_r+0x220>
   82b40:	4442      	add	r2, r8
   82b42:	68bb      	ldr	r3, [r7, #8]
   82b44:	f042 0201 	orr.w	r2, r2, #1
   82b48:	605a      	str	r2, [r3, #4]
   82b4a:	e6fc      	b.n	82946 <_malloc_r+0x2b6>
   82b4c:	21fc      	movs	r1, #252	; 0xfc
   82b4e:	207e      	movs	r0, #126	; 0x7e
   82b50:	e5de      	b.n	82710 <_malloc_r+0x80>
   82b52:	2201      	movs	r2, #1
   82b54:	f04f 0a00 	mov.w	sl, #0
   82b58:	e6d3      	b.n	82902 <_malloc_r+0x272>
   82b5a:	f104 0108 	add.w	r1, r4, #8
   82b5e:	4630      	mov	r0, r6
   82b60:	f7ff fa84 	bl	8206c <_free_r>
   82b64:	f8da 1000 	ldr.w	r1, [sl]
   82b68:	e6ed      	b.n	82946 <_malloc_r+0x2b6>
   82b6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82b6e:	d804      	bhi.n	82b7a <_malloc_r+0x4ea>
   82b70:	0bda      	lsrs	r2, r3, #15
   82b72:	3277      	adds	r2, #119	; 0x77
   82b74:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82b78:	e72d      	b.n	829d6 <_malloc_r+0x346>
   82b7a:	f240 5154 	movw	r1, #1364	; 0x554
   82b7e:	428a      	cmp	r2, r1
   82b80:	d804      	bhi.n	82b8c <_malloc_r+0x4fc>
   82b82:	0c9a      	lsrs	r2, r3, #18
   82b84:	327c      	adds	r2, #124	; 0x7c
   82b86:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82b8a:	e724      	b.n	829d6 <_malloc_r+0x346>
   82b8c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   82b90:	227e      	movs	r2, #126	; 0x7e
   82b92:	e720      	b.n	829d6 <_malloc_r+0x346>
   82b94:	687b      	ldr	r3, [r7, #4]
   82b96:	e78b      	b.n	82ab0 <_malloc_r+0x420>
   82b98:	20070580 	.word	0x20070580

00082b9c <memchr>:
   82b9c:	0783      	lsls	r3, r0, #30
   82b9e:	b470      	push	{r4, r5, r6}
   82ba0:	b2c9      	uxtb	r1, r1
   82ba2:	d040      	beq.n	82c26 <memchr+0x8a>
   82ba4:	1e54      	subs	r4, r2, #1
   82ba6:	2a00      	cmp	r2, #0
   82ba8:	d03f      	beq.n	82c2a <memchr+0x8e>
   82baa:	7803      	ldrb	r3, [r0, #0]
   82bac:	428b      	cmp	r3, r1
   82bae:	bf18      	it	ne
   82bb0:	1c43      	addne	r3, r0, #1
   82bb2:	d105      	bne.n	82bc0 <memchr+0x24>
   82bb4:	e01c      	b.n	82bf0 <memchr+0x54>
   82bb6:	b1ec      	cbz	r4, 82bf4 <memchr+0x58>
   82bb8:	7802      	ldrb	r2, [r0, #0]
   82bba:	3c01      	subs	r4, #1
   82bbc:	428a      	cmp	r2, r1
   82bbe:	d017      	beq.n	82bf0 <memchr+0x54>
   82bc0:	f013 0f03 	tst.w	r3, #3
   82bc4:	4618      	mov	r0, r3
   82bc6:	f103 0301 	add.w	r3, r3, #1
   82bca:	d1f4      	bne.n	82bb6 <memchr+0x1a>
   82bcc:	2c03      	cmp	r4, #3
   82bce:	d814      	bhi.n	82bfa <memchr+0x5e>
   82bd0:	b184      	cbz	r4, 82bf4 <memchr+0x58>
   82bd2:	7803      	ldrb	r3, [r0, #0]
   82bd4:	428b      	cmp	r3, r1
   82bd6:	d00b      	beq.n	82bf0 <memchr+0x54>
   82bd8:	1905      	adds	r5, r0, r4
   82bda:	1c43      	adds	r3, r0, #1
   82bdc:	e002      	b.n	82be4 <memchr+0x48>
   82bde:	7802      	ldrb	r2, [r0, #0]
   82be0:	428a      	cmp	r2, r1
   82be2:	d005      	beq.n	82bf0 <memchr+0x54>
   82be4:	42ab      	cmp	r3, r5
   82be6:	4618      	mov	r0, r3
   82be8:	f103 0301 	add.w	r3, r3, #1
   82bec:	d1f7      	bne.n	82bde <memchr+0x42>
   82bee:	2000      	movs	r0, #0
   82bf0:	bc70      	pop	{r4, r5, r6}
   82bf2:	4770      	bx	lr
   82bf4:	4620      	mov	r0, r4
   82bf6:	bc70      	pop	{r4, r5, r6}
   82bf8:	4770      	bx	lr
   82bfa:	4602      	mov	r2, r0
   82bfc:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82c00:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82c04:	6813      	ldr	r3, [r2, #0]
   82c06:	4610      	mov	r0, r2
   82c08:	4073      	eors	r3, r6
   82c0a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   82c0e:	ea25 0303 	bic.w	r3, r5, r3
   82c12:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   82c16:	f102 0204 	add.w	r2, r2, #4
   82c1a:	d1d9      	bne.n	82bd0 <memchr+0x34>
   82c1c:	3c04      	subs	r4, #4
   82c1e:	2c03      	cmp	r4, #3
   82c20:	4610      	mov	r0, r2
   82c22:	d8ef      	bhi.n	82c04 <memchr+0x68>
   82c24:	e7d4      	b.n	82bd0 <memchr+0x34>
   82c26:	4614      	mov	r4, r2
   82c28:	e7d0      	b.n	82bcc <memchr+0x30>
   82c2a:	4610      	mov	r0, r2
   82c2c:	e7e0      	b.n	82bf0 <memchr+0x54>
   82c2e:	bf00      	nop

00082c30 <memcpy>:
   82c30:	4684      	mov	ip, r0
   82c32:	ea41 0300 	orr.w	r3, r1, r0
   82c36:	f013 0303 	ands.w	r3, r3, #3
   82c3a:	d149      	bne.n	82cd0 <memcpy+0xa0>
   82c3c:	3a40      	subs	r2, #64	; 0x40
   82c3e:	d323      	bcc.n	82c88 <memcpy+0x58>
   82c40:	680b      	ldr	r3, [r1, #0]
   82c42:	6003      	str	r3, [r0, #0]
   82c44:	684b      	ldr	r3, [r1, #4]
   82c46:	6043      	str	r3, [r0, #4]
   82c48:	688b      	ldr	r3, [r1, #8]
   82c4a:	6083      	str	r3, [r0, #8]
   82c4c:	68cb      	ldr	r3, [r1, #12]
   82c4e:	60c3      	str	r3, [r0, #12]
   82c50:	690b      	ldr	r3, [r1, #16]
   82c52:	6103      	str	r3, [r0, #16]
   82c54:	694b      	ldr	r3, [r1, #20]
   82c56:	6143      	str	r3, [r0, #20]
   82c58:	698b      	ldr	r3, [r1, #24]
   82c5a:	6183      	str	r3, [r0, #24]
   82c5c:	69cb      	ldr	r3, [r1, #28]
   82c5e:	61c3      	str	r3, [r0, #28]
   82c60:	6a0b      	ldr	r3, [r1, #32]
   82c62:	6203      	str	r3, [r0, #32]
   82c64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82c66:	6243      	str	r3, [r0, #36]	; 0x24
   82c68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82c6a:	6283      	str	r3, [r0, #40]	; 0x28
   82c6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82c6e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82c70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82c72:	6303      	str	r3, [r0, #48]	; 0x30
   82c74:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82c76:	6343      	str	r3, [r0, #52]	; 0x34
   82c78:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82c7a:	6383      	str	r3, [r0, #56]	; 0x38
   82c7c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82c7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82c80:	3040      	adds	r0, #64	; 0x40
   82c82:	3140      	adds	r1, #64	; 0x40
   82c84:	3a40      	subs	r2, #64	; 0x40
   82c86:	d2db      	bcs.n	82c40 <memcpy+0x10>
   82c88:	3230      	adds	r2, #48	; 0x30
   82c8a:	d30b      	bcc.n	82ca4 <memcpy+0x74>
   82c8c:	680b      	ldr	r3, [r1, #0]
   82c8e:	6003      	str	r3, [r0, #0]
   82c90:	684b      	ldr	r3, [r1, #4]
   82c92:	6043      	str	r3, [r0, #4]
   82c94:	688b      	ldr	r3, [r1, #8]
   82c96:	6083      	str	r3, [r0, #8]
   82c98:	68cb      	ldr	r3, [r1, #12]
   82c9a:	60c3      	str	r3, [r0, #12]
   82c9c:	3010      	adds	r0, #16
   82c9e:	3110      	adds	r1, #16
   82ca0:	3a10      	subs	r2, #16
   82ca2:	d2f3      	bcs.n	82c8c <memcpy+0x5c>
   82ca4:	320c      	adds	r2, #12
   82ca6:	d305      	bcc.n	82cb4 <memcpy+0x84>
   82ca8:	f851 3b04 	ldr.w	r3, [r1], #4
   82cac:	f840 3b04 	str.w	r3, [r0], #4
   82cb0:	3a04      	subs	r2, #4
   82cb2:	d2f9      	bcs.n	82ca8 <memcpy+0x78>
   82cb4:	3204      	adds	r2, #4
   82cb6:	d008      	beq.n	82cca <memcpy+0x9a>
   82cb8:	07d2      	lsls	r2, r2, #31
   82cba:	bf1c      	itt	ne
   82cbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82cc0:	f800 3b01 	strbne.w	r3, [r0], #1
   82cc4:	d301      	bcc.n	82cca <memcpy+0x9a>
   82cc6:	880b      	ldrh	r3, [r1, #0]
   82cc8:	8003      	strh	r3, [r0, #0]
   82cca:	4660      	mov	r0, ip
   82ccc:	4770      	bx	lr
   82cce:	bf00      	nop
   82cd0:	2a08      	cmp	r2, #8
   82cd2:	d313      	bcc.n	82cfc <memcpy+0xcc>
   82cd4:	078b      	lsls	r3, r1, #30
   82cd6:	d0b1      	beq.n	82c3c <memcpy+0xc>
   82cd8:	f010 0303 	ands.w	r3, r0, #3
   82cdc:	d0ae      	beq.n	82c3c <memcpy+0xc>
   82cde:	f1c3 0304 	rsb	r3, r3, #4
   82ce2:	1ad2      	subs	r2, r2, r3
   82ce4:	07db      	lsls	r3, r3, #31
   82ce6:	bf1c      	itt	ne
   82ce8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82cec:	f800 3b01 	strbne.w	r3, [r0], #1
   82cf0:	d3a4      	bcc.n	82c3c <memcpy+0xc>
   82cf2:	f831 3b02 	ldrh.w	r3, [r1], #2
   82cf6:	f820 3b02 	strh.w	r3, [r0], #2
   82cfa:	e79f      	b.n	82c3c <memcpy+0xc>
   82cfc:	3a04      	subs	r2, #4
   82cfe:	d3d9      	bcc.n	82cb4 <memcpy+0x84>
   82d00:	3a01      	subs	r2, #1
   82d02:	f811 3b01 	ldrb.w	r3, [r1], #1
   82d06:	f800 3b01 	strb.w	r3, [r0], #1
   82d0a:	d2f9      	bcs.n	82d00 <memcpy+0xd0>
   82d0c:	780b      	ldrb	r3, [r1, #0]
   82d0e:	7003      	strb	r3, [r0, #0]
   82d10:	784b      	ldrb	r3, [r1, #1]
   82d12:	7043      	strb	r3, [r0, #1]
   82d14:	788b      	ldrb	r3, [r1, #2]
   82d16:	7083      	strb	r3, [r0, #2]
   82d18:	4660      	mov	r0, ip
   82d1a:	4770      	bx	lr

00082d1c <memmove>:
   82d1c:	4288      	cmp	r0, r1
   82d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82d20:	d90d      	bls.n	82d3e <memmove+0x22>
   82d22:	188b      	adds	r3, r1, r2
   82d24:	4298      	cmp	r0, r3
   82d26:	d20a      	bcs.n	82d3e <memmove+0x22>
   82d28:	1881      	adds	r1, r0, r2
   82d2a:	2a00      	cmp	r2, #0
   82d2c:	d054      	beq.n	82dd8 <memmove+0xbc>
   82d2e:	1a9a      	subs	r2, r3, r2
   82d30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82d34:	4293      	cmp	r3, r2
   82d36:	f801 4d01 	strb.w	r4, [r1, #-1]!
   82d3a:	d1f9      	bne.n	82d30 <memmove+0x14>
   82d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82d3e:	2a0f      	cmp	r2, #15
   82d40:	d948      	bls.n	82dd4 <memmove+0xb8>
   82d42:	ea40 0301 	orr.w	r3, r0, r1
   82d46:	079b      	lsls	r3, r3, #30
   82d48:	d147      	bne.n	82dda <memmove+0xbe>
   82d4a:	4615      	mov	r5, r2
   82d4c:	f100 0410 	add.w	r4, r0, #16
   82d50:	f101 0310 	add.w	r3, r1, #16
   82d54:	f853 6c10 	ldr.w	r6, [r3, #-16]
   82d58:	3d10      	subs	r5, #16
   82d5a:	f844 6c10 	str.w	r6, [r4, #-16]
   82d5e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   82d62:	2d0f      	cmp	r5, #15
   82d64:	f844 6c0c 	str.w	r6, [r4, #-12]
   82d68:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82d6c:	f104 0410 	add.w	r4, r4, #16
   82d70:	f844 6c18 	str.w	r6, [r4, #-24]
   82d74:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82d78:	f103 0310 	add.w	r3, r3, #16
   82d7c:	f844 6c14 	str.w	r6, [r4, #-20]
   82d80:	d8e8      	bhi.n	82d54 <memmove+0x38>
   82d82:	f1a2 0310 	sub.w	r3, r2, #16
   82d86:	f023 030f 	bic.w	r3, r3, #15
   82d8a:	f002 0e0f 	and.w	lr, r2, #15
   82d8e:	3310      	adds	r3, #16
   82d90:	f1be 0f03 	cmp.w	lr, #3
   82d94:	4419      	add	r1, r3
   82d96:	4403      	add	r3, r0
   82d98:	d921      	bls.n	82dde <memmove+0xc2>
   82d9a:	460e      	mov	r6, r1
   82d9c:	4674      	mov	r4, lr
   82d9e:	1f1d      	subs	r5, r3, #4
   82da0:	f856 7b04 	ldr.w	r7, [r6], #4
   82da4:	3c04      	subs	r4, #4
   82da6:	2c03      	cmp	r4, #3
   82da8:	f845 7f04 	str.w	r7, [r5, #4]!
   82dac:	d8f8      	bhi.n	82da0 <memmove+0x84>
   82dae:	f1ae 0404 	sub.w	r4, lr, #4
   82db2:	f024 0403 	bic.w	r4, r4, #3
   82db6:	3404      	adds	r4, #4
   82db8:	4423      	add	r3, r4
   82dba:	4421      	add	r1, r4
   82dbc:	f002 0203 	and.w	r2, r2, #3
   82dc0:	b152      	cbz	r2, 82dd8 <memmove+0xbc>
   82dc2:	3b01      	subs	r3, #1
   82dc4:	440a      	add	r2, r1
   82dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   82dca:	4291      	cmp	r1, r2
   82dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
   82dd0:	d1f9      	bne.n	82dc6 <memmove+0xaa>
   82dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82dd4:	4603      	mov	r3, r0
   82dd6:	e7f3      	b.n	82dc0 <memmove+0xa4>
   82dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82dda:	4603      	mov	r3, r0
   82ddc:	e7f1      	b.n	82dc2 <memmove+0xa6>
   82dde:	4672      	mov	r2, lr
   82de0:	e7ee      	b.n	82dc0 <memmove+0xa4>
   82de2:	bf00      	nop

00082de4 <__malloc_lock>:
   82de4:	4770      	bx	lr
   82de6:	bf00      	nop

00082de8 <__malloc_unlock>:
   82de8:	4770      	bx	lr
   82dea:	bf00      	nop

00082dec <_realloc_r>:
   82dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82df0:	4617      	mov	r7, r2
   82df2:	b083      	sub	sp, #12
   82df4:	460d      	mov	r5, r1
   82df6:	2900      	cmp	r1, #0
   82df8:	f000 80e2 	beq.w	82fc0 <_realloc_r+0x1d4>
   82dfc:	4681      	mov	r9, r0
   82dfe:	f107 040b 	add.w	r4, r7, #11
   82e02:	f7ff ffef 	bl	82de4 <__malloc_lock>
   82e06:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82e0a:	2c16      	cmp	r4, #22
   82e0c:	f023 0603 	bic.w	r6, r3, #3
   82e10:	f1a5 0808 	sub.w	r8, r5, #8
   82e14:	d84b      	bhi.n	82eae <_realloc_r+0xc2>
   82e16:	2210      	movs	r2, #16
   82e18:	4614      	mov	r4, r2
   82e1a:	42a7      	cmp	r7, r4
   82e1c:	d84c      	bhi.n	82eb8 <_realloc_r+0xcc>
   82e1e:	4296      	cmp	r6, r2
   82e20:	da51      	bge.n	82ec6 <_realloc_r+0xda>
   82e22:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 831c8 <_realloc_r+0x3dc>
   82e26:	eb08 0106 	add.w	r1, r8, r6
   82e2a:	f8db 0008 	ldr.w	r0, [fp, #8]
   82e2e:	4288      	cmp	r0, r1
   82e30:	f000 80d3 	beq.w	82fda <_realloc_r+0x1ee>
   82e34:	6848      	ldr	r0, [r1, #4]
   82e36:	f020 0e01 	bic.w	lr, r0, #1
   82e3a:	448e      	add	lr, r1
   82e3c:	f8de e004 	ldr.w	lr, [lr, #4]
   82e40:	f01e 0f01 	tst.w	lr, #1
   82e44:	d154      	bne.n	82ef0 <_realloc_r+0x104>
   82e46:	f020 0003 	bic.w	r0, r0, #3
   82e4a:	4430      	add	r0, r6
   82e4c:	4290      	cmp	r0, r2
   82e4e:	f280 80bd 	bge.w	82fcc <_realloc_r+0x1e0>
   82e52:	07db      	lsls	r3, r3, #31
   82e54:	f100 8090 	bmi.w	82f78 <_realloc_r+0x18c>
   82e58:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82e5c:	ebc3 0a08 	rsb	sl, r3, r8
   82e60:	f8da 3004 	ldr.w	r3, [sl, #4]
   82e64:	f023 0303 	bic.w	r3, r3, #3
   82e68:	eb00 0e03 	add.w	lr, r0, r3
   82e6c:	4596      	cmp	lr, r2
   82e6e:	db49      	blt.n	82f04 <_realloc_r+0x118>
   82e70:	4657      	mov	r7, sl
   82e72:	68cb      	ldr	r3, [r1, #12]
   82e74:	6889      	ldr	r1, [r1, #8]
   82e76:	1f32      	subs	r2, r6, #4
   82e78:	60cb      	str	r3, [r1, #12]
   82e7a:	6099      	str	r1, [r3, #8]
   82e7c:	f857 1f08 	ldr.w	r1, [r7, #8]!
   82e80:	f8da 300c 	ldr.w	r3, [sl, #12]
   82e84:	2a24      	cmp	r2, #36	; 0x24
   82e86:	60cb      	str	r3, [r1, #12]
   82e88:	6099      	str	r1, [r3, #8]
   82e8a:	f200 8133 	bhi.w	830f4 <_realloc_r+0x308>
   82e8e:	2a13      	cmp	r2, #19
   82e90:	f240 80fa 	bls.w	83088 <_realloc_r+0x29c>
   82e94:	682b      	ldr	r3, [r5, #0]
   82e96:	2a1b      	cmp	r2, #27
   82e98:	f8ca 3008 	str.w	r3, [sl, #8]
   82e9c:	686b      	ldr	r3, [r5, #4]
   82e9e:	f8ca 300c 	str.w	r3, [sl, #12]
   82ea2:	f200 813b 	bhi.w	8311c <_realloc_r+0x330>
   82ea6:	3508      	adds	r5, #8
   82ea8:	f10a 0310 	add.w	r3, sl, #16
   82eac:	e0ed      	b.n	8308a <_realloc_r+0x29e>
   82eae:	f024 0407 	bic.w	r4, r4, #7
   82eb2:	2c00      	cmp	r4, #0
   82eb4:	4622      	mov	r2, r4
   82eb6:	dab0      	bge.n	82e1a <_realloc_r+0x2e>
   82eb8:	230c      	movs	r3, #12
   82eba:	2000      	movs	r0, #0
   82ebc:	f8c9 3000 	str.w	r3, [r9]
   82ec0:	b003      	add	sp, #12
   82ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ec6:	462f      	mov	r7, r5
   82ec8:	1b32      	subs	r2, r6, r4
   82eca:	2a0f      	cmp	r2, #15
   82ecc:	f003 0301 	and.w	r3, r3, #1
   82ed0:	d840      	bhi.n	82f54 <_realloc_r+0x168>
   82ed2:	4333      	orrs	r3, r6
   82ed4:	f8c8 3004 	str.w	r3, [r8, #4]
   82ed8:	4446      	add	r6, r8
   82eda:	6873      	ldr	r3, [r6, #4]
   82edc:	f043 0301 	orr.w	r3, r3, #1
   82ee0:	6073      	str	r3, [r6, #4]
   82ee2:	4648      	mov	r0, r9
   82ee4:	f7ff ff80 	bl	82de8 <__malloc_unlock>
   82ee8:	4638      	mov	r0, r7
   82eea:	b003      	add	sp, #12
   82eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef0:	07d9      	lsls	r1, r3, #31
   82ef2:	d441      	bmi.n	82f78 <_realloc_r+0x18c>
   82ef4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82ef8:	ebc3 0a08 	rsb	sl, r3, r8
   82efc:	f8da 3004 	ldr.w	r3, [sl, #4]
   82f00:	f023 0303 	bic.w	r3, r3, #3
   82f04:	4433      	add	r3, r6
   82f06:	4293      	cmp	r3, r2
   82f08:	db36      	blt.n	82f78 <_realloc_r+0x18c>
   82f0a:	4657      	mov	r7, sl
   82f0c:	f8da 100c 	ldr.w	r1, [sl, #12]
   82f10:	f857 0f08 	ldr.w	r0, [r7, #8]!
   82f14:	1f32      	subs	r2, r6, #4
   82f16:	2a24      	cmp	r2, #36	; 0x24
   82f18:	60c1      	str	r1, [r0, #12]
   82f1a:	6088      	str	r0, [r1, #8]
   82f1c:	f200 80f5 	bhi.w	8310a <_realloc_r+0x31e>
   82f20:	2a13      	cmp	r2, #19
   82f22:	f240 80f0 	bls.w	83106 <_realloc_r+0x31a>
   82f26:	6829      	ldr	r1, [r5, #0]
   82f28:	2a1b      	cmp	r2, #27
   82f2a:	f8ca 1008 	str.w	r1, [sl, #8]
   82f2e:	6869      	ldr	r1, [r5, #4]
   82f30:	f8ca 100c 	str.w	r1, [sl, #12]
   82f34:	f200 8107 	bhi.w	83146 <_realloc_r+0x35a>
   82f38:	3508      	adds	r5, #8
   82f3a:	f10a 0210 	add.w	r2, sl, #16
   82f3e:	6829      	ldr	r1, [r5, #0]
   82f40:	461e      	mov	r6, r3
   82f42:	6011      	str	r1, [r2, #0]
   82f44:	6869      	ldr	r1, [r5, #4]
   82f46:	46d0      	mov	r8, sl
   82f48:	6051      	str	r1, [r2, #4]
   82f4a:	68ab      	ldr	r3, [r5, #8]
   82f4c:	6093      	str	r3, [r2, #8]
   82f4e:	f8da 3004 	ldr.w	r3, [sl, #4]
   82f52:	e7b9      	b.n	82ec8 <_realloc_r+0xdc>
   82f54:	eb08 0104 	add.w	r1, r8, r4
   82f58:	4323      	orrs	r3, r4
   82f5a:	f042 0001 	orr.w	r0, r2, #1
   82f5e:	f8c8 3004 	str.w	r3, [r8, #4]
   82f62:	440a      	add	r2, r1
   82f64:	6048      	str	r0, [r1, #4]
   82f66:	6853      	ldr	r3, [r2, #4]
   82f68:	3108      	adds	r1, #8
   82f6a:	f043 0301 	orr.w	r3, r3, #1
   82f6e:	6053      	str	r3, [r2, #4]
   82f70:	4648      	mov	r0, r9
   82f72:	f7ff f87b 	bl	8206c <_free_r>
   82f76:	e7b4      	b.n	82ee2 <_realloc_r+0xf6>
   82f78:	4639      	mov	r1, r7
   82f7a:	4648      	mov	r0, r9
   82f7c:	f7ff fb88 	bl	82690 <_malloc_r>
   82f80:	4607      	mov	r7, r0
   82f82:	2800      	cmp	r0, #0
   82f84:	d0ad      	beq.n	82ee2 <_realloc_r+0xf6>
   82f86:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82f8a:	f1a0 0108 	sub.w	r1, r0, #8
   82f8e:	f023 0201 	bic.w	r2, r3, #1
   82f92:	4442      	add	r2, r8
   82f94:	4291      	cmp	r1, r2
   82f96:	f000 80a6 	beq.w	830e6 <_realloc_r+0x2fa>
   82f9a:	1f32      	subs	r2, r6, #4
   82f9c:	2a24      	cmp	r2, #36	; 0x24
   82f9e:	f200 8093 	bhi.w	830c8 <_realloc_r+0x2dc>
   82fa2:	2a13      	cmp	r2, #19
   82fa4:	d865      	bhi.n	83072 <_realloc_r+0x286>
   82fa6:	4603      	mov	r3, r0
   82fa8:	462a      	mov	r2, r5
   82faa:	6811      	ldr	r1, [r2, #0]
   82fac:	6019      	str	r1, [r3, #0]
   82fae:	6851      	ldr	r1, [r2, #4]
   82fb0:	6059      	str	r1, [r3, #4]
   82fb2:	6892      	ldr	r2, [r2, #8]
   82fb4:	609a      	str	r2, [r3, #8]
   82fb6:	4629      	mov	r1, r5
   82fb8:	4648      	mov	r0, r9
   82fba:	f7ff f857 	bl	8206c <_free_r>
   82fbe:	e790      	b.n	82ee2 <_realloc_r+0xf6>
   82fc0:	4611      	mov	r1, r2
   82fc2:	b003      	add	sp, #12
   82fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fc8:	f7ff bb62 	b.w	82690 <_malloc_r>
   82fcc:	68ca      	ldr	r2, [r1, #12]
   82fce:	6889      	ldr	r1, [r1, #8]
   82fd0:	462f      	mov	r7, r5
   82fd2:	60ca      	str	r2, [r1, #12]
   82fd4:	4606      	mov	r6, r0
   82fd6:	6091      	str	r1, [r2, #8]
   82fd8:	e776      	b.n	82ec8 <_realloc_r+0xdc>
   82fda:	6841      	ldr	r1, [r0, #4]
   82fdc:	f104 0010 	add.w	r0, r4, #16
   82fe0:	f021 0103 	bic.w	r1, r1, #3
   82fe4:	4431      	add	r1, r6
   82fe6:	4281      	cmp	r1, r0
   82fe8:	da5a      	bge.n	830a0 <_realloc_r+0x2b4>
   82fea:	07db      	lsls	r3, r3, #31
   82fec:	d4c4      	bmi.n	82f78 <_realloc_r+0x18c>
   82fee:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82ff2:	ebc3 0a08 	rsb	sl, r3, r8
   82ff6:	f8da 3004 	ldr.w	r3, [sl, #4]
   82ffa:	f023 0303 	bic.w	r3, r3, #3
   82ffe:	eb01 0c03 	add.w	ip, r1, r3
   83002:	4560      	cmp	r0, ip
   83004:	f73f af7e 	bgt.w	82f04 <_realloc_r+0x118>
   83008:	4657      	mov	r7, sl
   8300a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8300e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83012:	1f32      	subs	r2, r6, #4
   83014:	2a24      	cmp	r2, #36	; 0x24
   83016:	60cb      	str	r3, [r1, #12]
   83018:	6099      	str	r1, [r3, #8]
   8301a:	f200 80b6 	bhi.w	8318a <_realloc_r+0x39e>
   8301e:	2a13      	cmp	r2, #19
   83020:	f240 80a7 	bls.w	83172 <_realloc_r+0x386>
   83024:	682b      	ldr	r3, [r5, #0]
   83026:	2a1b      	cmp	r2, #27
   83028:	f8ca 3008 	str.w	r3, [sl, #8]
   8302c:	686b      	ldr	r3, [r5, #4]
   8302e:	f8ca 300c 	str.w	r3, [sl, #12]
   83032:	f200 80b3 	bhi.w	8319c <_realloc_r+0x3b0>
   83036:	3508      	adds	r5, #8
   83038:	f10a 0310 	add.w	r3, sl, #16
   8303c:	682a      	ldr	r2, [r5, #0]
   8303e:	601a      	str	r2, [r3, #0]
   83040:	686a      	ldr	r2, [r5, #4]
   83042:	605a      	str	r2, [r3, #4]
   83044:	68aa      	ldr	r2, [r5, #8]
   83046:	609a      	str	r2, [r3, #8]
   83048:	ebc4 030c 	rsb	r3, r4, ip
   8304c:	eb0a 0204 	add.w	r2, sl, r4
   83050:	f043 0301 	orr.w	r3, r3, #1
   83054:	f8cb 2008 	str.w	r2, [fp, #8]
   83058:	6053      	str	r3, [r2, #4]
   8305a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8305e:	4648      	mov	r0, r9
   83060:	f003 0301 	and.w	r3, r3, #1
   83064:	431c      	orrs	r4, r3
   83066:	f8ca 4004 	str.w	r4, [sl, #4]
   8306a:	f7ff febd 	bl	82de8 <__malloc_unlock>
   8306e:	4638      	mov	r0, r7
   83070:	e73b      	b.n	82eea <_realloc_r+0xfe>
   83072:	682b      	ldr	r3, [r5, #0]
   83074:	2a1b      	cmp	r2, #27
   83076:	6003      	str	r3, [r0, #0]
   83078:	686b      	ldr	r3, [r5, #4]
   8307a:	6043      	str	r3, [r0, #4]
   8307c:	d828      	bhi.n	830d0 <_realloc_r+0x2e4>
   8307e:	f100 0308 	add.w	r3, r0, #8
   83082:	f105 0208 	add.w	r2, r5, #8
   83086:	e790      	b.n	82faa <_realloc_r+0x1be>
   83088:	463b      	mov	r3, r7
   8308a:	682a      	ldr	r2, [r5, #0]
   8308c:	4676      	mov	r6, lr
   8308e:	601a      	str	r2, [r3, #0]
   83090:	686a      	ldr	r2, [r5, #4]
   83092:	46d0      	mov	r8, sl
   83094:	605a      	str	r2, [r3, #4]
   83096:	68aa      	ldr	r2, [r5, #8]
   83098:	609a      	str	r2, [r3, #8]
   8309a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8309e:	e713      	b.n	82ec8 <_realloc_r+0xdc>
   830a0:	1b0b      	subs	r3, r1, r4
   830a2:	eb08 0204 	add.w	r2, r8, r4
   830a6:	f043 0301 	orr.w	r3, r3, #1
   830aa:	f8cb 2008 	str.w	r2, [fp, #8]
   830ae:	6053      	str	r3, [r2, #4]
   830b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   830b4:	4648      	mov	r0, r9
   830b6:	f003 0301 	and.w	r3, r3, #1
   830ba:	431c      	orrs	r4, r3
   830bc:	f845 4c04 	str.w	r4, [r5, #-4]
   830c0:	f7ff fe92 	bl	82de8 <__malloc_unlock>
   830c4:	4628      	mov	r0, r5
   830c6:	e710      	b.n	82eea <_realloc_r+0xfe>
   830c8:	4629      	mov	r1, r5
   830ca:	f7ff fe27 	bl	82d1c <memmove>
   830ce:	e772      	b.n	82fb6 <_realloc_r+0x1ca>
   830d0:	68ab      	ldr	r3, [r5, #8]
   830d2:	2a24      	cmp	r2, #36	; 0x24
   830d4:	6083      	str	r3, [r0, #8]
   830d6:	68eb      	ldr	r3, [r5, #12]
   830d8:	60c3      	str	r3, [r0, #12]
   830da:	d02b      	beq.n	83134 <_realloc_r+0x348>
   830dc:	f100 0310 	add.w	r3, r0, #16
   830e0:	f105 0210 	add.w	r2, r5, #16
   830e4:	e761      	b.n	82faa <_realloc_r+0x1be>
   830e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   830ea:	462f      	mov	r7, r5
   830ec:	f022 0203 	bic.w	r2, r2, #3
   830f0:	4416      	add	r6, r2
   830f2:	e6e9      	b.n	82ec8 <_realloc_r+0xdc>
   830f4:	4629      	mov	r1, r5
   830f6:	4638      	mov	r0, r7
   830f8:	4676      	mov	r6, lr
   830fa:	46d0      	mov	r8, sl
   830fc:	f7ff fe0e 	bl	82d1c <memmove>
   83100:	f8da 3004 	ldr.w	r3, [sl, #4]
   83104:	e6e0      	b.n	82ec8 <_realloc_r+0xdc>
   83106:	463a      	mov	r2, r7
   83108:	e719      	b.n	82f3e <_realloc_r+0x152>
   8310a:	4629      	mov	r1, r5
   8310c:	4638      	mov	r0, r7
   8310e:	461e      	mov	r6, r3
   83110:	46d0      	mov	r8, sl
   83112:	f7ff fe03 	bl	82d1c <memmove>
   83116:	f8da 3004 	ldr.w	r3, [sl, #4]
   8311a:	e6d5      	b.n	82ec8 <_realloc_r+0xdc>
   8311c:	68ab      	ldr	r3, [r5, #8]
   8311e:	2a24      	cmp	r2, #36	; 0x24
   83120:	f8ca 3010 	str.w	r3, [sl, #16]
   83124:	68eb      	ldr	r3, [r5, #12]
   83126:	f8ca 3014 	str.w	r3, [sl, #20]
   8312a:	d018      	beq.n	8315e <_realloc_r+0x372>
   8312c:	3510      	adds	r5, #16
   8312e:	f10a 0318 	add.w	r3, sl, #24
   83132:	e7aa      	b.n	8308a <_realloc_r+0x29e>
   83134:	692a      	ldr	r2, [r5, #16]
   83136:	f100 0318 	add.w	r3, r0, #24
   8313a:	6102      	str	r2, [r0, #16]
   8313c:	6969      	ldr	r1, [r5, #20]
   8313e:	f105 0218 	add.w	r2, r5, #24
   83142:	6141      	str	r1, [r0, #20]
   83144:	e731      	b.n	82faa <_realloc_r+0x1be>
   83146:	68a9      	ldr	r1, [r5, #8]
   83148:	2a24      	cmp	r2, #36	; 0x24
   8314a:	f8ca 1010 	str.w	r1, [sl, #16]
   8314e:	68e9      	ldr	r1, [r5, #12]
   83150:	f8ca 1014 	str.w	r1, [sl, #20]
   83154:	d00f      	beq.n	83176 <_realloc_r+0x38a>
   83156:	3510      	adds	r5, #16
   83158:	f10a 0218 	add.w	r2, sl, #24
   8315c:	e6ef      	b.n	82f3e <_realloc_r+0x152>
   8315e:	692a      	ldr	r2, [r5, #16]
   83160:	f10a 0320 	add.w	r3, sl, #32
   83164:	f8ca 2018 	str.w	r2, [sl, #24]
   83168:	696a      	ldr	r2, [r5, #20]
   8316a:	3518      	adds	r5, #24
   8316c:	f8ca 201c 	str.w	r2, [sl, #28]
   83170:	e78b      	b.n	8308a <_realloc_r+0x29e>
   83172:	463b      	mov	r3, r7
   83174:	e762      	b.n	8303c <_realloc_r+0x250>
   83176:	6929      	ldr	r1, [r5, #16]
   83178:	f10a 0220 	add.w	r2, sl, #32
   8317c:	f8ca 1018 	str.w	r1, [sl, #24]
   83180:	6969      	ldr	r1, [r5, #20]
   83182:	3518      	adds	r5, #24
   83184:	f8ca 101c 	str.w	r1, [sl, #28]
   83188:	e6d9      	b.n	82f3e <_realloc_r+0x152>
   8318a:	4629      	mov	r1, r5
   8318c:	4638      	mov	r0, r7
   8318e:	f8cd c004 	str.w	ip, [sp, #4]
   83192:	f7ff fdc3 	bl	82d1c <memmove>
   83196:	f8dd c004 	ldr.w	ip, [sp, #4]
   8319a:	e755      	b.n	83048 <_realloc_r+0x25c>
   8319c:	68ab      	ldr	r3, [r5, #8]
   8319e:	2a24      	cmp	r2, #36	; 0x24
   831a0:	f8ca 3010 	str.w	r3, [sl, #16]
   831a4:	68eb      	ldr	r3, [r5, #12]
   831a6:	f8ca 3014 	str.w	r3, [sl, #20]
   831aa:	d003      	beq.n	831b4 <_realloc_r+0x3c8>
   831ac:	3510      	adds	r5, #16
   831ae:	f10a 0318 	add.w	r3, sl, #24
   831b2:	e743      	b.n	8303c <_realloc_r+0x250>
   831b4:	692a      	ldr	r2, [r5, #16]
   831b6:	f10a 0320 	add.w	r3, sl, #32
   831ba:	f8ca 2018 	str.w	r2, [sl, #24]
   831be:	696a      	ldr	r2, [r5, #20]
   831c0:	3518      	adds	r5, #24
   831c2:	f8ca 201c 	str.w	r2, [sl, #28]
   831c6:	e739      	b.n	8303c <_realloc_r+0x250>
   831c8:	20070580 	.word	0x20070580

000831cc <_sbrk_r>:
   831cc:	b538      	push	{r3, r4, r5, lr}
   831ce:	4c07      	ldr	r4, [pc, #28]	; (831ec <_sbrk_r+0x20>)
   831d0:	2300      	movs	r3, #0
   831d2:	4605      	mov	r5, r0
   831d4:	4608      	mov	r0, r1
   831d6:	6023      	str	r3, [r4, #0]
   831d8:	f7fd fbb0 	bl	8093c <_sbrk>
   831dc:	1c43      	adds	r3, r0, #1
   831de:	d000      	beq.n	831e2 <_sbrk_r+0x16>
   831e0:	bd38      	pop	{r3, r4, r5, pc}
   831e2:	6823      	ldr	r3, [r4, #0]
   831e4:	2b00      	cmp	r3, #0
   831e6:	d0fb      	beq.n	831e0 <_sbrk_r+0x14>
   831e8:	602b      	str	r3, [r5, #0]
   831ea:	bd38      	pop	{r3, r4, r5, pc}
   831ec:	20070a8c 	.word	0x20070a8c

000831f0 <__sread>:
   831f0:	b510      	push	{r4, lr}
   831f2:	460c      	mov	r4, r1
   831f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   831f8:	f000 f9ea 	bl	835d0 <_read_r>
   831fc:	2800      	cmp	r0, #0
   831fe:	db03      	blt.n	83208 <__sread+0x18>
   83200:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83202:	4403      	add	r3, r0
   83204:	6523      	str	r3, [r4, #80]	; 0x50
   83206:	bd10      	pop	{r4, pc}
   83208:	89a3      	ldrh	r3, [r4, #12]
   8320a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8320e:	81a3      	strh	r3, [r4, #12]
   83210:	bd10      	pop	{r4, pc}
   83212:	bf00      	nop

00083214 <__swrite>:
   83214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83218:	460c      	mov	r4, r1
   8321a:	8989      	ldrh	r1, [r1, #12]
   8321c:	461d      	mov	r5, r3
   8321e:	05cb      	lsls	r3, r1, #23
   83220:	4616      	mov	r6, r2
   83222:	4607      	mov	r7, r0
   83224:	d506      	bpl.n	83234 <__swrite+0x20>
   83226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8322a:	2200      	movs	r2, #0
   8322c:	2302      	movs	r3, #2
   8322e:	f000 f9bb 	bl	835a8 <_lseek_r>
   83232:	89a1      	ldrh	r1, [r4, #12]
   83234:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83238:	81a1      	strh	r1, [r4, #12]
   8323a:	4638      	mov	r0, r7
   8323c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83240:	4632      	mov	r2, r6
   83242:	462b      	mov	r3, r5
   83244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83248:	f000 b8ce 	b.w	833e8 <_write_r>

0008324c <__sseek>:
   8324c:	b510      	push	{r4, lr}
   8324e:	460c      	mov	r4, r1
   83250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83254:	f000 f9a8 	bl	835a8 <_lseek_r>
   83258:	89a3      	ldrh	r3, [r4, #12]
   8325a:	1c42      	adds	r2, r0, #1
   8325c:	bf0e      	itee	eq
   8325e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83266:	6520      	strne	r0, [r4, #80]	; 0x50
   83268:	81a3      	strh	r3, [r4, #12]
   8326a:	bd10      	pop	{r4, pc}

0008326c <__sclose>:
   8326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83270:	f000 b920 	b.w	834b4 <_close_r>

00083274 <strlen>:
   83274:	f020 0103 	bic.w	r1, r0, #3
   83278:	f010 0003 	ands.w	r0, r0, #3
   8327c:	f1c0 0000 	rsb	r0, r0, #0
   83280:	f851 3b04 	ldr.w	r3, [r1], #4
   83284:	f100 0c04 	add.w	ip, r0, #4
   83288:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8328c:	f06f 0200 	mvn.w	r2, #0
   83290:	bf1c      	itt	ne
   83292:	fa22 f20c 	lsrne.w	r2, r2, ip
   83296:	4313      	orrne	r3, r2
   83298:	f04f 0c01 	mov.w	ip, #1
   8329c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   832a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   832a4:	eba3 020c 	sub.w	r2, r3, ip
   832a8:	ea22 0203 	bic.w	r2, r2, r3
   832ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   832b0:	bf04      	itt	eq
   832b2:	f851 3b04 	ldreq.w	r3, [r1], #4
   832b6:	3004      	addeq	r0, #4
   832b8:	d0f4      	beq.n	832a4 <strlen+0x30>
   832ba:	f1c2 0100 	rsb	r1, r2, #0
   832be:	ea02 0201 	and.w	r2, r2, r1
   832c2:	fab2 f282 	clz	r2, r2
   832c6:	f1c2 021f 	rsb	r2, r2, #31
   832ca:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   832ce:	4770      	bx	lr

000832d0 <__swbuf_r>:
   832d0:	b570      	push	{r4, r5, r6, lr}
   832d2:	460d      	mov	r5, r1
   832d4:	4614      	mov	r4, r2
   832d6:	4606      	mov	r6, r0
   832d8:	b110      	cbz	r0, 832e0 <__swbuf_r+0x10>
   832da:	6b83      	ldr	r3, [r0, #56]	; 0x38
   832dc:	2b00      	cmp	r3, #0
   832de:	d048      	beq.n	83372 <__swbuf_r+0xa2>
   832e0:	89a2      	ldrh	r2, [r4, #12]
   832e2:	69a3      	ldr	r3, [r4, #24]
   832e4:	b291      	uxth	r1, r2
   832e6:	0708      	lsls	r0, r1, #28
   832e8:	60a3      	str	r3, [r4, #8]
   832ea:	d538      	bpl.n	8335e <__swbuf_r+0x8e>
   832ec:	6923      	ldr	r3, [r4, #16]
   832ee:	2b00      	cmp	r3, #0
   832f0:	d035      	beq.n	8335e <__swbuf_r+0x8e>
   832f2:	0489      	lsls	r1, r1, #18
   832f4:	b2ed      	uxtb	r5, r5
   832f6:	d515      	bpl.n	83324 <__swbuf_r+0x54>
   832f8:	6822      	ldr	r2, [r4, #0]
   832fa:	6961      	ldr	r1, [r4, #20]
   832fc:	1ad3      	subs	r3, r2, r3
   832fe:	428b      	cmp	r3, r1
   83300:	da1c      	bge.n	8333c <__swbuf_r+0x6c>
   83302:	3301      	adds	r3, #1
   83304:	68a1      	ldr	r1, [r4, #8]
   83306:	1c50      	adds	r0, r2, #1
   83308:	3901      	subs	r1, #1
   8330a:	60a1      	str	r1, [r4, #8]
   8330c:	6020      	str	r0, [r4, #0]
   8330e:	7015      	strb	r5, [r2, #0]
   83310:	6962      	ldr	r2, [r4, #20]
   83312:	429a      	cmp	r2, r3
   83314:	d01a      	beq.n	8334c <__swbuf_r+0x7c>
   83316:	89a3      	ldrh	r3, [r4, #12]
   83318:	07db      	lsls	r3, r3, #31
   8331a:	d501      	bpl.n	83320 <__swbuf_r+0x50>
   8331c:	2d0a      	cmp	r5, #10
   8331e:	d015      	beq.n	8334c <__swbuf_r+0x7c>
   83320:	4628      	mov	r0, r5
   83322:	bd70      	pop	{r4, r5, r6, pc}
   83324:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8332a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8332e:	81a2      	strh	r2, [r4, #12]
   83330:	6822      	ldr	r2, [r4, #0]
   83332:	6661      	str	r1, [r4, #100]	; 0x64
   83334:	6961      	ldr	r1, [r4, #20]
   83336:	1ad3      	subs	r3, r2, r3
   83338:	428b      	cmp	r3, r1
   8333a:	dbe2      	blt.n	83302 <__swbuf_r+0x32>
   8333c:	4630      	mov	r0, r6
   8333e:	4621      	mov	r1, r4
   83340:	f7fe fd28 	bl	81d94 <_fflush_r>
   83344:	b940      	cbnz	r0, 83358 <__swbuf_r+0x88>
   83346:	6822      	ldr	r2, [r4, #0]
   83348:	2301      	movs	r3, #1
   8334a:	e7db      	b.n	83304 <__swbuf_r+0x34>
   8334c:	4630      	mov	r0, r6
   8334e:	4621      	mov	r1, r4
   83350:	f7fe fd20 	bl	81d94 <_fflush_r>
   83354:	2800      	cmp	r0, #0
   83356:	d0e3      	beq.n	83320 <__swbuf_r+0x50>
   83358:	f04f 30ff 	mov.w	r0, #4294967295
   8335c:	bd70      	pop	{r4, r5, r6, pc}
   8335e:	4630      	mov	r0, r6
   83360:	4621      	mov	r1, r4
   83362:	f7fe fc01 	bl	81b68 <__swsetup_r>
   83366:	2800      	cmp	r0, #0
   83368:	d1f6      	bne.n	83358 <__swbuf_r+0x88>
   8336a:	89a2      	ldrh	r2, [r4, #12]
   8336c:	6923      	ldr	r3, [r4, #16]
   8336e:	b291      	uxth	r1, r2
   83370:	e7bf      	b.n	832f2 <__swbuf_r+0x22>
   83372:	f7fe fda3 	bl	81ebc <__sinit>
   83376:	e7b3      	b.n	832e0 <__swbuf_r+0x10>

00083378 <_wcrtomb_r>:
   83378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8337c:	4605      	mov	r5, r0
   8337e:	b086      	sub	sp, #24
   83380:	461e      	mov	r6, r3
   83382:	460c      	mov	r4, r1
   83384:	b1a1      	cbz	r1, 833b0 <_wcrtomb_r+0x38>
   83386:	4b10      	ldr	r3, [pc, #64]	; (833c8 <_wcrtomb_r+0x50>)
   83388:	4617      	mov	r7, r2
   8338a:	f8d3 8000 	ldr.w	r8, [r3]
   8338e:	f7ff f8fd 	bl	8258c <__locale_charset>
   83392:	9600      	str	r6, [sp, #0]
   83394:	4603      	mov	r3, r0
   83396:	4621      	mov	r1, r4
   83398:	463a      	mov	r2, r7
   8339a:	4628      	mov	r0, r5
   8339c:	47c0      	blx	r8
   8339e:	1c43      	adds	r3, r0, #1
   833a0:	d103      	bne.n	833aa <_wcrtomb_r+0x32>
   833a2:	2200      	movs	r2, #0
   833a4:	238a      	movs	r3, #138	; 0x8a
   833a6:	6032      	str	r2, [r6, #0]
   833a8:	602b      	str	r3, [r5, #0]
   833aa:	b006      	add	sp, #24
   833ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   833b0:	4b05      	ldr	r3, [pc, #20]	; (833c8 <_wcrtomb_r+0x50>)
   833b2:	681f      	ldr	r7, [r3, #0]
   833b4:	f7ff f8ea 	bl	8258c <__locale_charset>
   833b8:	9600      	str	r6, [sp, #0]
   833ba:	4603      	mov	r3, r0
   833bc:	4622      	mov	r2, r4
   833be:	4628      	mov	r0, r5
   833c0:	a903      	add	r1, sp, #12
   833c2:	47b8      	blx	r7
   833c4:	e7eb      	b.n	8339e <_wcrtomb_r+0x26>
   833c6:	bf00      	nop
   833c8:	20070990 	.word	0x20070990

000833cc <__ascii_wctomb>:
   833cc:	b121      	cbz	r1, 833d8 <__ascii_wctomb+0xc>
   833ce:	2aff      	cmp	r2, #255	; 0xff
   833d0:	d804      	bhi.n	833dc <__ascii_wctomb+0x10>
   833d2:	700a      	strb	r2, [r1, #0]
   833d4:	2001      	movs	r0, #1
   833d6:	4770      	bx	lr
   833d8:	4608      	mov	r0, r1
   833da:	4770      	bx	lr
   833dc:	238a      	movs	r3, #138	; 0x8a
   833de:	6003      	str	r3, [r0, #0]
   833e0:	f04f 30ff 	mov.w	r0, #4294967295
   833e4:	4770      	bx	lr
   833e6:	bf00      	nop

000833e8 <_write_r>:
   833e8:	b570      	push	{r4, r5, r6, lr}
   833ea:	4c08      	ldr	r4, [pc, #32]	; (8340c <_write_r+0x24>)
   833ec:	4606      	mov	r6, r0
   833ee:	2500      	movs	r5, #0
   833f0:	4608      	mov	r0, r1
   833f2:	4611      	mov	r1, r2
   833f4:	461a      	mov	r2, r3
   833f6:	6025      	str	r5, [r4, #0]
   833f8:	f7fc fefa 	bl	801f0 <_write>
   833fc:	1c43      	adds	r3, r0, #1
   833fe:	d000      	beq.n	83402 <_write_r+0x1a>
   83400:	bd70      	pop	{r4, r5, r6, pc}
   83402:	6823      	ldr	r3, [r4, #0]
   83404:	2b00      	cmp	r3, #0
   83406:	d0fb      	beq.n	83400 <_write_r+0x18>
   83408:	6033      	str	r3, [r6, #0]
   8340a:	bd70      	pop	{r4, r5, r6, pc}
   8340c:	20070a8c 	.word	0x20070a8c

00083410 <__register_exitproc>:
   83410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83414:	4c25      	ldr	r4, [pc, #148]	; (834ac <__register_exitproc+0x9c>)
   83416:	4606      	mov	r6, r0
   83418:	6825      	ldr	r5, [r4, #0]
   8341a:	4688      	mov	r8, r1
   8341c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83420:	4692      	mov	sl, r2
   83422:	4699      	mov	r9, r3
   83424:	b3c4      	cbz	r4, 83498 <__register_exitproc+0x88>
   83426:	6860      	ldr	r0, [r4, #4]
   83428:	281f      	cmp	r0, #31
   8342a:	dc17      	bgt.n	8345c <__register_exitproc+0x4c>
   8342c:	1c41      	adds	r1, r0, #1
   8342e:	b176      	cbz	r6, 8344e <__register_exitproc+0x3e>
   83430:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83434:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83438:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8343c:	2201      	movs	r2, #1
   8343e:	4082      	lsls	r2, r0
   83440:	4315      	orrs	r5, r2
   83442:	2e02      	cmp	r6, #2
   83444:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83448:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8344c:	d01e      	beq.n	8348c <__register_exitproc+0x7c>
   8344e:	1c83      	adds	r3, r0, #2
   83450:	6061      	str	r1, [r4, #4]
   83452:	2000      	movs	r0, #0
   83454:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8345c:	4b14      	ldr	r3, [pc, #80]	; (834b0 <__register_exitproc+0xa0>)
   8345e:	b303      	cbz	r3, 834a2 <__register_exitproc+0x92>
   83460:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83464:	f7ff f90c 	bl	82680 <malloc>
   83468:	4604      	mov	r4, r0
   8346a:	b1d0      	cbz	r0, 834a2 <__register_exitproc+0x92>
   8346c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83470:	2700      	movs	r7, #0
   83472:	e884 0088 	stmia.w	r4, {r3, r7}
   83476:	4638      	mov	r0, r7
   83478:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8347c:	2101      	movs	r1, #1
   8347e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83482:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   83486:	2e00      	cmp	r6, #0
   83488:	d0e1      	beq.n	8344e <__register_exitproc+0x3e>
   8348a:	e7d1      	b.n	83430 <__register_exitproc+0x20>
   8348c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83490:	431a      	orrs	r2, r3
   83492:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   83496:	e7da      	b.n	8344e <__register_exitproc+0x3e>
   83498:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   8349c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   834a0:	e7c1      	b.n	83426 <__register_exitproc+0x16>
   834a2:	f04f 30ff 	mov.w	r0, #4294967295
   834a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   834aa:	bf00      	nop
   834ac:	00083bb8 	.word	0x00083bb8
   834b0:	00082681 	.word	0x00082681

000834b4 <_close_r>:
   834b4:	b538      	push	{r3, r4, r5, lr}
   834b6:	4c07      	ldr	r4, [pc, #28]	; (834d4 <_close_r+0x20>)
   834b8:	2300      	movs	r3, #0
   834ba:	4605      	mov	r5, r0
   834bc:	4608      	mov	r0, r1
   834be:	6023      	str	r3, [r4, #0]
   834c0:	f7fd fa56 	bl	80970 <_close>
   834c4:	1c43      	adds	r3, r0, #1
   834c6:	d000      	beq.n	834ca <_close_r+0x16>
   834c8:	bd38      	pop	{r3, r4, r5, pc}
   834ca:	6823      	ldr	r3, [r4, #0]
   834cc:	2b00      	cmp	r3, #0
   834ce:	d0fb      	beq.n	834c8 <_close_r+0x14>
   834d0:	602b      	str	r3, [r5, #0]
   834d2:	bd38      	pop	{r3, r4, r5, pc}
   834d4:	20070a8c 	.word	0x20070a8c

000834d8 <_fclose_r>:
   834d8:	2900      	cmp	r1, #0
   834da:	d03d      	beq.n	83558 <_fclose_r+0x80>
   834dc:	b570      	push	{r4, r5, r6, lr}
   834de:	4605      	mov	r5, r0
   834e0:	460c      	mov	r4, r1
   834e2:	b108      	cbz	r0, 834e8 <_fclose_r+0x10>
   834e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   834e6:	b37b      	cbz	r3, 83548 <_fclose_r+0x70>
   834e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   834ec:	b90b      	cbnz	r3, 834f2 <_fclose_r+0x1a>
   834ee:	2000      	movs	r0, #0
   834f0:	bd70      	pop	{r4, r5, r6, pc}
   834f2:	4628      	mov	r0, r5
   834f4:	4621      	mov	r1, r4
   834f6:	f7fe fba9 	bl	81c4c <__sflush_r>
   834fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   834fc:	4606      	mov	r6, r0
   834fe:	b133      	cbz	r3, 8350e <_fclose_r+0x36>
   83500:	4628      	mov	r0, r5
   83502:	69e1      	ldr	r1, [r4, #28]
   83504:	4798      	blx	r3
   83506:	2800      	cmp	r0, #0
   83508:	bfb8      	it	lt
   8350a:	f04f 36ff 	movlt.w	r6, #4294967295
   8350e:	89a3      	ldrh	r3, [r4, #12]
   83510:	061b      	lsls	r3, r3, #24
   83512:	d41c      	bmi.n	8354e <_fclose_r+0x76>
   83514:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83516:	b141      	cbz	r1, 8352a <_fclose_r+0x52>
   83518:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8351c:	4299      	cmp	r1, r3
   8351e:	d002      	beq.n	83526 <_fclose_r+0x4e>
   83520:	4628      	mov	r0, r5
   83522:	f7fe fda3 	bl	8206c <_free_r>
   83526:	2300      	movs	r3, #0
   83528:	6323      	str	r3, [r4, #48]	; 0x30
   8352a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8352c:	b121      	cbz	r1, 83538 <_fclose_r+0x60>
   8352e:	4628      	mov	r0, r5
   83530:	f7fe fd9c 	bl	8206c <_free_r>
   83534:	2300      	movs	r3, #0
   83536:	6463      	str	r3, [r4, #68]	; 0x44
   83538:	f7fe fcc6 	bl	81ec8 <__sfp_lock_acquire>
   8353c:	2300      	movs	r3, #0
   8353e:	81a3      	strh	r3, [r4, #12]
   83540:	f7fe fcc4 	bl	81ecc <__sfp_lock_release>
   83544:	4630      	mov	r0, r6
   83546:	bd70      	pop	{r4, r5, r6, pc}
   83548:	f7fe fcb8 	bl	81ebc <__sinit>
   8354c:	e7cc      	b.n	834e8 <_fclose_r+0x10>
   8354e:	4628      	mov	r0, r5
   83550:	6921      	ldr	r1, [r4, #16]
   83552:	f7fe fd8b 	bl	8206c <_free_r>
   83556:	e7dd      	b.n	83514 <_fclose_r+0x3c>
   83558:	2000      	movs	r0, #0
   8355a:	4770      	bx	lr

0008355c <_fstat_r>:
   8355c:	b538      	push	{r3, r4, r5, lr}
   8355e:	4c08      	ldr	r4, [pc, #32]	; (83580 <_fstat_r+0x24>)
   83560:	2300      	movs	r3, #0
   83562:	4605      	mov	r5, r0
   83564:	4608      	mov	r0, r1
   83566:	4611      	mov	r1, r2
   83568:	6023      	str	r3, [r4, #0]
   8356a:	f7fd fa05 	bl	80978 <_fstat>
   8356e:	1c43      	adds	r3, r0, #1
   83570:	d000      	beq.n	83574 <_fstat_r+0x18>
   83572:	bd38      	pop	{r3, r4, r5, pc}
   83574:	6823      	ldr	r3, [r4, #0]
   83576:	2b00      	cmp	r3, #0
   83578:	d0fb      	beq.n	83572 <_fstat_r+0x16>
   8357a:	602b      	str	r3, [r5, #0]
   8357c:	bd38      	pop	{r3, r4, r5, pc}
   8357e:	bf00      	nop
   83580:	20070a8c 	.word	0x20070a8c

00083584 <_isatty_r>:
   83584:	b538      	push	{r3, r4, r5, lr}
   83586:	4c07      	ldr	r4, [pc, #28]	; (835a4 <_isatty_r+0x20>)
   83588:	2300      	movs	r3, #0
   8358a:	4605      	mov	r5, r0
   8358c:	4608      	mov	r0, r1
   8358e:	6023      	str	r3, [r4, #0]
   83590:	f7fd f9f8 	bl	80984 <_isatty>
   83594:	1c43      	adds	r3, r0, #1
   83596:	d000      	beq.n	8359a <_isatty_r+0x16>
   83598:	bd38      	pop	{r3, r4, r5, pc}
   8359a:	6823      	ldr	r3, [r4, #0]
   8359c:	2b00      	cmp	r3, #0
   8359e:	d0fb      	beq.n	83598 <_isatty_r+0x14>
   835a0:	602b      	str	r3, [r5, #0]
   835a2:	bd38      	pop	{r3, r4, r5, pc}
   835a4:	20070a8c 	.word	0x20070a8c

000835a8 <_lseek_r>:
   835a8:	b570      	push	{r4, r5, r6, lr}
   835aa:	4c08      	ldr	r4, [pc, #32]	; (835cc <_lseek_r+0x24>)
   835ac:	4606      	mov	r6, r0
   835ae:	2500      	movs	r5, #0
   835b0:	4608      	mov	r0, r1
   835b2:	4611      	mov	r1, r2
   835b4:	461a      	mov	r2, r3
   835b6:	6025      	str	r5, [r4, #0]
   835b8:	f7fd f9e6 	bl	80988 <_lseek>
   835bc:	1c43      	adds	r3, r0, #1
   835be:	d000      	beq.n	835c2 <_lseek_r+0x1a>
   835c0:	bd70      	pop	{r4, r5, r6, pc}
   835c2:	6823      	ldr	r3, [r4, #0]
   835c4:	2b00      	cmp	r3, #0
   835c6:	d0fb      	beq.n	835c0 <_lseek_r+0x18>
   835c8:	6033      	str	r3, [r6, #0]
   835ca:	bd70      	pop	{r4, r5, r6, pc}
   835cc:	20070a8c 	.word	0x20070a8c

000835d0 <_read_r>:
   835d0:	b570      	push	{r4, r5, r6, lr}
   835d2:	4c08      	ldr	r4, [pc, #32]	; (835f4 <_read_r+0x24>)
   835d4:	4606      	mov	r6, r0
   835d6:	2500      	movs	r5, #0
   835d8:	4608      	mov	r0, r1
   835da:	4611      	mov	r1, r2
   835dc:	461a      	mov	r2, r3
   835de:	6025      	str	r5, [r4, #0]
   835e0:	f7fc fde8 	bl	801b4 <_read>
   835e4:	1c43      	adds	r3, r0, #1
   835e6:	d000      	beq.n	835ea <_read_r+0x1a>
   835e8:	bd70      	pop	{r4, r5, r6, pc}
   835ea:	6823      	ldr	r3, [r4, #0]
   835ec:	2b00      	cmp	r3, #0
   835ee:	d0fb      	beq.n	835e8 <_read_r+0x18>
   835f0:	6033      	str	r3, [r6, #0]
   835f2:	bd70      	pop	{r4, r5, r6, pc}
   835f4:	20070a8c 	.word	0x20070a8c

000835f8 <__aeabi_uldivmod>:
   835f8:	b953      	cbnz	r3, 83610 <__aeabi_uldivmod+0x18>
   835fa:	b94a      	cbnz	r2, 83610 <__aeabi_uldivmod+0x18>
   835fc:	2900      	cmp	r1, #0
   835fe:	bf08      	it	eq
   83600:	2800      	cmpeq	r0, #0
   83602:	bf1c      	itt	ne
   83604:	f04f 31ff 	movne.w	r1, #4294967295
   83608:	f04f 30ff 	movne.w	r0, #4294967295
   8360c:	f000 b83c 	b.w	83688 <__aeabi_idiv0>
   83610:	b082      	sub	sp, #8
   83612:	46ec      	mov	ip, sp
   83614:	e92d 5000 	stmdb	sp!, {ip, lr}
   83618:	f000 f81e 	bl	83658 <__gnu_uldivmod_helper>
   8361c:	f8dd e004 	ldr.w	lr, [sp, #4]
   83620:	b002      	add	sp, #8
   83622:	bc0c      	pop	{r2, r3}
   83624:	4770      	bx	lr
   83626:	bf00      	nop

00083628 <__gnu_ldivmod_helper>:
   83628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8362c:	9c06      	ldr	r4, [sp, #24]
   8362e:	4690      	mov	r8, r2
   83630:	4606      	mov	r6, r0
   83632:	460f      	mov	r7, r1
   83634:	461d      	mov	r5, r3
   83636:	f000 f829 	bl	8368c <__divdi3>
   8363a:	fb08 fc01 	mul.w	ip, r8, r1
   8363e:	fba8 2300 	umull	r2, r3, r8, r0
   83642:	fb00 c505 	mla	r5, r0, r5, ip
   83646:	1ab2      	subs	r2, r6, r2
   83648:	442b      	add	r3, r5
   8364a:	eb67 0303 	sbc.w	r3, r7, r3
   8364e:	4686      	mov	lr, r0
   83650:	e9c4 2300 	strd	r2, r3, [r4]
   83654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083658 <__gnu_uldivmod_helper>:
   83658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8365c:	9e08      	ldr	r6, [sp, #32]
   8365e:	4617      	mov	r7, r2
   83660:	4680      	mov	r8, r0
   83662:	4689      	mov	r9, r1
   83664:	461d      	mov	r5, r3
   83666:	f000 f967 	bl	83938 <__udivdi3>
   8366a:	fb00 f305 	mul.w	r3, r0, r5
   8366e:	fba0 4507 	umull	r4, r5, r0, r7
   83672:	fb07 3701 	mla	r7, r7, r1, r3
   83676:	ebb8 0404 	subs.w	r4, r8, r4
   8367a:	443d      	add	r5, r7
   8367c:	eb69 0505 	sbc.w	r5, r9, r5
   83680:	e9c6 4500 	strd	r4, r5, [r6]
   83684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083688 <__aeabi_idiv0>:
   83688:	4770      	bx	lr
   8368a:	bf00      	nop

0008368c <__divdi3>:
   8368c:	2900      	cmp	r1, #0
   8368e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83692:	f2c0 80a8 	blt.w	837e6 <__divdi3+0x15a>
   83696:	2600      	movs	r6, #0
   83698:	2b00      	cmp	r3, #0
   8369a:	f2c0 809e 	blt.w	837da <__divdi3+0x14e>
   8369e:	4681      	mov	r9, r0
   836a0:	468e      	mov	lr, r1
   836a2:	4690      	mov	r8, r2
   836a4:	469c      	mov	ip, r3
   836a6:	4617      	mov	r7, r2
   836a8:	4604      	mov	r4, r0
   836aa:	460d      	mov	r5, r1
   836ac:	2b00      	cmp	r3, #0
   836ae:	d13d      	bne.n	8372c <__divdi3+0xa0>
   836b0:	428a      	cmp	r2, r1
   836b2:	d959      	bls.n	83768 <__divdi3+0xdc>
   836b4:	fab2 f382 	clz	r3, r2
   836b8:	b13b      	cbz	r3, 836ca <__divdi3+0x3e>
   836ba:	f1c3 0220 	rsb	r2, r3, #32
   836be:	409d      	lsls	r5, r3
   836c0:	fa20 f202 	lsr.w	r2, r0, r2
   836c4:	409f      	lsls	r7, r3
   836c6:	4315      	orrs	r5, r2
   836c8:	409c      	lsls	r4, r3
   836ca:	0c39      	lsrs	r1, r7, #16
   836cc:	fbb5 f0f1 	udiv	r0, r5, r1
   836d0:	fa1f fe87 	uxth.w	lr, r7
   836d4:	fb01 5510 	mls	r5, r1, r0, r5
   836d8:	fb0e f300 	mul.w	r3, lr, r0
   836dc:	0c22      	lsrs	r2, r4, #16
   836de:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   836e2:	42ab      	cmp	r3, r5
   836e4:	d909      	bls.n	836fa <__divdi3+0x6e>
   836e6:	19ed      	adds	r5, r5, r7
   836e8:	f100 32ff 	add.w	r2, r0, #4294967295
   836ec:	f080 810b 	bcs.w	83906 <__divdi3+0x27a>
   836f0:	42ab      	cmp	r3, r5
   836f2:	f240 8108 	bls.w	83906 <__divdi3+0x27a>
   836f6:	3802      	subs	r0, #2
   836f8:	443d      	add	r5, r7
   836fa:	1aed      	subs	r5, r5, r3
   836fc:	fbb5 f3f1 	udiv	r3, r5, r1
   83700:	fb01 5513 	mls	r5, r1, r3, r5
   83704:	fb0e fe03 	mul.w	lr, lr, r3
   83708:	b2a4      	uxth	r4, r4
   8370a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   8370e:	45ae      	cmp	lr, r5
   83710:	d908      	bls.n	83724 <__divdi3+0x98>
   83712:	19ed      	adds	r5, r5, r7
   83714:	f103 32ff 	add.w	r2, r3, #4294967295
   83718:	f080 80f7 	bcs.w	8390a <__divdi3+0x27e>
   8371c:	45ae      	cmp	lr, r5
   8371e:	f240 80f4 	bls.w	8390a <__divdi3+0x27e>
   83722:	3b02      	subs	r3, #2
   83724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83728:	2200      	movs	r2, #0
   8372a:	e003      	b.n	83734 <__divdi3+0xa8>
   8372c:	428b      	cmp	r3, r1
   8372e:	d90f      	bls.n	83750 <__divdi3+0xc4>
   83730:	2200      	movs	r2, #0
   83732:	4613      	mov	r3, r2
   83734:	1c34      	adds	r4, r6, #0
   83736:	bf18      	it	ne
   83738:	2401      	movne	r4, #1
   8373a:	4260      	negs	r0, r4
   8373c:	f04f 0500 	mov.w	r5, #0
   83740:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   83744:	4058      	eors	r0, r3
   83746:	4051      	eors	r1, r2
   83748:	1900      	adds	r0, r0, r4
   8374a:	4169      	adcs	r1, r5
   8374c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83750:	fab3 f283 	clz	r2, r3
   83754:	2a00      	cmp	r2, #0
   83756:	f040 8089 	bne.w	8386c <__divdi3+0x1e0>
   8375a:	428b      	cmp	r3, r1
   8375c:	d302      	bcc.n	83764 <__divdi3+0xd8>
   8375e:	4580      	cmp	r8, r0
   83760:	f200 80e2 	bhi.w	83928 <__divdi3+0x29c>
   83764:	2301      	movs	r3, #1
   83766:	e7e5      	b.n	83734 <__divdi3+0xa8>
   83768:	b912      	cbnz	r2, 83770 <__divdi3+0xe4>
   8376a:	2301      	movs	r3, #1
   8376c:	fbb3 f7f2 	udiv	r7, r3, r2
   83770:	fab7 f887 	clz	r8, r7
   83774:	f1b8 0f00 	cmp.w	r8, #0
   83778:	d13b      	bne.n	837f2 <__divdi3+0x166>
   8377a:	1bed      	subs	r5, r5, r7
   8377c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83780:	fa1f fe87 	uxth.w	lr, r7
   83784:	2201      	movs	r2, #1
   83786:	fbb5 f0fc 	udiv	r0, r5, ip
   8378a:	fb0c 5510 	mls	r5, ip, r0, r5
   8378e:	fb0e f300 	mul.w	r3, lr, r0
   83792:	0c21      	lsrs	r1, r4, #16
   83794:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   83798:	42ab      	cmp	r3, r5
   8379a:	d907      	bls.n	837ac <__divdi3+0x120>
   8379c:	19ed      	adds	r5, r5, r7
   8379e:	f100 31ff 	add.w	r1, r0, #4294967295
   837a2:	d202      	bcs.n	837aa <__divdi3+0x11e>
   837a4:	42ab      	cmp	r3, r5
   837a6:	f200 80c3 	bhi.w	83930 <__divdi3+0x2a4>
   837aa:	4608      	mov	r0, r1
   837ac:	1aed      	subs	r5, r5, r3
   837ae:	fbb5 f3fc 	udiv	r3, r5, ip
   837b2:	fb0c 5513 	mls	r5, ip, r3, r5
   837b6:	fb0e fe03 	mul.w	lr, lr, r3
   837ba:	b2a4      	uxth	r4, r4
   837bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   837c0:	45ae      	cmp	lr, r5
   837c2:	d907      	bls.n	837d4 <__divdi3+0x148>
   837c4:	19ed      	adds	r5, r5, r7
   837c6:	f103 31ff 	add.w	r1, r3, #4294967295
   837ca:	d202      	bcs.n	837d2 <__divdi3+0x146>
   837cc:	45ae      	cmp	lr, r5
   837ce:	f200 80ad 	bhi.w	8392c <__divdi3+0x2a0>
   837d2:	460b      	mov	r3, r1
   837d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   837d8:	e7ac      	b.n	83734 <__divdi3+0xa8>
   837da:	4252      	negs	r2, r2
   837dc:	ea6f 0606 	mvn.w	r6, r6
   837e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   837e4:	e75b      	b.n	8369e <__divdi3+0x12>
   837e6:	4240      	negs	r0, r0
   837e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   837ec:	f04f 36ff 	mov.w	r6, #4294967295
   837f0:	e752      	b.n	83698 <__divdi3+0xc>
   837f2:	fa07 f708 	lsl.w	r7, r7, r8
   837f6:	f1c8 0220 	rsb	r2, r8, #32
   837fa:	fa25 f302 	lsr.w	r3, r5, r2
   837fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83802:	fbb3 f1fc 	udiv	r1, r3, ip
   83806:	fa1f fe87 	uxth.w	lr, r7
   8380a:	fb0c 3311 	mls	r3, ip, r1, r3
   8380e:	fa24 f202 	lsr.w	r2, r4, r2
   83812:	fa05 f508 	lsl.w	r5, r5, r8
   83816:	fb0e f901 	mul.w	r9, lr, r1
   8381a:	432a      	orrs	r2, r5
   8381c:	0c10      	lsrs	r0, r2, #16
   8381e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   83822:	4599      	cmp	r9, r3
   83824:	fa04 f408 	lsl.w	r4, r4, r8
   83828:	d907      	bls.n	8383a <__divdi3+0x1ae>
   8382a:	19db      	adds	r3, r3, r7
   8382c:	f101 30ff 	add.w	r0, r1, #4294967295
   83830:	d278      	bcs.n	83924 <__divdi3+0x298>
   83832:	4599      	cmp	r9, r3
   83834:	d976      	bls.n	83924 <__divdi3+0x298>
   83836:	3902      	subs	r1, #2
   83838:	443b      	add	r3, r7
   8383a:	ebc9 0303 	rsb	r3, r9, r3
   8383e:	fbb3 f0fc 	udiv	r0, r3, ip
   83842:	fb0c 3310 	mls	r3, ip, r0, r3
   83846:	fb0e f500 	mul.w	r5, lr, r0
   8384a:	b292      	uxth	r2, r2
   8384c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83850:	429d      	cmp	r5, r3
   83852:	d907      	bls.n	83864 <__divdi3+0x1d8>
   83854:	19db      	adds	r3, r3, r7
   83856:	f100 32ff 	add.w	r2, r0, #4294967295
   8385a:	d25f      	bcs.n	8391c <__divdi3+0x290>
   8385c:	429d      	cmp	r5, r3
   8385e:	d95d      	bls.n	8391c <__divdi3+0x290>
   83860:	3802      	subs	r0, #2
   83862:	443b      	add	r3, r7
   83864:	1b5d      	subs	r5, r3, r5
   83866:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   8386a:	e78c      	b.n	83786 <__divdi3+0xfa>
   8386c:	f1c2 0320 	rsb	r3, r2, #32
   83870:	fa28 f103 	lsr.w	r1, r8, r3
   83874:	fa0c fc02 	lsl.w	ip, ip, r2
   83878:	ea41 0c0c 	orr.w	ip, r1, ip
   8387c:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83880:	fa2e f103 	lsr.w	r1, lr, r3
   83884:	fbb1 f5f0 	udiv	r5, r1, r0
   83888:	fa1f f78c 	uxth.w	r7, ip
   8388c:	fb00 1115 	mls	r1, r0, r5, r1
   83890:	fa29 f303 	lsr.w	r3, r9, r3
   83894:	fa0e fe02 	lsl.w	lr, lr, r2
   83898:	fb07 f905 	mul.w	r9, r7, r5
   8389c:	ea43 0e0e 	orr.w	lr, r3, lr
   838a0:	ea4f 431e 	mov.w	r3, lr, lsr #16
   838a4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   838a8:	4589      	cmp	r9, r1
   838aa:	fa08 f802 	lsl.w	r8, r8, r2
   838ae:	d908      	bls.n	838c2 <__divdi3+0x236>
   838b0:	eb11 010c 	adds.w	r1, r1, ip
   838b4:	f105 33ff 	add.w	r3, r5, #4294967295
   838b8:	d232      	bcs.n	83920 <__divdi3+0x294>
   838ba:	4589      	cmp	r9, r1
   838bc:	d930      	bls.n	83920 <__divdi3+0x294>
   838be:	3d02      	subs	r5, #2
   838c0:	4461      	add	r1, ip
   838c2:	ebc9 0101 	rsb	r1, r9, r1
   838c6:	fbb1 f3f0 	udiv	r3, r1, r0
   838ca:	fb00 1113 	mls	r1, r0, r3, r1
   838ce:	fb07 f703 	mul.w	r7, r7, r3
   838d2:	fa1f fe8e 	uxth.w	lr, lr
   838d6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   838da:	4577      	cmp	r7, lr
   838dc:	d908      	bls.n	838f0 <__divdi3+0x264>
   838de:	eb1e 0e0c 	adds.w	lr, lr, ip
   838e2:	f103 31ff 	add.w	r1, r3, #4294967295
   838e6:	d217      	bcs.n	83918 <__divdi3+0x28c>
   838e8:	4577      	cmp	r7, lr
   838ea:	d915      	bls.n	83918 <__divdi3+0x28c>
   838ec:	3b02      	subs	r3, #2
   838ee:	44e6      	add	lr, ip
   838f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   838f4:	fba3 8908 	umull	r8, r9, r3, r8
   838f8:	ebc7 0e0e 	rsb	lr, r7, lr
   838fc:	45ce      	cmp	lr, r9
   838fe:	d309      	bcc.n	83914 <__divdi3+0x288>
   83900:	d005      	beq.n	8390e <__divdi3+0x282>
   83902:	2200      	movs	r2, #0
   83904:	e716      	b.n	83734 <__divdi3+0xa8>
   83906:	4610      	mov	r0, r2
   83908:	e6f7      	b.n	836fa <__divdi3+0x6e>
   8390a:	4613      	mov	r3, r2
   8390c:	e70a      	b.n	83724 <__divdi3+0x98>
   8390e:	4094      	lsls	r4, r2
   83910:	4544      	cmp	r4, r8
   83912:	d2f6      	bcs.n	83902 <__divdi3+0x276>
   83914:	3b01      	subs	r3, #1
   83916:	e7f4      	b.n	83902 <__divdi3+0x276>
   83918:	460b      	mov	r3, r1
   8391a:	e7e9      	b.n	838f0 <__divdi3+0x264>
   8391c:	4610      	mov	r0, r2
   8391e:	e7a1      	b.n	83864 <__divdi3+0x1d8>
   83920:	461d      	mov	r5, r3
   83922:	e7ce      	b.n	838c2 <__divdi3+0x236>
   83924:	4601      	mov	r1, r0
   83926:	e788      	b.n	8383a <__divdi3+0x1ae>
   83928:	4613      	mov	r3, r2
   8392a:	e703      	b.n	83734 <__divdi3+0xa8>
   8392c:	3b02      	subs	r3, #2
   8392e:	e751      	b.n	837d4 <__divdi3+0x148>
   83930:	3802      	subs	r0, #2
   83932:	443d      	add	r5, r7
   83934:	e73a      	b.n	837ac <__divdi3+0x120>
   83936:	bf00      	nop

00083938 <__udivdi3>:
   83938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8393c:	2b00      	cmp	r3, #0
   8393e:	d144      	bne.n	839ca <__udivdi3+0x92>
   83940:	428a      	cmp	r2, r1
   83942:	4615      	mov	r5, r2
   83944:	4604      	mov	r4, r0
   83946:	d94f      	bls.n	839e8 <__udivdi3+0xb0>
   83948:	fab2 f782 	clz	r7, r2
   8394c:	460e      	mov	r6, r1
   8394e:	b14f      	cbz	r7, 83964 <__udivdi3+0x2c>
   83950:	f1c7 0320 	rsb	r3, r7, #32
   83954:	40b9      	lsls	r1, r7
   83956:	fa20 f603 	lsr.w	r6, r0, r3
   8395a:	fa02 f507 	lsl.w	r5, r2, r7
   8395e:	430e      	orrs	r6, r1
   83960:	fa00 f407 	lsl.w	r4, r0, r7
   83964:	0c2f      	lsrs	r7, r5, #16
   83966:	fbb6 f0f7 	udiv	r0, r6, r7
   8396a:	fa1f fe85 	uxth.w	lr, r5
   8396e:	fb07 6210 	mls	r2, r7, r0, r6
   83972:	fb0e f100 	mul.w	r1, lr, r0
   83976:	0c26      	lsrs	r6, r4, #16
   83978:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   8397c:	4299      	cmp	r1, r3
   8397e:	d909      	bls.n	83994 <__udivdi3+0x5c>
   83980:	195b      	adds	r3, r3, r5
   83982:	f100 32ff 	add.w	r2, r0, #4294967295
   83986:	f080 80ee 	bcs.w	83b66 <__udivdi3+0x22e>
   8398a:	4299      	cmp	r1, r3
   8398c:	f240 80eb 	bls.w	83b66 <__udivdi3+0x22e>
   83990:	3802      	subs	r0, #2
   83992:	442b      	add	r3, r5
   83994:	1a59      	subs	r1, r3, r1
   83996:	fbb1 f3f7 	udiv	r3, r1, r7
   8399a:	fb07 1113 	mls	r1, r7, r3, r1
   8399e:	fb0e fe03 	mul.w	lr, lr, r3
   839a2:	b2a4      	uxth	r4, r4
   839a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   839a8:	458e      	cmp	lr, r1
   839aa:	d908      	bls.n	839be <__udivdi3+0x86>
   839ac:	1949      	adds	r1, r1, r5
   839ae:	f103 32ff 	add.w	r2, r3, #4294967295
   839b2:	f080 80da 	bcs.w	83b6a <__udivdi3+0x232>
   839b6:	458e      	cmp	lr, r1
   839b8:	f240 80d7 	bls.w	83b6a <__udivdi3+0x232>
   839bc:	3b02      	subs	r3, #2
   839be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   839c2:	2600      	movs	r6, #0
   839c4:	4631      	mov	r1, r6
   839c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839ca:	428b      	cmp	r3, r1
   839cc:	d847      	bhi.n	83a5e <__udivdi3+0x126>
   839ce:	fab3 f683 	clz	r6, r3
   839d2:	2e00      	cmp	r6, #0
   839d4:	d148      	bne.n	83a68 <__udivdi3+0x130>
   839d6:	428b      	cmp	r3, r1
   839d8:	d302      	bcc.n	839e0 <__udivdi3+0xa8>
   839da:	4282      	cmp	r2, r0
   839dc:	f200 80cf 	bhi.w	83b7e <__udivdi3+0x246>
   839e0:	2001      	movs	r0, #1
   839e2:	4631      	mov	r1, r6
   839e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839e8:	b912      	cbnz	r2, 839f0 <__udivdi3+0xb8>
   839ea:	2501      	movs	r5, #1
   839ec:	fbb5 f5f2 	udiv	r5, r5, r2
   839f0:	fab5 fc85 	clz	ip, r5
   839f4:	f1bc 0f00 	cmp.w	ip, #0
   839f8:	d178      	bne.n	83aec <__udivdi3+0x1b4>
   839fa:	1b49      	subs	r1, r1, r5
   839fc:	0c2f      	lsrs	r7, r5, #16
   839fe:	fa1f fe85 	uxth.w	lr, r5
   83a02:	2601      	movs	r6, #1
   83a04:	fbb1 f0f7 	udiv	r0, r1, r7
   83a08:	fb07 1110 	mls	r1, r7, r0, r1
   83a0c:	fb0e f200 	mul.w	r2, lr, r0
   83a10:	0c23      	lsrs	r3, r4, #16
   83a12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83a16:	428a      	cmp	r2, r1
   83a18:	d907      	bls.n	83a2a <__udivdi3+0xf2>
   83a1a:	1949      	adds	r1, r1, r5
   83a1c:	f100 33ff 	add.w	r3, r0, #4294967295
   83a20:	d202      	bcs.n	83a28 <__udivdi3+0xf0>
   83a22:	428a      	cmp	r2, r1
   83a24:	f200 80bc 	bhi.w	83ba0 <__udivdi3+0x268>
   83a28:	4618      	mov	r0, r3
   83a2a:	1a89      	subs	r1, r1, r2
   83a2c:	fbb1 f3f7 	udiv	r3, r1, r7
   83a30:	fb07 1113 	mls	r1, r7, r3, r1
   83a34:	fb0e fe03 	mul.w	lr, lr, r3
   83a38:	b2a4      	uxth	r4, r4
   83a3a:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   83a3e:	4596      	cmp	lr, r2
   83a40:	d908      	bls.n	83a54 <__udivdi3+0x11c>
   83a42:	1952      	adds	r2, r2, r5
   83a44:	f103 31ff 	add.w	r1, r3, #4294967295
   83a48:	f080 8091 	bcs.w	83b6e <__udivdi3+0x236>
   83a4c:	4596      	cmp	lr, r2
   83a4e:	f240 808e 	bls.w	83b6e <__udivdi3+0x236>
   83a52:	3b02      	subs	r3, #2
   83a54:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83a58:	4631      	mov	r1, r6
   83a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a5e:	2600      	movs	r6, #0
   83a60:	4630      	mov	r0, r6
   83a62:	4631      	mov	r1, r6
   83a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a68:	f1c6 0420 	rsb	r4, r6, #32
   83a6c:	fa22 f504 	lsr.w	r5, r2, r4
   83a70:	40b3      	lsls	r3, r6
   83a72:	432b      	orrs	r3, r5
   83a74:	fa21 f704 	lsr.w	r7, r1, r4
   83a78:	ea4f 4813 	mov.w	r8, r3, lsr #16
   83a7c:	fbb7 fcf8 	udiv	ip, r7, r8
   83a80:	fa1f f983 	uxth.w	r9, r3
   83a84:	fb08 771c 	mls	r7, r8, ip, r7
   83a88:	fa20 fe04 	lsr.w	lr, r0, r4
   83a8c:	fa01 f506 	lsl.w	r5, r1, r6
   83a90:	fb09 f40c 	mul.w	r4, r9, ip
   83a94:	ea4e 0505 	orr.w	r5, lr, r5
   83a98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   83a9c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   83aa0:	42bc      	cmp	r4, r7
   83aa2:	fa02 f206 	lsl.w	r2, r2, r6
   83aa6:	d904      	bls.n	83ab2 <__udivdi3+0x17a>
   83aa8:	18ff      	adds	r7, r7, r3
   83aaa:	f10c 31ff 	add.w	r1, ip, #4294967295
   83aae:	d368      	bcc.n	83b82 <__udivdi3+0x24a>
   83ab0:	468c      	mov	ip, r1
   83ab2:	1b3f      	subs	r7, r7, r4
   83ab4:	fbb7 f4f8 	udiv	r4, r7, r8
   83ab8:	fb08 7714 	mls	r7, r8, r4, r7
   83abc:	fb09 f904 	mul.w	r9, r9, r4
   83ac0:	b2ad      	uxth	r5, r5
   83ac2:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   83ac6:	4589      	cmp	r9, r1
   83ac8:	d904      	bls.n	83ad4 <__udivdi3+0x19c>
   83aca:	18c9      	adds	r1, r1, r3
   83acc:	f104 35ff 	add.w	r5, r4, #4294967295
   83ad0:	d35d      	bcc.n	83b8e <__udivdi3+0x256>
   83ad2:	462c      	mov	r4, r5
   83ad4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   83ad8:	fba4 2302 	umull	r2, r3, r4, r2
   83adc:	ebc9 0101 	rsb	r1, r9, r1
   83ae0:	4299      	cmp	r1, r3
   83ae2:	d349      	bcc.n	83b78 <__udivdi3+0x240>
   83ae4:	d045      	beq.n	83b72 <__udivdi3+0x23a>
   83ae6:	4620      	mov	r0, r4
   83ae8:	2600      	movs	r6, #0
   83aea:	e76b      	b.n	839c4 <__udivdi3+0x8c>
   83aec:	f1cc 0420 	rsb	r4, ip, #32
   83af0:	fa05 f50c 	lsl.w	r5, r5, ip
   83af4:	fa21 f304 	lsr.w	r3, r1, r4
   83af8:	0c2a      	lsrs	r2, r5, #16
   83afa:	fbb3 f6f2 	udiv	r6, r3, r2
   83afe:	fa1f fe85 	uxth.w	lr, r5
   83b02:	fb02 3816 	mls	r8, r2, r6, r3
   83b06:	fa20 f704 	lsr.w	r7, r0, r4
   83b0a:	fa01 f10c 	lsl.w	r1, r1, ip
   83b0e:	fb0e f906 	mul.w	r9, lr, r6
   83b12:	430f      	orrs	r7, r1
   83b14:	0c3c      	lsrs	r4, r7, #16
   83b16:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   83b1a:	4599      	cmp	r9, r3
   83b1c:	fa00 f40c 	lsl.w	r4, r0, ip
   83b20:	d907      	bls.n	83b32 <__udivdi3+0x1fa>
   83b22:	195b      	adds	r3, r3, r5
   83b24:	f106 31ff 	add.w	r1, r6, #4294967295
   83b28:	d238      	bcs.n	83b9c <__udivdi3+0x264>
   83b2a:	4599      	cmp	r9, r3
   83b2c:	d936      	bls.n	83b9c <__udivdi3+0x264>
   83b2e:	3e02      	subs	r6, #2
   83b30:	442b      	add	r3, r5
   83b32:	ebc9 0303 	rsb	r3, r9, r3
   83b36:	fbb3 f0f2 	udiv	r0, r3, r2
   83b3a:	fb02 3310 	mls	r3, r2, r0, r3
   83b3e:	fb0e f100 	mul.w	r1, lr, r0
   83b42:	b2bf      	uxth	r7, r7
   83b44:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   83b48:	4299      	cmp	r1, r3
   83b4a:	d907      	bls.n	83b5c <__udivdi3+0x224>
   83b4c:	195b      	adds	r3, r3, r5
   83b4e:	f100 37ff 	add.w	r7, r0, #4294967295
   83b52:	d221      	bcs.n	83b98 <__udivdi3+0x260>
   83b54:	4299      	cmp	r1, r3
   83b56:	d91f      	bls.n	83b98 <__udivdi3+0x260>
   83b58:	3802      	subs	r0, #2
   83b5a:	442b      	add	r3, r5
   83b5c:	4617      	mov	r7, r2
   83b5e:	1a59      	subs	r1, r3, r1
   83b60:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   83b64:	e74e      	b.n	83a04 <__udivdi3+0xcc>
   83b66:	4610      	mov	r0, r2
   83b68:	e714      	b.n	83994 <__udivdi3+0x5c>
   83b6a:	4613      	mov	r3, r2
   83b6c:	e727      	b.n	839be <__udivdi3+0x86>
   83b6e:	460b      	mov	r3, r1
   83b70:	e770      	b.n	83a54 <__udivdi3+0x11c>
   83b72:	40b0      	lsls	r0, r6
   83b74:	4290      	cmp	r0, r2
   83b76:	d2b6      	bcs.n	83ae6 <__udivdi3+0x1ae>
   83b78:	1e60      	subs	r0, r4, #1
   83b7a:	2600      	movs	r6, #0
   83b7c:	e722      	b.n	839c4 <__udivdi3+0x8c>
   83b7e:	4630      	mov	r0, r6
   83b80:	e720      	b.n	839c4 <__udivdi3+0x8c>
   83b82:	42bc      	cmp	r4, r7
   83b84:	d994      	bls.n	83ab0 <__udivdi3+0x178>
   83b86:	f1ac 0c02 	sub.w	ip, ip, #2
   83b8a:	441f      	add	r7, r3
   83b8c:	e791      	b.n	83ab2 <__udivdi3+0x17a>
   83b8e:	4589      	cmp	r9, r1
   83b90:	d99f      	bls.n	83ad2 <__udivdi3+0x19a>
   83b92:	3c02      	subs	r4, #2
   83b94:	4419      	add	r1, r3
   83b96:	e79d      	b.n	83ad4 <__udivdi3+0x19c>
   83b98:	4638      	mov	r0, r7
   83b9a:	e7df      	b.n	83b5c <__udivdi3+0x224>
   83b9c:	460e      	mov	r6, r1
   83b9e:	e7c8      	b.n	83b32 <__udivdi3+0x1fa>
   83ba0:	3802      	subs	r0, #2
   83ba2:	4429      	add	r1, r5
   83ba4:	e741      	b.n	83a2a <__udivdi3+0xf2>
   83ba6:	bf00      	nop
   83ba8:	3a3a6425 	.word	0x3a3a6425
   83bac:	00000000 	.word	0x00000000
   83bb0:	00000a0d 	.word	0x00000a0d
   83bb4:	00000043 	.word	0x00000043

00083bb8 <_global_impure_ptr>:
   83bb8:	20070130                                0.. 

00083bbc <zeroes.6869>:
   83bbc:	30303030 30303030 30303030 30303030     0000000000000000
   83bcc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   83bdc:	00000000 33323130 37363534 62613938     ....0123456789ab
   83bec:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00083bfc <blanks.6868>:
   83bfc:	20202020 20202020 20202020 20202020                     

00083c0c <_init>:
   83c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c0e:	bf00      	nop
   83c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c12:	bc08      	pop	{r3}
   83c14:	469e      	mov	lr, r3
   83c16:	4770      	bx	lr

00083c18 <__init_array_start>:
   83c18:	00081c2d 	.word	0x00081c2d

00083c1c <__frame_dummy_init_array_entry>:
   83c1c:	00080119                                ....

00083c20 <_fini>:
   83c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c22:	bf00      	nop
   83c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c26:	bc08      	pop	{r3}
   83c28:	469e      	mov	lr, r3
   83c2a:	4770      	bx	lr

00083c2c <__fini_array_start>:
   83c2c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00083bb4 00000000 00000000 00000000     .;..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	000833cd                                .3..
