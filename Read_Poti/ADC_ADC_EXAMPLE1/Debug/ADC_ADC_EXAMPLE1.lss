
ADC_ADC_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ce0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083ce0  00083ce0  0000bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00083ce8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d8  20070994  0008467c  00010994  2**2
                  ALLOC
  4 .stack        00002004  20070a6c  00084754  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a372  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bff  00000000  00000000  0001ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000042c3  00000000  00000000  0001c989  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a40  00000000  00000000  00020c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000950  00000000  00000000  0002168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000170cc  00000000  00000000  00021fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b83d  00000000  00000000  000390a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063586  00000000  00000000  000448e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002284  00000000  00000000  000a7e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a70 	.word	0x20072a70
   80004:	00080a61 	.word	0x00080a61
   80008:	00080a5d 	.word	0x00080a5d
   8000c:	00080a5d 	.word	0x00080a5d
   80010:	00080a5d 	.word	0x00080a5d
   80014:	00080a5d 	.word	0x00080a5d
   80018:	00080a5d 	.word	0x00080a5d
	...
   8002c:	00080a5d 	.word	0x00080a5d
   80030:	00080a5d 	.word	0x00080a5d
   80034:	00000000 	.word	0x00000000
   80038:	00080a5d 	.word	0x00080a5d
   8003c:	00080a5d 	.word	0x00080a5d
   80040:	00080a5d 	.word	0x00080a5d
   80044:	00080a5d 	.word	0x00080a5d
   80048:	00080a5d 	.word	0x00080a5d
   8004c:	00080a5d 	.word	0x00080a5d
   80050:	00080a5d 	.word	0x00080a5d
   80054:	00080a5d 	.word	0x00080a5d
   80058:	00080a5d 	.word	0x00080a5d
   8005c:	00080a5d 	.word	0x00080a5d
   80060:	00080a5d 	.word	0x00080a5d
   80064:	00080a5d 	.word	0x00080a5d
   80068:	00000000 	.word	0x00000000
   8006c:	00080845 	.word	0x00080845
   80070:	00080859 	.word	0x00080859
   80074:	0008086d 	.word	0x0008086d
   80078:	00080881 	.word	0x00080881
	...
   80084:	00080a5d 	.word	0x00080a5d
   80088:	00080a5d 	.word	0x00080a5d
   8008c:	00080a5d 	.word	0x00080a5d
   80090:	00080a5d 	.word	0x00080a5d
   80094:	00080a5d 	.word	0x00080a5d
   80098:	00080a5d 	.word	0x00080a5d
   8009c:	00080a5d 	.word	0x00080a5d
   800a0:	00080a5d 	.word	0x00080a5d
   800a4:	00000000 	.word	0x00000000
   800a8:	00080a5d 	.word	0x00080a5d
   800ac:	00080a5d 	.word	0x00080a5d
   800b0:	00080a5d 	.word	0x00080a5d
   800b4:	00080a5d 	.word	0x00080a5d
   800b8:	00080a5d 	.word	0x00080a5d
   800bc:	00080a5d 	.word	0x00080a5d
   800c0:	00080a5d 	.word	0x00080a5d
   800c4:	00080a5d 	.word	0x00080a5d
   800c8:	00080a5d 	.word	0x00080a5d
   800cc:	00080a5d 	.word	0x00080a5d
   800d0:	00080a5d 	.word	0x00080a5d
   800d4:	00080295 	.word	0x00080295
   800d8:	00080a5d 	.word	0x00080a5d
   800dc:	00080a5d 	.word	0x00080a5d
   800e0:	00080a5d 	.word	0x00080a5d
   800e4:	00080a5d 	.word	0x00080a5d
   800e8:	00080a5d 	.word	0x00080a5d
   800ec:	00080a5d 	.word	0x00080a5d
   800f0:	00080a5d 	.word	0x00080a5d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00083ce8 	.word	0x00083ce8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00083ce8 	.word	0x00083ce8
   80144:	20070998 	.word	0x20070998
   80148:	00083ce8 	.word	0x00083ce8
   8014c:	00000000 	.word	0x00000000

00080150 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80150:	b5f0      	push	{r4, r5, r6, r7, lr}
   80152:	b083      	sub	sp, #12
   80154:	4604      	mov	r4, r0
   80156:	460d      	mov	r5, r1
	uint32_t val = 0;
   80158:	2300      	movs	r3, #0
   8015a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8015c:	4b1f      	ldr	r3, [pc, #124]	; (801dc <usart_serial_getchar+0x8c>)
   8015e:	4298      	cmp	r0, r3
   80160:	d107      	bne.n	80172 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80162:	461f      	mov	r7, r3
   80164:	4e1e      	ldr	r6, [pc, #120]	; (801e0 <usart_serial_getchar+0x90>)
   80166:	4638      	mov	r0, r7
   80168:	4629      	mov	r1, r5
   8016a:	47b0      	blx	r6
   8016c:	2800      	cmp	r0, #0
   8016e:	d1fa      	bne.n	80166 <usart_serial_getchar+0x16>
   80170:	e019      	b.n	801a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80172:	4b1c      	ldr	r3, [pc, #112]	; (801e4 <usart_serial_getchar+0x94>)
   80174:	4298      	cmp	r0, r3
   80176:	d109      	bne.n	8018c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80178:	461f      	mov	r7, r3
   8017a:	4e1b      	ldr	r6, [pc, #108]	; (801e8 <usart_serial_getchar+0x98>)
   8017c:	4638      	mov	r0, r7
   8017e:	a901      	add	r1, sp, #4
   80180:	47b0      	blx	r6
   80182:	2800      	cmp	r0, #0
   80184:	d1fa      	bne.n	8017c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80186:	9b01      	ldr	r3, [sp, #4]
   80188:	702b      	strb	r3, [r5, #0]
   8018a:	e019      	b.n	801c0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8018c:	4b17      	ldr	r3, [pc, #92]	; (801ec <usart_serial_getchar+0x9c>)
   8018e:	4298      	cmp	r0, r3
   80190:	d109      	bne.n	801a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80192:	461e      	mov	r6, r3
   80194:	4c14      	ldr	r4, [pc, #80]	; (801e8 <usart_serial_getchar+0x98>)
   80196:	4630      	mov	r0, r6
   80198:	a901      	add	r1, sp, #4
   8019a:	47a0      	blx	r4
   8019c:	2800      	cmp	r0, #0
   8019e:	d1fa      	bne.n	80196 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   801a0:	9b01      	ldr	r3, [sp, #4]
   801a2:	702b      	strb	r3, [r5, #0]
   801a4:	e018      	b.n	801d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801a6:	4b12      	ldr	r3, [pc, #72]	; (801f0 <usart_serial_getchar+0xa0>)
   801a8:	429c      	cmp	r4, r3
   801aa:	d109      	bne.n	801c0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   801ac:	461e      	mov	r6, r3
   801ae:	4c0e      	ldr	r4, [pc, #56]	; (801e8 <usart_serial_getchar+0x98>)
   801b0:	4630      	mov	r0, r6
   801b2:	a901      	add	r1, sp, #4
   801b4:	47a0      	blx	r4
   801b6:	2800      	cmp	r0, #0
   801b8:	d1fa      	bne.n	801b0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   801ba:	9b01      	ldr	r3, [sp, #4]
   801bc:	702b      	strb	r3, [r5, #0]
   801be:	e00b      	b.n	801d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801c0:	4b0c      	ldr	r3, [pc, #48]	; (801f4 <usart_serial_getchar+0xa4>)
   801c2:	429c      	cmp	r4, r3
   801c4:	d108      	bne.n	801d8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   801c6:	461e      	mov	r6, r3
   801c8:	4c07      	ldr	r4, [pc, #28]	; (801e8 <usart_serial_getchar+0x98>)
   801ca:	4630      	mov	r0, r6
   801cc:	a901      	add	r1, sp, #4
   801ce:	47a0      	blx	r4
   801d0:	2800      	cmp	r0, #0
   801d2:	d1fa      	bne.n	801ca <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   801d4:	9b01      	ldr	r3, [sp, #4]
   801d6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   801d8:	b003      	add	sp, #12
   801da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   801dc:	400e0800 	.word	0x400e0800
   801e0:	00080a1d 	.word	0x00080a1d
   801e4:	40098000 	.word	0x40098000
   801e8:	00080a45 	.word	0x00080a45
   801ec:	4009c000 	.word	0x4009c000
   801f0:	400a0000 	.word	0x400a0000
   801f4:	400a4000 	.word	0x400a4000

000801f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   801f8:	b570      	push	{r4, r5, r6, lr}
   801fa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   801fc:	4b1e      	ldr	r3, [pc, #120]	; (80278 <usart_serial_putchar+0x80>)
   801fe:	4298      	cmp	r0, r3
   80200:	d108      	bne.n	80214 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80202:	461e      	mov	r6, r3
   80204:	4d1d      	ldr	r5, [pc, #116]	; (8027c <usart_serial_putchar+0x84>)
   80206:	4630      	mov	r0, r6
   80208:	4621      	mov	r1, r4
   8020a:	47a8      	blx	r5
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_putchar+0xe>
		return 1;
   80210:	2001      	movs	r0, #1
   80212:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80214:	4b1a      	ldr	r3, [pc, #104]	; (80280 <usart_serial_putchar+0x88>)
   80216:	4298      	cmp	r0, r3
   80218:	d108      	bne.n	8022c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8021a:	461e      	mov	r6, r3
   8021c:	4d19      	ldr	r5, [pc, #100]	; (80284 <usart_serial_putchar+0x8c>)
   8021e:	4630      	mov	r0, r6
   80220:	4621      	mov	r1, r4
   80222:	47a8      	blx	r5
   80224:	2800      	cmp	r0, #0
   80226:	d1fa      	bne.n	8021e <usart_serial_putchar+0x26>
		return 1;
   80228:	2001      	movs	r0, #1
   8022a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8022c:	4b16      	ldr	r3, [pc, #88]	; (80288 <usart_serial_putchar+0x90>)
   8022e:	4298      	cmp	r0, r3
   80230:	d108      	bne.n	80244 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80232:	461e      	mov	r6, r3
   80234:	4d13      	ldr	r5, [pc, #76]	; (80284 <usart_serial_putchar+0x8c>)
   80236:	4630      	mov	r0, r6
   80238:	4621      	mov	r1, r4
   8023a:	47a8      	blx	r5
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_putchar+0x3e>
		return 1;
   80240:	2001      	movs	r0, #1
   80242:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80244:	4b11      	ldr	r3, [pc, #68]	; (8028c <usart_serial_putchar+0x94>)
   80246:	4298      	cmp	r0, r3
   80248:	d108      	bne.n	8025c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   8024a:	461e      	mov	r6, r3
   8024c:	4d0d      	ldr	r5, [pc, #52]	; (80284 <usart_serial_putchar+0x8c>)
   8024e:	4630      	mov	r0, r6
   80250:	4621      	mov	r1, r4
   80252:	47a8      	blx	r5
   80254:	2800      	cmp	r0, #0
   80256:	d1fa      	bne.n	8024e <usart_serial_putchar+0x56>
		return 1;
   80258:	2001      	movs	r0, #1
   8025a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8025c:	4b0c      	ldr	r3, [pc, #48]	; (80290 <usart_serial_putchar+0x98>)
   8025e:	4298      	cmp	r0, r3
   80260:	d108      	bne.n	80274 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80262:	461e      	mov	r6, r3
   80264:	4d07      	ldr	r5, [pc, #28]	; (80284 <usart_serial_putchar+0x8c>)
   80266:	4630      	mov	r0, r6
   80268:	4621      	mov	r1, r4
   8026a:	47a8      	blx	r5
   8026c:	2800      	cmp	r0, #0
   8026e:	d1fa      	bne.n	80266 <usart_serial_putchar+0x6e>
		return 1;
   80270:	2001      	movs	r0, #1
   80272:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80274:	2000      	movs	r0, #0
}
   80276:	bd70      	pop	{r4, r5, r6, pc}
   80278:	400e0800 	.word	0x400e0800
   8027c:	00080a0d 	.word	0x00080a0d
   80280:	40098000 	.word	0x40098000
   80284:	00080a31 	.word	0x00080a31
   80288:	4009c000 	.word	0x4009c000
   8028c:	400a0000 	.word	0x400a0000
   80290:	400a4000 	.word	0x400a4000

00080294 <ADC_Handler>:
	
}


void ADC_Handler(void)
{
   80294:	b508      	push	{r3, lr}
	uint32_t i;
	uint32_t ul_temp;
	uint8_t uc_ch_num;

	/* Without PDC transfer */
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==
   80296:	4807      	ldr	r0, [pc, #28]	; (802b4 <ADC_Handler+0x20>)
   80298:	4b07      	ldr	r3, [pc, #28]	; (802b8 <ADC_Handler+0x24>)
   8029a:	4798      	blx	r3
   8029c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   802a0:	d006      	beq.n	802b0 <ADC_Handler+0x1c>
			ADC_ISR_DRDY) {
		ul_temp = adc_get_latest_value(ADC);
   802a2:	4804      	ldr	r0, [pc, #16]	; (802b4 <ADC_Handler+0x20>)
   802a4:	4b05      	ldr	r3, [pc, #20]	; (802bc <ADC_Handler+0x28>)
   802a6:	4798      	blx	r3
	//	printf("%04d mv.    ",(int)(ul_temp));
				adc_value =
						ul_temp &
   802a8:	f3c0 000b 	ubfx	r0, r0, #0, #12
	/* Without PDC transfer */
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==
			ADC_ISR_DRDY) {
		ul_temp = adc_get_latest_value(ADC);
	//	printf("%04d mv.    ",(int)(ul_temp));
				adc_value =
   802ac:	4b04      	ldr	r3, [pc, #16]	; (802c0 <ADC_Handler+0x2c>)
   802ae:	6018      	str	r0, [r3, #0]
   802b0:	bd08      	pop	{r3, pc}
   802b2:	bf00      	nop
   802b4:	400c0000 	.word	0x400c0000
   802b8:	000805d9 	.word	0x000805d9
   802bc:	000805d1 	.word	0x000805d1
   802c0:	200709b0 	.word	0x200709b0

000802c4 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
   802c4:	b580      	push	{r7, lr}
   802c6:	b084      	sub	sp, #16
	/* Initialize the SAM system. */
	sysclk_init();
   802c8:	4b2b      	ldr	r3, [pc, #172]	; (80378 <main+0xb4>)
   802ca:	4798      	blx	r3
	board_init();
   802cc:	4b2b      	ldr	r3, [pc, #172]	; (8037c <main+0xb8>)
   802ce:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802d0:	2008      	movs	r0, #8
   802d2:	4c2b      	ldr	r4, [pc, #172]	; (80380 <main+0xbc>)
   802d4:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802d6:	4e2b      	ldr	r6, [pc, #172]	; (80384 <main+0xc0>)
   802d8:	4b2b      	ldr	r3, [pc, #172]	; (80388 <main+0xc4>)
   802da:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802dc:	4a2b      	ldr	r2, [pc, #172]	; (8038c <main+0xc8>)
   802de:	4b2c      	ldr	r3, [pc, #176]	; (80390 <main+0xcc>)
   802e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802e2:	4a2c      	ldr	r2, [pc, #176]	; (80394 <main+0xd0>)
   802e4:	4b2c      	ldr	r3, [pc, #176]	; (80398 <main+0xd4>)
   802e6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802e8:	4d2c      	ldr	r5, [pc, #176]	; (8039c <main+0xd8>)
   802ea:	9501      	str	r5, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802f0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802f6:	9303      	str	r3, [sp, #12]
   802f8:	2008      	movs	r0, #8
   802fa:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   802fc:	4630      	mov	r0, r6
   802fe:	a901      	add	r1, sp, #4
   80300:	4b27      	ldr	r3, [pc, #156]	; (803a0 <main+0xdc>)
   80302:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80304:	4f27      	ldr	r7, [pc, #156]	; (803a4 <main+0xe0>)
   80306:	683b      	ldr	r3, [r7, #0]
   80308:	6898      	ldr	r0, [r3, #8]
   8030a:	2100      	movs	r1, #0
   8030c:	4e26      	ldr	r6, [pc, #152]	; (803a8 <main+0xe4>)
   8030e:	47b0      	blx	r6
	setbuf(stdin, NULL);
   80310:	683b      	ldr	r3, [r7, #0]
   80312:	6858      	ldr	r0, [r3, #4]
   80314:	2100      	movs	r1, #0
   80316:	47b0      	blx	r6
 * \brief Start ADC sample.
 * Initialize ADC, set clock and timing, and set ADC to given mode.
 */
static void start_adc(void)
{
	pmc_enable_periph_clk(ID_ADC);
   80318:	2025      	movs	r0, #37	; 0x25
   8031a:	47a0      	blx	r4
	 */
	/* Formula:
	 *     Startup  Time = startup value / ADCClock
	 *     Startup time = 64 / 6.4MHz = 10 us
	 */
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   8031c:	4c23      	ldr	r4, [pc, #140]	; (803ac <main+0xe8>)
   8031e:	4620      	mov	r0, r4
   80320:	4629      	mov	r1, r5
   80322:	4a23      	ldr	r2, [pc, #140]	; (803b0 <main+0xec>)
   80324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   80328:	4d22      	ldr	r5, [pc, #136]	; (803b4 <main+0xf0>)
   8032a:	47a8      	blx	r5
	 *
	 *     Transfer Time = (1 * 2 + 3) / 6.4MHz = 781 ns
	 *     Tracking Time = (1 + 1) / 6.4MHz = 312 ns
	 *     Settling Time = 3 / 6.4MHz = 469 ns
	 */
	adc_configure_timing(ADC, TRACKING_TIME, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
   8032c:	4620      	mov	r0, r4
   8032e:	2101      	movs	r1, #1
   80330:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80334:	460b      	mov	r3, r1
   80336:	4d20      	ldr	r5, [pc, #128]	; (803b8 <main+0xf4>)
   80338:	47a8      	blx	r5
	/* Enable channels. */
	adc_enable_channel(ADC, ADC_CHANNEL_POTENTIOMETER);
   8033a:	4620      	mov	r0, r4
   8033c:	2101      	movs	r1, #1
   8033e:	4b1f      	ldr	r3, [pc, #124]	; (803bc <main+0xf8>)
   80340:	4798      	blx	r3
	/* Enable Data ready interrupt. */
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
   80342:	4620      	mov	r0, r4
   80344:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80348:	4b1d      	ldr	r3, [pc, #116]	; (803c0 <main+0xfc>)
   8034a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8034c:	2220      	movs	r2, #32
   8034e:	4b1d      	ldr	r3, [pc, #116]	; (803c4 <main+0x100>)
   80350:	605a      	str	r2, [r3, #4]
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);	/* Disable hardware trigger. */	
   80352:	4620      	mov	r0, r4
   80354:	2100      	movs	r1, #0
   80356:	460a      	mov	r2, r1
   80358:	4b1b      	ldr	r3, [pc, #108]	; (803c8 <main+0x104>)
   8035a:	4798      	blx	r3
	sysclk_init();
	board_init();
	configure_console();
	start_adc();
	while (1) {
			adc_start(ADC);
   8035c:	4626      	mov	r6, r4
   8035e:	4d1b      	ldr	r5, [pc, #108]	; (803cc <main+0x108>)
			printf("%04d mv.    ",
   80360:	4c1b      	ldr	r4, [pc, #108]	; (803d0 <main+0x10c>)
	sysclk_init();
	board_init();
	configure_console();
	start_adc();
	while (1) {
			adc_start(ADC);
   80362:	4630      	mov	r0, r6
   80364:	47a8      	blx	r5
			printf("%04d mv.    ",
   80366:	6821      	ldr	r1, [r4, #0]
   80368:	481a      	ldr	r0, [pc, #104]	; (803d4 <main+0x110>)
   8036a:	4b1b      	ldr	r3, [pc, #108]	; (803d8 <main+0x114>)
   8036c:	4798      	blx	r3
			(int)(adc_value));
			puts("\r");
   8036e:	481b      	ldr	r0, [pc, #108]	; (803dc <main+0x118>)
   80370:	4b1b      	ldr	r3, [pc, #108]	; (803e0 <main+0x11c>)
   80372:	4798      	blx	r3
		
	}
   80374:	e7f5      	b.n	80362 <main+0x9e>
   80376:	bf00      	nop
   80378:	000803e5 	.word	0x000803e5
   8037c:	000804d5 	.word	0x000804d5
   80380:	00080981 	.word	0x00080981
   80384:	400e0800 	.word	0x400e0800
   80388:	20070a64 	.word	0x20070a64
   8038c:	000801f9 	.word	0x000801f9
   80390:	20070a60 	.word	0x20070a60
   80394:	00080151 	.word	0x00080151
   80398:	20070a5c 	.word	0x20070a5c
   8039c:	0501bd00 	.word	0x0501bd00
   803a0:	000809d5 	.word	0x000809d5
   803a4:	20070558 	.word	0x20070558
   803a8:	00080e01 	.word	0x00080e01
   803ac:	400c0000 	.word	0x400c0000
   803b0:	0061a800 	.word	0x0061a800
   803b4:	0008055d 	.word	0x0008055d
   803b8:	000805a1 	.word	0x000805a1
   803bc:	000805c9 	.word	0x000805c9
   803c0:	000805d5 	.word	0x000805d5
   803c4:	e000e100 	.word	0xe000e100
   803c8:	00080591 	.word	0x00080591
   803cc:	000805c1 	.word	0x000805c1
   803d0:	200709b0 	.word	0x200709b0
   803d4:	00083c4c 	.word	0x00083c4c
   803d8:	00080ccd 	.word	0x00080ccd
   803dc:	00083c5c 	.word	0x00083c5c
   803e0:	00080df1 	.word	0x00080df1

000803e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   803e4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   803e6:	480e      	ldr	r0, [pc, #56]	; (80420 <sysclk_init+0x3c>)
   803e8:	4b0e      	ldr	r3, [pc, #56]	; (80424 <sysclk_init+0x40>)
   803ea:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   803ec:	2000      	movs	r0, #0
   803ee:	213e      	movs	r1, #62	; 0x3e
   803f0:	4b0d      	ldr	r3, [pc, #52]	; (80428 <sysclk_init+0x44>)
   803f2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   803f4:	4c0d      	ldr	r4, [pc, #52]	; (8042c <sysclk_init+0x48>)
   803f6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   803f8:	2800      	cmp	r0, #0
   803fa:	d0fc      	beq.n	803f6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   803fc:	4b0c      	ldr	r3, [pc, #48]	; (80430 <sysclk_init+0x4c>)
   803fe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80400:	4a0c      	ldr	r2, [pc, #48]	; (80434 <sysclk_init+0x50>)
   80402:	4b0d      	ldr	r3, [pc, #52]	; (80438 <sysclk_init+0x54>)
   80404:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80406:	4c0d      	ldr	r4, [pc, #52]	; (8043c <sysclk_init+0x58>)
   80408:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8040a:	2800      	cmp	r0, #0
   8040c:	d0fc      	beq.n	80408 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8040e:	2010      	movs	r0, #16
   80410:	4b0b      	ldr	r3, [pc, #44]	; (80440 <sysclk_init+0x5c>)
   80412:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80414:	4b0b      	ldr	r3, [pc, #44]	; (80444 <sysclk_init+0x60>)
   80416:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80418:	4801      	ldr	r0, [pc, #4]	; (80420 <sysclk_init+0x3c>)
   8041a:	4b02      	ldr	r3, [pc, #8]	; (80424 <sysclk_init+0x40>)
   8041c:	4798      	blx	r3
   8041e:	bd10      	pop	{r4, pc}
   80420:	0501bd00 	.word	0x0501bd00
   80424:	200700a5 	.word	0x200700a5
   80428:	000808fd 	.word	0x000808fd
   8042c:	00080951 	.word	0x00080951
   80430:	00080961 	.word	0x00080961
   80434:	200d3f01 	.word	0x200d3f01
   80438:	400e0600 	.word	0x400e0600
   8043c:	00080971 	.word	0x00080971
   80440:	00080895 	.word	0x00080895
   80444:	00080b11 	.word	0x00080b11

00080448 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80448:	b9a8      	cbnz	r0, 80476 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8044a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8044e:	460c      	mov	r4, r1
   80450:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80452:	2a00      	cmp	r2, #0
   80454:	dd0a      	ble.n	8046c <_read+0x24>
   80456:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80458:	4e08      	ldr	r6, [pc, #32]	; (8047c <_read+0x34>)
   8045a:	4d09      	ldr	r5, [pc, #36]	; (80480 <_read+0x38>)
   8045c:	6830      	ldr	r0, [r6, #0]
   8045e:	4621      	mov	r1, r4
   80460:	682b      	ldr	r3, [r5, #0]
   80462:	4798      	blx	r3
		ptr++;
   80464:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80466:	42bc      	cmp	r4, r7
   80468:	d1f8      	bne.n	8045c <_read+0x14>
   8046a:	e001      	b.n	80470 <_read+0x28>
   8046c:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80470:	4640      	mov	r0, r8
   80472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80476:	f04f 30ff 	mov.w	r0, #4294967295
   8047a:	4770      	bx	lr
   8047c:	20070a64 	.word	0x20070a64
   80480:	20070a5c 	.word	0x20070a5c

00080484 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80484:	3801      	subs	r0, #1
   80486:	2802      	cmp	r0, #2
   80488:	d818      	bhi.n	804bc <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8048a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8048e:	460e      	mov	r6, r1
   80490:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80492:	b182      	cbz	r2, 804b6 <_write+0x32>
   80494:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80496:	f8df 8038 	ldr.w	r8, [pc, #56]	; 804d0 <_write+0x4c>
   8049a:	4f0c      	ldr	r7, [pc, #48]	; (804cc <_write+0x48>)
   8049c:	f8d8 0000 	ldr.w	r0, [r8]
   804a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   804a4:	683b      	ldr	r3, [r7, #0]
   804a6:	4798      	blx	r3
   804a8:	2800      	cmp	r0, #0
   804aa:	db0a      	blt.n	804c2 <_write+0x3e>
   804ac:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   804ae:	3c01      	subs	r4, #1
   804b0:	d1f4      	bne.n	8049c <_write+0x18>
   804b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804b6:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   804b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   804bc:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   804c0:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   804c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   804c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804ca:	bf00      	nop
   804cc:	20070a60 	.word	0x20070a60
   804d0:	20070a64 	.word	0x20070a64

000804d4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804d4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804da:	4b18      	ldr	r3, [pc, #96]	; (8053c <board_init+0x68>)
   804dc:	605a      	str	r2, [r3, #4]
   804de:	200b      	movs	r0, #11
   804e0:	4c17      	ldr	r4, [pc, #92]	; (80540 <board_init+0x6c>)
   804e2:	47a0      	blx	r4
   804e4:	200c      	movs	r0, #12
   804e6:	47a0      	blx	r4
   804e8:	200d      	movs	r0, #13
   804ea:	47a0      	blx	r4
   804ec:	200e      	movs	r0, #14
   804ee:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804f0:	203b      	movs	r0, #59	; 0x3b
   804f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804f6:	4c13      	ldr	r4, [pc, #76]	; (80544 <board_init+0x70>)
   804f8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804fa:	2055      	movs	r0, #85	; 0x55
   804fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80500:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80502:	2056      	movs	r0, #86	; 0x56
   80504:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80508:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8050a:	2068      	movs	r0, #104	; 0x68
   8050c:	490e      	ldr	r1, [pc, #56]	; (80548 <board_init+0x74>)
   8050e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80510:	205c      	movs	r0, #92	; 0x5c
   80512:	490e      	ldr	r1, [pc, #56]	; (8054c <board_init+0x78>)
   80514:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80516:	480e      	ldr	r0, [pc, #56]	; (80550 <board_init+0x7c>)
   80518:	f44f 7140 	mov.w	r1, #768	; 0x300
   8051c:	4a0d      	ldr	r2, [pc, #52]	; (80554 <board_init+0x80>)
   8051e:	4b0e      	ldr	r3, [pc, #56]	; (80558 <board_init+0x84>)
   80520:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   80522:	2039      	movs	r0, #57	; 0x39
   80524:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80528:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   8052a:	200b      	movs	r0, #11
   8052c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80530:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   80532:	202c      	movs	r0, #44	; 0x2c
   80534:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80538:	47a0      	blx	r4
   8053a:	bd10      	pop	{r4, pc}
   8053c:	400e1a50 	.word	0x400e1a50
   80540:	00080981 	.word	0x00080981
   80544:	00080681 	.word	0x00080681
   80548:	28000079 	.word	0x28000079
   8054c:	28000001 	.word	0x28000001
   80550:	400e0e00 	.word	0x400e0e00
   80554:	08000001 	.word	0x08000001
   80558:	00080755 	.word	0x00080755

0008055c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8055c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8055e:	2401      	movs	r4, #1
   80560:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80562:	2400      	movs	r4, #0
   80564:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80566:	f240 2502 	movw	r5, #514	; 0x202
   8056a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8056e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80572:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80576:	6845      	ldr	r5, [r0, #4]
   80578:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8057a:	0052      	lsls	r2, r2, #1
   8057c:	fbb1 f1f2 	udiv	r1, r1, r2
   80580:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80582:	0212      	lsls	r2, r2, #8
   80584:	b292      	uxth	r2, r2
   80586:	4313      	orrs	r3, r2
   80588:	6043      	str	r3, [r0, #4]
	return 0;
}
   8058a:	4620      	mov	r0, r4
   8058c:	bc30      	pop	{r4, r5}
   8058e:	4770      	bx	lr

00080590 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80590:	6843      	ldr	r3, [r0, #4]
   80592:	4319      	orrs	r1, r3
   80594:	01d2      	lsls	r2, r2, #7
   80596:	b2d2      	uxtb	r2, r2
   80598:	4311      	orrs	r1, r2
   8059a:	6041      	str	r1, [r0, #4]
   8059c:	4770      	bx	lr
   8059e:	bf00      	nop

000805a0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   805a0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805a2:	6844      	ldr	r4, [r0, #4]
   805a4:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   805a6:	0609      	lsls	r1, r1, #24
   805a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   805ac:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   805ae:	071b      	lsls	r3, r3, #28
   805b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   805b4:	4313      	orrs	r3, r2
   805b6:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   805b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   805c0:	2302      	movs	r3, #2
   805c2:	6003      	str	r3, [r0, #0]
   805c4:	4770      	bx	lr
   805c6:	bf00      	nop

000805c8 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   805c8:	2301      	movs	r3, #1
   805ca:	408b      	lsls	r3, r1
   805cc:	6103      	str	r3, [r0, #16]
   805ce:	4770      	bx	lr

000805d0 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   805d0:	6a00      	ldr	r0, [r0, #32]
}
   805d2:	4770      	bx	lr

000805d4 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   805d4:	6241      	str	r1, [r0, #36]	; 0x24
   805d6:	4770      	bx	lr

000805d8 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   805d8:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   805da:	4770      	bx	lr

000805dc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   805dc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   805de:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   805e2:	d016      	beq.n	80612 <pio_set_peripheral+0x36>
   805e4:	d804      	bhi.n	805f0 <pio_set_peripheral+0x14>
   805e6:	b1c1      	cbz	r1, 8061a <pio_set_peripheral+0x3e>
   805e8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   805ec:	d00a      	beq.n	80604 <pio_set_peripheral+0x28>
   805ee:	e013      	b.n	80618 <pio_set_peripheral+0x3c>
   805f0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   805f4:	d011      	beq.n	8061a <pio_set_peripheral+0x3e>
   805f6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   805fa:	d00e      	beq.n	8061a <pio_set_peripheral+0x3e>
   805fc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80600:	d10a      	bne.n	80618 <pio_set_peripheral+0x3c>
   80602:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80604:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80606:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80608:	400b      	ands	r3, r1
   8060a:	ea23 0302 	bic.w	r3, r3, r2
   8060e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80610:	e002      	b.n	80618 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80612:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80614:	4313      	orrs	r3, r2
   80616:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80618:	6042      	str	r2, [r0, #4]
   8061a:	4770      	bx	lr

0008061c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8061c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8061e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80622:	bf14      	ite	ne
   80624:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80626:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80628:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8062c:	bf14      	ite	ne
   8062e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80630:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80632:	f012 0f02 	tst.w	r2, #2
   80636:	d002      	beq.n	8063e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80638:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8063c:	e004      	b.n	80648 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8063e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80642:	bf18      	it	ne
   80644:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80648:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8064a:	6001      	str	r1, [r0, #0]
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop

00080650 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80650:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80652:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80654:	9c01      	ldr	r4, [sp, #4]
   80656:	b10c      	cbz	r4, 8065c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80658:	6641      	str	r1, [r0, #100]	; 0x64
   8065a:	e000      	b.n	8065e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8065c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8065e:	b10b      	cbz	r3, 80664 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80660:	6501      	str	r1, [r0, #80]	; 0x50
   80662:	e000      	b.n	80666 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80664:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80666:	b10a      	cbz	r2, 8066c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80668:	6301      	str	r1, [r0, #48]	; 0x30
   8066a:	e000      	b.n	8066e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8066c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8066e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80670:	6001      	str	r1, [r0, #0]
}
   80672:	f85d 4b04 	ldr.w	r4, [sp], #4
   80676:	4770      	bx	lr

00080678 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80678:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8067a:	4770      	bx	lr

0008067c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8067c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8067e:	4770      	bx	lr

00080680 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80680:	b570      	push	{r4, r5, r6, lr}
   80682:	b082      	sub	sp, #8
   80684:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80686:	0943      	lsrs	r3, r0, #5
   80688:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8068c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80690:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80692:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80696:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8069a:	d030      	beq.n	806fe <pio_configure_pin+0x7e>
   8069c:	d806      	bhi.n	806ac <pio_configure_pin+0x2c>
   8069e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   806a2:	d00a      	beq.n	806ba <pio_configure_pin+0x3a>
   806a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   806a8:	d018      	beq.n	806dc <pio_configure_pin+0x5c>
   806aa:	e049      	b.n	80740 <pio_configure_pin+0xc0>
   806ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   806b0:	d030      	beq.n	80714 <pio_configure_pin+0x94>
   806b2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   806b6:	d02d      	beq.n	80714 <pio_configure_pin+0x94>
   806b8:	e042      	b.n	80740 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   806ba:	f000 001f 	and.w	r0, r0, #31
   806be:	2601      	movs	r6, #1
   806c0:	4086      	lsls	r6, r0
   806c2:	4620      	mov	r0, r4
   806c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   806c8:	4632      	mov	r2, r6
   806ca:	4b1f      	ldr	r3, [pc, #124]	; (80748 <pio_configure_pin+0xc8>)
   806cc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806ce:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806d2:	bf14      	ite	ne
   806d4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806d6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806d8:	2001      	movs	r0, #1
   806da:	e032      	b.n	80742 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   806dc:	f000 001f 	and.w	r0, r0, #31
   806e0:	2601      	movs	r6, #1
   806e2:	4086      	lsls	r6, r0
   806e4:	4620      	mov	r0, r4
   806e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806ea:	4632      	mov	r2, r6
   806ec:	4b16      	ldr	r3, [pc, #88]	; (80748 <pio_configure_pin+0xc8>)
   806ee:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806f4:	bf14      	ite	ne
   806f6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806f8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806fa:	2001      	movs	r0, #1
   806fc:	e021      	b.n	80742 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   806fe:	f000 031f 	and.w	r3, r0, #31
   80702:	2601      	movs	r6, #1
   80704:	4620      	mov	r0, r4
   80706:	fa06 f103 	lsl.w	r1, r6, r3
   8070a:	462a      	mov	r2, r5
   8070c:	4b0f      	ldr	r3, [pc, #60]	; (8074c <pio_configure_pin+0xcc>)
   8070e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80710:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80712:	e016      	b.n	80742 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80714:	f000 031f 	and.w	r3, r0, #31
   80718:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8071a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8071e:	ea05 0106 	and.w	r1, r5, r6
   80722:	9100      	str	r1, [sp, #0]
   80724:	4620      	mov	r0, r4
   80726:	fa06 f103 	lsl.w	r1, r6, r3
   8072a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8072e:	bf14      	ite	ne
   80730:	2200      	movne	r2, #0
   80732:	2201      	moveq	r2, #1
   80734:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80738:	4c05      	ldr	r4, [pc, #20]	; (80750 <pio_configure_pin+0xd0>)
   8073a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8073c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8073e:	e000      	b.n	80742 <pio_configure_pin+0xc2>

	default:
		return 0;
   80740:	2000      	movs	r0, #0
	}

	return 1;
}
   80742:	b002      	add	sp, #8
   80744:	bd70      	pop	{r4, r5, r6, pc}
   80746:	bf00      	nop
   80748:	000805dd 	.word	0x000805dd
   8074c:	0008061d 	.word	0x0008061d
   80750:	00080651 	.word	0x00080651

00080754 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80754:	b570      	push	{r4, r5, r6, lr}
   80756:	b082      	sub	sp, #8
   80758:	4606      	mov	r6, r0
   8075a:	460d      	mov	r5, r1
   8075c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8075e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80762:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80766:	d026      	beq.n	807b6 <pio_configure_pin_group+0x62>
   80768:	d806      	bhi.n	80778 <pio_configure_pin_group+0x24>
   8076a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8076e:	d00a      	beq.n	80786 <pio_configure_pin_group+0x32>
   80770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80774:	d013      	beq.n	8079e <pio_configure_pin_group+0x4a>
   80776:	e034      	b.n	807e2 <pio_configure_pin_group+0x8e>
   80778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8077c:	d01f      	beq.n	807be <pio_configure_pin_group+0x6a>
   8077e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80782:	d01c      	beq.n	807be <pio_configure_pin_group+0x6a>
   80784:	e02d      	b.n	807e2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80786:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8078a:	462a      	mov	r2, r5
   8078c:	4b16      	ldr	r3, [pc, #88]	; (807e8 <pio_configure_pin_group+0x94>)
   8078e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80790:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80794:	bf14      	ite	ne
   80796:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80798:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8079a:	2001      	movs	r0, #1
   8079c:	e022      	b.n	807e4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8079e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807a2:	462a      	mov	r2, r5
   807a4:	4b10      	ldr	r3, [pc, #64]	; (807e8 <pio_configure_pin_group+0x94>)
   807a6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807ac:	bf14      	ite	ne
   807ae:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807b0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   807b2:	2001      	movs	r0, #1
   807b4:	e016      	b.n	807e4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   807b6:	4b0d      	ldr	r3, [pc, #52]	; (807ec <pio_configure_pin_group+0x98>)
   807b8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   807ba:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   807bc:	e012      	b.n	807e4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807be:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   807c2:	f004 0301 	and.w	r3, r4, #1
   807c6:	9300      	str	r3, [sp, #0]
   807c8:	4630      	mov	r0, r6
   807ca:	4629      	mov	r1, r5
   807cc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   807d0:	bf14      	ite	ne
   807d2:	2200      	movne	r2, #0
   807d4:	2201      	moveq	r2, #1
   807d6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   807da:	4c05      	ldr	r4, [pc, #20]	; (807f0 <pio_configure_pin_group+0x9c>)
   807dc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   807de:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   807e0:	e000      	b.n	807e4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   807e2:	2000      	movs	r0, #0
	}

	return 1;
}
   807e4:	b002      	add	sp, #8
   807e6:	bd70      	pop	{r4, r5, r6, pc}
   807e8:	000805dd 	.word	0x000805dd
   807ec:	0008061d 	.word	0x0008061d
   807f0:	00080651 	.word	0x00080651

000807f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   807f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807f8:	4604      	mov	r4, r0
   807fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   807fc:	4b0e      	ldr	r3, [pc, #56]	; (80838 <pio_handler_process+0x44>)
   807fe:	4798      	blx	r3
   80800:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80802:	4620      	mov	r0, r4
   80804:	4b0d      	ldr	r3, [pc, #52]	; (8083c <pio_handler_process+0x48>)
   80806:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80808:	4005      	ands	r5, r0
   8080a:	d013      	beq.n	80834 <pio_handler_process+0x40>
   8080c:	4c0c      	ldr	r4, [pc, #48]	; (80840 <pio_handler_process+0x4c>)
   8080e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80812:	6823      	ldr	r3, [r4, #0]
   80814:	4543      	cmp	r3, r8
   80816:	d108      	bne.n	8082a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80818:	6861      	ldr	r1, [r4, #4]
   8081a:	4229      	tst	r1, r5
   8081c:	d005      	beq.n	8082a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8081e:	68e3      	ldr	r3, [r4, #12]
   80820:	4640      	mov	r0, r8
   80822:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80824:	6863      	ldr	r3, [r4, #4]
   80826:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8082a:	42b4      	cmp	r4, r6
   8082c:	d002      	beq.n	80834 <pio_handler_process+0x40>
   8082e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80830:	2d00      	cmp	r5, #0
   80832:	d1ee      	bne.n	80812 <pio_handler_process+0x1e>
   80834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80838:	00080679 	.word	0x00080679
   8083c:	0008067d 	.word	0x0008067d
   80840:	200709b4 	.word	0x200709b4

00080844 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80844:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80846:	4802      	ldr	r0, [pc, #8]	; (80850 <PIOA_Handler+0xc>)
   80848:	210b      	movs	r1, #11
   8084a:	4b02      	ldr	r3, [pc, #8]	; (80854 <PIOA_Handler+0x10>)
   8084c:	4798      	blx	r3
   8084e:	bd08      	pop	{r3, pc}
   80850:	400e0e00 	.word	0x400e0e00
   80854:	000807f5 	.word	0x000807f5

00080858 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80858:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8085a:	4802      	ldr	r0, [pc, #8]	; (80864 <PIOB_Handler+0xc>)
   8085c:	210c      	movs	r1, #12
   8085e:	4b02      	ldr	r3, [pc, #8]	; (80868 <PIOB_Handler+0x10>)
   80860:	4798      	blx	r3
   80862:	bd08      	pop	{r3, pc}
   80864:	400e1000 	.word	0x400e1000
   80868:	000807f5 	.word	0x000807f5

0008086c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8086c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8086e:	4802      	ldr	r0, [pc, #8]	; (80878 <PIOC_Handler+0xc>)
   80870:	210d      	movs	r1, #13
   80872:	4b02      	ldr	r3, [pc, #8]	; (8087c <PIOC_Handler+0x10>)
   80874:	4798      	blx	r3
   80876:	bd08      	pop	{r3, pc}
   80878:	400e1200 	.word	0x400e1200
   8087c:	000807f5 	.word	0x000807f5

00080880 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80880:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80882:	4802      	ldr	r0, [pc, #8]	; (8088c <PIOD_Handler+0xc>)
   80884:	210e      	movs	r1, #14
   80886:	4b02      	ldr	r3, [pc, #8]	; (80890 <PIOD_Handler+0x10>)
   80888:	4798      	blx	r3
   8088a:	bd08      	pop	{r3, pc}
   8088c:	400e1400 	.word	0x400e1400
   80890:	000807f5 	.word	0x000807f5

00080894 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80894:	4a18      	ldr	r2, [pc, #96]	; (808f8 <pmc_switch_mck_to_pllack+0x64>)
   80896:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8089c:	4318      	orrs	r0, r3
   8089e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808a2:	f013 0f08 	tst.w	r3, #8
   808a6:	d003      	beq.n	808b0 <pmc_switch_mck_to_pllack+0x1c>
   808a8:	e009      	b.n	808be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808aa:	3b01      	subs	r3, #1
   808ac:	d103      	bne.n	808b6 <pmc_switch_mck_to_pllack+0x22>
   808ae:	e01e      	b.n	808ee <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808b4:	4910      	ldr	r1, [pc, #64]	; (808f8 <pmc_switch_mck_to_pllack+0x64>)
   808b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808b8:	f012 0f08 	tst.w	r2, #8
   808bc:	d0f5      	beq.n	808aa <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   808be:	4a0e      	ldr	r2, [pc, #56]	; (808f8 <pmc_switch_mck_to_pllack+0x64>)
   808c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808c2:	f023 0303 	bic.w	r3, r3, #3
   808c6:	f043 0302 	orr.w	r3, r3, #2
   808ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808cc:	6e90      	ldr	r0, [r2, #104]	; 0x68
   808ce:	f010 0008 	ands.w	r0, r0, #8
   808d2:	d004      	beq.n	808de <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   808d4:	2000      	movs	r0, #0
   808d6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   808d8:	3b01      	subs	r3, #1
   808da:	d103      	bne.n	808e4 <pmc_switch_mck_to_pllack+0x50>
   808dc:	e009      	b.n	808f2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808e2:	4905      	ldr	r1, [pc, #20]	; (808f8 <pmc_switch_mck_to_pllack+0x64>)
   808e4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808e6:	f012 0f08 	tst.w	r2, #8
   808ea:	d0f5      	beq.n	808d8 <pmc_switch_mck_to_pllack+0x44>
   808ec:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   808ee:	2001      	movs	r0, #1
   808f0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   808f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   808f4:	4770      	bx	lr
   808f6:	bf00      	nop
   808f8:	400e0600 	.word	0x400e0600

000808fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   808fc:	b138      	cbz	r0, 8090e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808fe:	4911      	ldr	r1, [pc, #68]	; (80944 <pmc_switch_mainck_to_xtal+0x48>)
   80900:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80902:	4a11      	ldr	r2, [pc, #68]	; (80948 <pmc_switch_mainck_to_xtal+0x4c>)
   80904:	401a      	ands	r2, r3
   80906:	4b11      	ldr	r3, [pc, #68]	; (8094c <pmc_switch_mainck_to_xtal+0x50>)
   80908:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8090a:	620b      	str	r3, [r1, #32]
   8090c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8090e:	4a0d      	ldr	r2, [pc, #52]	; (80944 <pmc_switch_mainck_to_xtal+0x48>)
   80910:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80912:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80916:	f023 0303 	bic.w	r3, r3, #3
   8091a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8091e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80922:	0209      	lsls	r1, r1, #8
   80924:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80926:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80928:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8092a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8092c:	f013 0f01 	tst.w	r3, #1
   80930:	d0fb      	beq.n	8092a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80932:	4a04      	ldr	r2, [pc, #16]	; (80944 <pmc_switch_mainck_to_xtal+0x48>)
   80934:	6a13      	ldr	r3, [r2, #32]
   80936:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8093a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8093e:	6213      	str	r3, [r2, #32]
   80940:	4770      	bx	lr
   80942:	bf00      	nop
   80944:	400e0600 	.word	0x400e0600
   80948:	fec8fffc 	.word	0xfec8fffc
   8094c:	01370002 	.word	0x01370002

00080950 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80950:	4b02      	ldr	r3, [pc, #8]	; (8095c <pmc_osc_is_ready_mainck+0xc>)
   80952:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80954:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80958:	4770      	bx	lr
   8095a:	bf00      	nop
   8095c:	400e0600 	.word	0x400e0600

00080960 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80960:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80964:	4b01      	ldr	r3, [pc, #4]	; (8096c <pmc_disable_pllack+0xc>)
   80966:	629a      	str	r2, [r3, #40]	; 0x28
   80968:	4770      	bx	lr
   8096a:	bf00      	nop
   8096c:	400e0600 	.word	0x400e0600

00080970 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80970:	4b02      	ldr	r3, [pc, #8]	; (8097c <pmc_is_locked_pllack+0xc>)
   80972:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80974:	f000 0002 	and.w	r0, r0, #2
   80978:	4770      	bx	lr
   8097a:	bf00      	nop
   8097c:	400e0600 	.word	0x400e0600

00080980 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80980:	282c      	cmp	r0, #44	; 0x2c
   80982:	d81e      	bhi.n	809c2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80984:	281f      	cmp	r0, #31
   80986:	d80c      	bhi.n	809a2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80988:	4b11      	ldr	r3, [pc, #68]	; (809d0 <pmc_enable_periph_clk+0x50>)
   8098a:	699a      	ldr	r2, [r3, #24]
   8098c:	2301      	movs	r3, #1
   8098e:	4083      	lsls	r3, r0
   80990:	401a      	ands	r2, r3
   80992:	4293      	cmp	r3, r2
   80994:	d017      	beq.n	809c6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80996:	2301      	movs	r3, #1
   80998:	4083      	lsls	r3, r0
   8099a:	4a0d      	ldr	r2, [pc, #52]	; (809d0 <pmc_enable_periph_clk+0x50>)
   8099c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8099e:	2000      	movs	r0, #0
   809a0:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809a2:	4b0b      	ldr	r3, [pc, #44]	; (809d0 <pmc_enable_periph_clk+0x50>)
   809a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   809a8:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809aa:	2301      	movs	r3, #1
   809ac:	4083      	lsls	r3, r0
   809ae:	401a      	ands	r2, r3
   809b0:	4293      	cmp	r3, r2
   809b2:	d00a      	beq.n	809ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   809b4:	2301      	movs	r3, #1
   809b6:	4083      	lsls	r3, r0
   809b8:	4a05      	ldr	r2, [pc, #20]	; (809d0 <pmc_enable_periph_clk+0x50>)
   809ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   809be:	2000      	movs	r0, #0
   809c0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   809c2:	2001      	movs	r0, #1
   809c4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809c6:	2000      	movs	r0, #0
   809c8:	4770      	bx	lr
   809ca:	2000      	movs	r0, #0
}
   809cc:	4770      	bx	lr
   809ce:	bf00      	nop
   809d0:	400e0600 	.word	0x400e0600

000809d4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   809d4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   809d6:	23ac      	movs	r3, #172	; 0xac
   809d8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   809da:	680b      	ldr	r3, [r1, #0]
   809dc:	684a      	ldr	r2, [r1, #4]
   809de:	fbb3 f3f2 	udiv	r3, r3, r2
   809e2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   809e4:	1e5c      	subs	r4, r3, #1
   809e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   809ea:	4294      	cmp	r4, r2
   809ec:	d80a      	bhi.n	80a04 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   809ee:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   809f0:	688b      	ldr	r3, [r1, #8]
   809f2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809f4:	f240 2302 	movw	r3, #514	; 0x202
   809f8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809fc:	2350      	movs	r3, #80	; 0x50
   809fe:	6003      	str	r3, [r0, #0]

	return 0;
   80a00:	2000      	movs	r0, #0
   80a02:	e000      	b.n	80a06 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80a04:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80a06:	f85d 4b04 	ldr.w	r4, [sp], #4
   80a0a:	4770      	bx	lr

00080a0c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80a0c:	6943      	ldr	r3, [r0, #20]
   80a0e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80a12:	bf1a      	itte	ne
   80a14:	61c1      	strne	r1, [r0, #28]
	return 0;
   80a16:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80a18:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80a1a:	4770      	bx	lr

00080a1c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80a1c:	6943      	ldr	r3, [r0, #20]
   80a1e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80a22:	bf1d      	ittte	ne
   80a24:	6983      	ldrne	r3, [r0, #24]
   80a26:	700b      	strbne	r3, [r1, #0]
	return 0;
   80a28:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80a2a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80a2c:	4770      	bx	lr
   80a2e:	bf00      	nop

00080a30 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80a30:	6943      	ldr	r3, [r0, #20]
   80a32:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80a36:	bf1d      	ittte	ne
   80a38:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80a3c:	61c1      	strne	r1, [r0, #28]
	return 0;
   80a3e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80a40:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80a42:	4770      	bx	lr

00080a44 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80a44:	6943      	ldr	r3, [r0, #20]
   80a46:	f013 0f01 	tst.w	r3, #1
   80a4a:	d005      	beq.n	80a58 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80a4c:	6983      	ldr	r3, [r0, #24]
   80a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80a52:	600b      	str	r3, [r1, #0]

	return 0;
   80a54:	2000      	movs	r0, #0
   80a56:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80a58:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80a5a:	4770      	bx	lr

00080a5c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80a5c:	e7fe      	b.n	80a5c <Dummy_Handler>
   80a5e:	bf00      	nop

00080a60 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a60:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a62:	4b1f      	ldr	r3, [pc, #124]	; (80ae0 <Reset_Handler+0x80>)
   80a64:	4a1f      	ldr	r2, [pc, #124]	; (80ae4 <Reset_Handler+0x84>)
   80a66:	429a      	cmp	r2, r3
   80a68:	d003      	beq.n	80a72 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80a6a:	4b1f      	ldr	r3, [pc, #124]	; (80ae8 <Reset_Handler+0x88>)
   80a6c:	4a1c      	ldr	r2, [pc, #112]	; (80ae0 <Reset_Handler+0x80>)
   80a6e:	429a      	cmp	r2, r3
   80a70:	d304      	bcc.n	80a7c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a72:	4b1e      	ldr	r3, [pc, #120]	; (80aec <Reset_Handler+0x8c>)
   80a74:	4a1e      	ldr	r2, [pc, #120]	; (80af0 <Reset_Handler+0x90>)
   80a76:	429a      	cmp	r2, r3
   80a78:	d310      	bcc.n	80a9c <Reset_Handler+0x3c>
   80a7a:	e01b      	b.n	80ab4 <Reset_Handler+0x54>
   80a7c:	4918      	ldr	r1, [pc, #96]	; (80ae0 <Reset_Handler+0x80>)
   80a7e:	1d0a      	adds	r2, r1, #4
   80a80:	4b1c      	ldr	r3, [pc, #112]	; (80af4 <Reset_Handler+0x94>)
   80a82:	1a9b      	subs	r3, r3, r2
   80a84:	f023 0303 	bic.w	r3, r3, #3
   80a88:	3304      	adds	r3, #4
   80a8a:	4a16      	ldr	r2, [pc, #88]	; (80ae4 <Reset_Handler+0x84>)
   80a8c:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80a8e:	f852 0b04 	ldr.w	r0, [r2], #4
   80a92:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a96:	429a      	cmp	r2, r3
   80a98:	d1f9      	bne.n	80a8e <Reset_Handler+0x2e>
   80a9a:	e7ea      	b.n	80a72 <Reset_Handler+0x12>
   80a9c:	4b16      	ldr	r3, [pc, #88]	; (80af8 <Reset_Handler+0x98>)
   80a9e:	4a17      	ldr	r2, [pc, #92]	; (80afc <Reset_Handler+0x9c>)
   80aa0:	1ad2      	subs	r2, r2, r3
   80aa2:	f022 0203 	bic.w	r2, r2, #3
   80aa6:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80aa8:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80aaa:	2100      	movs	r1, #0
   80aac:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ab0:	4293      	cmp	r3, r2
   80ab2:	d1fb      	bne.n	80aac <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ab4:	4b12      	ldr	r3, [pc, #72]	; (80b00 <Reset_Handler+0xa0>)
   80ab6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80aba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80abe:	4911      	ldr	r1, [pc, #68]	; (80b04 <Reset_Handler+0xa4>)
   80ac0:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ac2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80aca:	d203      	bcs.n	80ad4 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80acc:	688b      	ldr	r3, [r1, #8]
   80ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80ad2:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ad4:	4b0c      	ldr	r3, [pc, #48]	; (80b08 <Reset_Handler+0xa8>)
   80ad6:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ad8:	4b0c      	ldr	r3, [pc, #48]	; (80b0c <Reset_Handler+0xac>)
   80ada:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80adc:	e7fe      	b.n	80adc <Reset_Handler+0x7c>
   80ade:	bf00      	nop
   80ae0:	20070000 	.word	0x20070000
   80ae4:	00083ce8 	.word	0x00083ce8
   80ae8:	20070994 	.word	0x20070994
   80aec:	20070a6c 	.word	0x20070a6c
   80af0:	20070994 	.word	0x20070994
   80af4:	20070997 	.word	0x20070997
   80af8:	20070998 	.word	0x20070998
   80afc:	20070a6f 	.word	0x20070a6f
   80b00:	00080000 	.word	0x00080000
   80b04:	e000ed00 	.word	0xe000ed00
   80b08:	00080c7d 	.word	0x00080c7d
   80b0c:	000802c5 	.word	0x000802c5

00080b10 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b10:	4b3e      	ldr	r3, [pc, #248]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b14:	f003 0303 	and.w	r3, r3, #3
   80b18:	2b03      	cmp	r3, #3
   80b1a:	d85f      	bhi.n	80bdc <SystemCoreClockUpdate+0xcc>
   80b1c:	e8df f003 	tbb	[pc, r3]
   80b20:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b24:	4b3a      	ldr	r3, [pc, #232]	; (80c10 <SystemCoreClockUpdate+0x100>)
   80b26:	695b      	ldr	r3, [r3, #20]
   80b28:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b2c:	bf14      	ite	ne
   80b2e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b32:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b36:	4b37      	ldr	r3, [pc, #220]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b38:	601a      	str	r2, [r3, #0]
   80b3a:	e04f      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b3c:	4b33      	ldr	r3, [pc, #204]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80b3e:	6a1b      	ldr	r3, [r3, #32]
   80b40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b44:	d003      	beq.n	80b4e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b46:	4a34      	ldr	r2, [pc, #208]	; (80c18 <SystemCoreClockUpdate+0x108>)
   80b48:	4b32      	ldr	r3, [pc, #200]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b4a:	601a      	str	r2, [r3, #0]
   80b4c:	e046      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b4e:	4a33      	ldr	r2, [pc, #204]	; (80c1c <SystemCoreClockUpdate+0x10c>)
   80b50:	4b30      	ldr	r3, [pc, #192]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b52:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b54:	4b2d      	ldr	r3, [pc, #180]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80b56:	6a1b      	ldr	r3, [r3, #32]
   80b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b5c:	2b10      	cmp	r3, #16
   80b5e:	d002      	beq.n	80b66 <SystemCoreClockUpdate+0x56>
   80b60:	2b20      	cmp	r3, #32
   80b62:	d004      	beq.n	80b6e <SystemCoreClockUpdate+0x5e>
   80b64:	e03a      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b66:	4a2e      	ldr	r2, [pc, #184]	; (80c20 <SystemCoreClockUpdate+0x110>)
   80b68:	4b2a      	ldr	r3, [pc, #168]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b6a:	601a      	str	r2, [r3, #0]
				break;
   80b6c:	e036      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b6e:	4a2a      	ldr	r2, [pc, #168]	; (80c18 <SystemCoreClockUpdate+0x108>)
   80b70:	4b28      	ldr	r3, [pc, #160]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b72:	601a      	str	r2, [r3, #0]
				break;
   80b74:	e032      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b76:	4b25      	ldr	r3, [pc, #148]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80b78:	6a1b      	ldr	r3, [r3, #32]
   80b7a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b7e:	d003      	beq.n	80b88 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b80:	4a25      	ldr	r2, [pc, #148]	; (80c18 <SystemCoreClockUpdate+0x108>)
   80b82:	4b24      	ldr	r3, [pc, #144]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b84:	601a      	str	r2, [r3, #0]
   80b86:	e012      	b.n	80bae <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b88:	4a24      	ldr	r2, [pc, #144]	; (80c1c <SystemCoreClockUpdate+0x10c>)
   80b8a:	4b22      	ldr	r3, [pc, #136]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80b8c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b8e:	4b1f      	ldr	r3, [pc, #124]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80b90:	6a1b      	ldr	r3, [r3, #32]
   80b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b96:	2b10      	cmp	r3, #16
   80b98:	d002      	beq.n	80ba0 <SystemCoreClockUpdate+0x90>
   80b9a:	2b20      	cmp	r3, #32
   80b9c:	d004      	beq.n	80ba8 <SystemCoreClockUpdate+0x98>
   80b9e:	e006      	b.n	80bae <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ba0:	4a1f      	ldr	r2, [pc, #124]	; (80c20 <SystemCoreClockUpdate+0x110>)
   80ba2:	4b1c      	ldr	r3, [pc, #112]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80ba4:	601a      	str	r2, [r3, #0]
				break;
   80ba6:	e002      	b.n	80bae <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ba8:	4a1b      	ldr	r2, [pc, #108]	; (80c18 <SystemCoreClockUpdate+0x108>)
   80baa:	4b1a      	ldr	r3, [pc, #104]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80bac:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80bae:	4b17      	ldr	r3, [pc, #92]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bb2:	f003 0303 	and.w	r3, r3, #3
   80bb6:	2b02      	cmp	r3, #2
   80bb8:	d10d      	bne.n	80bd6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bba:	4a14      	ldr	r2, [pc, #80]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80bbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80bc0:	4814      	ldr	r0, [pc, #80]	; (80c14 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bc2:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80bc6:	6803      	ldr	r3, [r0, #0]
   80bc8:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bcc:	b2d2      	uxtb	r2, r2
   80bce:	fbb3 f3f2 	udiv	r3, r3, r2
   80bd2:	6003      	str	r3, [r0, #0]
   80bd4:	e002      	b.n	80bdc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80bd6:	4a13      	ldr	r2, [pc, #76]	; (80c24 <SystemCoreClockUpdate+0x114>)
   80bd8:	4b0e      	ldr	r3, [pc, #56]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80bda:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80bdc:	4b0b      	ldr	r3, [pc, #44]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80be4:	2b70      	cmp	r3, #112	; 0x70
   80be6:	d107      	bne.n	80bf8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80be8:	4a0a      	ldr	r2, [pc, #40]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80bea:	6813      	ldr	r3, [r2, #0]
   80bec:	490e      	ldr	r1, [pc, #56]	; (80c28 <SystemCoreClockUpdate+0x118>)
   80bee:	fba1 1303 	umull	r1, r3, r1, r3
   80bf2:	085b      	lsrs	r3, r3, #1
   80bf4:	6013      	str	r3, [r2, #0]
   80bf6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80bf8:	4b04      	ldr	r3, [pc, #16]	; (80c0c <SystemCoreClockUpdate+0xfc>)
   80bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80bfc:	4905      	ldr	r1, [pc, #20]	; (80c14 <SystemCoreClockUpdate+0x104>)
   80bfe:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80c02:	680b      	ldr	r3, [r1, #0]
   80c04:	40d3      	lsrs	r3, r2
   80c06:	600b      	str	r3, [r1, #0]
   80c08:	4770      	bx	lr
   80c0a:	bf00      	nop
   80c0c:	400e0600 	.word	0x400e0600
   80c10:	400e1a10 	.word	0x400e1a10
   80c14:	2007012c 	.word	0x2007012c
   80c18:	00b71b00 	.word	0x00b71b00
   80c1c:	003d0900 	.word	0x003d0900
   80c20:	007a1200 	.word	0x007a1200
   80c24:	0e4e1c00 	.word	0x0e4e1c00
   80c28:	aaaaaaab 	.word	0xaaaaaaab

00080c2c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80c2c:	4b09      	ldr	r3, [pc, #36]	; (80c54 <_sbrk+0x28>)
   80c2e:	681b      	ldr	r3, [r3, #0]
   80c30:	b913      	cbnz	r3, 80c38 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80c32:	4a09      	ldr	r2, [pc, #36]	; (80c58 <_sbrk+0x2c>)
   80c34:	4b07      	ldr	r3, [pc, #28]	; (80c54 <_sbrk+0x28>)
   80c36:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80c38:	4b06      	ldr	r3, [pc, #24]	; (80c54 <_sbrk+0x28>)
   80c3a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c3c:	181a      	adds	r2, r3, r0
   80c3e:	4907      	ldr	r1, [pc, #28]	; (80c5c <_sbrk+0x30>)
   80c40:	4291      	cmp	r1, r2
   80c42:	db04      	blt.n	80c4e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c44:	4610      	mov	r0, r2
   80c46:	4a03      	ldr	r2, [pc, #12]	; (80c54 <_sbrk+0x28>)
   80c48:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c4a:	4618      	mov	r0, r3
   80c4c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80c4e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80c52:	4770      	bx	lr
   80c54:	20070a24 	.word	0x20070a24
   80c58:	20072a70 	.word	0x20072a70
   80c5c:	20087ffc 	.word	0x20087ffc

00080c60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c60:	f04f 30ff 	mov.w	r0, #4294967295
   80c64:	4770      	bx	lr
   80c66:	bf00      	nop

00080c68 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c6c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c6e:	2000      	movs	r0, #0
   80c70:	4770      	bx	lr
   80c72:	bf00      	nop

00080c74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c74:	2001      	movs	r0, #1
   80c76:	4770      	bx	lr

00080c78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c78:	2000      	movs	r0, #0
   80c7a:	4770      	bx	lr

00080c7c <__libc_init_array>:
   80c7c:	b570      	push	{r4, r5, r6, lr}
   80c7e:	4e0f      	ldr	r6, [pc, #60]	; (80cbc <__libc_init_array+0x40>)
   80c80:	4d0f      	ldr	r5, [pc, #60]	; (80cc0 <__libc_init_array+0x44>)
   80c82:	1b76      	subs	r6, r6, r5
   80c84:	10b6      	asrs	r6, r6, #2
   80c86:	bf18      	it	ne
   80c88:	2400      	movne	r4, #0
   80c8a:	d005      	beq.n	80c98 <__libc_init_array+0x1c>
   80c8c:	3401      	adds	r4, #1
   80c8e:	f855 3b04 	ldr.w	r3, [r5], #4
   80c92:	4798      	blx	r3
   80c94:	42a6      	cmp	r6, r4
   80c96:	d1f9      	bne.n	80c8c <__libc_init_array+0x10>
   80c98:	4e0a      	ldr	r6, [pc, #40]	; (80cc4 <__libc_init_array+0x48>)
   80c9a:	4d0b      	ldr	r5, [pc, #44]	; (80cc8 <__libc_init_array+0x4c>)
   80c9c:	f003 f80e 	bl	83cbc <_init>
   80ca0:	1b76      	subs	r6, r6, r5
   80ca2:	10b6      	asrs	r6, r6, #2
   80ca4:	bf18      	it	ne
   80ca6:	2400      	movne	r4, #0
   80ca8:	d006      	beq.n	80cb8 <__libc_init_array+0x3c>
   80caa:	3401      	adds	r4, #1
   80cac:	f855 3b04 	ldr.w	r3, [r5], #4
   80cb0:	4798      	blx	r3
   80cb2:	42a6      	cmp	r6, r4
   80cb4:	d1f9      	bne.n	80caa <__libc_init_array+0x2e>
   80cb6:	bd70      	pop	{r4, r5, r6, pc}
   80cb8:	bd70      	pop	{r4, r5, r6, pc}
   80cba:	bf00      	nop
   80cbc:	00083cc8 	.word	0x00083cc8
   80cc0:	00083cc8 	.word	0x00083cc8
   80cc4:	00083cd0 	.word	0x00083cd0
   80cc8:	00083cc8 	.word	0x00083cc8

00080ccc <iprintf>:
   80ccc:	b40f      	push	{r0, r1, r2, r3}
   80cce:	b510      	push	{r4, lr}
   80cd0:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <iprintf+0x24>)
   80cd2:	b082      	sub	sp, #8
   80cd4:	ac04      	add	r4, sp, #16
   80cd6:	f854 2b04 	ldr.w	r2, [r4], #4
   80cda:	6818      	ldr	r0, [r3, #0]
   80cdc:	4623      	mov	r3, r4
   80cde:	6881      	ldr	r1, [r0, #8]
   80ce0:	9401      	str	r4, [sp, #4]
   80ce2:	f000 f97b 	bl	80fdc <_vfiprintf_r>
   80ce6:	b002      	add	sp, #8
   80ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80cec:	b004      	add	sp, #16
   80cee:	4770      	bx	lr
   80cf0:	20070558 	.word	0x20070558

00080cf4 <memset>:
   80cf4:	b470      	push	{r4, r5, r6}
   80cf6:	0784      	lsls	r4, r0, #30
   80cf8:	d046      	beq.n	80d88 <memset+0x94>
   80cfa:	1e54      	subs	r4, r2, #1
   80cfc:	2a00      	cmp	r2, #0
   80cfe:	d041      	beq.n	80d84 <memset+0x90>
   80d00:	b2cd      	uxtb	r5, r1
   80d02:	4603      	mov	r3, r0
   80d04:	e002      	b.n	80d0c <memset+0x18>
   80d06:	1e62      	subs	r2, r4, #1
   80d08:	b3e4      	cbz	r4, 80d84 <memset+0x90>
   80d0a:	4614      	mov	r4, r2
   80d0c:	f803 5b01 	strb.w	r5, [r3], #1
   80d10:	079a      	lsls	r2, r3, #30
   80d12:	d1f8      	bne.n	80d06 <memset+0x12>
   80d14:	2c03      	cmp	r4, #3
   80d16:	d92e      	bls.n	80d76 <memset+0x82>
   80d18:	b2cd      	uxtb	r5, r1
   80d1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80d1e:	2c0f      	cmp	r4, #15
   80d20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80d24:	d919      	bls.n	80d5a <memset+0x66>
   80d26:	4626      	mov	r6, r4
   80d28:	f103 0210 	add.w	r2, r3, #16
   80d2c:	3e10      	subs	r6, #16
   80d2e:	2e0f      	cmp	r6, #15
   80d30:	f842 5c10 	str.w	r5, [r2, #-16]
   80d34:	f842 5c0c 	str.w	r5, [r2, #-12]
   80d38:	f842 5c08 	str.w	r5, [r2, #-8]
   80d3c:	f842 5c04 	str.w	r5, [r2, #-4]
   80d40:	f102 0210 	add.w	r2, r2, #16
   80d44:	d8f2      	bhi.n	80d2c <memset+0x38>
   80d46:	f1a4 0210 	sub.w	r2, r4, #16
   80d4a:	f022 020f 	bic.w	r2, r2, #15
   80d4e:	f004 040f 	and.w	r4, r4, #15
   80d52:	3210      	adds	r2, #16
   80d54:	2c03      	cmp	r4, #3
   80d56:	4413      	add	r3, r2
   80d58:	d90d      	bls.n	80d76 <memset+0x82>
   80d5a:	461e      	mov	r6, r3
   80d5c:	4622      	mov	r2, r4
   80d5e:	3a04      	subs	r2, #4
   80d60:	2a03      	cmp	r2, #3
   80d62:	f846 5b04 	str.w	r5, [r6], #4
   80d66:	d8fa      	bhi.n	80d5e <memset+0x6a>
   80d68:	1f22      	subs	r2, r4, #4
   80d6a:	f022 0203 	bic.w	r2, r2, #3
   80d6e:	3204      	adds	r2, #4
   80d70:	4413      	add	r3, r2
   80d72:	f004 0403 	and.w	r4, r4, #3
   80d76:	b12c      	cbz	r4, 80d84 <memset+0x90>
   80d78:	b2c9      	uxtb	r1, r1
   80d7a:	441c      	add	r4, r3
   80d7c:	f803 1b01 	strb.w	r1, [r3], #1
   80d80:	42a3      	cmp	r3, r4
   80d82:	d1fb      	bne.n	80d7c <memset+0x88>
   80d84:	bc70      	pop	{r4, r5, r6}
   80d86:	4770      	bx	lr
   80d88:	4614      	mov	r4, r2
   80d8a:	4603      	mov	r3, r0
   80d8c:	e7c2      	b.n	80d14 <memset+0x20>
   80d8e:	bf00      	nop

00080d90 <_puts_r>:
   80d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d92:	4604      	mov	r4, r0
   80d94:	b089      	sub	sp, #36	; 0x24
   80d96:	4608      	mov	r0, r1
   80d98:	460d      	mov	r5, r1
   80d9a:	f000 f8b5 	bl	80f08 <strlen>
   80d9e:	68a3      	ldr	r3, [r4, #8]
   80da0:	2102      	movs	r1, #2
   80da2:	899a      	ldrh	r2, [r3, #12]
   80da4:	f8df e044 	ldr.w	lr, [pc, #68]	; 80dec <_puts_r+0x5c>
   80da8:	f100 0c01 	add.w	ip, r0, #1
   80dac:	2701      	movs	r7, #1
   80dae:	ae04      	add	r6, sp, #16
   80db0:	9102      	str	r1, [sp, #8]
   80db2:	0491      	lsls	r1, r2, #18
   80db4:	9504      	str	r5, [sp, #16]
   80db6:	9005      	str	r0, [sp, #20]
   80db8:	f8cd c00c 	str.w	ip, [sp, #12]
   80dbc:	f8cd e018 	str.w	lr, [sp, #24]
   80dc0:	9707      	str	r7, [sp, #28]
   80dc2:	9601      	str	r6, [sp, #4]
   80dc4:	d406      	bmi.n	80dd4 <_puts_r+0x44>
   80dc6:	6e59      	ldr	r1, [r3, #100]	; 0x64
   80dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80dcc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   80dd0:	819a      	strh	r2, [r3, #12]
   80dd2:	6659      	str	r1, [r3, #100]	; 0x64
   80dd4:	4620      	mov	r0, r4
   80dd6:	4619      	mov	r1, r3
   80dd8:	aa01      	add	r2, sp, #4
   80dda:	f001 fa9f 	bl	8231c <__sfvwrite_r>
   80dde:	2800      	cmp	r0, #0
   80de0:	bf14      	ite	ne
   80de2:	f04f 30ff 	movne.w	r0, #4294967295
   80de6:	200a      	moveq	r0, #10
   80de8:	b009      	add	sp, #36	; 0x24
   80dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80dec:	00083c68 	.word	0x00083c68

00080df0 <puts>:
   80df0:	4b02      	ldr	r3, [pc, #8]	; (80dfc <puts+0xc>)
   80df2:	4601      	mov	r1, r0
   80df4:	6818      	ldr	r0, [r3, #0]
   80df6:	f7ff bfcb 	b.w	80d90 <_puts_r>
   80dfa:	bf00      	nop
   80dfc:	20070558 	.word	0x20070558

00080e00 <setbuf>:
   80e00:	2900      	cmp	r1, #0
   80e02:	bf0c      	ite	eq
   80e04:	2202      	moveq	r2, #2
   80e06:	2200      	movne	r2, #0
   80e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80e0c:	f000 b800 	b.w	80e10 <setvbuf>

00080e10 <setvbuf>:
   80e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e14:	4d3a      	ldr	r5, [pc, #232]	; (80f00 <setvbuf+0xf0>)
   80e16:	4604      	mov	r4, r0
   80e18:	682e      	ldr	r6, [r5, #0]
   80e1a:	4690      	mov	r8, r2
   80e1c:	460d      	mov	r5, r1
   80e1e:	461f      	mov	r7, r3
   80e20:	b116      	cbz	r6, 80e28 <setvbuf+0x18>
   80e22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   80e24:	2b00      	cmp	r3, #0
   80e26:	d03c      	beq.n	80ea2 <setvbuf+0x92>
   80e28:	f1b8 0f02 	cmp.w	r8, #2
   80e2c:	d82f      	bhi.n	80e8e <setvbuf+0x7e>
   80e2e:	2f00      	cmp	r7, #0
   80e30:	db2d      	blt.n	80e8e <setvbuf+0x7e>
   80e32:	4621      	mov	r1, r4
   80e34:	4630      	mov	r0, r6
   80e36:	f001 f82d 	bl	81e94 <_fflush_r>
   80e3a:	89a1      	ldrh	r1, [r4, #12]
   80e3c:	2300      	movs	r3, #0
   80e3e:	6063      	str	r3, [r4, #4]
   80e40:	61a3      	str	r3, [r4, #24]
   80e42:	060b      	lsls	r3, r1, #24
   80e44:	d427      	bmi.n	80e96 <setvbuf+0x86>
   80e46:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   80e4a:	b289      	uxth	r1, r1
   80e4c:	f1b8 0f02 	cmp.w	r8, #2
   80e50:	81a1      	strh	r1, [r4, #12]
   80e52:	d02a      	beq.n	80eaa <setvbuf+0x9a>
   80e54:	2d00      	cmp	r5, #0
   80e56:	d036      	beq.n	80ec6 <setvbuf+0xb6>
   80e58:	f1b8 0f01 	cmp.w	r8, #1
   80e5c:	d011      	beq.n	80e82 <setvbuf+0x72>
   80e5e:	b289      	uxth	r1, r1
   80e60:	f001 0008 	and.w	r0, r1, #8
   80e64:	4b27      	ldr	r3, [pc, #156]	; (80f04 <setvbuf+0xf4>)
   80e66:	b280      	uxth	r0, r0
   80e68:	63f3      	str	r3, [r6, #60]	; 0x3c
   80e6a:	6025      	str	r5, [r4, #0]
   80e6c:	6125      	str	r5, [r4, #16]
   80e6e:	6167      	str	r7, [r4, #20]
   80e70:	b178      	cbz	r0, 80e92 <setvbuf+0x82>
   80e72:	f011 0f03 	tst.w	r1, #3
   80e76:	bf18      	it	ne
   80e78:	2700      	movne	r7, #0
   80e7a:	2000      	movs	r0, #0
   80e7c:	60a7      	str	r7, [r4, #8]
   80e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e82:	f041 0101 	orr.w	r1, r1, #1
   80e86:	427b      	negs	r3, r7
   80e88:	81a1      	strh	r1, [r4, #12]
   80e8a:	61a3      	str	r3, [r4, #24]
   80e8c:	e7e7      	b.n	80e5e <setvbuf+0x4e>
   80e8e:	f04f 30ff 	mov.w	r0, #4294967295
   80e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e96:	6921      	ldr	r1, [r4, #16]
   80e98:	4630      	mov	r0, r6
   80e9a:	f001 f967 	bl	8216c <_free_r>
   80e9e:	89a1      	ldrh	r1, [r4, #12]
   80ea0:	e7d1      	b.n	80e46 <setvbuf+0x36>
   80ea2:	4630      	mov	r0, r6
   80ea4:	f001 f88a 	bl	81fbc <__sinit>
   80ea8:	e7be      	b.n	80e28 <setvbuf+0x18>
   80eaa:	2000      	movs	r0, #0
   80eac:	f104 0343 	add.w	r3, r4, #67	; 0x43
   80eb0:	f041 0102 	orr.w	r1, r1, #2
   80eb4:	2500      	movs	r5, #0
   80eb6:	2201      	movs	r2, #1
   80eb8:	81a1      	strh	r1, [r4, #12]
   80eba:	60a5      	str	r5, [r4, #8]
   80ebc:	6023      	str	r3, [r4, #0]
   80ebe:	6123      	str	r3, [r4, #16]
   80ec0:	6162      	str	r2, [r4, #20]
   80ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ec6:	2f00      	cmp	r7, #0
   80ec8:	bf08      	it	eq
   80eca:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80ece:	4638      	mov	r0, r7
   80ed0:	f001 fc56 	bl	82780 <malloc>
   80ed4:	4605      	mov	r5, r0
   80ed6:	b128      	cbz	r0, 80ee4 <setvbuf+0xd4>
   80ed8:	89a1      	ldrh	r1, [r4, #12]
   80eda:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80ede:	b289      	uxth	r1, r1
   80ee0:	81a1      	strh	r1, [r4, #12]
   80ee2:	e7b9      	b.n	80e58 <setvbuf+0x48>
   80ee4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80ee8:	f001 fc4a 	bl	82780 <malloc>
   80eec:	4605      	mov	r5, r0
   80eee:	b918      	cbnz	r0, 80ef8 <setvbuf+0xe8>
   80ef0:	89a1      	ldrh	r1, [r4, #12]
   80ef2:	f04f 30ff 	mov.w	r0, #4294967295
   80ef6:	e7d9      	b.n	80eac <setvbuf+0x9c>
   80ef8:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80efc:	e7ec      	b.n	80ed8 <setvbuf+0xc8>
   80efe:	bf00      	nop
   80f00:	20070558 	.word	0x20070558
   80f04:	00081ec1 	.word	0x00081ec1

00080f08 <strlen>:
   80f08:	f020 0103 	bic.w	r1, r0, #3
   80f0c:	f010 0003 	ands.w	r0, r0, #3
   80f10:	f1c0 0000 	rsb	r0, r0, #0
   80f14:	f851 3b04 	ldr.w	r3, [r1], #4
   80f18:	f100 0c04 	add.w	ip, r0, #4
   80f1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   80f20:	f06f 0200 	mvn.w	r2, #0
   80f24:	bf1c      	itt	ne
   80f26:	fa22 f20c 	lsrne.w	r2, r2, ip
   80f2a:	4313      	orrne	r3, r2
   80f2c:	f04f 0c01 	mov.w	ip, #1
   80f30:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   80f34:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   80f38:	eba3 020c 	sub.w	r2, r3, ip
   80f3c:	ea22 0203 	bic.w	r2, r2, r3
   80f40:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   80f44:	bf04      	itt	eq
   80f46:	f851 3b04 	ldreq.w	r3, [r1], #4
   80f4a:	3004      	addeq	r0, #4
   80f4c:	d0f4      	beq.n	80f38 <strlen+0x30>
   80f4e:	f1c2 0100 	rsb	r1, r2, #0
   80f52:	ea02 0201 	and.w	r2, r2, r1
   80f56:	fab2 f282 	clz	r2, r2
   80f5a:	f1c2 021f 	rsb	r2, r2, #31
   80f5e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   80f62:	4770      	bx	lr

00080f64 <__sprint_r.part.0>:
   80f64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f6a:	049c      	lsls	r4, r3, #18
   80f6c:	460f      	mov	r7, r1
   80f6e:	4692      	mov	sl, r2
   80f70:	d52b      	bpl.n	80fca <__sprint_r.part.0+0x66>
   80f72:	6893      	ldr	r3, [r2, #8]
   80f74:	6812      	ldr	r2, [r2, #0]
   80f76:	b333      	cbz	r3, 80fc6 <__sprint_r.part.0+0x62>
   80f78:	4680      	mov	r8, r0
   80f7a:	f102 0908 	add.w	r9, r2, #8
   80f7e:	e919 0060 	ldmdb	r9, {r5, r6}
   80f82:	08b6      	lsrs	r6, r6, #2
   80f84:	d017      	beq.n	80fb6 <__sprint_r.part.0+0x52>
   80f86:	3d04      	subs	r5, #4
   80f88:	2400      	movs	r4, #0
   80f8a:	e001      	b.n	80f90 <__sprint_r.part.0+0x2c>
   80f8c:	42a6      	cmp	r6, r4
   80f8e:	d010      	beq.n	80fb2 <__sprint_r.part.0+0x4e>
   80f90:	4640      	mov	r0, r8
   80f92:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80f96:	463a      	mov	r2, r7
   80f98:	f001 f888 	bl	820ac <_fputwc_r>
   80f9c:	1c43      	adds	r3, r0, #1
   80f9e:	f104 0401 	add.w	r4, r4, #1
   80fa2:	d1f3      	bne.n	80f8c <__sprint_r.part.0+0x28>
   80fa4:	2300      	movs	r3, #0
   80fa6:	f8ca 3008 	str.w	r3, [sl, #8]
   80faa:	f8ca 3004 	str.w	r3, [sl, #4]
   80fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80fb2:	f8da 3008 	ldr.w	r3, [sl, #8]
   80fb6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   80fba:	f8ca 3008 	str.w	r3, [sl, #8]
   80fbe:	f109 0908 	add.w	r9, r9, #8
   80fc2:	2b00      	cmp	r3, #0
   80fc4:	d1db      	bne.n	80f7e <__sprint_r.part.0+0x1a>
   80fc6:	2000      	movs	r0, #0
   80fc8:	e7ec      	b.n	80fa4 <__sprint_r.part.0+0x40>
   80fca:	f001 f9a7 	bl	8231c <__sfvwrite_r>
   80fce:	2300      	movs	r3, #0
   80fd0:	f8ca 3008 	str.w	r3, [sl, #8]
   80fd4:	f8ca 3004 	str.w	r3, [sl, #4]
   80fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00080fdc <_vfiprintf_r>:
   80fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80fe0:	b0ab      	sub	sp, #172	; 0xac
   80fe2:	461c      	mov	r4, r3
   80fe4:	9100      	str	r1, [sp, #0]
   80fe6:	4693      	mov	fp, r2
   80fe8:	9304      	str	r3, [sp, #16]
   80fea:	9001      	str	r0, [sp, #4]
   80fec:	b118      	cbz	r0, 80ff6 <_vfiprintf_r+0x1a>
   80fee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	f000 80e3 	beq.w	811bc <_vfiprintf_r+0x1e0>
   80ff6:	9b00      	ldr	r3, [sp, #0]
   80ff8:	8999      	ldrh	r1, [r3, #12]
   80ffa:	b28a      	uxth	r2, r1
   80ffc:	0490      	lsls	r0, r2, #18
   80ffe:	d408      	bmi.n	81012 <_vfiprintf_r+0x36>
   81000:	4618      	mov	r0, r3
   81002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   81004:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   81008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8100c:	8182      	strh	r2, [r0, #12]
   8100e:	6643      	str	r3, [r0, #100]	; 0x64
   81010:	b292      	uxth	r2, r2
   81012:	0711      	lsls	r1, r2, #28
   81014:	f140 80b2 	bpl.w	8117c <_vfiprintf_r+0x1a0>
   81018:	9b00      	ldr	r3, [sp, #0]
   8101a:	691b      	ldr	r3, [r3, #16]
   8101c:	2b00      	cmp	r3, #0
   8101e:	f000 80ad 	beq.w	8117c <_vfiprintf_r+0x1a0>
   81022:	f002 021a 	and.w	r2, r2, #26
   81026:	2a0a      	cmp	r2, #10
   81028:	f000 80b4 	beq.w	81194 <_vfiprintf_r+0x1b8>
   8102c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   81030:	4654      	mov	r4, sl
   81032:	2300      	movs	r3, #0
   81034:	9309      	str	r3, [sp, #36]	; 0x24
   81036:	9302      	str	r3, [sp, #8]
   81038:	930f      	str	r3, [sp, #60]	; 0x3c
   8103a:	930e      	str	r3, [sp, #56]	; 0x38
   8103c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   81040:	f89b 3000 	ldrb.w	r3, [fp]
   81044:	2b00      	cmp	r3, #0
   81046:	f000 84a3 	beq.w	81990 <_vfiprintf_r+0x9b4>
   8104a:	2b25      	cmp	r3, #37	; 0x25
   8104c:	f000 84a0 	beq.w	81990 <_vfiprintf_r+0x9b4>
   81050:	465a      	mov	r2, fp
   81052:	e001      	b.n	81058 <_vfiprintf_r+0x7c>
   81054:	2b25      	cmp	r3, #37	; 0x25
   81056:	d003      	beq.n	81060 <_vfiprintf_r+0x84>
   81058:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   8105c:	2b00      	cmp	r3, #0
   8105e:	d1f9      	bne.n	81054 <_vfiprintf_r+0x78>
   81060:	ebcb 0602 	rsb	r6, fp, r2
   81064:	4615      	mov	r5, r2
   81066:	b196      	cbz	r6, 8108e <_vfiprintf_r+0xb2>
   81068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8106a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8106c:	3301      	adds	r3, #1
   8106e:	4432      	add	r2, r6
   81070:	2b07      	cmp	r3, #7
   81072:	f8c4 b000 	str.w	fp, [r4]
   81076:	6066      	str	r6, [r4, #4]
   81078:	920f      	str	r2, [sp, #60]	; 0x3c
   8107a:	930e      	str	r3, [sp, #56]	; 0x38
   8107c:	dd79      	ble.n	81172 <_vfiprintf_r+0x196>
   8107e:	2a00      	cmp	r2, #0
   81080:	f040 84ad 	bne.w	819de <_vfiprintf_r+0xa02>
   81084:	4654      	mov	r4, sl
   81086:	9b02      	ldr	r3, [sp, #8]
   81088:	920e      	str	r2, [sp, #56]	; 0x38
   8108a:	4433      	add	r3, r6
   8108c:	9302      	str	r3, [sp, #8]
   8108e:	782b      	ldrb	r3, [r5, #0]
   81090:	2b00      	cmp	r3, #0
   81092:	f000 835f 	beq.w	81754 <_vfiprintf_r+0x778>
   81096:	f04f 0300 	mov.w	r3, #0
   8109a:	2100      	movs	r1, #0
   8109c:	f04f 3cff 	mov.w	ip, #4294967295
   810a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   810a4:	1c68      	adds	r0, r5, #1
   810a6:	786b      	ldrb	r3, [r5, #1]
   810a8:	4688      	mov	r8, r1
   810aa:	460d      	mov	r5, r1
   810ac:	4666      	mov	r6, ip
   810ae:	f100 0b01 	add.w	fp, r0, #1
   810b2:	f1a3 0220 	sub.w	r2, r3, #32
   810b6:	2a58      	cmp	r2, #88	; 0x58
   810b8:	f200 82aa 	bhi.w	81610 <_vfiprintf_r+0x634>
   810bc:	e8df f012 	tbh	[pc, r2, lsl #1]
   810c0:	02a8029a 	.word	0x02a8029a
   810c4:	02a202a8 	.word	0x02a202a8
   810c8:	02a802a8 	.word	0x02a802a8
   810cc:	02a802a8 	.word	0x02a802a8
   810d0:	02a802a8 	.word	0x02a802a8
   810d4:	02600254 	.word	0x02600254
   810d8:	010d02a8 	.word	0x010d02a8
   810dc:	02a8026c 	.word	0x02a8026c
   810e0:	012f0129 	.word	0x012f0129
   810e4:	012f012f 	.word	0x012f012f
   810e8:	012f012f 	.word	0x012f012f
   810ec:	012f012f 	.word	0x012f012f
   810f0:	012f012f 	.word	0x012f012f
   810f4:	02a802a8 	.word	0x02a802a8
   810f8:	02a802a8 	.word	0x02a802a8
   810fc:	02a802a8 	.word	0x02a802a8
   81100:	02a802a8 	.word	0x02a802a8
   81104:	02a802a8 	.word	0x02a802a8
   81108:	02a8013d 	.word	0x02a8013d
   8110c:	02a802a8 	.word	0x02a802a8
   81110:	02a802a8 	.word	0x02a802a8
   81114:	02a802a8 	.word	0x02a802a8
   81118:	02a802a8 	.word	0x02a802a8
   8111c:	017402a8 	.word	0x017402a8
   81120:	02a802a8 	.word	0x02a802a8
   81124:	02a802a8 	.word	0x02a802a8
   81128:	018b02a8 	.word	0x018b02a8
   8112c:	02a802a8 	.word	0x02a802a8
   81130:	02a801a3 	.word	0x02a801a3
   81134:	02a802a8 	.word	0x02a802a8
   81138:	02a802a8 	.word	0x02a802a8
   8113c:	02a802a8 	.word	0x02a802a8
   81140:	02a802a8 	.word	0x02a802a8
   81144:	01c702a8 	.word	0x01c702a8
   81148:	02a801da 	.word	0x02a801da
   8114c:	02a802a8 	.word	0x02a802a8
   81150:	01da0123 	.word	0x01da0123
   81154:	02a802a8 	.word	0x02a802a8
   81158:	02a8024b 	.word	0x02a8024b
   8115c:	01130288 	.word	0x01130288
   81160:	020701f4 	.word	0x020701f4
   81164:	020d02a8 	.word	0x020d02a8
   81168:	008102a8 	.word	0x008102a8
   8116c:	02a802a8 	.word	0x02a802a8
   81170:	0232      	.short	0x0232
   81172:	3408      	adds	r4, #8
   81174:	9b02      	ldr	r3, [sp, #8]
   81176:	4433      	add	r3, r6
   81178:	9302      	str	r3, [sp, #8]
   8117a:	e788      	b.n	8108e <_vfiprintf_r+0xb2>
   8117c:	9801      	ldr	r0, [sp, #4]
   8117e:	9900      	ldr	r1, [sp, #0]
   81180:	f000 fd72 	bl	81c68 <__swsetup_r>
   81184:	b9a8      	cbnz	r0, 811b2 <_vfiprintf_r+0x1d6>
   81186:	9b00      	ldr	r3, [sp, #0]
   81188:	899a      	ldrh	r2, [r3, #12]
   8118a:	f002 021a 	and.w	r2, r2, #26
   8118e:	2a0a      	cmp	r2, #10
   81190:	f47f af4c 	bne.w	8102c <_vfiprintf_r+0x50>
   81194:	9b00      	ldr	r3, [sp, #0]
   81196:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   8119a:	2b00      	cmp	r3, #0
   8119c:	f6ff af46 	blt.w	8102c <_vfiprintf_r+0x50>
   811a0:	9801      	ldr	r0, [sp, #4]
   811a2:	9900      	ldr	r1, [sp, #0]
   811a4:	465a      	mov	r2, fp
   811a6:	4623      	mov	r3, r4
   811a8:	f000 fd20 	bl	81bec <__sbprintf>
   811ac:	b02b      	add	sp, #172	; 0xac
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811b2:	f04f 30ff 	mov.w	r0, #4294967295
   811b6:	b02b      	add	sp, #172	; 0xac
   811b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811bc:	f000 fefe 	bl	81fbc <__sinit>
   811c0:	e719      	b.n	80ff6 <_vfiprintf_r+0x1a>
   811c2:	f018 0f20 	tst.w	r8, #32
   811c6:	9503      	str	r5, [sp, #12]
   811c8:	46b4      	mov	ip, r6
   811ca:	f000 810c 	beq.w	813e6 <_vfiprintf_r+0x40a>
   811ce:	9b04      	ldr	r3, [sp, #16]
   811d0:	3307      	adds	r3, #7
   811d2:	f023 0307 	bic.w	r3, r3, #7
   811d6:	f103 0208 	add.w	r2, r3, #8
   811da:	e9d3 6700 	ldrd	r6, r7, [r3]
   811de:	9204      	str	r2, [sp, #16]
   811e0:	2301      	movs	r3, #1
   811e2:	f04f 0200 	mov.w	r2, #0
   811e6:	46e1      	mov	r9, ip
   811e8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   811ec:	2500      	movs	r5, #0
   811ee:	f1bc 0f00 	cmp.w	ip, #0
   811f2:	bfa8      	it	ge
   811f4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   811f8:	ea56 0207 	orrs.w	r2, r6, r7
   811fc:	f040 80c4 	bne.w	81388 <_vfiprintf_r+0x3ac>
   81200:	f1bc 0f00 	cmp.w	ip, #0
   81204:	f000 8380 	beq.w	81908 <_vfiprintf_r+0x92c>
   81208:	2b01      	cmp	r3, #1
   8120a:	f000 80c5 	beq.w	81398 <_vfiprintf_r+0x3bc>
   8120e:	2b02      	cmp	r3, #2
   81210:	f000 8386 	beq.w	81920 <_vfiprintf_r+0x944>
   81214:	4651      	mov	r1, sl
   81216:	08f2      	lsrs	r2, r6, #3
   81218:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8121c:	08f8      	lsrs	r0, r7, #3
   8121e:	f006 0307 	and.w	r3, r6, #7
   81222:	4607      	mov	r7, r0
   81224:	4616      	mov	r6, r2
   81226:	3330      	adds	r3, #48	; 0x30
   81228:	ea56 0207 	orrs.w	r2, r6, r7
   8122c:	f801 3d01 	strb.w	r3, [r1, #-1]!
   81230:	d1f1      	bne.n	81216 <_vfiprintf_r+0x23a>
   81232:	f018 0f01 	tst.w	r8, #1
   81236:	9107      	str	r1, [sp, #28]
   81238:	f040 83fa 	bne.w	81a30 <_vfiprintf_r+0xa54>
   8123c:	ebc1 090a 	rsb	r9, r1, sl
   81240:	45e1      	cmp	r9, ip
   81242:	464e      	mov	r6, r9
   81244:	bfb8      	it	lt
   81246:	4666      	movlt	r6, ip
   81248:	b105      	cbz	r5, 8124c <_vfiprintf_r+0x270>
   8124a:	3601      	adds	r6, #1
   8124c:	f018 0302 	ands.w	r3, r8, #2
   81250:	9305      	str	r3, [sp, #20]
   81252:	bf18      	it	ne
   81254:	3602      	addne	r6, #2
   81256:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   8125a:	9306      	str	r3, [sp, #24]
   8125c:	f040 81f9 	bne.w	81652 <_vfiprintf_r+0x676>
   81260:	9b03      	ldr	r3, [sp, #12]
   81262:	1b9d      	subs	r5, r3, r6
   81264:	2d00      	cmp	r5, #0
   81266:	f340 81f4 	ble.w	81652 <_vfiprintf_r+0x676>
   8126a:	2d10      	cmp	r5, #16
   8126c:	f340 848a 	ble.w	81b84 <_vfiprintf_r+0xba8>
   81270:	4620      	mov	r0, r4
   81272:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   81276:	4664      	mov	r4, ip
   81278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8127a:	4fc4      	ldr	r7, [pc, #784]	; (8158c <_vfiprintf_r+0x5b0>)
   8127c:	2310      	movs	r3, #16
   8127e:	4671      	mov	r1, lr
   81280:	4684      	mov	ip, r0
   81282:	e007      	b.n	81294 <_vfiprintf_r+0x2b8>
   81284:	f101 0e02 	add.w	lr, r1, #2
   81288:	4601      	mov	r1, r0
   8128a:	f10c 0c08 	add.w	ip, ip, #8
   8128e:	3d10      	subs	r5, #16
   81290:	2d10      	cmp	r5, #16
   81292:	dd13      	ble.n	812bc <_vfiprintf_r+0x2e0>
   81294:	1c48      	adds	r0, r1, #1
   81296:	3210      	adds	r2, #16
   81298:	2807      	cmp	r0, #7
   8129a:	920f      	str	r2, [sp, #60]	; 0x3c
   8129c:	f8cc 7000 	str.w	r7, [ip]
   812a0:	f8cc 3004 	str.w	r3, [ip, #4]
   812a4:	900e      	str	r0, [sp, #56]	; 0x38
   812a6:	dded      	ble.n	81284 <_vfiprintf_r+0x2a8>
   812a8:	2a00      	cmp	r2, #0
   812aa:	f040 81c2 	bne.w	81632 <_vfiprintf_r+0x656>
   812ae:	3d10      	subs	r5, #16
   812b0:	2d10      	cmp	r5, #16
   812b2:	4611      	mov	r1, r2
   812b4:	f04f 0e01 	mov.w	lr, #1
   812b8:	46d4      	mov	ip, sl
   812ba:	dceb      	bgt.n	81294 <_vfiprintf_r+0x2b8>
   812bc:	4663      	mov	r3, ip
   812be:	4671      	mov	r1, lr
   812c0:	46a4      	mov	ip, r4
   812c2:	461c      	mov	r4, r3
   812c4:	442a      	add	r2, r5
   812c6:	2907      	cmp	r1, #7
   812c8:	920f      	str	r2, [sp, #60]	; 0x3c
   812ca:	6027      	str	r7, [r4, #0]
   812cc:	6065      	str	r5, [r4, #4]
   812ce:	910e      	str	r1, [sp, #56]	; 0x38
   812d0:	f300 8346 	bgt.w	81960 <_vfiprintf_r+0x984>
   812d4:	3408      	adds	r4, #8
   812d6:	1c48      	adds	r0, r1, #1
   812d8:	e1be      	b.n	81658 <_vfiprintf_r+0x67c>
   812da:	4658      	mov	r0, fp
   812dc:	f048 0804 	orr.w	r8, r8, #4
   812e0:	f89b 3000 	ldrb.w	r3, [fp]
   812e4:	e6e3      	b.n	810ae <_vfiprintf_r+0xd2>
   812e6:	f018 0320 	ands.w	r3, r8, #32
   812ea:	9503      	str	r5, [sp, #12]
   812ec:	46b4      	mov	ip, r6
   812ee:	d062      	beq.n	813b6 <_vfiprintf_r+0x3da>
   812f0:	9b04      	ldr	r3, [sp, #16]
   812f2:	3307      	adds	r3, #7
   812f4:	f023 0307 	bic.w	r3, r3, #7
   812f8:	f103 0208 	add.w	r2, r3, #8
   812fc:	e9d3 6700 	ldrd	r6, r7, [r3]
   81300:	9204      	str	r2, [sp, #16]
   81302:	2300      	movs	r3, #0
   81304:	e76d      	b.n	811e2 <_vfiprintf_r+0x206>
   81306:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   8130a:	f89b 3000 	ldrb.w	r3, [fp]
   8130e:	4658      	mov	r0, fp
   81310:	e6cd      	b.n	810ae <_vfiprintf_r+0xd2>
   81312:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   81316:	f89b 3000 	ldrb.w	r3, [fp]
   8131a:	4658      	mov	r0, fp
   8131c:	e6c7      	b.n	810ae <_vfiprintf_r+0xd2>
   8131e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81322:	2500      	movs	r5, #0
   81324:	f81b 3b01 	ldrb.w	r3, [fp], #1
   81328:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8132c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81330:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81334:	2a09      	cmp	r2, #9
   81336:	d9f5      	bls.n	81324 <_vfiprintf_r+0x348>
   81338:	e6bb      	b.n	810b2 <_vfiprintf_r+0xd6>
   8133a:	f048 0810 	orr.w	r8, r8, #16
   8133e:	f018 0f20 	tst.w	r8, #32
   81342:	9503      	str	r5, [sp, #12]
   81344:	46b4      	mov	ip, r6
   81346:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8134a:	f000 809b 	beq.w	81484 <_vfiprintf_r+0x4a8>
   8134e:	9904      	ldr	r1, [sp, #16]
   81350:	3107      	adds	r1, #7
   81352:	f021 0107 	bic.w	r1, r1, #7
   81356:	e9d1 2300 	ldrd	r2, r3, [r1]
   8135a:	4616      	mov	r6, r2
   8135c:	461f      	mov	r7, r3
   8135e:	3108      	adds	r1, #8
   81360:	9104      	str	r1, [sp, #16]
   81362:	2a00      	cmp	r2, #0
   81364:	f173 0300 	sbcs.w	r3, r3, #0
   81368:	f2c0 83a4 	blt.w	81ab4 <_vfiprintf_r+0xad8>
   8136c:	f1bc 0f00 	cmp.w	ip, #0
   81370:	bfa8      	it	ge
   81372:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   81376:	ea56 0207 	orrs.w	r2, r6, r7
   8137a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8137e:	46e1      	mov	r9, ip
   81380:	f04f 0301 	mov.w	r3, #1
   81384:	f43f af3c 	beq.w	81200 <_vfiprintf_r+0x224>
   81388:	2b01      	cmp	r3, #1
   8138a:	f47f af40 	bne.w	8120e <_vfiprintf_r+0x232>
   8138e:	2f00      	cmp	r7, #0
   81390:	bf08      	it	eq
   81392:	2e0a      	cmpeq	r6, #10
   81394:	f080 8332 	bcs.w	819fc <_vfiprintf_r+0xa20>
   81398:	ab2a      	add	r3, sp, #168	; 0xa8
   8139a:	3630      	adds	r6, #48	; 0x30
   8139c:	f803 6d41 	strb.w	r6, [r3, #-65]!
   813a0:	ebc3 090a 	rsb	r9, r3, sl
   813a4:	9307      	str	r3, [sp, #28]
   813a6:	e74b      	b.n	81240 <_vfiprintf_r+0x264>
   813a8:	f048 0810 	orr.w	r8, r8, #16
   813ac:	f018 0320 	ands.w	r3, r8, #32
   813b0:	9503      	str	r5, [sp, #12]
   813b2:	46b4      	mov	ip, r6
   813b4:	d19c      	bne.n	812f0 <_vfiprintf_r+0x314>
   813b6:	f018 0210 	ands.w	r2, r8, #16
   813ba:	f040 82f7 	bne.w	819ac <_vfiprintf_r+0x9d0>
   813be:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   813c2:	f000 82f3 	beq.w	819ac <_vfiprintf_r+0x9d0>
   813c6:	9904      	ldr	r1, [sp, #16]
   813c8:	4613      	mov	r3, r2
   813ca:	460a      	mov	r2, r1
   813cc:	3204      	adds	r2, #4
   813ce:	880e      	ldrh	r6, [r1, #0]
   813d0:	2700      	movs	r7, #0
   813d2:	9204      	str	r2, [sp, #16]
   813d4:	e705      	b.n	811e2 <_vfiprintf_r+0x206>
   813d6:	f048 0810 	orr.w	r8, r8, #16
   813da:	f018 0f20 	tst.w	r8, #32
   813de:	9503      	str	r5, [sp, #12]
   813e0:	46b4      	mov	ip, r6
   813e2:	f47f aef4 	bne.w	811ce <_vfiprintf_r+0x1f2>
   813e6:	9a04      	ldr	r2, [sp, #16]
   813e8:	f018 0f10 	tst.w	r8, #16
   813ec:	4613      	mov	r3, r2
   813ee:	f040 82e4 	bne.w	819ba <_vfiprintf_r+0x9de>
   813f2:	f018 0f40 	tst.w	r8, #64	; 0x40
   813f6:	f000 82e0 	beq.w	819ba <_vfiprintf_r+0x9de>
   813fa:	8816      	ldrh	r6, [r2, #0]
   813fc:	3204      	adds	r2, #4
   813fe:	2700      	movs	r7, #0
   81400:	2301      	movs	r3, #1
   81402:	9204      	str	r2, [sp, #16]
   81404:	e6ed      	b.n	811e2 <_vfiprintf_r+0x206>
   81406:	4a62      	ldr	r2, [pc, #392]	; (81590 <_vfiprintf_r+0x5b4>)
   81408:	f018 0f20 	tst.w	r8, #32
   8140c:	9503      	str	r5, [sp, #12]
   8140e:	46b4      	mov	ip, r6
   81410:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81414:	9209      	str	r2, [sp, #36]	; 0x24
   81416:	f000 808f 	beq.w	81538 <_vfiprintf_r+0x55c>
   8141a:	9a04      	ldr	r2, [sp, #16]
   8141c:	3207      	adds	r2, #7
   8141e:	f022 0207 	bic.w	r2, r2, #7
   81422:	f102 0108 	add.w	r1, r2, #8
   81426:	9104      	str	r1, [sp, #16]
   81428:	e9d2 6700 	ldrd	r6, r7, [r2]
   8142c:	f018 0f01 	tst.w	r8, #1
   81430:	f000 828f 	beq.w	81952 <_vfiprintf_r+0x976>
   81434:	ea56 0207 	orrs.w	r2, r6, r7
   81438:	f000 828b 	beq.w	81952 <_vfiprintf_r+0x976>
   8143c:	2230      	movs	r2, #48	; 0x30
   8143e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81442:	f048 0802 	orr.w	r8, r8, #2
   81446:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8144a:	2302      	movs	r3, #2
   8144c:	e6c9      	b.n	811e2 <_vfiprintf_r+0x206>
   8144e:	9a04      	ldr	r2, [sp, #16]
   81450:	2601      	movs	r6, #1
   81452:	6813      	ldr	r3, [r2, #0]
   81454:	f04f 0100 	mov.w	r1, #0
   81458:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8145c:	4613      	mov	r3, r2
   8145e:	46b1      	mov	r9, r6
   81460:	3304      	adds	r3, #4
   81462:	9304      	str	r3, [sp, #16]
   81464:	ab10      	add	r3, sp, #64	; 0x40
   81466:	9503      	str	r5, [sp, #12]
   81468:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8146c:	9307      	str	r3, [sp, #28]
   8146e:	f04f 0c00 	mov.w	ip, #0
   81472:	e6eb      	b.n	8124c <_vfiprintf_r+0x270>
   81474:	f018 0f20 	tst.w	r8, #32
   81478:	9503      	str	r5, [sp, #12]
   8147a:	46b4      	mov	ip, r6
   8147c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81480:	f47f af65 	bne.w	8134e <_vfiprintf_r+0x372>
   81484:	9a04      	ldr	r2, [sp, #16]
   81486:	f018 0f10 	tst.w	r8, #16
   8148a:	4613      	mov	r3, r2
   8148c:	f040 82a0 	bne.w	819d0 <_vfiprintf_r+0x9f4>
   81490:	f018 0f40 	tst.w	r8, #64	; 0x40
   81494:	f000 829c 	beq.w	819d0 <_vfiprintf_r+0x9f4>
   81498:	f9b2 6000 	ldrsh.w	r6, [r2]
   8149c:	3304      	adds	r3, #4
   8149e:	17f7      	asrs	r7, r6, #31
   814a0:	9304      	str	r3, [sp, #16]
   814a2:	4632      	mov	r2, r6
   814a4:	463b      	mov	r3, r7
   814a6:	e75c      	b.n	81362 <_vfiprintf_r+0x386>
   814a8:	9904      	ldr	r1, [sp, #16]
   814aa:	2378      	movs	r3, #120	; 0x78
   814ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   814b0:	4b38      	ldr	r3, [pc, #224]	; (81594 <_vfiprintf_r+0x5b8>)
   814b2:	46b4      	mov	ip, r6
   814b4:	2230      	movs	r2, #48	; 0x30
   814b6:	680e      	ldr	r6, [r1, #0]
   814b8:	3104      	adds	r1, #4
   814ba:	9309      	str	r3, [sp, #36]	; 0x24
   814bc:	9503      	str	r5, [sp, #12]
   814be:	f048 0802 	orr.w	r8, r8, #2
   814c2:	9104      	str	r1, [sp, #16]
   814c4:	2700      	movs	r7, #0
   814c6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   814ca:	2302      	movs	r3, #2
   814cc:	e689      	b.n	811e2 <_vfiprintf_r+0x206>
   814ce:	f048 0820 	orr.w	r8, r8, #32
   814d2:	f89b 3000 	ldrb.w	r3, [fp]
   814d6:	4658      	mov	r0, fp
   814d8:	e5e9      	b.n	810ae <_vfiprintf_r+0xd2>
   814da:	f04f 0100 	mov.w	r1, #0
   814de:	9a04      	ldr	r2, [sp, #16]
   814e0:	9503      	str	r5, [sp, #12]
   814e2:	6813      	ldr	r3, [r2, #0]
   814e4:	46b4      	mov	ip, r6
   814e6:	9307      	str	r3, [sp, #28]
   814e8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   814ec:	1d15      	adds	r5, r2, #4
   814ee:	2b00      	cmp	r3, #0
   814f0:	f000 834e 	beq.w	81b90 <_vfiprintf_r+0xbb4>
   814f4:	2e00      	cmp	r6, #0
   814f6:	f2c0 8329 	blt.w	81b4c <_vfiprintf_r+0xb70>
   814fa:	9e07      	ldr	r6, [sp, #28]
   814fc:	4662      	mov	r2, ip
   814fe:	4630      	mov	r0, r6
   81500:	2100      	movs	r1, #0
   81502:	f8cd c010 	str.w	ip, [sp, #16]
   81506:	f001 fbc9 	bl	82c9c <memchr>
   8150a:	f8dd c010 	ldr.w	ip, [sp, #16]
   8150e:	2800      	cmp	r0, #0
   81510:	f000 834e 	beq.w	81bb0 <_vfiprintf_r+0xbd4>
   81514:	9504      	str	r5, [sp, #16]
   81516:	ebc6 0900 	rsb	r9, r6, r0
   8151a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8151e:	f04f 0c00 	mov.w	ip, #0
   81522:	e68d      	b.n	81240 <_vfiprintf_r+0x264>
   81524:	4a1b      	ldr	r2, [pc, #108]	; (81594 <_vfiprintf_r+0x5b8>)
   81526:	f018 0f20 	tst.w	r8, #32
   8152a:	9503      	str	r5, [sp, #12]
   8152c:	46b4      	mov	ip, r6
   8152e:	9209      	str	r2, [sp, #36]	; 0x24
   81530:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81534:	f47f af71 	bne.w	8141a <_vfiprintf_r+0x43e>
   81538:	9904      	ldr	r1, [sp, #16]
   8153a:	f018 0f10 	tst.w	r8, #16
   8153e:	460a      	mov	r2, r1
   81540:	f040 8241 	bne.w	819c6 <_vfiprintf_r+0x9ea>
   81544:	f018 0f40 	tst.w	r8, #64	; 0x40
   81548:	f000 823d 	beq.w	819c6 <_vfiprintf_r+0x9ea>
   8154c:	3204      	adds	r2, #4
   8154e:	880e      	ldrh	r6, [r1, #0]
   81550:	2700      	movs	r7, #0
   81552:	9204      	str	r2, [sp, #16]
   81554:	e76a      	b.n	8142c <_vfiprintf_r+0x450>
   81556:	f89b 3000 	ldrb.w	r3, [fp]
   8155a:	2b6c      	cmp	r3, #108	; 0x6c
   8155c:	f000 82e9 	beq.w	81b32 <_vfiprintf_r+0xb56>
   81560:	f048 0810 	orr.w	r8, r8, #16
   81564:	4658      	mov	r0, fp
   81566:	e5a2      	b.n	810ae <_vfiprintf_r+0xd2>
   81568:	9a04      	ldr	r2, [sp, #16]
   8156a:	4613      	mov	r3, r2
   8156c:	6815      	ldr	r5, [r2, #0]
   8156e:	3304      	adds	r3, #4
   81570:	2d00      	cmp	r5, #0
   81572:	f2c0 82e6 	blt.w	81b42 <_vfiprintf_r+0xb66>
   81576:	9304      	str	r3, [sp, #16]
   81578:	f89b 3000 	ldrb.w	r3, [fp]
   8157c:	4658      	mov	r0, fp
   8157e:	e596      	b.n	810ae <_vfiprintf_r+0xd2>
   81580:	f89b 3000 	ldrb.w	r3, [fp]
   81584:	4658      	mov	r0, fp
   81586:	212b      	movs	r1, #43	; 0x2b
   81588:	e591      	b.n	810ae <_vfiprintf_r+0xd2>
   8158a:	bf00      	nop
   8158c:	00083cac 	.word	0x00083cac
   81590:	00083c7c 	.word	0x00083c7c
   81594:	00083c90 	.word	0x00083c90
   81598:	f89b 3000 	ldrb.w	r3, [fp]
   8159c:	f10b 0001 	add.w	r0, fp, #1
   815a0:	2b2a      	cmp	r3, #42	; 0x2a
   815a2:	f000 830f 	beq.w	81bc4 <_vfiprintf_r+0xbe8>
   815a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   815aa:	2a09      	cmp	r2, #9
   815ac:	4683      	mov	fp, r0
   815ae:	f04f 0600 	mov.w	r6, #0
   815b2:	f63f ad7e 	bhi.w	810b2 <_vfiprintf_r+0xd6>
   815b6:	f81b 3b01 	ldrb.w	r3, [fp], #1
   815ba:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   815be:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   815c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   815c6:	2a09      	cmp	r2, #9
   815c8:	d9f5      	bls.n	815b6 <_vfiprintf_r+0x5da>
   815ca:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   815ce:	e570      	b.n	810b2 <_vfiprintf_r+0xd6>
   815d0:	f018 0f20 	tst.w	r8, #32
   815d4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   815d8:	f000 8283 	beq.w	81ae2 <_vfiprintf_r+0xb06>
   815dc:	9a04      	ldr	r2, [sp, #16]
   815de:	4613      	mov	r3, r2
   815e0:	3304      	adds	r3, #4
   815e2:	9304      	str	r3, [sp, #16]
   815e4:	9b02      	ldr	r3, [sp, #8]
   815e6:	6811      	ldr	r1, [r2, #0]
   815e8:	17df      	asrs	r7, r3, #31
   815ea:	461a      	mov	r2, r3
   815ec:	463b      	mov	r3, r7
   815ee:	e9c1 2300 	strd	r2, r3, [r1]
   815f2:	e525      	b.n	81040 <_vfiprintf_r+0x64>
   815f4:	4658      	mov	r0, fp
   815f6:	f89b 3000 	ldrb.w	r3, [fp]
   815fa:	2900      	cmp	r1, #0
   815fc:	f47f ad57 	bne.w	810ae <_vfiprintf_r+0xd2>
   81600:	2120      	movs	r1, #32
   81602:	e554      	b.n	810ae <_vfiprintf_r+0xd2>
   81604:	f048 0801 	orr.w	r8, r8, #1
   81608:	4658      	mov	r0, fp
   8160a:	f89b 3000 	ldrb.w	r3, [fp]
   8160e:	e54e      	b.n	810ae <_vfiprintf_r+0xd2>
   81610:	9503      	str	r5, [sp, #12]
   81612:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81616:	2b00      	cmp	r3, #0
   81618:	f000 809c 	beq.w	81754 <_vfiprintf_r+0x778>
   8161c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81620:	f04f 0300 	mov.w	r3, #0
   81624:	2601      	movs	r6, #1
   81626:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8162a:	ab10      	add	r3, sp, #64	; 0x40
   8162c:	46b1      	mov	r9, r6
   8162e:	9307      	str	r3, [sp, #28]
   81630:	e71d      	b.n	8146e <_vfiprintf_r+0x492>
   81632:	9801      	ldr	r0, [sp, #4]
   81634:	9900      	ldr	r1, [sp, #0]
   81636:	aa0d      	add	r2, sp, #52	; 0x34
   81638:	9308      	str	r3, [sp, #32]
   8163a:	f7ff fc93 	bl	80f64 <__sprint_r.part.0>
   8163e:	2800      	cmp	r0, #0
   81640:	f040 808f 	bne.w	81762 <_vfiprintf_r+0x786>
   81644:	990e      	ldr	r1, [sp, #56]	; 0x38
   81646:	46d4      	mov	ip, sl
   81648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8164a:	f101 0e01 	add.w	lr, r1, #1
   8164e:	9b08      	ldr	r3, [sp, #32]
   81650:	e61d      	b.n	8128e <_vfiprintf_r+0x2b2>
   81652:	990e      	ldr	r1, [sp, #56]	; 0x38
   81654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81656:	1c48      	adds	r0, r1, #1
   81658:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8165c:	b16b      	cbz	r3, 8167a <_vfiprintf_r+0x69e>
   8165e:	3201      	adds	r2, #1
   81660:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   81664:	2101      	movs	r1, #1
   81666:	2807      	cmp	r0, #7
   81668:	920f      	str	r2, [sp, #60]	; 0x3c
   8166a:	900e      	str	r0, [sp, #56]	; 0x38
   8166c:	6023      	str	r3, [r4, #0]
   8166e:	6061      	str	r1, [r4, #4]
   81670:	f300 8134 	bgt.w	818dc <_vfiprintf_r+0x900>
   81674:	4601      	mov	r1, r0
   81676:	3408      	adds	r4, #8
   81678:	3001      	adds	r0, #1
   8167a:	9b05      	ldr	r3, [sp, #20]
   8167c:	b163      	cbz	r3, 81698 <_vfiprintf_r+0x6bc>
   8167e:	3202      	adds	r2, #2
   81680:	a90c      	add	r1, sp, #48	; 0x30
   81682:	2302      	movs	r3, #2
   81684:	2807      	cmp	r0, #7
   81686:	920f      	str	r2, [sp, #60]	; 0x3c
   81688:	900e      	str	r0, [sp, #56]	; 0x38
   8168a:	e884 000a 	stmia.w	r4, {r1, r3}
   8168e:	f300 8134 	bgt.w	818fa <_vfiprintf_r+0x91e>
   81692:	4601      	mov	r1, r0
   81694:	3408      	adds	r4, #8
   81696:	3001      	adds	r0, #1
   81698:	9b06      	ldr	r3, [sp, #24]
   8169a:	2b80      	cmp	r3, #128	; 0x80
   8169c:	f000 80d4 	beq.w	81848 <_vfiprintf_r+0x86c>
   816a0:	ebc9 070c 	rsb	r7, r9, ip
   816a4:	2f00      	cmp	r7, #0
   816a6:	dd2b      	ble.n	81700 <_vfiprintf_r+0x724>
   816a8:	2f10      	cmp	r7, #16
   816aa:	4dab      	ldr	r5, [pc, #684]	; (81958 <_vfiprintf_r+0x97c>)
   816ac:	dd1f      	ble.n	816ee <_vfiprintf_r+0x712>
   816ae:	46a6      	mov	lr, r4
   816b0:	2310      	movs	r3, #16
   816b2:	9c01      	ldr	r4, [sp, #4]
   816b4:	e007      	b.n	816c6 <_vfiprintf_r+0x6ea>
   816b6:	f101 0c02 	add.w	ip, r1, #2
   816ba:	4601      	mov	r1, r0
   816bc:	f10e 0e08 	add.w	lr, lr, #8
   816c0:	3f10      	subs	r7, #16
   816c2:	2f10      	cmp	r7, #16
   816c4:	dd11      	ble.n	816ea <_vfiprintf_r+0x70e>
   816c6:	1c48      	adds	r0, r1, #1
   816c8:	3210      	adds	r2, #16
   816ca:	2807      	cmp	r0, #7
   816cc:	920f      	str	r2, [sp, #60]	; 0x3c
   816ce:	f8ce 5000 	str.w	r5, [lr]
   816d2:	f8ce 3004 	str.w	r3, [lr, #4]
   816d6:	900e      	str	r0, [sp, #56]	; 0x38
   816d8:	dded      	ble.n	816b6 <_vfiprintf_r+0x6da>
   816da:	bb6a      	cbnz	r2, 81738 <_vfiprintf_r+0x75c>
   816dc:	3f10      	subs	r7, #16
   816de:	2f10      	cmp	r7, #16
   816e0:	f04f 0c01 	mov.w	ip, #1
   816e4:	4611      	mov	r1, r2
   816e6:	46d6      	mov	lr, sl
   816e8:	dced      	bgt.n	816c6 <_vfiprintf_r+0x6ea>
   816ea:	4674      	mov	r4, lr
   816ec:	4660      	mov	r0, ip
   816ee:	443a      	add	r2, r7
   816f0:	2807      	cmp	r0, #7
   816f2:	920f      	str	r2, [sp, #60]	; 0x3c
   816f4:	e884 00a0 	stmia.w	r4, {r5, r7}
   816f8:	900e      	str	r0, [sp, #56]	; 0x38
   816fa:	dc3b      	bgt.n	81774 <_vfiprintf_r+0x798>
   816fc:	3408      	adds	r4, #8
   816fe:	3001      	adds	r0, #1
   81700:	eb02 0309 	add.w	r3, r2, r9
   81704:	9a07      	ldr	r2, [sp, #28]
   81706:	2807      	cmp	r0, #7
   81708:	930f      	str	r3, [sp, #60]	; 0x3c
   8170a:	e884 0204 	stmia.w	r4, {r2, r9}
   8170e:	900e      	str	r0, [sp, #56]	; 0x38
   81710:	dd3d      	ble.n	8178e <_vfiprintf_r+0x7b2>
   81712:	2b00      	cmp	r3, #0
   81714:	f040 813f 	bne.w	81996 <_vfiprintf_r+0x9ba>
   81718:	f018 0f04 	tst.w	r8, #4
   8171c:	930e      	str	r3, [sp, #56]	; 0x38
   8171e:	f040 8130 	bne.w	81982 <_vfiprintf_r+0x9a6>
   81722:	9b02      	ldr	r3, [sp, #8]
   81724:	9a03      	ldr	r2, [sp, #12]
   81726:	4296      	cmp	r6, r2
   81728:	bfac      	ite	ge
   8172a:	199b      	addge	r3, r3, r6
   8172c:	189b      	addlt	r3, r3, r2
   8172e:	9302      	str	r3, [sp, #8]
   81730:	2300      	movs	r3, #0
   81732:	930e      	str	r3, [sp, #56]	; 0x38
   81734:	4654      	mov	r4, sl
   81736:	e483      	b.n	81040 <_vfiprintf_r+0x64>
   81738:	4620      	mov	r0, r4
   8173a:	9900      	ldr	r1, [sp, #0]
   8173c:	aa0d      	add	r2, sp, #52	; 0x34
   8173e:	9305      	str	r3, [sp, #20]
   81740:	f7ff fc10 	bl	80f64 <__sprint_r.part.0>
   81744:	b968      	cbnz	r0, 81762 <_vfiprintf_r+0x786>
   81746:	990e      	ldr	r1, [sp, #56]	; 0x38
   81748:	46d6      	mov	lr, sl
   8174a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8174c:	f101 0c01 	add.w	ip, r1, #1
   81750:	9b05      	ldr	r3, [sp, #20]
   81752:	e7b5      	b.n	816c0 <_vfiprintf_r+0x6e4>
   81754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81756:	b123      	cbz	r3, 81762 <_vfiprintf_r+0x786>
   81758:	9801      	ldr	r0, [sp, #4]
   8175a:	9900      	ldr	r1, [sp, #0]
   8175c:	aa0d      	add	r2, sp, #52	; 0x34
   8175e:	f7ff fc01 	bl	80f64 <__sprint_r.part.0>
   81762:	9b00      	ldr	r3, [sp, #0]
   81764:	899b      	ldrh	r3, [r3, #12]
   81766:	065b      	lsls	r3, r3, #25
   81768:	f53f ad23 	bmi.w	811b2 <_vfiprintf_r+0x1d6>
   8176c:	9802      	ldr	r0, [sp, #8]
   8176e:	b02b      	add	sp, #172	; 0xac
   81770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81774:	2a00      	cmp	r2, #0
   81776:	f040 8190 	bne.w	81a9a <_vfiprintf_r+0xabe>
   8177a:	464b      	mov	r3, r9
   8177c:	4654      	mov	r4, sl
   8177e:	9907      	ldr	r1, [sp, #28]
   81780:	2201      	movs	r2, #1
   81782:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   81786:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8178a:	911a      	str	r1, [sp, #104]	; 0x68
   8178c:	920e      	str	r2, [sp, #56]	; 0x38
   8178e:	f104 0208 	add.w	r2, r4, #8
   81792:	f018 0f04 	tst.w	r8, #4
   81796:	d039      	beq.n	8180c <_vfiprintf_r+0x830>
   81798:	9903      	ldr	r1, [sp, #12]
   8179a:	1b8d      	subs	r5, r1, r6
   8179c:	2d00      	cmp	r5, #0
   8179e:	dd35      	ble.n	8180c <_vfiprintf_r+0x830>
   817a0:	2d10      	cmp	r5, #16
   817a2:	f340 8200 	ble.w	81ba6 <_vfiprintf_r+0xbca>
   817a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   817a8:	4f6c      	ldr	r7, [pc, #432]	; (8195c <_vfiprintf_r+0x980>)
   817aa:	2410      	movs	r4, #16
   817ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   817b0:	f8dd 9000 	ldr.w	r9, [sp]
   817b4:	e006      	b.n	817c4 <_vfiprintf_r+0x7e8>
   817b6:	f100 0e02 	add.w	lr, r0, #2
   817ba:	4608      	mov	r0, r1
   817bc:	3208      	adds	r2, #8
   817be:	3d10      	subs	r5, #16
   817c0:	2d10      	cmp	r5, #16
   817c2:	dd10      	ble.n	817e6 <_vfiprintf_r+0x80a>
   817c4:	1c41      	adds	r1, r0, #1
   817c6:	3310      	adds	r3, #16
   817c8:	2907      	cmp	r1, #7
   817ca:	930f      	str	r3, [sp, #60]	; 0x3c
   817cc:	6017      	str	r7, [r2, #0]
   817ce:	6054      	str	r4, [r2, #4]
   817d0:	910e      	str	r1, [sp, #56]	; 0x38
   817d2:	ddf0      	ble.n	817b6 <_vfiprintf_r+0x7da>
   817d4:	2b00      	cmp	r3, #0
   817d6:	d12a      	bne.n	8182e <_vfiprintf_r+0x852>
   817d8:	3d10      	subs	r5, #16
   817da:	2d10      	cmp	r5, #16
   817dc:	f04f 0e01 	mov.w	lr, #1
   817e0:	4618      	mov	r0, r3
   817e2:	4652      	mov	r2, sl
   817e4:	dcee      	bgt.n	817c4 <_vfiprintf_r+0x7e8>
   817e6:	442b      	add	r3, r5
   817e8:	f1be 0f07 	cmp.w	lr, #7
   817ec:	930f      	str	r3, [sp, #60]	; 0x3c
   817ee:	6017      	str	r7, [r2, #0]
   817f0:	6055      	str	r5, [r2, #4]
   817f2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   817f6:	dd09      	ble.n	8180c <_vfiprintf_r+0x830>
   817f8:	2b00      	cmp	r3, #0
   817fa:	d092      	beq.n	81722 <_vfiprintf_r+0x746>
   817fc:	9801      	ldr	r0, [sp, #4]
   817fe:	9900      	ldr	r1, [sp, #0]
   81800:	aa0d      	add	r2, sp, #52	; 0x34
   81802:	f7ff fbaf 	bl	80f64 <__sprint_r.part.0>
   81806:	2800      	cmp	r0, #0
   81808:	d1ab      	bne.n	81762 <_vfiprintf_r+0x786>
   8180a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8180c:	9a02      	ldr	r2, [sp, #8]
   8180e:	9903      	ldr	r1, [sp, #12]
   81810:	428e      	cmp	r6, r1
   81812:	bfac      	ite	ge
   81814:	1992      	addge	r2, r2, r6
   81816:	1852      	addlt	r2, r2, r1
   81818:	9202      	str	r2, [sp, #8]
   8181a:	2b00      	cmp	r3, #0
   8181c:	d088      	beq.n	81730 <_vfiprintf_r+0x754>
   8181e:	9801      	ldr	r0, [sp, #4]
   81820:	9900      	ldr	r1, [sp, #0]
   81822:	aa0d      	add	r2, sp, #52	; 0x34
   81824:	f7ff fb9e 	bl	80f64 <__sprint_r.part.0>
   81828:	2800      	cmp	r0, #0
   8182a:	d081      	beq.n	81730 <_vfiprintf_r+0x754>
   8182c:	e799      	b.n	81762 <_vfiprintf_r+0x786>
   8182e:	4640      	mov	r0, r8
   81830:	4649      	mov	r1, r9
   81832:	aa0d      	add	r2, sp, #52	; 0x34
   81834:	f7ff fb96 	bl	80f64 <__sprint_r.part.0>
   81838:	2800      	cmp	r0, #0
   8183a:	d192      	bne.n	81762 <_vfiprintf_r+0x786>
   8183c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8183e:	4652      	mov	r2, sl
   81840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81842:	f100 0e01 	add.w	lr, r0, #1
   81846:	e7ba      	b.n	817be <_vfiprintf_r+0x7e2>
   81848:	9b03      	ldr	r3, [sp, #12]
   8184a:	1b9f      	subs	r7, r3, r6
   8184c:	2f00      	cmp	r7, #0
   8184e:	f77f af27 	ble.w	816a0 <_vfiprintf_r+0x6c4>
   81852:	2f10      	cmp	r7, #16
   81854:	f340 81b3 	ble.w	81bbe <_vfiprintf_r+0xbe2>
   81858:	4620      	mov	r0, r4
   8185a:	4d3f      	ldr	r5, [pc, #252]	; (81958 <_vfiprintf_r+0x97c>)
   8185c:	4664      	mov	r4, ip
   8185e:	2310      	movs	r3, #16
   81860:	4684      	mov	ip, r0
   81862:	e007      	b.n	81874 <_vfiprintf_r+0x898>
   81864:	f101 0e02 	add.w	lr, r1, #2
   81868:	4601      	mov	r1, r0
   8186a:	f10c 0c08 	add.w	ip, ip, #8
   8186e:	3f10      	subs	r7, #16
   81870:	2f10      	cmp	r7, #16
   81872:	dd11      	ble.n	81898 <_vfiprintf_r+0x8bc>
   81874:	1c48      	adds	r0, r1, #1
   81876:	3210      	adds	r2, #16
   81878:	2807      	cmp	r0, #7
   8187a:	920f      	str	r2, [sp, #60]	; 0x3c
   8187c:	f8cc 5000 	str.w	r5, [ip]
   81880:	f8cc 3004 	str.w	r3, [ip, #4]
   81884:	900e      	str	r0, [sp, #56]	; 0x38
   81886:	dded      	ble.n	81864 <_vfiprintf_r+0x888>
   81888:	b9c2      	cbnz	r2, 818bc <_vfiprintf_r+0x8e0>
   8188a:	3f10      	subs	r7, #16
   8188c:	2f10      	cmp	r7, #16
   8188e:	f04f 0e01 	mov.w	lr, #1
   81892:	4611      	mov	r1, r2
   81894:	46d4      	mov	ip, sl
   81896:	dced      	bgt.n	81874 <_vfiprintf_r+0x898>
   81898:	4663      	mov	r3, ip
   8189a:	46a4      	mov	ip, r4
   8189c:	461c      	mov	r4, r3
   8189e:	443a      	add	r2, r7
   818a0:	f1be 0f07 	cmp.w	lr, #7
   818a4:	920f      	str	r2, [sp, #60]	; 0x3c
   818a6:	e884 00a0 	stmia.w	r4, {r5, r7}
   818aa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   818ae:	f300 80ee 	bgt.w	81a8e <_vfiprintf_r+0xab2>
   818b2:	3408      	adds	r4, #8
   818b4:	f10e 0001 	add.w	r0, lr, #1
   818b8:	4671      	mov	r1, lr
   818ba:	e6f1      	b.n	816a0 <_vfiprintf_r+0x6c4>
   818bc:	9801      	ldr	r0, [sp, #4]
   818be:	9900      	ldr	r1, [sp, #0]
   818c0:	aa0d      	add	r2, sp, #52	; 0x34
   818c2:	9305      	str	r3, [sp, #20]
   818c4:	f7ff fb4e 	bl	80f64 <__sprint_r.part.0>
   818c8:	2800      	cmp	r0, #0
   818ca:	f47f af4a 	bne.w	81762 <_vfiprintf_r+0x786>
   818ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   818d0:	46d4      	mov	ip, sl
   818d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   818d4:	f101 0e01 	add.w	lr, r1, #1
   818d8:	9b05      	ldr	r3, [sp, #20]
   818da:	e7c8      	b.n	8186e <_vfiprintf_r+0x892>
   818dc:	2a00      	cmp	r2, #0
   818de:	f040 80c5 	bne.w	81a6c <_vfiprintf_r+0xa90>
   818e2:	9b05      	ldr	r3, [sp, #20]
   818e4:	2b00      	cmp	r3, #0
   818e6:	f000 8085 	beq.w	819f4 <_vfiprintf_r+0xa18>
   818ea:	aa0c      	add	r2, sp, #48	; 0x30
   818ec:	2302      	movs	r3, #2
   818ee:	921a      	str	r2, [sp, #104]	; 0x68
   818f0:	4608      	mov	r0, r1
   818f2:	931b      	str	r3, [sp, #108]	; 0x6c
   818f4:	461a      	mov	r2, r3
   818f6:	4654      	mov	r4, sl
   818f8:	e6cb      	b.n	81692 <_vfiprintf_r+0x6b6>
   818fa:	2a00      	cmp	r2, #0
   818fc:	f040 80a5 	bne.w	81a4a <_vfiprintf_r+0xa6e>
   81900:	2001      	movs	r0, #1
   81902:	4611      	mov	r1, r2
   81904:	4654      	mov	r4, sl
   81906:	e6c7      	b.n	81698 <_vfiprintf_r+0x6bc>
   81908:	bb03      	cbnz	r3, 8194c <_vfiprintf_r+0x970>
   8190a:	f018 0f01 	tst.w	r8, #1
   8190e:	d01d      	beq.n	8194c <_vfiprintf_r+0x970>
   81910:	ab2a      	add	r3, sp, #168	; 0xa8
   81912:	2230      	movs	r2, #48	; 0x30
   81914:	f803 2d41 	strb.w	r2, [r3, #-65]!
   81918:	ebc3 090a 	rsb	r9, r3, sl
   8191c:	9307      	str	r3, [sp, #28]
   8191e:	e48f      	b.n	81240 <_vfiprintf_r+0x264>
   81920:	46d1      	mov	r9, sl
   81922:	9809      	ldr	r0, [sp, #36]	; 0x24
   81924:	0933      	lsrs	r3, r6, #4
   81926:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   8192a:	0939      	lsrs	r1, r7, #4
   8192c:	f006 020f 	and.w	r2, r6, #15
   81930:	460f      	mov	r7, r1
   81932:	461e      	mov	r6, r3
   81934:	5c83      	ldrb	r3, [r0, r2]
   81936:	f809 3d01 	strb.w	r3, [r9, #-1]!
   8193a:	ea56 0307 	orrs.w	r3, r6, r7
   8193e:	d1f1      	bne.n	81924 <_vfiprintf_r+0x948>
   81940:	464b      	mov	r3, r9
   81942:	f8cd 901c 	str.w	r9, [sp, #28]
   81946:	ebc3 090a 	rsb	r9, r3, sl
   8194a:	e479      	b.n	81240 <_vfiprintf_r+0x264>
   8194c:	f8cd a01c 	str.w	sl, [sp, #28]
   81950:	e476      	b.n	81240 <_vfiprintf_r+0x264>
   81952:	2302      	movs	r3, #2
   81954:	e445      	b.n	811e2 <_vfiprintf_r+0x206>
   81956:	bf00      	nop
   81958:	00083c6c 	.word	0x00083c6c
   8195c:	00083cac 	.word	0x00083cac
   81960:	2a00      	cmp	r2, #0
   81962:	f040 80d5 	bne.w	81b10 <_vfiprintf_r+0xb34>
   81966:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8196a:	2b00      	cmp	r3, #0
   8196c:	f000 80ac 	beq.w	81ac8 <_vfiprintf_r+0xaec>
   81970:	2301      	movs	r3, #1
   81972:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81976:	4618      	mov	r0, r3
   81978:	931b      	str	r3, [sp, #108]	; 0x6c
   8197a:	461a      	mov	r2, r3
   8197c:	911a      	str	r1, [sp, #104]	; 0x68
   8197e:	4654      	mov	r4, sl
   81980:	e678      	b.n	81674 <_vfiprintf_r+0x698>
   81982:	9a03      	ldr	r2, [sp, #12]
   81984:	1b95      	subs	r5, r2, r6
   81986:	2d00      	cmp	r5, #0
   81988:	4652      	mov	r2, sl
   8198a:	f73f af09 	bgt.w	817a0 <_vfiprintf_r+0x7c4>
   8198e:	e6c8      	b.n	81722 <_vfiprintf_r+0x746>
   81990:	465d      	mov	r5, fp
   81992:	f7ff bb7c 	b.w	8108e <_vfiprintf_r+0xb2>
   81996:	9801      	ldr	r0, [sp, #4]
   81998:	9900      	ldr	r1, [sp, #0]
   8199a:	aa0d      	add	r2, sp, #52	; 0x34
   8199c:	f7ff fae2 	bl	80f64 <__sprint_r.part.0>
   819a0:	2800      	cmp	r0, #0
   819a2:	f47f aede 	bne.w	81762 <_vfiprintf_r+0x786>
   819a6:	4652      	mov	r2, sl
   819a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   819aa:	e6f2      	b.n	81792 <_vfiprintf_r+0x7b6>
   819ac:	9904      	ldr	r1, [sp, #16]
   819ae:	2700      	movs	r7, #0
   819b0:	460a      	mov	r2, r1
   819b2:	3204      	adds	r2, #4
   819b4:	680e      	ldr	r6, [r1, #0]
   819b6:	9204      	str	r2, [sp, #16]
   819b8:	e413      	b.n	811e2 <_vfiprintf_r+0x206>
   819ba:	3204      	adds	r2, #4
   819bc:	681e      	ldr	r6, [r3, #0]
   819be:	2700      	movs	r7, #0
   819c0:	2301      	movs	r3, #1
   819c2:	9204      	str	r2, [sp, #16]
   819c4:	e40d      	b.n	811e2 <_vfiprintf_r+0x206>
   819c6:	6816      	ldr	r6, [r2, #0]
   819c8:	3204      	adds	r2, #4
   819ca:	9204      	str	r2, [sp, #16]
   819cc:	2700      	movs	r7, #0
   819ce:	e52d      	b.n	8142c <_vfiprintf_r+0x450>
   819d0:	681e      	ldr	r6, [r3, #0]
   819d2:	3304      	adds	r3, #4
   819d4:	17f7      	asrs	r7, r6, #31
   819d6:	9304      	str	r3, [sp, #16]
   819d8:	4632      	mov	r2, r6
   819da:	463b      	mov	r3, r7
   819dc:	e4c1      	b.n	81362 <_vfiprintf_r+0x386>
   819de:	9801      	ldr	r0, [sp, #4]
   819e0:	9900      	ldr	r1, [sp, #0]
   819e2:	aa0d      	add	r2, sp, #52	; 0x34
   819e4:	f7ff fabe 	bl	80f64 <__sprint_r.part.0>
   819e8:	2800      	cmp	r0, #0
   819ea:	f47f aeba 	bne.w	81762 <_vfiprintf_r+0x786>
   819ee:	4654      	mov	r4, sl
   819f0:	f7ff bbc0 	b.w	81174 <_vfiprintf_r+0x198>
   819f4:	4608      	mov	r0, r1
   819f6:	4654      	mov	r4, sl
   819f8:	4611      	mov	r1, r2
   819fa:	e64d      	b.n	81698 <_vfiprintf_r+0x6bc>
   819fc:	46d1      	mov	r9, sl
   819fe:	f8cd c014 	str.w	ip, [sp, #20]
   81a02:	4630      	mov	r0, r6
   81a04:	4639      	mov	r1, r7
   81a06:	220a      	movs	r2, #10
   81a08:	2300      	movs	r3, #0
   81a0a:	f001 fe47 	bl	8369c <__aeabi_uldivmod>
   81a0e:	3230      	adds	r2, #48	; 0x30
   81a10:	4630      	mov	r0, r6
   81a12:	4639      	mov	r1, r7
   81a14:	f809 2d01 	strb.w	r2, [r9, #-1]!
   81a18:	2300      	movs	r3, #0
   81a1a:	220a      	movs	r2, #10
   81a1c:	f001 fe3e 	bl	8369c <__aeabi_uldivmod>
   81a20:	4606      	mov	r6, r0
   81a22:	460f      	mov	r7, r1
   81a24:	ea56 0307 	orrs.w	r3, r6, r7
   81a28:	d1eb      	bne.n	81a02 <_vfiprintf_r+0xa26>
   81a2a:	f8dd c014 	ldr.w	ip, [sp, #20]
   81a2e:	e787      	b.n	81940 <_vfiprintf_r+0x964>
   81a30:	2b30      	cmp	r3, #48	; 0x30
   81a32:	9b07      	ldr	r3, [sp, #28]
   81a34:	d087      	beq.n	81946 <_vfiprintf_r+0x96a>
   81a36:	3b01      	subs	r3, #1
   81a38:	461a      	mov	r2, r3
   81a3a:	9307      	str	r3, [sp, #28]
   81a3c:	2330      	movs	r3, #48	; 0x30
   81a3e:	ebc2 090a 	rsb	r9, r2, sl
   81a42:	f801 3c01 	strb.w	r3, [r1, #-1]
   81a46:	f7ff bbfb 	b.w	81240 <_vfiprintf_r+0x264>
   81a4a:	9801      	ldr	r0, [sp, #4]
   81a4c:	9900      	ldr	r1, [sp, #0]
   81a4e:	aa0d      	add	r2, sp, #52	; 0x34
   81a50:	f8cd c014 	str.w	ip, [sp, #20]
   81a54:	f7ff fa86 	bl	80f64 <__sprint_r.part.0>
   81a58:	2800      	cmp	r0, #0
   81a5a:	f47f ae82 	bne.w	81762 <_vfiprintf_r+0x786>
   81a5e:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a60:	4654      	mov	r4, sl
   81a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a64:	1c48      	adds	r0, r1, #1
   81a66:	f8dd c014 	ldr.w	ip, [sp, #20]
   81a6a:	e615      	b.n	81698 <_vfiprintf_r+0x6bc>
   81a6c:	9801      	ldr	r0, [sp, #4]
   81a6e:	9900      	ldr	r1, [sp, #0]
   81a70:	aa0d      	add	r2, sp, #52	; 0x34
   81a72:	f8cd c020 	str.w	ip, [sp, #32]
   81a76:	f7ff fa75 	bl	80f64 <__sprint_r.part.0>
   81a7a:	2800      	cmp	r0, #0
   81a7c:	f47f ae71 	bne.w	81762 <_vfiprintf_r+0x786>
   81a80:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a82:	4654      	mov	r4, sl
   81a84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a86:	1c48      	adds	r0, r1, #1
   81a88:	f8dd c020 	ldr.w	ip, [sp, #32]
   81a8c:	e5f5      	b.n	8167a <_vfiprintf_r+0x69e>
   81a8e:	2a00      	cmp	r2, #0
   81a90:	d167      	bne.n	81b62 <_vfiprintf_r+0xb86>
   81a92:	2001      	movs	r0, #1
   81a94:	4611      	mov	r1, r2
   81a96:	4654      	mov	r4, sl
   81a98:	e602      	b.n	816a0 <_vfiprintf_r+0x6c4>
   81a9a:	9801      	ldr	r0, [sp, #4]
   81a9c:	9900      	ldr	r1, [sp, #0]
   81a9e:	aa0d      	add	r2, sp, #52	; 0x34
   81aa0:	f7ff fa60 	bl	80f64 <__sprint_r.part.0>
   81aa4:	2800      	cmp	r0, #0
   81aa6:	f47f ae5c 	bne.w	81762 <_vfiprintf_r+0x786>
   81aaa:	980e      	ldr	r0, [sp, #56]	; 0x38
   81aac:	4654      	mov	r4, sl
   81aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ab0:	3001      	adds	r0, #1
   81ab2:	e625      	b.n	81700 <_vfiprintf_r+0x724>
   81ab4:	252d      	movs	r5, #45	; 0x2d
   81ab6:	4276      	negs	r6, r6
   81ab8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81abc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   81ac0:	46e1      	mov	r9, ip
   81ac2:	2301      	movs	r3, #1
   81ac4:	f7ff bb93 	b.w	811ee <_vfiprintf_r+0x212>
   81ac8:	9b05      	ldr	r3, [sp, #20]
   81aca:	4611      	mov	r1, r2
   81acc:	2001      	movs	r0, #1
   81ace:	4654      	mov	r4, sl
   81ad0:	2b00      	cmp	r3, #0
   81ad2:	f43f ade5 	beq.w	816a0 <_vfiprintf_r+0x6c4>
   81ad6:	aa0c      	add	r2, sp, #48	; 0x30
   81ad8:	2302      	movs	r3, #2
   81ada:	e88a 000c 	stmia.w	sl, {r2, r3}
   81ade:	461a      	mov	r2, r3
   81ae0:	e5d7      	b.n	81692 <_vfiprintf_r+0x6b6>
   81ae2:	f018 0f10 	tst.w	r8, #16
   81ae6:	d10b      	bne.n	81b00 <_vfiprintf_r+0xb24>
   81ae8:	f018 0f40 	tst.w	r8, #64	; 0x40
   81aec:	d008      	beq.n	81b00 <_vfiprintf_r+0xb24>
   81aee:	9a04      	ldr	r2, [sp, #16]
   81af0:	6813      	ldr	r3, [r2, #0]
   81af2:	3204      	adds	r2, #4
   81af4:	9204      	str	r2, [sp, #16]
   81af6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   81afa:	801a      	strh	r2, [r3, #0]
   81afc:	f7ff baa0 	b.w	81040 <_vfiprintf_r+0x64>
   81b00:	9a04      	ldr	r2, [sp, #16]
   81b02:	6813      	ldr	r3, [r2, #0]
   81b04:	3204      	adds	r2, #4
   81b06:	9204      	str	r2, [sp, #16]
   81b08:	9a02      	ldr	r2, [sp, #8]
   81b0a:	601a      	str	r2, [r3, #0]
   81b0c:	f7ff ba98 	b.w	81040 <_vfiprintf_r+0x64>
   81b10:	9801      	ldr	r0, [sp, #4]
   81b12:	9900      	ldr	r1, [sp, #0]
   81b14:	aa0d      	add	r2, sp, #52	; 0x34
   81b16:	f8cd c020 	str.w	ip, [sp, #32]
   81b1a:	f7ff fa23 	bl	80f64 <__sprint_r.part.0>
   81b1e:	2800      	cmp	r0, #0
   81b20:	f47f ae1f 	bne.w	81762 <_vfiprintf_r+0x786>
   81b24:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b26:	4654      	mov	r4, sl
   81b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b2a:	1c48      	adds	r0, r1, #1
   81b2c:	f8dd c020 	ldr.w	ip, [sp, #32]
   81b30:	e592      	b.n	81658 <_vfiprintf_r+0x67c>
   81b32:	f048 0820 	orr.w	r8, r8, #32
   81b36:	f10b 0001 	add.w	r0, fp, #1
   81b3a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81b3e:	f7ff bab6 	b.w	810ae <_vfiprintf_r+0xd2>
   81b42:	426d      	negs	r5, r5
   81b44:	9304      	str	r3, [sp, #16]
   81b46:	4658      	mov	r0, fp
   81b48:	f7ff bbc8 	b.w	812dc <_vfiprintf_r+0x300>
   81b4c:	9807      	ldr	r0, [sp, #28]
   81b4e:	9504      	str	r5, [sp, #16]
   81b50:	f7ff f9da 	bl	80f08 <strlen>
   81b54:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81b58:	4681      	mov	r9, r0
   81b5a:	f04f 0c00 	mov.w	ip, #0
   81b5e:	f7ff bb6f 	b.w	81240 <_vfiprintf_r+0x264>
   81b62:	9801      	ldr	r0, [sp, #4]
   81b64:	9900      	ldr	r1, [sp, #0]
   81b66:	aa0d      	add	r2, sp, #52	; 0x34
   81b68:	f8cd c014 	str.w	ip, [sp, #20]
   81b6c:	f7ff f9fa 	bl	80f64 <__sprint_r.part.0>
   81b70:	2800      	cmp	r0, #0
   81b72:	f47f adf6 	bne.w	81762 <_vfiprintf_r+0x786>
   81b76:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b78:	4654      	mov	r4, sl
   81b7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b7c:	1c48      	adds	r0, r1, #1
   81b7e:	f8dd c014 	ldr.w	ip, [sp, #20]
   81b82:	e58d      	b.n	816a0 <_vfiprintf_r+0x6c4>
   81b84:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b88:	3101      	adds	r1, #1
   81b8a:	4f15      	ldr	r7, [pc, #84]	; (81be0 <_vfiprintf_r+0xc04>)
   81b8c:	f7ff bb9a 	b.w	812c4 <_vfiprintf_r+0x2e8>
   81b90:	2e06      	cmp	r6, #6
   81b92:	4b14      	ldr	r3, [pc, #80]	; (81be4 <_vfiprintf_r+0xc08>)
   81b94:	bf28      	it	cs
   81b96:	f04f 0c06 	movcs.w	ip, #6
   81b9a:	46e1      	mov	r9, ip
   81b9c:	9504      	str	r5, [sp, #16]
   81b9e:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   81ba2:	9307      	str	r3, [sp, #28]
   81ba4:	e463      	b.n	8146e <_vfiprintf_r+0x492>
   81ba6:	990e      	ldr	r1, [sp, #56]	; 0x38
   81ba8:	4f0d      	ldr	r7, [pc, #52]	; (81be0 <_vfiprintf_r+0xc04>)
   81baa:	f101 0e01 	add.w	lr, r1, #1
   81bae:	e61a      	b.n	817e6 <_vfiprintf_r+0x80a>
   81bb0:	46e1      	mov	r9, ip
   81bb2:	9504      	str	r5, [sp, #16]
   81bb4:	4684      	mov	ip, r0
   81bb6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81bba:	f7ff bb41 	b.w	81240 <_vfiprintf_r+0x264>
   81bbe:	4686      	mov	lr, r0
   81bc0:	4d09      	ldr	r5, [pc, #36]	; (81be8 <_vfiprintf_r+0xc0c>)
   81bc2:	e66c      	b.n	8189e <_vfiprintf_r+0x8c2>
   81bc4:	9a04      	ldr	r2, [sp, #16]
   81bc6:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81bca:	6816      	ldr	r6, [r2, #0]
   81bcc:	3204      	adds	r2, #4
   81bce:	2e00      	cmp	r6, #0
   81bd0:	9204      	str	r2, [sp, #16]
   81bd2:	f6bf aa6c 	bge.w	810ae <_vfiprintf_r+0xd2>
   81bd6:	f04f 36ff 	mov.w	r6, #4294967295
   81bda:	f7ff ba68 	b.w	810ae <_vfiprintf_r+0xd2>
   81bde:	bf00      	nop
   81be0:	00083cac 	.word	0x00083cac
   81be4:	00083ca4 	.word	0x00083ca4
   81be8:	00083c6c 	.word	0x00083c6c

00081bec <__sbprintf>:
   81bec:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   81bf0:	4688      	mov	r8, r1
   81bf2:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81bf4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81bf8:	9719      	str	r7, [sp, #100]	; 0x64
   81bfa:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81bfe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   81c02:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   81c06:	9707      	str	r7, [sp, #28]
   81c08:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81c0c:	ac1a      	add	r4, sp, #104	; 0x68
   81c0e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81c12:	f02e 0e02 	bic.w	lr, lr, #2
   81c16:	2600      	movs	r6, #0
   81c18:	4669      	mov	r1, sp
   81c1a:	9400      	str	r4, [sp, #0]
   81c1c:	9404      	str	r4, [sp, #16]
   81c1e:	9502      	str	r5, [sp, #8]
   81c20:	9505      	str	r5, [sp, #20]
   81c22:	f8ad e00c 	strh.w	lr, [sp, #12]
   81c26:	f8ad a00e 	strh.w	sl, [sp, #14]
   81c2a:	9709      	str	r7, [sp, #36]	; 0x24
   81c2c:	9606      	str	r6, [sp, #24]
   81c2e:	4605      	mov	r5, r0
   81c30:	f7ff f9d4 	bl	80fdc <_vfiprintf_r>
   81c34:	1e04      	subs	r4, r0, #0
   81c36:	db07      	blt.n	81c48 <__sbprintf+0x5c>
   81c38:	4628      	mov	r0, r5
   81c3a:	4669      	mov	r1, sp
   81c3c:	f000 f92a 	bl	81e94 <_fflush_r>
   81c40:	42b0      	cmp	r0, r6
   81c42:	bf18      	it	ne
   81c44:	f04f 34ff 	movne.w	r4, #4294967295
   81c48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81c4c:	065b      	lsls	r3, r3, #25
   81c4e:	d505      	bpl.n	81c5c <__sbprintf+0x70>
   81c50:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81c58:	f8a8 300c 	strh.w	r3, [r8, #12]
   81c5c:	4620      	mov	r0, r4
   81c5e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   81c62:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   81c66:	bf00      	nop

00081c68 <__swsetup_r>:
   81c68:	b538      	push	{r3, r4, r5, lr}
   81c6a:	4b2f      	ldr	r3, [pc, #188]	; (81d28 <__swsetup_r+0xc0>)
   81c6c:	4605      	mov	r5, r0
   81c6e:	6818      	ldr	r0, [r3, #0]
   81c70:	460c      	mov	r4, r1
   81c72:	b110      	cbz	r0, 81c7a <__swsetup_r+0x12>
   81c74:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81c76:	2b00      	cmp	r3, #0
   81c78:	d036      	beq.n	81ce8 <__swsetup_r+0x80>
   81c7a:	89a2      	ldrh	r2, [r4, #12]
   81c7c:	b293      	uxth	r3, r2
   81c7e:	0718      	lsls	r0, r3, #28
   81c80:	d50c      	bpl.n	81c9c <__swsetup_r+0x34>
   81c82:	6920      	ldr	r0, [r4, #16]
   81c84:	b1a8      	cbz	r0, 81cb2 <__swsetup_r+0x4a>
   81c86:	f013 0201 	ands.w	r2, r3, #1
   81c8a:	d01e      	beq.n	81cca <__swsetup_r+0x62>
   81c8c:	6963      	ldr	r3, [r4, #20]
   81c8e:	2200      	movs	r2, #0
   81c90:	425b      	negs	r3, r3
   81c92:	61a3      	str	r3, [r4, #24]
   81c94:	60a2      	str	r2, [r4, #8]
   81c96:	b1f0      	cbz	r0, 81cd6 <__swsetup_r+0x6e>
   81c98:	2000      	movs	r0, #0
   81c9a:	bd38      	pop	{r3, r4, r5, pc}
   81c9c:	06d9      	lsls	r1, r3, #27
   81c9e:	d53a      	bpl.n	81d16 <__swsetup_r+0xae>
   81ca0:	0758      	lsls	r0, r3, #29
   81ca2:	d424      	bmi.n	81cee <__swsetup_r+0x86>
   81ca4:	6920      	ldr	r0, [r4, #16]
   81ca6:	f042 0308 	orr.w	r3, r2, #8
   81caa:	81a3      	strh	r3, [r4, #12]
   81cac:	b29b      	uxth	r3, r3
   81cae:	2800      	cmp	r0, #0
   81cb0:	d1e9      	bne.n	81c86 <__swsetup_r+0x1e>
   81cb2:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81cb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81cba:	d0e4      	beq.n	81c86 <__swsetup_r+0x1e>
   81cbc:	4628      	mov	r0, r5
   81cbe:	4621      	mov	r1, r4
   81cc0:	f000 fcee 	bl	826a0 <__smakebuf_r>
   81cc4:	89a3      	ldrh	r3, [r4, #12]
   81cc6:	6920      	ldr	r0, [r4, #16]
   81cc8:	e7dd      	b.n	81c86 <__swsetup_r+0x1e>
   81cca:	0799      	lsls	r1, r3, #30
   81ccc:	bf58      	it	pl
   81cce:	6962      	ldrpl	r2, [r4, #20]
   81cd0:	60a2      	str	r2, [r4, #8]
   81cd2:	2800      	cmp	r0, #0
   81cd4:	d1e0      	bne.n	81c98 <__swsetup_r+0x30>
   81cd6:	89a3      	ldrh	r3, [r4, #12]
   81cd8:	061a      	lsls	r2, r3, #24
   81cda:	d5de      	bpl.n	81c9a <__swsetup_r+0x32>
   81cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ce0:	81a3      	strh	r3, [r4, #12]
   81ce2:	f04f 30ff 	mov.w	r0, #4294967295
   81ce6:	bd38      	pop	{r3, r4, r5, pc}
   81ce8:	f000 f968 	bl	81fbc <__sinit>
   81cec:	e7c5      	b.n	81c7a <__swsetup_r+0x12>
   81cee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81cf0:	b149      	cbz	r1, 81d06 <__swsetup_r+0x9e>
   81cf2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81cf6:	4299      	cmp	r1, r3
   81cf8:	d003      	beq.n	81d02 <__swsetup_r+0x9a>
   81cfa:	4628      	mov	r0, r5
   81cfc:	f000 fa36 	bl	8216c <_free_r>
   81d00:	89a2      	ldrh	r2, [r4, #12]
   81d02:	2300      	movs	r3, #0
   81d04:	6323      	str	r3, [r4, #48]	; 0x30
   81d06:	6920      	ldr	r0, [r4, #16]
   81d08:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81d0c:	2300      	movs	r3, #0
   81d0e:	b292      	uxth	r2, r2
   81d10:	e884 0009 	stmia.w	r4, {r0, r3}
   81d14:	e7c7      	b.n	81ca6 <__swsetup_r+0x3e>
   81d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81d1a:	2309      	movs	r3, #9
   81d1c:	602b      	str	r3, [r5, #0]
   81d1e:	f04f 30ff 	mov.w	r0, #4294967295
   81d22:	81a2      	strh	r2, [r4, #12]
   81d24:	bd38      	pop	{r3, r4, r5, pc}
   81d26:	bf00      	nop
   81d28:	20070558 	.word	0x20070558

00081d2c <register_fini>:
   81d2c:	4b02      	ldr	r3, [pc, #8]	; (81d38 <register_fini+0xc>)
   81d2e:	b113      	cbz	r3, 81d36 <register_fini+0xa>
   81d30:	4802      	ldr	r0, [pc, #8]	; (81d3c <register_fini+0x10>)
   81d32:	f000 b805 	b.w	81d40 <atexit>
   81d36:	4770      	bx	lr
   81d38:	00000000 	.word	0x00000000
   81d3c:	00081fd1 	.word	0x00081fd1

00081d40 <atexit>:
   81d40:	4601      	mov	r1, r0
   81d42:	2000      	movs	r0, #0
   81d44:	4602      	mov	r2, r0
   81d46:	4603      	mov	r3, r0
   81d48:	f001 bbb4 	b.w	834b4 <__register_exitproc>

00081d4c <__sflush_r>:
   81d4c:	898b      	ldrh	r3, [r1, #12]
   81d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d52:	b29a      	uxth	r2, r3
   81d54:	460d      	mov	r5, r1
   81d56:	0711      	lsls	r1, r2, #28
   81d58:	4680      	mov	r8, r0
   81d5a:	d43c      	bmi.n	81dd6 <__sflush_r+0x8a>
   81d5c:	686a      	ldr	r2, [r5, #4]
   81d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81d62:	2a00      	cmp	r2, #0
   81d64:	81ab      	strh	r3, [r5, #12]
   81d66:	dd65      	ble.n	81e34 <__sflush_r+0xe8>
   81d68:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81d6a:	2e00      	cmp	r6, #0
   81d6c:	d04b      	beq.n	81e06 <__sflush_r+0xba>
   81d6e:	b29b      	uxth	r3, r3
   81d70:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81d74:	2100      	movs	r1, #0
   81d76:	b292      	uxth	r2, r2
   81d78:	f8d8 4000 	ldr.w	r4, [r8]
   81d7c:	f8c8 1000 	str.w	r1, [r8]
   81d80:	2a00      	cmp	r2, #0
   81d82:	d05b      	beq.n	81e3c <__sflush_r+0xf0>
   81d84:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81d86:	075f      	lsls	r7, r3, #29
   81d88:	d505      	bpl.n	81d96 <__sflush_r+0x4a>
   81d8a:	6869      	ldr	r1, [r5, #4]
   81d8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81d8e:	1a52      	subs	r2, r2, r1
   81d90:	b10b      	cbz	r3, 81d96 <__sflush_r+0x4a>
   81d92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81d94:	1ad2      	subs	r2, r2, r3
   81d96:	4640      	mov	r0, r8
   81d98:	69e9      	ldr	r1, [r5, #28]
   81d9a:	2300      	movs	r3, #0
   81d9c:	47b0      	blx	r6
   81d9e:	1c46      	adds	r6, r0, #1
   81da0:	d056      	beq.n	81e50 <__sflush_r+0x104>
   81da2:	89ab      	ldrh	r3, [r5, #12]
   81da4:	692a      	ldr	r2, [r5, #16]
   81da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81daa:	b29b      	uxth	r3, r3
   81dac:	2100      	movs	r1, #0
   81dae:	602a      	str	r2, [r5, #0]
   81db0:	04da      	lsls	r2, r3, #19
   81db2:	81ab      	strh	r3, [r5, #12]
   81db4:	6069      	str	r1, [r5, #4]
   81db6:	d43b      	bmi.n	81e30 <__sflush_r+0xe4>
   81db8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81dba:	f8c8 4000 	str.w	r4, [r8]
   81dbe:	b311      	cbz	r1, 81e06 <__sflush_r+0xba>
   81dc0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81dc4:	4299      	cmp	r1, r3
   81dc6:	d002      	beq.n	81dce <__sflush_r+0x82>
   81dc8:	4640      	mov	r0, r8
   81dca:	f000 f9cf 	bl	8216c <_free_r>
   81dce:	2000      	movs	r0, #0
   81dd0:	6328      	str	r0, [r5, #48]	; 0x30
   81dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dd6:	692e      	ldr	r6, [r5, #16]
   81dd8:	b1ae      	cbz	r6, 81e06 <__sflush_r+0xba>
   81dda:	0791      	lsls	r1, r2, #30
   81ddc:	682c      	ldr	r4, [r5, #0]
   81dde:	bf0c      	ite	eq
   81de0:	696b      	ldreq	r3, [r5, #20]
   81de2:	2300      	movne	r3, #0
   81de4:	602e      	str	r6, [r5, #0]
   81de6:	1ba4      	subs	r4, r4, r6
   81de8:	60ab      	str	r3, [r5, #8]
   81dea:	e00a      	b.n	81e02 <__sflush_r+0xb6>
   81dec:	4632      	mov	r2, r6
   81dee:	4623      	mov	r3, r4
   81df0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81df2:	4640      	mov	r0, r8
   81df4:	69e9      	ldr	r1, [r5, #28]
   81df6:	47b8      	blx	r7
   81df8:	2800      	cmp	r0, #0
   81dfa:	eba4 0400 	sub.w	r4, r4, r0
   81dfe:	4406      	add	r6, r0
   81e00:	dd04      	ble.n	81e0c <__sflush_r+0xc0>
   81e02:	2c00      	cmp	r4, #0
   81e04:	dcf2      	bgt.n	81dec <__sflush_r+0xa0>
   81e06:	2000      	movs	r0, #0
   81e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e0c:	89ab      	ldrh	r3, [r5, #12]
   81e0e:	f04f 30ff 	mov.w	r0, #4294967295
   81e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e16:	81ab      	strh	r3, [r5, #12]
   81e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e1c:	89ab      	ldrh	r3, [r5, #12]
   81e1e:	692a      	ldr	r2, [r5, #16]
   81e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81e24:	b29b      	uxth	r3, r3
   81e26:	81ab      	strh	r3, [r5, #12]
   81e28:	04db      	lsls	r3, r3, #19
   81e2a:	6069      	str	r1, [r5, #4]
   81e2c:	602a      	str	r2, [r5, #0]
   81e2e:	d5c3      	bpl.n	81db8 <__sflush_r+0x6c>
   81e30:	6528      	str	r0, [r5, #80]	; 0x50
   81e32:	e7c1      	b.n	81db8 <__sflush_r+0x6c>
   81e34:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81e36:	2a00      	cmp	r2, #0
   81e38:	dc96      	bgt.n	81d68 <__sflush_r+0x1c>
   81e3a:	e7e4      	b.n	81e06 <__sflush_r+0xba>
   81e3c:	2301      	movs	r3, #1
   81e3e:	4640      	mov	r0, r8
   81e40:	69e9      	ldr	r1, [r5, #28]
   81e42:	47b0      	blx	r6
   81e44:	1c43      	adds	r3, r0, #1
   81e46:	4602      	mov	r2, r0
   81e48:	d019      	beq.n	81e7e <__sflush_r+0x132>
   81e4a:	89ab      	ldrh	r3, [r5, #12]
   81e4c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81e4e:	e79a      	b.n	81d86 <__sflush_r+0x3a>
   81e50:	f8d8 1000 	ldr.w	r1, [r8]
   81e54:	2900      	cmp	r1, #0
   81e56:	d0e1      	beq.n	81e1c <__sflush_r+0xd0>
   81e58:	291d      	cmp	r1, #29
   81e5a:	d007      	beq.n	81e6c <__sflush_r+0x120>
   81e5c:	2916      	cmp	r1, #22
   81e5e:	d005      	beq.n	81e6c <__sflush_r+0x120>
   81e60:	89ab      	ldrh	r3, [r5, #12]
   81e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e66:	81ab      	strh	r3, [r5, #12]
   81e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e6c:	89ab      	ldrh	r3, [r5, #12]
   81e6e:	6929      	ldr	r1, [r5, #16]
   81e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81e74:	2200      	movs	r2, #0
   81e76:	81ab      	strh	r3, [r5, #12]
   81e78:	e885 0006 	stmia.w	r5, {r1, r2}
   81e7c:	e79c      	b.n	81db8 <__sflush_r+0x6c>
   81e7e:	f8d8 3000 	ldr.w	r3, [r8]
   81e82:	2b00      	cmp	r3, #0
   81e84:	d0e1      	beq.n	81e4a <__sflush_r+0xfe>
   81e86:	2b1d      	cmp	r3, #29
   81e88:	d001      	beq.n	81e8e <__sflush_r+0x142>
   81e8a:	2b16      	cmp	r3, #22
   81e8c:	d1be      	bne.n	81e0c <__sflush_r+0xc0>
   81e8e:	f8c8 4000 	str.w	r4, [r8]
   81e92:	e7b8      	b.n	81e06 <__sflush_r+0xba>

00081e94 <_fflush_r>:
   81e94:	b510      	push	{r4, lr}
   81e96:	4604      	mov	r4, r0
   81e98:	b082      	sub	sp, #8
   81e9a:	b108      	cbz	r0, 81ea0 <_fflush_r+0xc>
   81e9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e9e:	b153      	cbz	r3, 81eb6 <_fflush_r+0x22>
   81ea0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81ea4:	b908      	cbnz	r0, 81eaa <_fflush_r+0x16>
   81ea6:	b002      	add	sp, #8
   81ea8:	bd10      	pop	{r4, pc}
   81eaa:	4620      	mov	r0, r4
   81eac:	b002      	add	sp, #8
   81eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81eb2:	f7ff bf4b 	b.w	81d4c <__sflush_r>
   81eb6:	9101      	str	r1, [sp, #4]
   81eb8:	f000 f880 	bl	81fbc <__sinit>
   81ebc:	9901      	ldr	r1, [sp, #4]
   81ebe:	e7ef      	b.n	81ea0 <_fflush_r+0xc>

00081ec0 <_cleanup_r>:
   81ec0:	4901      	ldr	r1, [pc, #4]	; (81ec8 <_cleanup_r+0x8>)
   81ec2:	f000 bbbb 	b.w	8263c <_fwalk_reent>
   81ec6:	bf00      	nop
   81ec8:	0008357d 	.word	0x0008357d

00081ecc <__sinit.part.1>:
   81ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ed0:	4607      	mov	r7, r0
   81ed2:	4835      	ldr	r0, [pc, #212]	; (81fa8 <__sinit.part.1+0xdc>)
   81ed4:	687d      	ldr	r5, [r7, #4]
   81ed6:	2400      	movs	r4, #0
   81ed8:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81edc:	2304      	movs	r3, #4
   81ede:	2103      	movs	r1, #3
   81ee0:	63f8      	str	r0, [r7, #60]	; 0x3c
   81ee2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81ee6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81eea:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81eee:	b083      	sub	sp, #12
   81ef0:	602c      	str	r4, [r5, #0]
   81ef2:	606c      	str	r4, [r5, #4]
   81ef4:	60ac      	str	r4, [r5, #8]
   81ef6:	666c      	str	r4, [r5, #100]	; 0x64
   81ef8:	81ec      	strh	r4, [r5, #14]
   81efa:	612c      	str	r4, [r5, #16]
   81efc:	616c      	str	r4, [r5, #20]
   81efe:	61ac      	str	r4, [r5, #24]
   81f00:	81ab      	strh	r3, [r5, #12]
   81f02:	4621      	mov	r1, r4
   81f04:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f08:	2208      	movs	r2, #8
   81f0a:	f7fe fef3 	bl	80cf4 <memset>
   81f0e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81fac <__sinit.part.1+0xe0>
   81f12:	68be      	ldr	r6, [r7, #8]
   81f14:	f8df a098 	ldr.w	sl, [pc, #152]	; 81fb0 <__sinit.part.1+0xe4>
   81f18:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81fb4 <__sinit.part.1+0xe8>
   81f1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81fb8 <__sinit.part.1+0xec>
   81f20:	2301      	movs	r3, #1
   81f22:	2209      	movs	r2, #9
   81f24:	f8c5 b020 	str.w	fp, [r5, #32]
   81f28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81f2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81f30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81f34:	61ed      	str	r5, [r5, #28]
   81f36:	4621      	mov	r1, r4
   81f38:	81f3      	strh	r3, [r6, #14]
   81f3a:	81b2      	strh	r2, [r6, #12]
   81f3c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81f40:	6034      	str	r4, [r6, #0]
   81f42:	6074      	str	r4, [r6, #4]
   81f44:	60b4      	str	r4, [r6, #8]
   81f46:	6674      	str	r4, [r6, #100]	; 0x64
   81f48:	6134      	str	r4, [r6, #16]
   81f4a:	6174      	str	r4, [r6, #20]
   81f4c:	61b4      	str	r4, [r6, #24]
   81f4e:	2208      	movs	r2, #8
   81f50:	9301      	str	r3, [sp, #4]
   81f52:	f7fe fecf 	bl	80cf4 <memset>
   81f56:	68fd      	ldr	r5, [r7, #12]
   81f58:	2012      	movs	r0, #18
   81f5a:	2202      	movs	r2, #2
   81f5c:	61f6      	str	r6, [r6, #28]
   81f5e:	f8c6 b020 	str.w	fp, [r6, #32]
   81f62:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81f66:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   81f6a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   81f6e:	4621      	mov	r1, r4
   81f70:	81a8      	strh	r0, [r5, #12]
   81f72:	81ea      	strh	r2, [r5, #14]
   81f74:	602c      	str	r4, [r5, #0]
   81f76:	606c      	str	r4, [r5, #4]
   81f78:	60ac      	str	r4, [r5, #8]
   81f7a:	666c      	str	r4, [r5, #100]	; 0x64
   81f7c:	612c      	str	r4, [r5, #16]
   81f7e:	616c      	str	r4, [r5, #20]
   81f80:	61ac      	str	r4, [r5, #24]
   81f82:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f86:	2208      	movs	r2, #8
   81f88:	f7fe feb4 	bl	80cf4 <memset>
   81f8c:	9b01      	ldr	r3, [sp, #4]
   81f8e:	61ed      	str	r5, [r5, #28]
   81f90:	f8c5 b020 	str.w	fp, [r5, #32]
   81f94:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81f98:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81f9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   81fa2:	b003      	add	sp, #12
   81fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fa8:	00081ec1 	.word	0x00081ec1
   81fac:	000832f1 	.word	0x000832f1
   81fb0:	00083315 	.word	0x00083315
   81fb4:	0008334d 	.word	0x0008334d
   81fb8:	0008336d 	.word	0x0008336d

00081fbc <__sinit>:
   81fbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fbe:	b103      	cbz	r3, 81fc2 <__sinit+0x6>
   81fc0:	4770      	bx	lr
   81fc2:	f7ff bf83 	b.w	81ecc <__sinit.part.1>
   81fc6:	bf00      	nop

00081fc8 <__sfp_lock_acquire>:
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop

00081fcc <__sfp_lock_release>:
   81fcc:	4770      	bx	lr
   81fce:	bf00      	nop

00081fd0 <__libc_fini_array>:
   81fd0:	b538      	push	{r3, r4, r5, lr}
   81fd2:	4b08      	ldr	r3, [pc, #32]	; (81ff4 <__libc_fini_array+0x24>)
   81fd4:	4d08      	ldr	r5, [pc, #32]	; (81ff8 <__libc_fini_array+0x28>)
   81fd6:	1aed      	subs	r5, r5, r3
   81fd8:	10ac      	asrs	r4, r5, #2
   81fda:	bf18      	it	ne
   81fdc:	18ed      	addne	r5, r5, r3
   81fde:	d005      	beq.n	81fec <__libc_fini_array+0x1c>
   81fe0:	3c01      	subs	r4, #1
   81fe2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81fe6:	4798      	blx	r3
   81fe8:	2c00      	cmp	r4, #0
   81fea:	d1f9      	bne.n	81fe0 <__libc_fini_array+0x10>
   81fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ff0:	f001 be6e 	b.w	83cd0 <_fini>
   81ff4:	00083cdc 	.word	0x00083cdc
   81ff8:	00083ce0 	.word	0x00083ce0

00081ffc <__fputwc>:
   81ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82000:	b082      	sub	sp, #8
   82002:	4607      	mov	r7, r0
   82004:	460e      	mov	r6, r1
   82006:	4614      	mov	r4, r2
   82008:	f000 fb44 	bl	82694 <__locale_mb_cur_max>
   8200c:	2801      	cmp	r0, #1
   8200e:	d040      	beq.n	82092 <__fputwc+0x96>
   82010:	4638      	mov	r0, r7
   82012:	a901      	add	r1, sp, #4
   82014:	4632      	mov	r2, r6
   82016:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8201a:	f001 f9ff 	bl	8341c <_wcrtomb_r>
   8201e:	f1b0 3fff 	cmp.w	r0, #4294967295
   82022:	4680      	mov	r8, r0
   82024:	d02e      	beq.n	82084 <__fputwc+0x88>
   82026:	2800      	cmp	r0, #0
   82028:	d03b      	beq.n	820a2 <__fputwc+0xa6>
   8202a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8202e:	2500      	movs	r5, #0
   82030:	e009      	b.n	82046 <__fputwc+0x4a>
   82032:	6823      	ldr	r3, [r4, #0]
   82034:	7019      	strb	r1, [r3, #0]
   82036:	6823      	ldr	r3, [r4, #0]
   82038:	3301      	adds	r3, #1
   8203a:	6023      	str	r3, [r4, #0]
   8203c:	3501      	adds	r5, #1
   8203e:	45a8      	cmp	r8, r5
   82040:	d92f      	bls.n	820a2 <__fputwc+0xa6>
   82042:	ab01      	add	r3, sp, #4
   82044:	5d59      	ldrb	r1, [r3, r5]
   82046:	68a3      	ldr	r3, [r4, #8]
   82048:	3b01      	subs	r3, #1
   8204a:	2b00      	cmp	r3, #0
   8204c:	60a3      	str	r3, [r4, #8]
   8204e:	daf0      	bge.n	82032 <__fputwc+0x36>
   82050:	69a2      	ldr	r2, [r4, #24]
   82052:	4293      	cmp	r3, r2
   82054:	db06      	blt.n	82064 <__fputwc+0x68>
   82056:	6823      	ldr	r3, [r4, #0]
   82058:	7019      	strb	r1, [r3, #0]
   8205a:	6823      	ldr	r3, [r4, #0]
   8205c:	7819      	ldrb	r1, [r3, #0]
   8205e:	3301      	adds	r3, #1
   82060:	290a      	cmp	r1, #10
   82062:	d1ea      	bne.n	8203a <__fputwc+0x3e>
   82064:	4638      	mov	r0, r7
   82066:	4622      	mov	r2, r4
   82068:	f001 f984 	bl	83374 <__swbuf_r>
   8206c:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   82070:	fab0 f080 	clz	r0, r0
   82074:	0940      	lsrs	r0, r0, #5
   82076:	2800      	cmp	r0, #0
   82078:	d0e0      	beq.n	8203c <__fputwc+0x40>
   8207a:	f04f 30ff 	mov.w	r0, #4294967295
   8207e:	b002      	add	sp, #8
   82080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82084:	89a3      	ldrh	r3, [r4, #12]
   82086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8208a:	81a3      	strh	r3, [r4, #12]
   8208c:	b002      	add	sp, #8
   8208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82092:	1e73      	subs	r3, r6, #1
   82094:	2bfe      	cmp	r3, #254	; 0xfe
   82096:	d8bb      	bhi.n	82010 <__fputwc+0x14>
   82098:	b2f1      	uxtb	r1, r6
   8209a:	4680      	mov	r8, r0
   8209c:	f88d 1004 	strb.w	r1, [sp, #4]
   820a0:	e7c5      	b.n	8202e <__fputwc+0x32>
   820a2:	4630      	mov	r0, r6
   820a4:	b002      	add	sp, #8
   820a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820aa:	bf00      	nop

000820ac <_fputwc_r>:
   820ac:	8993      	ldrh	r3, [r2, #12]
   820ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   820b2:	d10b      	bne.n	820cc <_fputwc_r+0x20>
   820b4:	b410      	push	{r4}
   820b6:	6e54      	ldr	r4, [r2, #100]	; 0x64
   820b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   820bc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   820c0:	6654      	str	r4, [r2, #100]	; 0x64
   820c2:	8193      	strh	r3, [r2, #12]
   820c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   820c8:	f7ff bf98 	b.w	81ffc <__fputwc>
   820cc:	f7ff bf96 	b.w	81ffc <__fputwc>

000820d0 <_malloc_trim_r>:
   820d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   820d2:	460c      	mov	r4, r1
   820d4:	4f22      	ldr	r7, [pc, #136]	; (82160 <_malloc_trim_r+0x90>)
   820d6:	4606      	mov	r6, r0
   820d8:	f000 ff04 	bl	82ee4 <__malloc_lock>
   820dc:	68bb      	ldr	r3, [r7, #8]
   820de:	685d      	ldr	r5, [r3, #4]
   820e0:	f025 0503 	bic.w	r5, r5, #3
   820e4:	1b29      	subs	r1, r5, r4
   820e6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   820ea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   820ee:	f021 010f 	bic.w	r1, r1, #15
   820f2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   820f6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   820fa:	db07      	blt.n	8210c <_malloc_trim_r+0x3c>
   820fc:	4630      	mov	r0, r6
   820fe:	2100      	movs	r1, #0
   82100:	f001 f8e4 	bl	832cc <_sbrk_r>
   82104:	68bb      	ldr	r3, [r7, #8]
   82106:	442b      	add	r3, r5
   82108:	4298      	cmp	r0, r3
   8210a:	d004      	beq.n	82116 <_malloc_trim_r+0x46>
   8210c:	4630      	mov	r0, r6
   8210e:	f000 feeb 	bl	82ee8 <__malloc_unlock>
   82112:	2000      	movs	r0, #0
   82114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82116:	4630      	mov	r0, r6
   82118:	4261      	negs	r1, r4
   8211a:	f001 f8d7 	bl	832cc <_sbrk_r>
   8211e:	3001      	adds	r0, #1
   82120:	d00d      	beq.n	8213e <_malloc_trim_r+0x6e>
   82122:	4b10      	ldr	r3, [pc, #64]	; (82164 <_malloc_trim_r+0x94>)
   82124:	68ba      	ldr	r2, [r7, #8]
   82126:	6819      	ldr	r1, [r3, #0]
   82128:	1b2d      	subs	r5, r5, r4
   8212a:	f045 0501 	orr.w	r5, r5, #1
   8212e:	4630      	mov	r0, r6
   82130:	1b09      	subs	r1, r1, r4
   82132:	6055      	str	r5, [r2, #4]
   82134:	6019      	str	r1, [r3, #0]
   82136:	f000 fed7 	bl	82ee8 <__malloc_unlock>
   8213a:	2001      	movs	r0, #1
   8213c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8213e:	4630      	mov	r0, r6
   82140:	2100      	movs	r1, #0
   82142:	f001 f8c3 	bl	832cc <_sbrk_r>
   82146:	68ba      	ldr	r2, [r7, #8]
   82148:	1a83      	subs	r3, r0, r2
   8214a:	2b0f      	cmp	r3, #15
   8214c:	ddde      	ble.n	8210c <_malloc_trim_r+0x3c>
   8214e:	4c06      	ldr	r4, [pc, #24]	; (82168 <_malloc_trim_r+0x98>)
   82150:	4904      	ldr	r1, [pc, #16]	; (82164 <_malloc_trim_r+0x94>)
   82152:	6824      	ldr	r4, [r4, #0]
   82154:	f043 0301 	orr.w	r3, r3, #1
   82158:	1b00      	subs	r0, r0, r4
   8215a:	6053      	str	r3, [r2, #4]
   8215c:	6008      	str	r0, [r1, #0]
   8215e:	e7d5      	b.n	8210c <_malloc_trim_r+0x3c>
   82160:	20070580 	.word	0x20070580
   82164:	20070a34 	.word	0x20070a34
   82168:	2007098c 	.word	0x2007098c

0008216c <_free_r>:
   8216c:	2900      	cmp	r1, #0
   8216e:	d04e      	beq.n	8220e <_free_r+0xa2>
   82170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82174:	460c      	mov	r4, r1
   82176:	4680      	mov	r8, r0
   82178:	f000 feb4 	bl	82ee4 <__malloc_lock>
   8217c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   82180:	4962      	ldr	r1, [pc, #392]	; (8230c <_free_r+0x1a0>)
   82182:	f1a4 0508 	sub.w	r5, r4, #8
   82186:	f027 0201 	bic.w	r2, r7, #1
   8218a:	18ab      	adds	r3, r5, r2
   8218c:	688e      	ldr	r6, [r1, #8]
   8218e:	6858      	ldr	r0, [r3, #4]
   82190:	429e      	cmp	r6, r3
   82192:	f020 0003 	bic.w	r0, r0, #3
   82196:	d05a      	beq.n	8224e <_free_r+0xe2>
   82198:	07fe      	lsls	r6, r7, #31
   8219a:	6058      	str	r0, [r3, #4]
   8219c:	d40b      	bmi.n	821b6 <_free_r+0x4a>
   8219e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   821a2:	f101 0e08 	add.w	lr, r1, #8
   821a6:	1bed      	subs	r5, r5, r7
   821a8:	68ac      	ldr	r4, [r5, #8]
   821aa:	443a      	add	r2, r7
   821ac:	4574      	cmp	r4, lr
   821ae:	d067      	beq.n	82280 <_free_r+0x114>
   821b0:	68ef      	ldr	r7, [r5, #12]
   821b2:	60e7      	str	r7, [r4, #12]
   821b4:	60bc      	str	r4, [r7, #8]
   821b6:	181c      	adds	r4, r3, r0
   821b8:	6864      	ldr	r4, [r4, #4]
   821ba:	07e4      	lsls	r4, r4, #31
   821bc:	d40c      	bmi.n	821d8 <_free_r+0x6c>
   821be:	4f54      	ldr	r7, [pc, #336]	; (82310 <_free_r+0x1a4>)
   821c0:	689c      	ldr	r4, [r3, #8]
   821c2:	4402      	add	r2, r0
   821c4:	42bc      	cmp	r4, r7
   821c6:	d07c      	beq.n	822c2 <_free_r+0x156>
   821c8:	68d8      	ldr	r0, [r3, #12]
   821ca:	f042 0301 	orr.w	r3, r2, #1
   821ce:	60e0      	str	r0, [r4, #12]
   821d0:	6084      	str	r4, [r0, #8]
   821d2:	606b      	str	r3, [r5, #4]
   821d4:	50aa      	str	r2, [r5, r2]
   821d6:	e003      	b.n	821e0 <_free_r+0x74>
   821d8:	f042 0301 	orr.w	r3, r2, #1
   821dc:	606b      	str	r3, [r5, #4]
   821de:	50aa      	str	r2, [r5, r2]
   821e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   821e4:	d214      	bcs.n	82210 <_free_r+0xa4>
   821e6:	08d2      	lsrs	r2, r2, #3
   821e8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   821ec:	2401      	movs	r4, #1
   821ee:	6848      	ldr	r0, [r1, #4]
   821f0:	1092      	asrs	r2, r2, #2
   821f2:	fa04 f202 	lsl.w	r2, r4, r2
   821f6:	689c      	ldr	r4, [r3, #8]
   821f8:	4310      	orrs	r0, r2
   821fa:	60ac      	str	r4, [r5, #8]
   821fc:	60eb      	str	r3, [r5, #12]
   821fe:	6048      	str	r0, [r1, #4]
   82200:	609d      	str	r5, [r3, #8]
   82202:	60e5      	str	r5, [r4, #12]
   82204:	4640      	mov	r0, r8
   82206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8220a:	f000 be6d 	b.w	82ee8 <__malloc_unlock>
   8220e:	4770      	bx	lr
   82210:	0a53      	lsrs	r3, r2, #9
   82212:	2b04      	cmp	r3, #4
   82214:	d847      	bhi.n	822a6 <_free_r+0x13a>
   82216:	0993      	lsrs	r3, r2, #6
   82218:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8221c:	0060      	lsls	r0, r4, #1
   8221e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   82222:	6883      	ldr	r3, [r0, #8]
   82224:	4939      	ldr	r1, [pc, #228]	; (8230c <_free_r+0x1a0>)
   82226:	4283      	cmp	r3, r0
   82228:	d043      	beq.n	822b2 <_free_r+0x146>
   8222a:	6859      	ldr	r1, [r3, #4]
   8222c:	f021 0103 	bic.w	r1, r1, #3
   82230:	4291      	cmp	r1, r2
   82232:	d902      	bls.n	8223a <_free_r+0xce>
   82234:	689b      	ldr	r3, [r3, #8]
   82236:	4298      	cmp	r0, r3
   82238:	d1f7      	bne.n	8222a <_free_r+0xbe>
   8223a:	68da      	ldr	r2, [r3, #12]
   8223c:	60ea      	str	r2, [r5, #12]
   8223e:	60ab      	str	r3, [r5, #8]
   82240:	4640      	mov	r0, r8
   82242:	6095      	str	r5, [r2, #8]
   82244:	60dd      	str	r5, [r3, #12]
   82246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8224a:	f000 be4d 	b.w	82ee8 <__malloc_unlock>
   8224e:	07ff      	lsls	r7, r7, #31
   82250:	4402      	add	r2, r0
   82252:	d407      	bmi.n	82264 <_free_r+0xf8>
   82254:	f854 4c08 	ldr.w	r4, [r4, #-8]
   82258:	1b2d      	subs	r5, r5, r4
   8225a:	68eb      	ldr	r3, [r5, #12]
   8225c:	68a8      	ldr	r0, [r5, #8]
   8225e:	4422      	add	r2, r4
   82260:	60c3      	str	r3, [r0, #12]
   82262:	6098      	str	r0, [r3, #8]
   82264:	4b2b      	ldr	r3, [pc, #172]	; (82314 <_free_r+0x1a8>)
   82266:	f042 0001 	orr.w	r0, r2, #1
   8226a:	681b      	ldr	r3, [r3, #0]
   8226c:	6068      	str	r0, [r5, #4]
   8226e:	429a      	cmp	r2, r3
   82270:	608d      	str	r5, [r1, #8]
   82272:	d3c7      	bcc.n	82204 <_free_r+0x98>
   82274:	4b28      	ldr	r3, [pc, #160]	; (82318 <_free_r+0x1ac>)
   82276:	4640      	mov	r0, r8
   82278:	6819      	ldr	r1, [r3, #0]
   8227a:	f7ff ff29 	bl	820d0 <_malloc_trim_r>
   8227e:	e7c1      	b.n	82204 <_free_r+0x98>
   82280:	1819      	adds	r1, r3, r0
   82282:	6849      	ldr	r1, [r1, #4]
   82284:	07c9      	lsls	r1, r1, #31
   82286:	d409      	bmi.n	8229c <_free_r+0x130>
   82288:	68d9      	ldr	r1, [r3, #12]
   8228a:	4402      	add	r2, r0
   8228c:	689b      	ldr	r3, [r3, #8]
   8228e:	f042 0001 	orr.w	r0, r2, #1
   82292:	60d9      	str	r1, [r3, #12]
   82294:	608b      	str	r3, [r1, #8]
   82296:	6068      	str	r0, [r5, #4]
   82298:	50aa      	str	r2, [r5, r2]
   8229a:	e7b3      	b.n	82204 <_free_r+0x98>
   8229c:	f042 0301 	orr.w	r3, r2, #1
   822a0:	606b      	str	r3, [r5, #4]
   822a2:	50aa      	str	r2, [r5, r2]
   822a4:	e7ae      	b.n	82204 <_free_r+0x98>
   822a6:	2b14      	cmp	r3, #20
   822a8:	d814      	bhi.n	822d4 <_free_r+0x168>
   822aa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   822ae:	0060      	lsls	r0, r4, #1
   822b0:	e7b5      	b.n	8221e <_free_r+0xb2>
   822b2:	684a      	ldr	r2, [r1, #4]
   822b4:	10a4      	asrs	r4, r4, #2
   822b6:	2001      	movs	r0, #1
   822b8:	40a0      	lsls	r0, r4
   822ba:	4302      	orrs	r2, r0
   822bc:	604a      	str	r2, [r1, #4]
   822be:	461a      	mov	r2, r3
   822c0:	e7bc      	b.n	8223c <_free_r+0xd0>
   822c2:	f042 0301 	orr.w	r3, r2, #1
   822c6:	614d      	str	r5, [r1, #20]
   822c8:	610d      	str	r5, [r1, #16]
   822ca:	60ec      	str	r4, [r5, #12]
   822cc:	60ac      	str	r4, [r5, #8]
   822ce:	606b      	str	r3, [r5, #4]
   822d0:	50aa      	str	r2, [r5, r2]
   822d2:	e797      	b.n	82204 <_free_r+0x98>
   822d4:	2b54      	cmp	r3, #84	; 0x54
   822d6:	d804      	bhi.n	822e2 <_free_r+0x176>
   822d8:	0b13      	lsrs	r3, r2, #12
   822da:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   822de:	0060      	lsls	r0, r4, #1
   822e0:	e79d      	b.n	8221e <_free_r+0xb2>
   822e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   822e6:	d804      	bhi.n	822f2 <_free_r+0x186>
   822e8:	0bd3      	lsrs	r3, r2, #15
   822ea:	f103 0477 	add.w	r4, r3, #119	; 0x77
   822ee:	0060      	lsls	r0, r4, #1
   822f0:	e795      	b.n	8221e <_free_r+0xb2>
   822f2:	f240 5054 	movw	r0, #1364	; 0x554
   822f6:	4283      	cmp	r3, r0
   822f8:	d804      	bhi.n	82304 <_free_r+0x198>
   822fa:	0c93      	lsrs	r3, r2, #18
   822fc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82300:	0060      	lsls	r0, r4, #1
   82302:	e78c      	b.n	8221e <_free_r+0xb2>
   82304:	20fc      	movs	r0, #252	; 0xfc
   82306:	247e      	movs	r4, #126	; 0x7e
   82308:	e789      	b.n	8221e <_free_r+0xb2>
   8230a:	bf00      	nop
   8230c:	20070580 	.word	0x20070580
   82310:	20070588 	.word	0x20070588
   82314:	20070988 	.word	0x20070988
   82318:	20070a30 	.word	0x20070a30

0008231c <__sfvwrite_r>:
   8231c:	6893      	ldr	r3, [r2, #8]
   8231e:	2b00      	cmp	r3, #0
   82320:	f000 80b1 	beq.w	82486 <__sfvwrite_r+0x16a>
   82324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82328:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8232c:	b083      	sub	sp, #12
   8232e:	f01e 0f08 	tst.w	lr, #8
   82332:	460c      	mov	r4, r1
   82334:	4681      	mov	r9, r0
   82336:	4616      	mov	r6, r2
   82338:	d028      	beq.n	8238c <__sfvwrite_r+0x70>
   8233a:	690b      	ldr	r3, [r1, #16]
   8233c:	b333      	cbz	r3, 8238c <__sfvwrite_r+0x70>
   8233e:	f00e 0802 	and.w	r8, lr, #2
   82342:	fa1f f088 	uxth.w	r0, r8
   82346:	6835      	ldr	r5, [r6, #0]
   82348:	b380      	cbz	r0, 823ac <__sfvwrite_r+0x90>
   8234a:	f04f 0b00 	mov.w	fp, #0
   8234e:	46d8      	mov	r8, fp
   82350:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 82638 <__sfvwrite_r+0x31c>
   82354:	f1b8 0f00 	cmp.w	r8, #0
   82358:	f000 808f 	beq.w	8247a <__sfvwrite_r+0x15e>
   8235c:	45d0      	cmp	r8, sl
   8235e:	4643      	mov	r3, r8
   82360:	4648      	mov	r0, r9
   82362:	bf28      	it	cs
   82364:	4653      	movcs	r3, sl
   82366:	69e1      	ldr	r1, [r4, #28]
   82368:	465a      	mov	r2, fp
   8236a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8236c:	47b8      	blx	r7
   8236e:	2800      	cmp	r0, #0
   82370:	f340 80a8 	ble.w	824c4 <__sfvwrite_r+0x1a8>
   82374:	68b3      	ldr	r3, [r6, #8]
   82376:	4483      	add	fp, r0
   82378:	1a1b      	subs	r3, r3, r0
   8237a:	ebc0 0808 	rsb	r8, r0, r8
   8237e:	60b3      	str	r3, [r6, #8]
   82380:	2b00      	cmp	r3, #0
   82382:	d1e7      	bne.n	82354 <__sfvwrite_r+0x38>
   82384:	2000      	movs	r0, #0
   82386:	b003      	add	sp, #12
   82388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8238c:	4648      	mov	r0, r9
   8238e:	4621      	mov	r1, r4
   82390:	f7ff fc6a 	bl	81c68 <__swsetup_r>
   82394:	2800      	cmp	r0, #0
   82396:	f040 8146 	bne.w	82626 <__sfvwrite_r+0x30a>
   8239a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8239e:	6835      	ldr	r5, [r6, #0]
   823a0:	f00e 0802 	and.w	r8, lr, #2
   823a4:	fa1f f088 	uxth.w	r0, r8
   823a8:	2800      	cmp	r0, #0
   823aa:	d1ce      	bne.n	8234a <__sfvwrite_r+0x2e>
   823ac:	f01e 0b01 	ands.w	fp, lr, #1
   823b0:	f040 8091 	bne.w	824d6 <__sfvwrite_r+0x1ba>
   823b4:	46d8      	mov	r8, fp
   823b6:	f1b8 0f00 	cmp.w	r8, #0
   823ba:	d058      	beq.n	8246e <__sfvwrite_r+0x152>
   823bc:	f41e 7f00 	tst.w	lr, #512	; 0x200
   823c0:	68a7      	ldr	r7, [r4, #8]
   823c2:	d062      	beq.n	8248a <__sfvwrite_r+0x16e>
   823c4:	45b8      	cmp	r8, r7
   823c6:	46ba      	mov	sl, r7
   823c8:	f0c0 80c2 	bcc.w	82550 <__sfvwrite_r+0x234>
   823cc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   823d0:	f000 80c0 	beq.w	82554 <__sfvwrite_r+0x238>
   823d4:	6967      	ldr	r7, [r4, #20]
   823d6:	6921      	ldr	r1, [r4, #16]
   823d8:	6823      	ldr	r3, [r4, #0]
   823da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   823de:	1a5b      	subs	r3, r3, r1
   823e0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   823e4:	1c58      	adds	r0, r3, #1
   823e6:	107f      	asrs	r7, r7, #1
   823e8:	4440      	add	r0, r8
   823ea:	4287      	cmp	r7, r0
   823ec:	463a      	mov	r2, r7
   823ee:	bf3c      	itt	cc
   823f0:	4607      	movcc	r7, r0
   823f2:	463a      	movcc	r2, r7
   823f4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   823f8:	9300      	str	r3, [sp, #0]
   823fa:	f000 80fb 	beq.w	825f4 <__sfvwrite_r+0x2d8>
   823fe:	4611      	mov	r1, r2
   82400:	4648      	mov	r0, r9
   82402:	f000 f9c5 	bl	82790 <_malloc_r>
   82406:	9b00      	ldr	r3, [sp, #0]
   82408:	4682      	mov	sl, r0
   8240a:	2800      	cmp	r0, #0
   8240c:	f000 810e 	beq.w	8262c <__sfvwrite_r+0x310>
   82410:	461a      	mov	r2, r3
   82412:	6921      	ldr	r1, [r4, #16]
   82414:	9300      	str	r3, [sp, #0]
   82416:	f000 fc8b 	bl	82d30 <memcpy>
   8241a:	89a2      	ldrh	r2, [r4, #12]
   8241c:	9b00      	ldr	r3, [sp, #0]
   8241e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82426:	81a2      	strh	r2, [r4, #12]
   82428:	eb0a 0003 	add.w	r0, sl, r3
   8242c:	f8c4 a010 	str.w	sl, [r4, #16]
   82430:	1afb      	subs	r3, r7, r3
   82432:	6167      	str	r7, [r4, #20]
   82434:	46c2      	mov	sl, r8
   82436:	4647      	mov	r7, r8
   82438:	6020      	str	r0, [r4, #0]
   8243a:	60a3      	str	r3, [r4, #8]
   8243c:	4652      	mov	r2, sl
   8243e:	4659      	mov	r1, fp
   82440:	f000 fcec 	bl	82e1c <memmove>
   82444:	68a0      	ldr	r0, [r4, #8]
   82446:	6822      	ldr	r2, [r4, #0]
   82448:	1bc0      	subs	r0, r0, r7
   8244a:	60a0      	str	r0, [r4, #8]
   8244c:	4640      	mov	r0, r8
   8244e:	eb02 030a 	add.w	r3, r2, sl
   82452:	6023      	str	r3, [r4, #0]
   82454:	68b3      	ldr	r3, [r6, #8]
   82456:	4483      	add	fp, r0
   82458:	1a1b      	subs	r3, r3, r0
   8245a:	ebc0 0808 	rsb	r8, r0, r8
   8245e:	60b3      	str	r3, [r6, #8]
   82460:	2b00      	cmp	r3, #0
   82462:	d08f      	beq.n	82384 <__sfvwrite_r+0x68>
   82464:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   82468:	f1b8 0f00 	cmp.w	r8, #0
   8246c:	d1a6      	bne.n	823bc <__sfvwrite_r+0xa0>
   8246e:	f8d5 b000 	ldr.w	fp, [r5]
   82472:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82476:	3508      	adds	r5, #8
   82478:	e79d      	b.n	823b6 <__sfvwrite_r+0x9a>
   8247a:	f8d5 b000 	ldr.w	fp, [r5]
   8247e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82482:	3508      	adds	r5, #8
   82484:	e766      	b.n	82354 <__sfvwrite_r+0x38>
   82486:	2000      	movs	r0, #0
   82488:	4770      	bx	lr
   8248a:	6820      	ldr	r0, [r4, #0]
   8248c:	6923      	ldr	r3, [r4, #16]
   8248e:	4298      	cmp	r0, r3
   82490:	d803      	bhi.n	8249a <__sfvwrite_r+0x17e>
   82492:	6962      	ldr	r2, [r4, #20]
   82494:	4590      	cmp	r8, r2
   82496:	f080 8085 	bcs.w	825a4 <__sfvwrite_r+0x288>
   8249a:	4547      	cmp	r7, r8
   8249c:	bf28      	it	cs
   8249e:	4647      	movcs	r7, r8
   824a0:	4659      	mov	r1, fp
   824a2:	463a      	mov	r2, r7
   824a4:	f000 fcba 	bl	82e1c <memmove>
   824a8:	68a3      	ldr	r3, [r4, #8]
   824aa:	6822      	ldr	r2, [r4, #0]
   824ac:	1bdb      	subs	r3, r3, r7
   824ae:	443a      	add	r2, r7
   824b0:	60a3      	str	r3, [r4, #8]
   824b2:	6022      	str	r2, [r4, #0]
   824b4:	2b00      	cmp	r3, #0
   824b6:	d149      	bne.n	8254c <__sfvwrite_r+0x230>
   824b8:	4648      	mov	r0, r9
   824ba:	4621      	mov	r1, r4
   824bc:	f7ff fcea 	bl	81e94 <_fflush_r>
   824c0:	2800      	cmp	r0, #0
   824c2:	d043      	beq.n	8254c <__sfvwrite_r+0x230>
   824c4:	89a3      	ldrh	r3, [r4, #12]
   824c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824ca:	f04f 30ff 	mov.w	r0, #4294967295
   824ce:	81a3      	strh	r3, [r4, #12]
   824d0:	b003      	add	sp, #12
   824d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824d6:	4680      	mov	r8, r0
   824d8:	4683      	mov	fp, r0
   824da:	4682      	mov	sl, r0
   824dc:	9000      	str	r0, [sp, #0]
   824de:	f1ba 0f00 	cmp.w	sl, #0
   824e2:	d02b      	beq.n	8253c <__sfvwrite_r+0x220>
   824e4:	9b00      	ldr	r3, [sp, #0]
   824e6:	2b00      	cmp	r3, #0
   824e8:	d04f      	beq.n	8258a <__sfvwrite_r+0x26e>
   824ea:	45d0      	cmp	r8, sl
   824ec:	4643      	mov	r3, r8
   824ee:	bf28      	it	cs
   824f0:	4653      	movcs	r3, sl
   824f2:	6820      	ldr	r0, [r4, #0]
   824f4:	6921      	ldr	r1, [r4, #16]
   824f6:	461f      	mov	r7, r3
   824f8:	4288      	cmp	r0, r1
   824fa:	f8d4 e008 	ldr.w	lr, [r4, #8]
   824fe:	6962      	ldr	r2, [r4, #20]
   82500:	d903      	bls.n	8250a <__sfvwrite_r+0x1ee>
   82502:	eb0e 0c02 	add.w	ip, lr, r2
   82506:	4563      	cmp	r3, ip
   82508:	dc5e      	bgt.n	825c8 <__sfvwrite_r+0x2ac>
   8250a:	4293      	cmp	r3, r2
   8250c:	db24      	blt.n	82558 <__sfvwrite_r+0x23c>
   8250e:	4613      	mov	r3, r2
   82510:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82512:	4648      	mov	r0, r9
   82514:	69e1      	ldr	r1, [r4, #28]
   82516:	465a      	mov	r2, fp
   82518:	47b8      	blx	r7
   8251a:	1e07      	subs	r7, r0, #0
   8251c:	ddd2      	ble.n	824c4 <__sfvwrite_r+0x1a8>
   8251e:	ebb8 0807 	subs.w	r8, r8, r7
   82522:	d029      	beq.n	82578 <__sfvwrite_r+0x25c>
   82524:	68b3      	ldr	r3, [r6, #8]
   82526:	44bb      	add	fp, r7
   82528:	1bdb      	subs	r3, r3, r7
   8252a:	ebc7 0a0a 	rsb	sl, r7, sl
   8252e:	60b3      	str	r3, [r6, #8]
   82530:	2b00      	cmp	r3, #0
   82532:	f43f af27 	beq.w	82384 <__sfvwrite_r+0x68>
   82536:	f1ba 0f00 	cmp.w	sl, #0
   8253a:	d1d3      	bne.n	824e4 <__sfvwrite_r+0x1c8>
   8253c:	2300      	movs	r3, #0
   8253e:	f8d5 b000 	ldr.w	fp, [r5]
   82542:	f8d5 a004 	ldr.w	sl, [r5, #4]
   82546:	9300      	str	r3, [sp, #0]
   82548:	3508      	adds	r5, #8
   8254a:	e7c8      	b.n	824de <__sfvwrite_r+0x1c2>
   8254c:	4638      	mov	r0, r7
   8254e:	e781      	b.n	82454 <__sfvwrite_r+0x138>
   82550:	4647      	mov	r7, r8
   82552:	46c2      	mov	sl, r8
   82554:	6820      	ldr	r0, [r4, #0]
   82556:	e771      	b.n	8243c <__sfvwrite_r+0x120>
   82558:	461a      	mov	r2, r3
   8255a:	4659      	mov	r1, fp
   8255c:	9301      	str	r3, [sp, #4]
   8255e:	f000 fc5d 	bl	82e1c <memmove>
   82562:	68a2      	ldr	r2, [r4, #8]
   82564:	6821      	ldr	r1, [r4, #0]
   82566:	9b01      	ldr	r3, [sp, #4]
   82568:	ebb8 0807 	subs.w	r8, r8, r7
   8256c:	eba2 0203 	sub.w	r2, r2, r3
   82570:	440b      	add	r3, r1
   82572:	60a2      	str	r2, [r4, #8]
   82574:	6023      	str	r3, [r4, #0]
   82576:	d1d5      	bne.n	82524 <__sfvwrite_r+0x208>
   82578:	4648      	mov	r0, r9
   8257a:	4621      	mov	r1, r4
   8257c:	f7ff fc8a 	bl	81e94 <_fflush_r>
   82580:	2800      	cmp	r0, #0
   82582:	d19f      	bne.n	824c4 <__sfvwrite_r+0x1a8>
   82584:	f8cd 8000 	str.w	r8, [sp]
   82588:	e7cc      	b.n	82524 <__sfvwrite_r+0x208>
   8258a:	4658      	mov	r0, fp
   8258c:	210a      	movs	r1, #10
   8258e:	4652      	mov	r2, sl
   82590:	f000 fb84 	bl	82c9c <memchr>
   82594:	2800      	cmp	r0, #0
   82596:	d041      	beq.n	8261c <__sfvwrite_r+0x300>
   82598:	3001      	adds	r0, #1
   8259a:	2301      	movs	r3, #1
   8259c:	ebcb 0800 	rsb	r8, fp, r0
   825a0:	9300      	str	r3, [sp, #0]
   825a2:	e7a2      	b.n	824ea <__sfvwrite_r+0x1ce>
   825a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   825a8:	4543      	cmp	r3, r8
   825aa:	bf28      	it	cs
   825ac:	4643      	movcs	r3, r8
   825ae:	fb93 f3f2 	sdiv	r3, r3, r2
   825b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   825b4:	fb03 f302 	mul.w	r3, r3, r2
   825b8:	4648      	mov	r0, r9
   825ba:	69e1      	ldr	r1, [r4, #28]
   825bc:	465a      	mov	r2, fp
   825be:	47b8      	blx	r7
   825c0:	2800      	cmp	r0, #0
   825c2:	f73f af47 	bgt.w	82454 <__sfvwrite_r+0x138>
   825c6:	e77d      	b.n	824c4 <__sfvwrite_r+0x1a8>
   825c8:	4662      	mov	r2, ip
   825ca:	4659      	mov	r1, fp
   825cc:	f8cd c004 	str.w	ip, [sp, #4]
   825d0:	f000 fc24 	bl	82e1c <memmove>
   825d4:	6823      	ldr	r3, [r4, #0]
   825d6:	f8dd c004 	ldr.w	ip, [sp, #4]
   825da:	4648      	mov	r0, r9
   825dc:	4463      	add	r3, ip
   825de:	6023      	str	r3, [r4, #0]
   825e0:	4621      	mov	r1, r4
   825e2:	f7ff fc57 	bl	81e94 <_fflush_r>
   825e6:	f8dd c004 	ldr.w	ip, [sp, #4]
   825ea:	2800      	cmp	r0, #0
   825ec:	f47f af6a 	bne.w	824c4 <__sfvwrite_r+0x1a8>
   825f0:	4667      	mov	r7, ip
   825f2:	e794      	b.n	8251e <__sfvwrite_r+0x202>
   825f4:	4648      	mov	r0, r9
   825f6:	f000 fc79 	bl	82eec <_realloc_r>
   825fa:	9b00      	ldr	r3, [sp, #0]
   825fc:	4682      	mov	sl, r0
   825fe:	2800      	cmp	r0, #0
   82600:	f47f af12 	bne.w	82428 <__sfvwrite_r+0x10c>
   82604:	4648      	mov	r0, r9
   82606:	6921      	ldr	r1, [r4, #16]
   82608:	f7ff fdb0 	bl	8216c <_free_r>
   8260c:	89a3      	ldrh	r3, [r4, #12]
   8260e:	220c      	movs	r2, #12
   82610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82614:	b29b      	uxth	r3, r3
   82616:	f8c9 2000 	str.w	r2, [r9]
   8261a:	e754      	b.n	824c6 <__sfvwrite_r+0x1aa>
   8261c:	2301      	movs	r3, #1
   8261e:	f10a 0801 	add.w	r8, sl, #1
   82622:	9300      	str	r3, [sp, #0]
   82624:	e761      	b.n	824ea <__sfvwrite_r+0x1ce>
   82626:	f04f 30ff 	mov.w	r0, #4294967295
   8262a:	e6ac      	b.n	82386 <__sfvwrite_r+0x6a>
   8262c:	230c      	movs	r3, #12
   8262e:	f8c9 3000 	str.w	r3, [r9]
   82632:	89a3      	ldrh	r3, [r4, #12]
   82634:	e747      	b.n	824c6 <__sfvwrite_r+0x1aa>
   82636:	bf00      	nop
   82638:	7ffffc00 	.word	0x7ffffc00

0008263c <_fwalk_reent>:
   8263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82640:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82644:	d01e      	beq.n	82684 <_fwalk_reent+0x48>
   82646:	4688      	mov	r8, r1
   82648:	4607      	mov	r7, r0
   8264a:	f04f 0900 	mov.w	r9, #0
   8264e:	6875      	ldr	r5, [r6, #4]
   82650:	68b4      	ldr	r4, [r6, #8]
   82652:	3d01      	subs	r5, #1
   82654:	d410      	bmi.n	82678 <_fwalk_reent+0x3c>
   82656:	89a3      	ldrh	r3, [r4, #12]
   82658:	3d01      	subs	r5, #1
   8265a:	2b01      	cmp	r3, #1
   8265c:	d908      	bls.n	82670 <_fwalk_reent+0x34>
   8265e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82662:	3301      	adds	r3, #1
   82664:	d004      	beq.n	82670 <_fwalk_reent+0x34>
   82666:	4638      	mov	r0, r7
   82668:	4621      	mov	r1, r4
   8266a:	47c0      	blx	r8
   8266c:	ea49 0900 	orr.w	r9, r9, r0
   82670:	1c6b      	adds	r3, r5, #1
   82672:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82676:	d1ee      	bne.n	82656 <_fwalk_reent+0x1a>
   82678:	6836      	ldr	r6, [r6, #0]
   8267a:	2e00      	cmp	r6, #0
   8267c:	d1e7      	bne.n	8264e <_fwalk_reent+0x12>
   8267e:	4648      	mov	r0, r9
   82680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82684:	46b1      	mov	r9, r6
   82686:	4648      	mov	r0, r9
   82688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008268c <__locale_charset>:
   8268c:	4800      	ldr	r0, [pc, #0]	; (82690 <__locale_charset+0x4>)
   8268e:	4770      	bx	lr
   82690:	2007055c 	.word	0x2007055c

00082694 <__locale_mb_cur_max>:
   82694:	4b01      	ldr	r3, [pc, #4]	; (8269c <__locale_mb_cur_max+0x8>)
   82696:	6818      	ldr	r0, [r3, #0]
   82698:	4770      	bx	lr
   8269a:	bf00      	nop
   8269c:	2007057c 	.word	0x2007057c

000826a0 <__smakebuf_r>:
   826a0:	898b      	ldrh	r3, [r1, #12]
   826a2:	b29a      	uxth	r2, r3
   826a4:	f012 0f02 	tst.w	r2, #2
   826a8:	d13c      	bne.n	82724 <__smakebuf_r+0x84>
   826aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   826ac:	460c      	mov	r4, r1
   826ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   826b2:	b091      	sub	sp, #68	; 0x44
   826b4:	2900      	cmp	r1, #0
   826b6:	4605      	mov	r5, r0
   826b8:	db19      	blt.n	826ee <__smakebuf_r+0x4e>
   826ba:	aa01      	add	r2, sp, #4
   826bc:	f000 ffa0 	bl	83600 <_fstat_r>
   826c0:	2800      	cmp	r0, #0
   826c2:	db12      	blt.n	826ea <__smakebuf_r+0x4a>
   826c4:	9b02      	ldr	r3, [sp, #8]
   826c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   826ca:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   826ce:	fab7 f787 	clz	r7, r7
   826d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   826d6:	ea4f 1757 	mov.w	r7, r7, lsr #5
   826da:	d02a      	beq.n	82732 <__smakebuf_r+0x92>
   826dc:	89a3      	ldrh	r3, [r4, #12]
   826de:	f44f 6680 	mov.w	r6, #1024	; 0x400
   826e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   826e6:	81a3      	strh	r3, [r4, #12]
   826e8:	e00b      	b.n	82702 <__smakebuf_r+0x62>
   826ea:	89a3      	ldrh	r3, [r4, #12]
   826ec:	b29a      	uxth	r2, r3
   826ee:	f012 0f80 	tst.w	r2, #128	; 0x80
   826f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   826f6:	81a3      	strh	r3, [r4, #12]
   826f8:	bf0c      	ite	eq
   826fa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   826fe:	2640      	movne	r6, #64	; 0x40
   82700:	2700      	movs	r7, #0
   82702:	4628      	mov	r0, r5
   82704:	4631      	mov	r1, r6
   82706:	f000 f843 	bl	82790 <_malloc_r>
   8270a:	89a3      	ldrh	r3, [r4, #12]
   8270c:	b340      	cbz	r0, 82760 <__smakebuf_r+0xc0>
   8270e:	4a1a      	ldr	r2, [pc, #104]	; (82778 <__smakebuf_r+0xd8>)
   82710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82714:	63ea      	str	r2, [r5, #60]	; 0x3c
   82716:	81a3      	strh	r3, [r4, #12]
   82718:	6020      	str	r0, [r4, #0]
   8271a:	6120      	str	r0, [r4, #16]
   8271c:	6166      	str	r6, [r4, #20]
   8271e:	b99f      	cbnz	r7, 82748 <__smakebuf_r+0xa8>
   82720:	b011      	add	sp, #68	; 0x44
   82722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82724:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82728:	2201      	movs	r2, #1
   8272a:	600b      	str	r3, [r1, #0]
   8272c:	610b      	str	r3, [r1, #16]
   8272e:	614a      	str	r2, [r1, #20]
   82730:	4770      	bx	lr
   82732:	4b12      	ldr	r3, [pc, #72]	; (8277c <__smakebuf_r+0xdc>)
   82734:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   82736:	429a      	cmp	r2, r3
   82738:	d1d0      	bne.n	826dc <__smakebuf_r+0x3c>
   8273a:	89a3      	ldrh	r3, [r4, #12]
   8273c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82740:	4333      	orrs	r3, r6
   82742:	81a3      	strh	r3, [r4, #12]
   82744:	64e6      	str	r6, [r4, #76]	; 0x4c
   82746:	e7dc      	b.n	82702 <__smakebuf_r+0x62>
   82748:	4628      	mov	r0, r5
   8274a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8274e:	f000 ff6b 	bl	83628 <_isatty_r>
   82752:	2800      	cmp	r0, #0
   82754:	d0e4      	beq.n	82720 <__smakebuf_r+0x80>
   82756:	89a3      	ldrh	r3, [r4, #12]
   82758:	f043 0301 	orr.w	r3, r3, #1
   8275c:	81a3      	strh	r3, [r4, #12]
   8275e:	e7df      	b.n	82720 <__smakebuf_r+0x80>
   82760:	059a      	lsls	r2, r3, #22
   82762:	d4dd      	bmi.n	82720 <__smakebuf_r+0x80>
   82764:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82768:	f043 0302 	orr.w	r3, r3, #2
   8276c:	2101      	movs	r1, #1
   8276e:	81a3      	strh	r3, [r4, #12]
   82770:	6022      	str	r2, [r4, #0]
   82772:	6122      	str	r2, [r4, #16]
   82774:	6161      	str	r1, [r4, #20]
   82776:	e7d3      	b.n	82720 <__smakebuf_r+0x80>
   82778:	00081ec1 	.word	0x00081ec1
   8277c:	0008334d 	.word	0x0008334d

00082780 <malloc>:
   82780:	4b02      	ldr	r3, [pc, #8]	; (8278c <malloc+0xc>)
   82782:	4601      	mov	r1, r0
   82784:	6818      	ldr	r0, [r3, #0]
   82786:	f000 b803 	b.w	82790 <_malloc_r>
   8278a:	bf00      	nop
   8278c:	20070558 	.word	0x20070558

00082790 <_malloc_r>:
   82790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82794:	f101 050b 	add.w	r5, r1, #11
   82798:	2d16      	cmp	r5, #22
   8279a:	b083      	sub	sp, #12
   8279c:	4606      	mov	r6, r0
   8279e:	d927      	bls.n	827f0 <_malloc_r+0x60>
   827a0:	f035 0507 	bics.w	r5, r5, #7
   827a4:	f100 80b6 	bmi.w	82914 <_malloc_r+0x184>
   827a8:	42a9      	cmp	r1, r5
   827aa:	f200 80b3 	bhi.w	82914 <_malloc_r+0x184>
   827ae:	f000 fb99 	bl	82ee4 <__malloc_lock>
   827b2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   827b6:	d222      	bcs.n	827fe <_malloc_r+0x6e>
   827b8:	4fbc      	ldr	r7, [pc, #752]	; (82aac <_malloc_r+0x31c>)
   827ba:	08e8      	lsrs	r0, r5, #3
   827bc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   827c0:	68dc      	ldr	r4, [r3, #12]
   827c2:	429c      	cmp	r4, r3
   827c4:	f000 81bc 	beq.w	82b40 <_malloc_r+0x3b0>
   827c8:	6863      	ldr	r3, [r4, #4]
   827ca:	68e1      	ldr	r1, [r4, #12]
   827cc:	f023 0303 	bic.w	r3, r3, #3
   827d0:	4423      	add	r3, r4
   827d2:	685a      	ldr	r2, [r3, #4]
   827d4:	68a5      	ldr	r5, [r4, #8]
   827d6:	f042 0201 	orr.w	r2, r2, #1
   827da:	60e9      	str	r1, [r5, #12]
   827dc:	4630      	mov	r0, r6
   827de:	608d      	str	r5, [r1, #8]
   827e0:	605a      	str	r2, [r3, #4]
   827e2:	f000 fb81 	bl	82ee8 <__malloc_unlock>
   827e6:	3408      	adds	r4, #8
   827e8:	4620      	mov	r0, r4
   827ea:	b003      	add	sp, #12
   827ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827f0:	2910      	cmp	r1, #16
   827f2:	f200 808f 	bhi.w	82914 <_malloc_r+0x184>
   827f6:	f000 fb75 	bl	82ee4 <__malloc_lock>
   827fa:	2510      	movs	r5, #16
   827fc:	e7dc      	b.n	827b8 <_malloc_r+0x28>
   827fe:	0a68      	lsrs	r0, r5, #9
   82800:	f000 808f 	beq.w	82922 <_malloc_r+0x192>
   82804:	2804      	cmp	r0, #4
   82806:	f200 8147 	bhi.w	82a98 <_malloc_r+0x308>
   8280a:	09a8      	lsrs	r0, r5, #6
   8280c:	3038      	adds	r0, #56	; 0x38
   8280e:	0041      	lsls	r1, r0, #1
   82810:	4fa6      	ldr	r7, [pc, #664]	; (82aac <_malloc_r+0x31c>)
   82812:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82816:	68cc      	ldr	r4, [r1, #12]
   82818:	42a1      	cmp	r1, r4
   8281a:	d106      	bne.n	8282a <_malloc_r+0x9a>
   8281c:	e00c      	b.n	82838 <_malloc_r+0xa8>
   8281e:	2a00      	cmp	r2, #0
   82820:	f280 8082 	bge.w	82928 <_malloc_r+0x198>
   82824:	68e4      	ldr	r4, [r4, #12]
   82826:	42a1      	cmp	r1, r4
   82828:	d006      	beq.n	82838 <_malloc_r+0xa8>
   8282a:	6863      	ldr	r3, [r4, #4]
   8282c:	f023 0303 	bic.w	r3, r3, #3
   82830:	1b5a      	subs	r2, r3, r5
   82832:	2a0f      	cmp	r2, #15
   82834:	ddf3      	ble.n	8281e <_malloc_r+0x8e>
   82836:	3801      	subs	r0, #1
   82838:	3001      	adds	r0, #1
   8283a:	499c      	ldr	r1, [pc, #624]	; (82aac <_malloc_r+0x31c>)
   8283c:	693c      	ldr	r4, [r7, #16]
   8283e:	f101 0e08 	add.w	lr, r1, #8
   82842:	4574      	cmp	r4, lr
   82844:	f000 8171 	beq.w	82b2a <_malloc_r+0x39a>
   82848:	6863      	ldr	r3, [r4, #4]
   8284a:	f023 0303 	bic.w	r3, r3, #3
   8284e:	1b5a      	subs	r2, r3, r5
   82850:	2a0f      	cmp	r2, #15
   82852:	f300 8157 	bgt.w	82b04 <_malloc_r+0x374>
   82856:	2a00      	cmp	r2, #0
   82858:	f8c1 e014 	str.w	lr, [r1, #20]
   8285c:	f8c1 e010 	str.w	lr, [r1, #16]
   82860:	da66      	bge.n	82930 <_malloc_r+0x1a0>
   82862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82866:	f080 812d 	bcs.w	82ac4 <_malloc_r+0x334>
   8286a:	08db      	lsrs	r3, r3, #3
   8286c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82870:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82874:	684a      	ldr	r2, [r1, #4]
   82876:	2301      	movs	r3, #1
   82878:	fa03 f30c 	lsl.w	r3, r3, ip
   8287c:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82880:	4313      	orrs	r3, r2
   82882:	f8c4 c008 	str.w	ip, [r4, #8]
   82886:	f8c4 800c 	str.w	r8, [r4, #12]
   8288a:	604b      	str	r3, [r1, #4]
   8288c:	f8c8 4008 	str.w	r4, [r8, #8]
   82890:	f8cc 400c 	str.w	r4, [ip, #12]
   82894:	1082      	asrs	r2, r0, #2
   82896:	2401      	movs	r4, #1
   82898:	4094      	lsls	r4, r2
   8289a:	429c      	cmp	r4, r3
   8289c:	d855      	bhi.n	8294a <_malloc_r+0x1ba>
   8289e:	4223      	tst	r3, r4
   828a0:	d106      	bne.n	828b0 <_malloc_r+0x120>
   828a2:	f020 0003 	bic.w	r0, r0, #3
   828a6:	0064      	lsls	r4, r4, #1
   828a8:	4223      	tst	r3, r4
   828aa:	f100 0004 	add.w	r0, r0, #4
   828ae:	d0fa      	beq.n	828a6 <_malloc_r+0x116>
   828b0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   828b4:	46c4      	mov	ip, r8
   828b6:	4681      	mov	r9, r0
   828b8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   828bc:	459c      	cmp	ip, r3
   828be:	d107      	bne.n	828d0 <_malloc_r+0x140>
   828c0:	e135      	b.n	82b2e <_malloc_r+0x39e>
   828c2:	2900      	cmp	r1, #0
   828c4:	f280 8145 	bge.w	82b52 <_malloc_r+0x3c2>
   828c8:	68db      	ldr	r3, [r3, #12]
   828ca:	459c      	cmp	ip, r3
   828cc:	f000 812f 	beq.w	82b2e <_malloc_r+0x39e>
   828d0:	685a      	ldr	r2, [r3, #4]
   828d2:	f022 0203 	bic.w	r2, r2, #3
   828d6:	1b51      	subs	r1, r2, r5
   828d8:	290f      	cmp	r1, #15
   828da:	ddf2      	ble.n	828c2 <_malloc_r+0x132>
   828dc:	461c      	mov	r4, r3
   828de:	68da      	ldr	r2, [r3, #12]
   828e0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   828e4:	f045 0901 	orr.w	r9, r5, #1
   828e8:	f041 0801 	orr.w	r8, r1, #1
   828ec:	441d      	add	r5, r3
   828ee:	f8c3 9004 	str.w	r9, [r3, #4]
   828f2:	4630      	mov	r0, r6
   828f4:	f8cc 200c 	str.w	r2, [ip, #12]
   828f8:	f8c2 c008 	str.w	ip, [r2, #8]
   828fc:	617d      	str	r5, [r7, #20]
   828fe:	613d      	str	r5, [r7, #16]
   82900:	f8c5 e00c 	str.w	lr, [r5, #12]
   82904:	f8c5 e008 	str.w	lr, [r5, #8]
   82908:	f8c5 8004 	str.w	r8, [r5, #4]
   8290c:	5069      	str	r1, [r5, r1]
   8290e:	f000 faeb 	bl	82ee8 <__malloc_unlock>
   82912:	e769      	b.n	827e8 <_malloc_r+0x58>
   82914:	2400      	movs	r4, #0
   82916:	4620      	mov	r0, r4
   82918:	230c      	movs	r3, #12
   8291a:	6033      	str	r3, [r6, #0]
   8291c:	b003      	add	sp, #12
   8291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82922:	217e      	movs	r1, #126	; 0x7e
   82924:	203f      	movs	r0, #63	; 0x3f
   82926:	e773      	b.n	82810 <_malloc_r+0x80>
   82928:	4423      	add	r3, r4
   8292a:	685a      	ldr	r2, [r3, #4]
   8292c:	68e1      	ldr	r1, [r4, #12]
   8292e:	e751      	b.n	827d4 <_malloc_r+0x44>
   82930:	4423      	add	r3, r4
   82932:	685a      	ldr	r2, [r3, #4]
   82934:	4630      	mov	r0, r6
   82936:	f042 0201 	orr.w	r2, r2, #1
   8293a:	605a      	str	r2, [r3, #4]
   8293c:	3408      	adds	r4, #8
   8293e:	f000 fad3 	bl	82ee8 <__malloc_unlock>
   82942:	4620      	mov	r0, r4
   82944:	b003      	add	sp, #12
   82946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8294a:	68bc      	ldr	r4, [r7, #8]
   8294c:	6863      	ldr	r3, [r4, #4]
   8294e:	f023 0803 	bic.w	r8, r3, #3
   82952:	4545      	cmp	r5, r8
   82954:	d804      	bhi.n	82960 <_malloc_r+0x1d0>
   82956:	ebc5 0308 	rsb	r3, r5, r8
   8295a:	2b0f      	cmp	r3, #15
   8295c:	f300 808c 	bgt.w	82a78 <_malloc_r+0x2e8>
   82960:	4b53      	ldr	r3, [pc, #332]	; (82ab0 <_malloc_r+0x320>)
   82962:	f8df a15c 	ldr.w	sl, [pc, #348]	; 82ac0 <_malloc_r+0x330>
   82966:	681a      	ldr	r2, [r3, #0]
   82968:	f8da 3000 	ldr.w	r3, [sl]
   8296c:	442a      	add	r2, r5
   8296e:	3301      	adds	r3, #1
   82970:	eb04 0b08 	add.w	fp, r4, r8
   82974:	f000 8151 	beq.w	82c1a <_malloc_r+0x48a>
   82978:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8297c:	320f      	adds	r2, #15
   8297e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82982:	f022 020f 	bic.w	r2, r2, #15
   82986:	4611      	mov	r1, r2
   82988:	4630      	mov	r0, r6
   8298a:	9201      	str	r2, [sp, #4]
   8298c:	f000 fc9e 	bl	832cc <_sbrk_r>
   82990:	f1b0 3fff 	cmp.w	r0, #4294967295
   82994:	4681      	mov	r9, r0
   82996:	9a01      	ldr	r2, [sp, #4]
   82998:	f000 8148 	beq.w	82c2c <_malloc_r+0x49c>
   8299c:	4583      	cmp	fp, r0
   8299e:	f200 80ef 	bhi.w	82b80 <_malloc_r+0x3f0>
   829a2:	4b44      	ldr	r3, [pc, #272]	; (82ab4 <_malloc_r+0x324>)
   829a4:	45cb      	cmp	fp, r9
   829a6:	6819      	ldr	r1, [r3, #0]
   829a8:	4411      	add	r1, r2
   829aa:	6019      	str	r1, [r3, #0]
   829ac:	f000 8143 	beq.w	82c36 <_malloc_r+0x4a6>
   829b0:	f8da 0000 	ldr.w	r0, [sl]
   829b4:	f8df e108 	ldr.w	lr, [pc, #264]	; 82ac0 <_malloc_r+0x330>
   829b8:	3001      	adds	r0, #1
   829ba:	bf1b      	ittet	ne
   829bc:	ebcb 0b09 	rsbne	fp, fp, r9
   829c0:	4459      	addne	r1, fp
   829c2:	f8ce 9000 	streq.w	r9, [lr]
   829c6:	6019      	strne	r1, [r3, #0]
   829c8:	f019 0107 	ands.w	r1, r9, #7
   829cc:	f000 8108 	beq.w	82be0 <_malloc_r+0x450>
   829d0:	f1c1 0008 	rsb	r0, r1, #8
   829d4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   829d8:	4481      	add	r9, r0
   829da:	3108      	adds	r1, #8
   829dc:	444a      	add	r2, r9
   829de:	f3c2 020b 	ubfx	r2, r2, #0, #12
   829e2:	ebc2 0a01 	rsb	sl, r2, r1
   829e6:	4651      	mov	r1, sl
   829e8:	4630      	mov	r0, r6
   829ea:	9301      	str	r3, [sp, #4]
   829ec:	f000 fc6e 	bl	832cc <_sbrk_r>
   829f0:	1c43      	adds	r3, r0, #1
   829f2:	9b01      	ldr	r3, [sp, #4]
   829f4:	f000 812d 	beq.w	82c52 <_malloc_r+0x4c2>
   829f8:	ebc9 0200 	rsb	r2, r9, r0
   829fc:	4452      	add	r2, sl
   829fe:	f042 0201 	orr.w	r2, r2, #1
   82a02:	6819      	ldr	r1, [r3, #0]
   82a04:	42bc      	cmp	r4, r7
   82a06:	4451      	add	r1, sl
   82a08:	f8c7 9008 	str.w	r9, [r7, #8]
   82a0c:	6019      	str	r1, [r3, #0]
   82a0e:	f8c9 2004 	str.w	r2, [r9, #4]
   82a12:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 82ab4 <_malloc_r+0x324>
   82a16:	d016      	beq.n	82a46 <_malloc_r+0x2b6>
   82a18:	f1b8 0f0f 	cmp.w	r8, #15
   82a1c:	f240 80ef 	bls.w	82bfe <_malloc_r+0x46e>
   82a20:	6862      	ldr	r2, [r4, #4]
   82a22:	f1a8 030c 	sub.w	r3, r8, #12
   82a26:	f023 0307 	bic.w	r3, r3, #7
   82a2a:	f002 0201 	and.w	r2, r2, #1
   82a2e:	18e0      	adds	r0, r4, r3
   82a30:	f04f 0e05 	mov.w	lr, #5
   82a34:	431a      	orrs	r2, r3
   82a36:	2b0f      	cmp	r3, #15
   82a38:	6062      	str	r2, [r4, #4]
   82a3a:	f8c0 e004 	str.w	lr, [r0, #4]
   82a3e:	f8c0 e008 	str.w	lr, [r0, #8]
   82a42:	f200 810a 	bhi.w	82c5a <_malloc_r+0x4ca>
   82a46:	4b1c      	ldr	r3, [pc, #112]	; (82ab8 <_malloc_r+0x328>)
   82a48:	68bc      	ldr	r4, [r7, #8]
   82a4a:	681a      	ldr	r2, [r3, #0]
   82a4c:	4291      	cmp	r1, r2
   82a4e:	bf88      	it	hi
   82a50:	6019      	strhi	r1, [r3, #0]
   82a52:	4b1a      	ldr	r3, [pc, #104]	; (82abc <_malloc_r+0x32c>)
   82a54:	681a      	ldr	r2, [r3, #0]
   82a56:	4291      	cmp	r1, r2
   82a58:	6862      	ldr	r2, [r4, #4]
   82a5a:	bf88      	it	hi
   82a5c:	6019      	strhi	r1, [r3, #0]
   82a5e:	f022 0203 	bic.w	r2, r2, #3
   82a62:	4295      	cmp	r5, r2
   82a64:	eba2 0305 	sub.w	r3, r2, r5
   82a68:	d801      	bhi.n	82a6e <_malloc_r+0x2de>
   82a6a:	2b0f      	cmp	r3, #15
   82a6c:	dc04      	bgt.n	82a78 <_malloc_r+0x2e8>
   82a6e:	4630      	mov	r0, r6
   82a70:	f000 fa3a 	bl	82ee8 <__malloc_unlock>
   82a74:	2400      	movs	r4, #0
   82a76:	e6b7      	b.n	827e8 <_malloc_r+0x58>
   82a78:	f045 0201 	orr.w	r2, r5, #1
   82a7c:	f043 0301 	orr.w	r3, r3, #1
   82a80:	4425      	add	r5, r4
   82a82:	6062      	str	r2, [r4, #4]
   82a84:	4630      	mov	r0, r6
   82a86:	60bd      	str	r5, [r7, #8]
   82a88:	3408      	adds	r4, #8
   82a8a:	606b      	str	r3, [r5, #4]
   82a8c:	f000 fa2c 	bl	82ee8 <__malloc_unlock>
   82a90:	4620      	mov	r0, r4
   82a92:	b003      	add	sp, #12
   82a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a98:	2814      	cmp	r0, #20
   82a9a:	d969      	bls.n	82b70 <_malloc_r+0x3e0>
   82a9c:	2854      	cmp	r0, #84	; 0x54
   82a9e:	f200 8098 	bhi.w	82bd2 <_malloc_r+0x442>
   82aa2:	0b28      	lsrs	r0, r5, #12
   82aa4:	306e      	adds	r0, #110	; 0x6e
   82aa6:	0041      	lsls	r1, r0, #1
   82aa8:	e6b2      	b.n	82810 <_malloc_r+0x80>
   82aaa:	bf00      	nop
   82aac:	20070580 	.word	0x20070580
   82ab0:	20070a30 	.word	0x20070a30
   82ab4:	20070a34 	.word	0x20070a34
   82ab8:	20070a2c 	.word	0x20070a2c
   82abc:	20070a28 	.word	0x20070a28
   82ac0:	2007098c 	.word	0x2007098c
   82ac4:	0a5a      	lsrs	r2, r3, #9
   82ac6:	2a04      	cmp	r2, #4
   82ac8:	d955      	bls.n	82b76 <_malloc_r+0x3e6>
   82aca:	2a14      	cmp	r2, #20
   82acc:	f200 80a7 	bhi.w	82c1e <_malloc_r+0x48e>
   82ad0:	325b      	adds	r2, #91	; 0x5b
   82ad2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82ad6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   82ada:	f8dc 1008 	ldr.w	r1, [ip, #8]
   82ade:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82c98 <_malloc_r+0x508>
   82ae2:	4561      	cmp	r1, ip
   82ae4:	d07f      	beq.n	82be6 <_malloc_r+0x456>
   82ae6:	684a      	ldr	r2, [r1, #4]
   82ae8:	f022 0203 	bic.w	r2, r2, #3
   82aec:	4293      	cmp	r3, r2
   82aee:	d202      	bcs.n	82af6 <_malloc_r+0x366>
   82af0:	6889      	ldr	r1, [r1, #8]
   82af2:	458c      	cmp	ip, r1
   82af4:	d1f7      	bne.n	82ae6 <_malloc_r+0x356>
   82af6:	68ca      	ldr	r2, [r1, #12]
   82af8:	687b      	ldr	r3, [r7, #4]
   82afa:	60e2      	str	r2, [r4, #12]
   82afc:	60a1      	str	r1, [r4, #8]
   82afe:	6094      	str	r4, [r2, #8]
   82b00:	60cc      	str	r4, [r1, #12]
   82b02:	e6c7      	b.n	82894 <_malloc_r+0x104>
   82b04:	f045 0701 	orr.w	r7, r5, #1
   82b08:	f042 0301 	orr.w	r3, r2, #1
   82b0c:	4425      	add	r5, r4
   82b0e:	6067      	str	r7, [r4, #4]
   82b10:	4630      	mov	r0, r6
   82b12:	614d      	str	r5, [r1, #20]
   82b14:	610d      	str	r5, [r1, #16]
   82b16:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b1a:	f8c5 e008 	str.w	lr, [r5, #8]
   82b1e:	606b      	str	r3, [r5, #4]
   82b20:	50aa      	str	r2, [r5, r2]
   82b22:	3408      	adds	r4, #8
   82b24:	f000 f9e0 	bl	82ee8 <__malloc_unlock>
   82b28:	e65e      	b.n	827e8 <_malloc_r+0x58>
   82b2a:	684b      	ldr	r3, [r1, #4]
   82b2c:	e6b2      	b.n	82894 <_malloc_r+0x104>
   82b2e:	f109 0901 	add.w	r9, r9, #1
   82b32:	f019 0f03 	tst.w	r9, #3
   82b36:	f10c 0c08 	add.w	ip, ip, #8
   82b3a:	f47f aebd 	bne.w	828b8 <_malloc_r+0x128>
   82b3e:	e02c      	b.n	82b9a <_malloc_r+0x40a>
   82b40:	f104 0308 	add.w	r3, r4, #8
   82b44:	6964      	ldr	r4, [r4, #20]
   82b46:	42a3      	cmp	r3, r4
   82b48:	bf08      	it	eq
   82b4a:	3002      	addeq	r0, #2
   82b4c:	f43f ae75 	beq.w	8283a <_malloc_r+0xaa>
   82b50:	e63a      	b.n	827c8 <_malloc_r+0x38>
   82b52:	461c      	mov	r4, r3
   82b54:	441a      	add	r2, r3
   82b56:	6851      	ldr	r1, [r2, #4]
   82b58:	68db      	ldr	r3, [r3, #12]
   82b5a:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82b5e:	f041 0101 	orr.w	r1, r1, #1
   82b62:	6051      	str	r1, [r2, #4]
   82b64:	4630      	mov	r0, r6
   82b66:	60eb      	str	r3, [r5, #12]
   82b68:	609d      	str	r5, [r3, #8]
   82b6a:	f000 f9bd 	bl	82ee8 <__malloc_unlock>
   82b6e:	e63b      	b.n	827e8 <_malloc_r+0x58>
   82b70:	305b      	adds	r0, #91	; 0x5b
   82b72:	0041      	lsls	r1, r0, #1
   82b74:	e64c      	b.n	82810 <_malloc_r+0x80>
   82b76:	099a      	lsrs	r2, r3, #6
   82b78:	3238      	adds	r2, #56	; 0x38
   82b7a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82b7e:	e7aa      	b.n	82ad6 <_malloc_r+0x346>
   82b80:	42bc      	cmp	r4, r7
   82b82:	4b45      	ldr	r3, [pc, #276]	; (82c98 <_malloc_r+0x508>)
   82b84:	f43f af0d 	beq.w	829a2 <_malloc_r+0x212>
   82b88:	689c      	ldr	r4, [r3, #8]
   82b8a:	6862      	ldr	r2, [r4, #4]
   82b8c:	f022 0203 	bic.w	r2, r2, #3
   82b90:	e767      	b.n	82a62 <_malloc_r+0x2d2>
   82b92:	f8d8 8000 	ldr.w	r8, [r8]
   82b96:	4598      	cmp	r8, r3
   82b98:	d17c      	bne.n	82c94 <_malloc_r+0x504>
   82b9a:	f010 0f03 	tst.w	r0, #3
   82b9e:	f1a8 0308 	sub.w	r3, r8, #8
   82ba2:	f100 30ff 	add.w	r0, r0, #4294967295
   82ba6:	d1f4      	bne.n	82b92 <_malloc_r+0x402>
   82ba8:	687b      	ldr	r3, [r7, #4]
   82baa:	ea23 0304 	bic.w	r3, r3, r4
   82bae:	607b      	str	r3, [r7, #4]
   82bb0:	0064      	lsls	r4, r4, #1
   82bb2:	429c      	cmp	r4, r3
   82bb4:	f63f aec9 	bhi.w	8294a <_malloc_r+0x1ba>
   82bb8:	2c00      	cmp	r4, #0
   82bba:	f43f aec6 	beq.w	8294a <_malloc_r+0x1ba>
   82bbe:	4223      	tst	r3, r4
   82bc0:	4648      	mov	r0, r9
   82bc2:	f47f ae75 	bne.w	828b0 <_malloc_r+0x120>
   82bc6:	0064      	lsls	r4, r4, #1
   82bc8:	4223      	tst	r3, r4
   82bca:	f100 0004 	add.w	r0, r0, #4
   82bce:	d0fa      	beq.n	82bc6 <_malloc_r+0x436>
   82bd0:	e66e      	b.n	828b0 <_malloc_r+0x120>
   82bd2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82bd6:	d818      	bhi.n	82c0a <_malloc_r+0x47a>
   82bd8:	0be8      	lsrs	r0, r5, #15
   82bda:	3077      	adds	r0, #119	; 0x77
   82bdc:	0041      	lsls	r1, r0, #1
   82bde:	e617      	b.n	82810 <_malloc_r+0x80>
   82be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82be4:	e6fa      	b.n	829dc <_malloc_r+0x24c>
   82be6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82bea:	1092      	asrs	r2, r2, #2
   82bec:	f04f 0c01 	mov.w	ip, #1
   82bf0:	fa0c f202 	lsl.w	r2, ip, r2
   82bf4:	4313      	orrs	r3, r2
   82bf6:	f8c8 3004 	str.w	r3, [r8, #4]
   82bfa:	460a      	mov	r2, r1
   82bfc:	e77d      	b.n	82afa <_malloc_r+0x36a>
   82bfe:	2301      	movs	r3, #1
   82c00:	f8c9 3004 	str.w	r3, [r9, #4]
   82c04:	464c      	mov	r4, r9
   82c06:	2200      	movs	r2, #0
   82c08:	e72b      	b.n	82a62 <_malloc_r+0x2d2>
   82c0a:	f240 5354 	movw	r3, #1364	; 0x554
   82c0e:	4298      	cmp	r0, r3
   82c10:	d81c      	bhi.n	82c4c <_malloc_r+0x4bc>
   82c12:	0ca8      	lsrs	r0, r5, #18
   82c14:	307c      	adds	r0, #124	; 0x7c
   82c16:	0041      	lsls	r1, r0, #1
   82c18:	e5fa      	b.n	82810 <_malloc_r+0x80>
   82c1a:	3210      	adds	r2, #16
   82c1c:	e6b3      	b.n	82986 <_malloc_r+0x1f6>
   82c1e:	2a54      	cmp	r2, #84	; 0x54
   82c20:	d823      	bhi.n	82c6a <_malloc_r+0x4da>
   82c22:	0b1a      	lsrs	r2, r3, #12
   82c24:	326e      	adds	r2, #110	; 0x6e
   82c26:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82c2a:	e754      	b.n	82ad6 <_malloc_r+0x346>
   82c2c:	68bc      	ldr	r4, [r7, #8]
   82c2e:	6862      	ldr	r2, [r4, #4]
   82c30:	f022 0203 	bic.w	r2, r2, #3
   82c34:	e715      	b.n	82a62 <_malloc_r+0x2d2>
   82c36:	f3cb 000b 	ubfx	r0, fp, #0, #12
   82c3a:	2800      	cmp	r0, #0
   82c3c:	f47f aeb8 	bne.w	829b0 <_malloc_r+0x220>
   82c40:	4442      	add	r2, r8
   82c42:	68bb      	ldr	r3, [r7, #8]
   82c44:	f042 0201 	orr.w	r2, r2, #1
   82c48:	605a      	str	r2, [r3, #4]
   82c4a:	e6fc      	b.n	82a46 <_malloc_r+0x2b6>
   82c4c:	21fc      	movs	r1, #252	; 0xfc
   82c4e:	207e      	movs	r0, #126	; 0x7e
   82c50:	e5de      	b.n	82810 <_malloc_r+0x80>
   82c52:	2201      	movs	r2, #1
   82c54:	f04f 0a00 	mov.w	sl, #0
   82c58:	e6d3      	b.n	82a02 <_malloc_r+0x272>
   82c5a:	f104 0108 	add.w	r1, r4, #8
   82c5e:	4630      	mov	r0, r6
   82c60:	f7ff fa84 	bl	8216c <_free_r>
   82c64:	f8da 1000 	ldr.w	r1, [sl]
   82c68:	e6ed      	b.n	82a46 <_malloc_r+0x2b6>
   82c6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82c6e:	d804      	bhi.n	82c7a <_malloc_r+0x4ea>
   82c70:	0bda      	lsrs	r2, r3, #15
   82c72:	3277      	adds	r2, #119	; 0x77
   82c74:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82c78:	e72d      	b.n	82ad6 <_malloc_r+0x346>
   82c7a:	f240 5154 	movw	r1, #1364	; 0x554
   82c7e:	428a      	cmp	r2, r1
   82c80:	d804      	bhi.n	82c8c <_malloc_r+0x4fc>
   82c82:	0c9a      	lsrs	r2, r3, #18
   82c84:	327c      	adds	r2, #124	; 0x7c
   82c86:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82c8a:	e724      	b.n	82ad6 <_malloc_r+0x346>
   82c8c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   82c90:	227e      	movs	r2, #126	; 0x7e
   82c92:	e720      	b.n	82ad6 <_malloc_r+0x346>
   82c94:	687b      	ldr	r3, [r7, #4]
   82c96:	e78b      	b.n	82bb0 <_malloc_r+0x420>
   82c98:	20070580 	.word	0x20070580

00082c9c <memchr>:
   82c9c:	0783      	lsls	r3, r0, #30
   82c9e:	b470      	push	{r4, r5, r6}
   82ca0:	b2c9      	uxtb	r1, r1
   82ca2:	d040      	beq.n	82d26 <memchr+0x8a>
   82ca4:	1e54      	subs	r4, r2, #1
   82ca6:	2a00      	cmp	r2, #0
   82ca8:	d03f      	beq.n	82d2a <memchr+0x8e>
   82caa:	7803      	ldrb	r3, [r0, #0]
   82cac:	428b      	cmp	r3, r1
   82cae:	bf18      	it	ne
   82cb0:	1c43      	addne	r3, r0, #1
   82cb2:	d105      	bne.n	82cc0 <memchr+0x24>
   82cb4:	e01c      	b.n	82cf0 <memchr+0x54>
   82cb6:	b1ec      	cbz	r4, 82cf4 <memchr+0x58>
   82cb8:	7802      	ldrb	r2, [r0, #0]
   82cba:	3c01      	subs	r4, #1
   82cbc:	428a      	cmp	r2, r1
   82cbe:	d017      	beq.n	82cf0 <memchr+0x54>
   82cc0:	f013 0f03 	tst.w	r3, #3
   82cc4:	4618      	mov	r0, r3
   82cc6:	f103 0301 	add.w	r3, r3, #1
   82cca:	d1f4      	bne.n	82cb6 <memchr+0x1a>
   82ccc:	2c03      	cmp	r4, #3
   82cce:	d814      	bhi.n	82cfa <memchr+0x5e>
   82cd0:	b184      	cbz	r4, 82cf4 <memchr+0x58>
   82cd2:	7803      	ldrb	r3, [r0, #0]
   82cd4:	428b      	cmp	r3, r1
   82cd6:	d00b      	beq.n	82cf0 <memchr+0x54>
   82cd8:	1905      	adds	r5, r0, r4
   82cda:	1c43      	adds	r3, r0, #1
   82cdc:	e002      	b.n	82ce4 <memchr+0x48>
   82cde:	7802      	ldrb	r2, [r0, #0]
   82ce0:	428a      	cmp	r2, r1
   82ce2:	d005      	beq.n	82cf0 <memchr+0x54>
   82ce4:	42ab      	cmp	r3, r5
   82ce6:	4618      	mov	r0, r3
   82ce8:	f103 0301 	add.w	r3, r3, #1
   82cec:	d1f7      	bne.n	82cde <memchr+0x42>
   82cee:	2000      	movs	r0, #0
   82cf0:	bc70      	pop	{r4, r5, r6}
   82cf2:	4770      	bx	lr
   82cf4:	4620      	mov	r0, r4
   82cf6:	bc70      	pop	{r4, r5, r6}
   82cf8:	4770      	bx	lr
   82cfa:	4602      	mov	r2, r0
   82cfc:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82d00:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82d04:	6813      	ldr	r3, [r2, #0]
   82d06:	4610      	mov	r0, r2
   82d08:	4073      	eors	r3, r6
   82d0a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   82d0e:	ea25 0303 	bic.w	r3, r5, r3
   82d12:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   82d16:	f102 0204 	add.w	r2, r2, #4
   82d1a:	d1d9      	bne.n	82cd0 <memchr+0x34>
   82d1c:	3c04      	subs	r4, #4
   82d1e:	2c03      	cmp	r4, #3
   82d20:	4610      	mov	r0, r2
   82d22:	d8ef      	bhi.n	82d04 <memchr+0x68>
   82d24:	e7d4      	b.n	82cd0 <memchr+0x34>
   82d26:	4614      	mov	r4, r2
   82d28:	e7d0      	b.n	82ccc <memchr+0x30>
   82d2a:	4610      	mov	r0, r2
   82d2c:	e7e0      	b.n	82cf0 <memchr+0x54>
   82d2e:	bf00      	nop

00082d30 <memcpy>:
   82d30:	4684      	mov	ip, r0
   82d32:	ea41 0300 	orr.w	r3, r1, r0
   82d36:	f013 0303 	ands.w	r3, r3, #3
   82d3a:	d149      	bne.n	82dd0 <memcpy+0xa0>
   82d3c:	3a40      	subs	r2, #64	; 0x40
   82d3e:	d323      	bcc.n	82d88 <memcpy+0x58>
   82d40:	680b      	ldr	r3, [r1, #0]
   82d42:	6003      	str	r3, [r0, #0]
   82d44:	684b      	ldr	r3, [r1, #4]
   82d46:	6043      	str	r3, [r0, #4]
   82d48:	688b      	ldr	r3, [r1, #8]
   82d4a:	6083      	str	r3, [r0, #8]
   82d4c:	68cb      	ldr	r3, [r1, #12]
   82d4e:	60c3      	str	r3, [r0, #12]
   82d50:	690b      	ldr	r3, [r1, #16]
   82d52:	6103      	str	r3, [r0, #16]
   82d54:	694b      	ldr	r3, [r1, #20]
   82d56:	6143      	str	r3, [r0, #20]
   82d58:	698b      	ldr	r3, [r1, #24]
   82d5a:	6183      	str	r3, [r0, #24]
   82d5c:	69cb      	ldr	r3, [r1, #28]
   82d5e:	61c3      	str	r3, [r0, #28]
   82d60:	6a0b      	ldr	r3, [r1, #32]
   82d62:	6203      	str	r3, [r0, #32]
   82d64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82d66:	6243      	str	r3, [r0, #36]	; 0x24
   82d68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82d6a:	6283      	str	r3, [r0, #40]	; 0x28
   82d6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82d6e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82d70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82d72:	6303      	str	r3, [r0, #48]	; 0x30
   82d74:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82d76:	6343      	str	r3, [r0, #52]	; 0x34
   82d78:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82d7a:	6383      	str	r3, [r0, #56]	; 0x38
   82d7c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82d7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82d80:	3040      	adds	r0, #64	; 0x40
   82d82:	3140      	adds	r1, #64	; 0x40
   82d84:	3a40      	subs	r2, #64	; 0x40
   82d86:	d2db      	bcs.n	82d40 <memcpy+0x10>
   82d88:	3230      	adds	r2, #48	; 0x30
   82d8a:	d30b      	bcc.n	82da4 <memcpy+0x74>
   82d8c:	680b      	ldr	r3, [r1, #0]
   82d8e:	6003      	str	r3, [r0, #0]
   82d90:	684b      	ldr	r3, [r1, #4]
   82d92:	6043      	str	r3, [r0, #4]
   82d94:	688b      	ldr	r3, [r1, #8]
   82d96:	6083      	str	r3, [r0, #8]
   82d98:	68cb      	ldr	r3, [r1, #12]
   82d9a:	60c3      	str	r3, [r0, #12]
   82d9c:	3010      	adds	r0, #16
   82d9e:	3110      	adds	r1, #16
   82da0:	3a10      	subs	r2, #16
   82da2:	d2f3      	bcs.n	82d8c <memcpy+0x5c>
   82da4:	320c      	adds	r2, #12
   82da6:	d305      	bcc.n	82db4 <memcpy+0x84>
   82da8:	f851 3b04 	ldr.w	r3, [r1], #4
   82dac:	f840 3b04 	str.w	r3, [r0], #4
   82db0:	3a04      	subs	r2, #4
   82db2:	d2f9      	bcs.n	82da8 <memcpy+0x78>
   82db4:	3204      	adds	r2, #4
   82db6:	d008      	beq.n	82dca <memcpy+0x9a>
   82db8:	07d2      	lsls	r2, r2, #31
   82dba:	bf1c      	itt	ne
   82dbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82dc0:	f800 3b01 	strbne.w	r3, [r0], #1
   82dc4:	d301      	bcc.n	82dca <memcpy+0x9a>
   82dc6:	880b      	ldrh	r3, [r1, #0]
   82dc8:	8003      	strh	r3, [r0, #0]
   82dca:	4660      	mov	r0, ip
   82dcc:	4770      	bx	lr
   82dce:	bf00      	nop
   82dd0:	2a08      	cmp	r2, #8
   82dd2:	d313      	bcc.n	82dfc <memcpy+0xcc>
   82dd4:	078b      	lsls	r3, r1, #30
   82dd6:	d0b1      	beq.n	82d3c <memcpy+0xc>
   82dd8:	f010 0303 	ands.w	r3, r0, #3
   82ddc:	d0ae      	beq.n	82d3c <memcpy+0xc>
   82dde:	f1c3 0304 	rsb	r3, r3, #4
   82de2:	1ad2      	subs	r2, r2, r3
   82de4:	07db      	lsls	r3, r3, #31
   82de6:	bf1c      	itt	ne
   82de8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82dec:	f800 3b01 	strbne.w	r3, [r0], #1
   82df0:	d3a4      	bcc.n	82d3c <memcpy+0xc>
   82df2:	f831 3b02 	ldrh.w	r3, [r1], #2
   82df6:	f820 3b02 	strh.w	r3, [r0], #2
   82dfa:	e79f      	b.n	82d3c <memcpy+0xc>
   82dfc:	3a04      	subs	r2, #4
   82dfe:	d3d9      	bcc.n	82db4 <memcpy+0x84>
   82e00:	3a01      	subs	r2, #1
   82e02:	f811 3b01 	ldrb.w	r3, [r1], #1
   82e06:	f800 3b01 	strb.w	r3, [r0], #1
   82e0a:	d2f9      	bcs.n	82e00 <memcpy+0xd0>
   82e0c:	780b      	ldrb	r3, [r1, #0]
   82e0e:	7003      	strb	r3, [r0, #0]
   82e10:	784b      	ldrb	r3, [r1, #1]
   82e12:	7043      	strb	r3, [r0, #1]
   82e14:	788b      	ldrb	r3, [r1, #2]
   82e16:	7083      	strb	r3, [r0, #2]
   82e18:	4660      	mov	r0, ip
   82e1a:	4770      	bx	lr

00082e1c <memmove>:
   82e1c:	4288      	cmp	r0, r1
   82e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82e20:	d90d      	bls.n	82e3e <memmove+0x22>
   82e22:	188b      	adds	r3, r1, r2
   82e24:	4298      	cmp	r0, r3
   82e26:	d20a      	bcs.n	82e3e <memmove+0x22>
   82e28:	1881      	adds	r1, r0, r2
   82e2a:	2a00      	cmp	r2, #0
   82e2c:	d054      	beq.n	82ed8 <memmove+0xbc>
   82e2e:	1a9a      	subs	r2, r3, r2
   82e30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82e34:	4293      	cmp	r3, r2
   82e36:	f801 4d01 	strb.w	r4, [r1, #-1]!
   82e3a:	d1f9      	bne.n	82e30 <memmove+0x14>
   82e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e3e:	2a0f      	cmp	r2, #15
   82e40:	d948      	bls.n	82ed4 <memmove+0xb8>
   82e42:	ea40 0301 	orr.w	r3, r0, r1
   82e46:	079b      	lsls	r3, r3, #30
   82e48:	d147      	bne.n	82eda <memmove+0xbe>
   82e4a:	4615      	mov	r5, r2
   82e4c:	f100 0410 	add.w	r4, r0, #16
   82e50:	f101 0310 	add.w	r3, r1, #16
   82e54:	f853 6c10 	ldr.w	r6, [r3, #-16]
   82e58:	3d10      	subs	r5, #16
   82e5a:	f844 6c10 	str.w	r6, [r4, #-16]
   82e5e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   82e62:	2d0f      	cmp	r5, #15
   82e64:	f844 6c0c 	str.w	r6, [r4, #-12]
   82e68:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82e6c:	f104 0410 	add.w	r4, r4, #16
   82e70:	f844 6c18 	str.w	r6, [r4, #-24]
   82e74:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82e78:	f103 0310 	add.w	r3, r3, #16
   82e7c:	f844 6c14 	str.w	r6, [r4, #-20]
   82e80:	d8e8      	bhi.n	82e54 <memmove+0x38>
   82e82:	f1a2 0310 	sub.w	r3, r2, #16
   82e86:	f023 030f 	bic.w	r3, r3, #15
   82e8a:	f002 0e0f 	and.w	lr, r2, #15
   82e8e:	3310      	adds	r3, #16
   82e90:	f1be 0f03 	cmp.w	lr, #3
   82e94:	4419      	add	r1, r3
   82e96:	4403      	add	r3, r0
   82e98:	d921      	bls.n	82ede <memmove+0xc2>
   82e9a:	460e      	mov	r6, r1
   82e9c:	4674      	mov	r4, lr
   82e9e:	1f1d      	subs	r5, r3, #4
   82ea0:	f856 7b04 	ldr.w	r7, [r6], #4
   82ea4:	3c04      	subs	r4, #4
   82ea6:	2c03      	cmp	r4, #3
   82ea8:	f845 7f04 	str.w	r7, [r5, #4]!
   82eac:	d8f8      	bhi.n	82ea0 <memmove+0x84>
   82eae:	f1ae 0404 	sub.w	r4, lr, #4
   82eb2:	f024 0403 	bic.w	r4, r4, #3
   82eb6:	3404      	adds	r4, #4
   82eb8:	4423      	add	r3, r4
   82eba:	4421      	add	r1, r4
   82ebc:	f002 0203 	and.w	r2, r2, #3
   82ec0:	b152      	cbz	r2, 82ed8 <memmove+0xbc>
   82ec2:	3b01      	subs	r3, #1
   82ec4:	440a      	add	r2, r1
   82ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
   82eca:	4291      	cmp	r1, r2
   82ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
   82ed0:	d1f9      	bne.n	82ec6 <memmove+0xaa>
   82ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ed4:	4603      	mov	r3, r0
   82ed6:	e7f3      	b.n	82ec0 <memmove+0xa4>
   82ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82eda:	4603      	mov	r3, r0
   82edc:	e7f1      	b.n	82ec2 <memmove+0xa6>
   82ede:	4672      	mov	r2, lr
   82ee0:	e7ee      	b.n	82ec0 <memmove+0xa4>
   82ee2:	bf00      	nop

00082ee4 <__malloc_lock>:
   82ee4:	4770      	bx	lr
   82ee6:	bf00      	nop

00082ee8 <__malloc_unlock>:
   82ee8:	4770      	bx	lr
   82eea:	bf00      	nop

00082eec <_realloc_r>:
   82eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ef0:	4617      	mov	r7, r2
   82ef2:	b083      	sub	sp, #12
   82ef4:	460d      	mov	r5, r1
   82ef6:	2900      	cmp	r1, #0
   82ef8:	f000 80e2 	beq.w	830c0 <_realloc_r+0x1d4>
   82efc:	4681      	mov	r9, r0
   82efe:	f107 040b 	add.w	r4, r7, #11
   82f02:	f7ff ffef 	bl	82ee4 <__malloc_lock>
   82f06:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82f0a:	2c16      	cmp	r4, #22
   82f0c:	f023 0603 	bic.w	r6, r3, #3
   82f10:	f1a5 0808 	sub.w	r8, r5, #8
   82f14:	d84b      	bhi.n	82fae <_realloc_r+0xc2>
   82f16:	2210      	movs	r2, #16
   82f18:	4614      	mov	r4, r2
   82f1a:	42a7      	cmp	r7, r4
   82f1c:	d84c      	bhi.n	82fb8 <_realloc_r+0xcc>
   82f1e:	4296      	cmp	r6, r2
   82f20:	da51      	bge.n	82fc6 <_realloc_r+0xda>
   82f22:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 832c8 <_realloc_r+0x3dc>
   82f26:	eb08 0106 	add.w	r1, r8, r6
   82f2a:	f8db 0008 	ldr.w	r0, [fp, #8]
   82f2e:	4288      	cmp	r0, r1
   82f30:	f000 80d3 	beq.w	830da <_realloc_r+0x1ee>
   82f34:	6848      	ldr	r0, [r1, #4]
   82f36:	f020 0e01 	bic.w	lr, r0, #1
   82f3a:	448e      	add	lr, r1
   82f3c:	f8de e004 	ldr.w	lr, [lr, #4]
   82f40:	f01e 0f01 	tst.w	lr, #1
   82f44:	d154      	bne.n	82ff0 <_realloc_r+0x104>
   82f46:	f020 0003 	bic.w	r0, r0, #3
   82f4a:	4430      	add	r0, r6
   82f4c:	4290      	cmp	r0, r2
   82f4e:	f280 80bd 	bge.w	830cc <_realloc_r+0x1e0>
   82f52:	07db      	lsls	r3, r3, #31
   82f54:	f100 8090 	bmi.w	83078 <_realloc_r+0x18c>
   82f58:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82f5c:	ebc3 0a08 	rsb	sl, r3, r8
   82f60:	f8da 3004 	ldr.w	r3, [sl, #4]
   82f64:	f023 0303 	bic.w	r3, r3, #3
   82f68:	eb00 0e03 	add.w	lr, r0, r3
   82f6c:	4596      	cmp	lr, r2
   82f6e:	db49      	blt.n	83004 <_realloc_r+0x118>
   82f70:	4657      	mov	r7, sl
   82f72:	68cb      	ldr	r3, [r1, #12]
   82f74:	6889      	ldr	r1, [r1, #8]
   82f76:	1f32      	subs	r2, r6, #4
   82f78:	60cb      	str	r3, [r1, #12]
   82f7a:	6099      	str	r1, [r3, #8]
   82f7c:	f857 1f08 	ldr.w	r1, [r7, #8]!
   82f80:	f8da 300c 	ldr.w	r3, [sl, #12]
   82f84:	2a24      	cmp	r2, #36	; 0x24
   82f86:	60cb      	str	r3, [r1, #12]
   82f88:	6099      	str	r1, [r3, #8]
   82f8a:	f200 8133 	bhi.w	831f4 <_realloc_r+0x308>
   82f8e:	2a13      	cmp	r2, #19
   82f90:	f240 80fa 	bls.w	83188 <_realloc_r+0x29c>
   82f94:	682b      	ldr	r3, [r5, #0]
   82f96:	2a1b      	cmp	r2, #27
   82f98:	f8ca 3008 	str.w	r3, [sl, #8]
   82f9c:	686b      	ldr	r3, [r5, #4]
   82f9e:	f8ca 300c 	str.w	r3, [sl, #12]
   82fa2:	f200 813b 	bhi.w	8321c <_realloc_r+0x330>
   82fa6:	3508      	adds	r5, #8
   82fa8:	f10a 0310 	add.w	r3, sl, #16
   82fac:	e0ed      	b.n	8318a <_realloc_r+0x29e>
   82fae:	f024 0407 	bic.w	r4, r4, #7
   82fb2:	2c00      	cmp	r4, #0
   82fb4:	4622      	mov	r2, r4
   82fb6:	dab0      	bge.n	82f1a <_realloc_r+0x2e>
   82fb8:	230c      	movs	r3, #12
   82fba:	2000      	movs	r0, #0
   82fbc:	f8c9 3000 	str.w	r3, [r9]
   82fc0:	b003      	add	sp, #12
   82fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fc6:	462f      	mov	r7, r5
   82fc8:	1b32      	subs	r2, r6, r4
   82fca:	2a0f      	cmp	r2, #15
   82fcc:	f003 0301 	and.w	r3, r3, #1
   82fd0:	d840      	bhi.n	83054 <_realloc_r+0x168>
   82fd2:	4333      	orrs	r3, r6
   82fd4:	f8c8 3004 	str.w	r3, [r8, #4]
   82fd8:	4446      	add	r6, r8
   82fda:	6873      	ldr	r3, [r6, #4]
   82fdc:	f043 0301 	orr.w	r3, r3, #1
   82fe0:	6073      	str	r3, [r6, #4]
   82fe2:	4648      	mov	r0, r9
   82fe4:	f7ff ff80 	bl	82ee8 <__malloc_unlock>
   82fe8:	4638      	mov	r0, r7
   82fea:	b003      	add	sp, #12
   82fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ff0:	07d9      	lsls	r1, r3, #31
   82ff2:	d441      	bmi.n	83078 <_realloc_r+0x18c>
   82ff4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82ff8:	ebc3 0a08 	rsb	sl, r3, r8
   82ffc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83000:	f023 0303 	bic.w	r3, r3, #3
   83004:	4433      	add	r3, r6
   83006:	4293      	cmp	r3, r2
   83008:	db36      	blt.n	83078 <_realloc_r+0x18c>
   8300a:	4657      	mov	r7, sl
   8300c:	f8da 100c 	ldr.w	r1, [sl, #12]
   83010:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83014:	1f32      	subs	r2, r6, #4
   83016:	2a24      	cmp	r2, #36	; 0x24
   83018:	60c1      	str	r1, [r0, #12]
   8301a:	6088      	str	r0, [r1, #8]
   8301c:	f200 80f5 	bhi.w	8320a <_realloc_r+0x31e>
   83020:	2a13      	cmp	r2, #19
   83022:	f240 80f0 	bls.w	83206 <_realloc_r+0x31a>
   83026:	6829      	ldr	r1, [r5, #0]
   83028:	2a1b      	cmp	r2, #27
   8302a:	f8ca 1008 	str.w	r1, [sl, #8]
   8302e:	6869      	ldr	r1, [r5, #4]
   83030:	f8ca 100c 	str.w	r1, [sl, #12]
   83034:	f200 8107 	bhi.w	83246 <_realloc_r+0x35a>
   83038:	3508      	adds	r5, #8
   8303a:	f10a 0210 	add.w	r2, sl, #16
   8303e:	6829      	ldr	r1, [r5, #0]
   83040:	461e      	mov	r6, r3
   83042:	6011      	str	r1, [r2, #0]
   83044:	6869      	ldr	r1, [r5, #4]
   83046:	46d0      	mov	r8, sl
   83048:	6051      	str	r1, [r2, #4]
   8304a:	68ab      	ldr	r3, [r5, #8]
   8304c:	6093      	str	r3, [r2, #8]
   8304e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83052:	e7b9      	b.n	82fc8 <_realloc_r+0xdc>
   83054:	eb08 0104 	add.w	r1, r8, r4
   83058:	4323      	orrs	r3, r4
   8305a:	f042 0001 	orr.w	r0, r2, #1
   8305e:	f8c8 3004 	str.w	r3, [r8, #4]
   83062:	440a      	add	r2, r1
   83064:	6048      	str	r0, [r1, #4]
   83066:	6853      	ldr	r3, [r2, #4]
   83068:	3108      	adds	r1, #8
   8306a:	f043 0301 	orr.w	r3, r3, #1
   8306e:	6053      	str	r3, [r2, #4]
   83070:	4648      	mov	r0, r9
   83072:	f7ff f87b 	bl	8216c <_free_r>
   83076:	e7b4      	b.n	82fe2 <_realloc_r+0xf6>
   83078:	4639      	mov	r1, r7
   8307a:	4648      	mov	r0, r9
   8307c:	f7ff fb88 	bl	82790 <_malloc_r>
   83080:	4607      	mov	r7, r0
   83082:	2800      	cmp	r0, #0
   83084:	d0ad      	beq.n	82fe2 <_realloc_r+0xf6>
   83086:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8308a:	f1a0 0108 	sub.w	r1, r0, #8
   8308e:	f023 0201 	bic.w	r2, r3, #1
   83092:	4442      	add	r2, r8
   83094:	4291      	cmp	r1, r2
   83096:	f000 80a6 	beq.w	831e6 <_realloc_r+0x2fa>
   8309a:	1f32      	subs	r2, r6, #4
   8309c:	2a24      	cmp	r2, #36	; 0x24
   8309e:	f200 8093 	bhi.w	831c8 <_realloc_r+0x2dc>
   830a2:	2a13      	cmp	r2, #19
   830a4:	d865      	bhi.n	83172 <_realloc_r+0x286>
   830a6:	4603      	mov	r3, r0
   830a8:	462a      	mov	r2, r5
   830aa:	6811      	ldr	r1, [r2, #0]
   830ac:	6019      	str	r1, [r3, #0]
   830ae:	6851      	ldr	r1, [r2, #4]
   830b0:	6059      	str	r1, [r3, #4]
   830b2:	6892      	ldr	r2, [r2, #8]
   830b4:	609a      	str	r2, [r3, #8]
   830b6:	4629      	mov	r1, r5
   830b8:	4648      	mov	r0, r9
   830ba:	f7ff f857 	bl	8216c <_free_r>
   830be:	e790      	b.n	82fe2 <_realloc_r+0xf6>
   830c0:	4611      	mov	r1, r2
   830c2:	b003      	add	sp, #12
   830c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830c8:	f7ff bb62 	b.w	82790 <_malloc_r>
   830cc:	68ca      	ldr	r2, [r1, #12]
   830ce:	6889      	ldr	r1, [r1, #8]
   830d0:	462f      	mov	r7, r5
   830d2:	60ca      	str	r2, [r1, #12]
   830d4:	4606      	mov	r6, r0
   830d6:	6091      	str	r1, [r2, #8]
   830d8:	e776      	b.n	82fc8 <_realloc_r+0xdc>
   830da:	6841      	ldr	r1, [r0, #4]
   830dc:	f104 0010 	add.w	r0, r4, #16
   830e0:	f021 0103 	bic.w	r1, r1, #3
   830e4:	4431      	add	r1, r6
   830e6:	4281      	cmp	r1, r0
   830e8:	da5a      	bge.n	831a0 <_realloc_r+0x2b4>
   830ea:	07db      	lsls	r3, r3, #31
   830ec:	d4c4      	bmi.n	83078 <_realloc_r+0x18c>
   830ee:	f855 3c08 	ldr.w	r3, [r5, #-8]
   830f2:	ebc3 0a08 	rsb	sl, r3, r8
   830f6:	f8da 3004 	ldr.w	r3, [sl, #4]
   830fa:	f023 0303 	bic.w	r3, r3, #3
   830fe:	eb01 0c03 	add.w	ip, r1, r3
   83102:	4560      	cmp	r0, ip
   83104:	f73f af7e 	bgt.w	83004 <_realloc_r+0x118>
   83108:	4657      	mov	r7, sl
   8310a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8310e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83112:	1f32      	subs	r2, r6, #4
   83114:	2a24      	cmp	r2, #36	; 0x24
   83116:	60cb      	str	r3, [r1, #12]
   83118:	6099      	str	r1, [r3, #8]
   8311a:	f200 80b6 	bhi.w	8328a <_realloc_r+0x39e>
   8311e:	2a13      	cmp	r2, #19
   83120:	f240 80a7 	bls.w	83272 <_realloc_r+0x386>
   83124:	682b      	ldr	r3, [r5, #0]
   83126:	2a1b      	cmp	r2, #27
   83128:	f8ca 3008 	str.w	r3, [sl, #8]
   8312c:	686b      	ldr	r3, [r5, #4]
   8312e:	f8ca 300c 	str.w	r3, [sl, #12]
   83132:	f200 80b3 	bhi.w	8329c <_realloc_r+0x3b0>
   83136:	3508      	adds	r5, #8
   83138:	f10a 0310 	add.w	r3, sl, #16
   8313c:	682a      	ldr	r2, [r5, #0]
   8313e:	601a      	str	r2, [r3, #0]
   83140:	686a      	ldr	r2, [r5, #4]
   83142:	605a      	str	r2, [r3, #4]
   83144:	68aa      	ldr	r2, [r5, #8]
   83146:	609a      	str	r2, [r3, #8]
   83148:	ebc4 030c 	rsb	r3, r4, ip
   8314c:	eb0a 0204 	add.w	r2, sl, r4
   83150:	f043 0301 	orr.w	r3, r3, #1
   83154:	f8cb 2008 	str.w	r2, [fp, #8]
   83158:	6053      	str	r3, [r2, #4]
   8315a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8315e:	4648      	mov	r0, r9
   83160:	f003 0301 	and.w	r3, r3, #1
   83164:	431c      	orrs	r4, r3
   83166:	f8ca 4004 	str.w	r4, [sl, #4]
   8316a:	f7ff febd 	bl	82ee8 <__malloc_unlock>
   8316e:	4638      	mov	r0, r7
   83170:	e73b      	b.n	82fea <_realloc_r+0xfe>
   83172:	682b      	ldr	r3, [r5, #0]
   83174:	2a1b      	cmp	r2, #27
   83176:	6003      	str	r3, [r0, #0]
   83178:	686b      	ldr	r3, [r5, #4]
   8317a:	6043      	str	r3, [r0, #4]
   8317c:	d828      	bhi.n	831d0 <_realloc_r+0x2e4>
   8317e:	f100 0308 	add.w	r3, r0, #8
   83182:	f105 0208 	add.w	r2, r5, #8
   83186:	e790      	b.n	830aa <_realloc_r+0x1be>
   83188:	463b      	mov	r3, r7
   8318a:	682a      	ldr	r2, [r5, #0]
   8318c:	4676      	mov	r6, lr
   8318e:	601a      	str	r2, [r3, #0]
   83190:	686a      	ldr	r2, [r5, #4]
   83192:	46d0      	mov	r8, sl
   83194:	605a      	str	r2, [r3, #4]
   83196:	68aa      	ldr	r2, [r5, #8]
   83198:	609a      	str	r2, [r3, #8]
   8319a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8319e:	e713      	b.n	82fc8 <_realloc_r+0xdc>
   831a0:	1b0b      	subs	r3, r1, r4
   831a2:	eb08 0204 	add.w	r2, r8, r4
   831a6:	f043 0301 	orr.w	r3, r3, #1
   831aa:	f8cb 2008 	str.w	r2, [fp, #8]
   831ae:	6053      	str	r3, [r2, #4]
   831b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   831b4:	4648      	mov	r0, r9
   831b6:	f003 0301 	and.w	r3, r3, #1
   831ba:	431c      	orrs	r4, r3
   831bc:	f845 4c04 	str.w	r4, [r5, #-4]
   831c0:	f7ff fe92 	bl	82ee8 <__malloc_unlock>
   831c4:	4628      	mov	r0, r5
   831c6:	e710      	b.n	82fea <_realloc_r+0xfe>
   831c8:	4629      	mov	r1, r5
   831ca:	f7ff fe27 	bl	82e1c <memmove>
   831ce:	e772      	b.n	830b6 <_realloc_r+0x1ca>
   831d0:	68ab      	ldr	r3, [r5, #8]
   831d2:	2a24      	cmp	r2, #36	; 0x24
   831d4:	6083      	str	r3, [r0, #8]
   831d6:	68eb      	ldr	r3, [r5, #12]
   831d8:	60c3      	str	r3, [r0, #12]
   831da:	d02b      	beq.n	83234 <_realloc_r+0x348>
   831dc:	f100 0310 	add.w	r3, r0, #16
   831e0:	f105 0210 	add.w	r2, r5, #16
   831e4:	e761      	b.n	830aa <_realloc_r+0x1be>
   831e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   831ea:	462f      	mov	r7, r5
   831ec:	f022 0203 	bic.w	r2, r2, #3
   831f0:	4416      	add	r6, r2
   831f2:	e6e9      	b.n	82fc8 <_realloc_r+0xdc>
   831f4:	4629      	mov	r1, r5
   831f6:	4638      	mov	r0, r7
   831f8:	4676      	mov	r6, lr
   831fa:	46d0      	mov	r8, sl
   831fc:	f7ff fe0e 	bl	82e1c <memmove>
   83200:	f8da 3004 	ldr.w	r3, [sl, #4]
   83204:	e6e0      	b.n	82fc8 <_realloc_r+0xdc>
   83206:	463a      	mov	r2, r7
   83208:	e719      	b.n	8303e <_realloc_r+0x152>
   8320a:	4629      	mov	r1, r5
   8320c:	4638      	mov	r0, r7
   8320e:	461e      	mov	r6, r3
   83210:	46d0      	mov	r8, sl
   83212:	f7ff fe03 	bl	82e1c <memmove>
   83216:	f8da 3004 	ldr.w	r3, [sl, #4]
   8321a:	e6d5      	b.n	82fc8 <_realloc_r+0xdc>
   8321c:	68ab      	ldr	r3, [r5, #8]
   8321e:	2a24      	cmp	r2, #36	; 0x24
   83220:	f8ca 3010 	str.w	r3, [sl, #16]
   83224:	68eb      	ldr	r3, [r5, #12]
   83226:	f8ca 3014 	str.w	r3, [sl, #20]
   8322a:	d018      	beq.n	8325e <_realloc_r+0x372>
   8322c:	3510      	adds	r5, #16
   8322e:	f10a 0318 	add.w	r3, sl, #24
   83232:	e7aa      	b.n	8318a <_realloc_r+0x29e>
   83234:	692a      	ldr	r2, [r5, #16]
   83236:	f100 0318 	add.w	r3, r0, #24
   8323a:	6102      	str	r2, [r0, #16]
   8323c:	6969      	ldr	r1, [r5, #20]
   8323e:	f105 0218 	add.w	r2, r5, #24
   83242:	6141      	str	r1, [r0, #20]
   83244:	e731      	b.n	830aa <_realloc_r+0x1be>
   83246:	68a9      	ldr	r1, [r5, #8]
   83248:	2a24      	cmp	r2, #36	; 0x24
   8324a:	f8ca 1010 	str.w	r1, [sl, #16]
   8324e:	68e9      	ldr	r1, [r5, #12]
   83250:	f8ca 1014 	str.w	r1, [sl, #20]
   83254:	d00f      	beq.n	83276 <_realloc_r+0x38a>
   83256:	3510      	adds	r5, #16
   83258:	f10a 0218 	add.w	r2, sl, #24
   8325c:	e6ef      	b.n	8303e <_realloc_r+0x152>
   8325e:	692a      	ldr	r2, [r5, #16]
   83260:	f10a 0320 	add.w	r3, sl, #32
   83264:	f8ca 2018 	str.w	r2, [sl, #24]
   83268:	696a      	ldr	r2, [r5, #20]
   8326a:	3518      	adds	r5, #24
   8326c:	f8ca 201c 	str.w	r2, [sl, #28]
   83270:	e78b      	b.n	8318a <_realloc_r+0x29e>
   83272:	463b      	mov	r3, r7
   83274:	e762      	b.n	8313c <_realloc_r+0x250>
   83276:	6929      	ldr	r1, [r5, #16]
   83278:	f10a 0220 	add.w	r2, sl, #32
   8327c:	f8ca 1018 	str.w	r1, [sl, #24]
   83280:	6969      	ldr	r1, [r5, #20]
   83282:	3518      	adds	r5, #24
   83284:	f8ca 101c 	str.w	r1, [sl, #28]
   83288:	e6d9      	b.n	8303e <_realloc_r+0x152>
   8328a:	4629      	mov	r1, r5
   8328c:	4638      	mov	r0, r7
   8328e:	f8cd c004 	str.w	ip, [sp, #4]
   83292:	f7ff fdc3 	bl	82e1c <memmove>
   83296:	f8dd c004 	ldr.w	ip, [sp, #4]
   8329a:	e755      	b.n	83148 <_realloc_r+0x25c>
   8329c:	68ab      	ldr	r3, [r5, #8]
   8329e:	2a24      	cmp	r2, #36	; 0x24
   832a0:	f8ca 3010 	str.w	r3, [sl, #16]
   832a4:	68eb      	ldr	r3, [r5, #12]
   832a6:	f8ca 3014 	str.w	r3, [sl, #20]
   832aa:	d003      	beq.n	832b4 <_realloc_r+0x3c8>
   832ac:	3510      	adds	r5, #16
   832ae:	f10a 0318 	add.w	r3, sl, #24
   832b2:	e743      	b.n	8313c <_realloc_r+0x250>
   832b4:	692a      	ldr	r2, [r5, #16]
   832b6:	f10a 0320 	add.w	r3, sl, #32
   832ba:	f8ca 2018 	str.w	r2, [sl, #24]
   832be:	696a      	ldr	r2, [r5, #20]
   832c0:	3518      	adds	r5, #24
   832c2:	f8ca 201c 	str.w	r2, [sl, #28]
   832c6:	e739      	b.n	8313c <_realloc_r+0x250>
   832c8:	20070580 	.word	0x20070580

000832cc <_sbrk_r>:
   832cc:	b538      	push	{r3, r4, r5, lr}
   832ce:	4c07      	ldr	r4, [pc, #28]	; (832ec <_sbrk_r+0x20>)
   832d0:	2300      	movs	r3, #0
   832d2:	4605      	mov	r5, r0
   832d4:	4608      	mov	r0, r1
   832d6:	6023      	str	r3, [r4, #0]
   832d8:	f7fd fca8 	bl	80c2c <_sbrk>
   832dc:	1c43      	adds	r3, r0, #1
   832de:	d000      	beq.n	832e2 <_sbrk_r+0x16>
   832e0:	bd38      	pop	{r3, r4, r5, pc}
   832e2:	6823      	ldr	r3, [r4, #0]
   832e4:	2b00      	cmp	r3, #0
   832e6:	d0fb      	beq.n	832e0 <_sbrk_r+0x14>
   832e8:	602b      	str	r3, [r5, #0]
   832ea:	bd38      	pop	{r3, r4, r5, pc}
   832ec:	20070a68 	.word	0x20070a68

000832f0 <__sread>:
   832f0:	b510      	push	{r4, lr}
   832f2:	460c      	mov	r4, r1
   832f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   832f8:	f000 f9bc 	bl	83674 <_read_r>
   832fc:	2800      	cmp	r0, #0
   832fe:	db03      	blt.n	83308 <__sread+0x18>
   83300:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83302:	4403      	add	r3, r0
   83304:	6523      	str	r3, [r4, #80]	; 0x50
   83306:	bd10      	pop	{r4, pc}
   83308:	89a3      	ldrh	r3, [r4, #12]
   8330a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8330e:	81a3      	strh	r3, [r4, #12]
   83310:	bd10      	pop	{r4, pc}
   83312:	bf00      	nop

00083314 <__swrite>:
   83314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83318:	460c      	mov	r4, r1
   8331a:	8989      	ldrh	r1, [r1, #12]
   8331c:	461d      	mov	r5, r3
   8331e:	05cb      	lsls	r3, r1, #23
   83320:	4616      	mov	r6, r2
   83322:	4607      	mov	r7, r0
   83324:	d506      	bpl.n	83334 <__swrite+0x20>
   83326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8332a:	2200      	movs	r2, #0
   8332c:	2302      	movs	r3, #2
   8332e:	f000 f98d 	bl	8364c <_lseek_r>
   83332:	89a1      	ldrh	r1, [r4, #12]
   83334:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83338:	81a1      	strh	r1, [r4, #12]
   8333a:	4638      	mov	r0, r7
   8333c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83340:	4632      	mov	r2, r6
   83342:	462b      	mov	r3, r5
   83344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83348:	f000 b8a0 	b.w	8348c <_write_r>

0008334c <__sseek>:
   8334c:	b510      	push	{r4, lr}
   8334e:	460c      	mov	r4, r1
   83350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83354:	f000 f97a 	bl	8364c <_lseek_r>
   83358:	89a3      	ldrh	r3, [r4, #12]
   8335a:	1c42      	adds	r2, r0, #1
   8335c:	bf0e      	itee	eq
   8335e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83366:	6520      	strne	r0, [r4, #80]	; 0x50
   83368:	81a3      	strh	r3, [r4, #12]
   8336a:	bd10      	pop	{r4, pc}

0008336c <__sclose>:
   8336c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83370:	f000 b8f2 	b.w	83558 <_close_r>

00083374 <__swbuf_r>:
   83374:	b570      	push	{r4, r5, r6, lr}
   83376:	460d      	mov	r5, r1
   83378:	4614      	mov	r4, r2
   8337a:	4606      	mov	r6, r0
   8337c:	b110      	cbz	r0, 83384 <__swbuf_r+0x10>
   8337e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83380:	2b00      	cmp	r3, #0
   83382:	d048      	beq.n	83416 <__swbuf_r+0xa2>
   83384:	89a2      	ldrh	r2, [r4, #12]
   83386:	69a3      	ldr	r3, [r4, #24]
   83388:	b291      	uxth	r1, r2
   8338a:	0708      	lsls	r0, r1, #28
   8338c:	60a3      	str	r3, [r4, #8]
   8338e:	d538      	bpl.n	83402 <__swbuf_r+0x8e>
   83390:	6923      	ldr	r3, [r4, #16]
   83392:	2b00      	cmp	r3, #0
   83394:	d035      	beq.n	83402 <__swbuf_r+0x8e>
   83396:	0489      	lsls	r1, r1, #18
   83398:	b2ed      	uxtb	r5, r5
   8339a:	d515      	bpl.n	833c8 <__swbuf_r+0x54>
   8339c:	6822      	ldr	r2, [r4, #0]
   8339e:	6961      	ldr	r1, [r4, #20]
   833a0:	1ad3      	subs	r3, r2, r3
   833a2:	428b      	cmp	r3, r1
   833a4:	da1c      	bge.n	833e0 <__swbuf_r+0x6c>
   833a6:	3301      	adds	r3, #1
   833a8:	68a1      	ldr	r1, [r4, #8]
   833aa:	1c50      	adds	r0, r2, #1
   833ac:	3901      	subs	r1, #1
   833ae:	60a1      	str	r1, [r4, #8]
   833b0:	6020      	str	r0, [r4, #0]
   833b2:	7015      	strb	r5, [r2, #0]
   833b4:	6962      	ldr	r2, [r4, #20]
   833b6:	429a      	cmp	r2, r3
   833b8:	d01a      	beq.n	833f0 <__swbuf_r+0x7c>
   833ba:	89a3      	ldrh	r3, [r4, #12]
   833bc:	07db      	lsls	r3, r3, #31
   833be:	d501      	bpl.n	833c4 <__swbuf_r+0x50>
   833c0:	2d0a      	cmp	r5, #10
   833c2:	d015      	beq.n	833f0 <__swbuf_r+0x7c>
   833c4:	4628      	mov	r0, r5
   833c6:	bd70      	pop	{r4, r5, r6, pc}
   833c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   833ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   833ce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   833d2:	81a2      	strh	r2, [r4, #12]
   833d4:	6822      	ldr	r2, [r4, #0]
   833d6:	6661      	str	r1, [r4, #100]	; 0x64
   833d8:	6961      	ldr	r1, [r4, #20]
   833da:	1ad3      	subs	r3, r2, r3
   833dc:	428b      	cmp	r3, r1
   833de:	dbe2      	blt.n	833a6 <__swbuf_r+0x32>
   833e0:	4630      	mov	r0, r6
   833e2:	4621      	mov	r1, r4
   833e4:	f7fe fd56 	bl	81e94 <_fflush_r>
   833e8:	b940      	cbnz	r0, 833fc <__swbuf_r+0x88>
   833ea:	6822      	ldr	r2, [r4, #0]
   833ec:	2301      	movs	r3, #1
   833ee:	e7db      	b.n	833a8 <__swbuf_r+0x34>
   833f0:	4630      	mov	r0, r6
   833f2:	4621      	mov	r1, r4
   833f4:	f7fe fd4e 	bl	81e94 <_fflush_r>
   833f8:	2800      	cmp	r0, #0
   833fa:	d0e3      	beq.n	833c4 <__swbuf_r+0x50>
   833fc:	f04f 30ff 	mov.w	r0, #4294967295
   83400:	bd70      	pop	{r4, r5, r6, pc}
   83402:	4630      	mov	r0, r6
   83404:	4621      	mov	r1, r4
   83406:	f7fe fc2f 	bl	81c68 <__swsetup_r>
   8340a:	2800      	cmp	r0, #0
   8340c:	d1f6      	bne.n	833fc <__swbuf_r+0x88>
   8340e:	89a2      	ldrh	r2, [r4, #12]
   83410:	6923      	ldr	r3, [r4, #16]
   83412:	b291      	uxth	r1, r2
   83414:	e7bf      	b.n	83396 <__swbuf_r+0x22>
   83416:	f7fe fdd1 	bl	81fbc <__sinit>
   8341a:	e7b3      	b.n	83384 <__swbuf_r+0x10>

0008341c <_wcrtomb_r>:
   8341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83420:	4605      	mov	r5, r0
   83422:	b086      	sub	sp, #24
   83424:	461e      	mov	r6, r3
   83426:	460c      	mov	r4, r1
   83428:	b1a1      	cbz	r1, 83454 <_wcrtomb_r+0x38>
   8342a:	4b10      	ldr	r3, [pc, #64]	; (8346c <_wcrtomb_r+0x50>)
   8342c:	4617      	mov	r7, r2
   8342e:	f8d3 8000 	ldr.w	r8, [r3]
   83432:	f7ff f92b 	bl	8268c <__locale_charset>
   83436:	9600      	str	r6, [sp, #0]
   83438:	4603      	mov	r3, r0
   8343a:	4621      	mov	r1, r4
   8343c:	463a      	mov	r2, r7
   8343e:	4628      	mov	r0, r5
   83440:	47c0      	blx	r8
   83442:	1c43      	adds	r3, r0, #1
   83444:	d103      	bne.n	8344e <_wcrtomb_r+0x32>
   83446:	2200      	movs	r2, #0
   83448:	238a      	movs	r3, #138	; 0x8a
   8344a:	6032      	str	r2, [r6, #0]
   8344c:	602b      	str	r3, [r5, #0]
   8344e:	b006      	add	sp, #24
   83450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83454:	4b05      	ldr	r3, [pc, #20]	; (8346c <_wcrtomb_r+0x50>)
   83456:	681f      	ldr	r7, [r3, #0]
   83458:	f7ff f918 	bl	8268c <__locale_charset>
   8345c:	9600      	str	r6, [sp, #0]
   8345e:	4603      	mov	r3, r0
   83460:	4622      	mov	r2, r4
   83462:	4628      	mov	r0, r5
   83464:	a903      	add	r1, sp, #12
   83466:	47b8      	blx	r7
   83468:	e7eb      	b.n	83442 <_wcrtomb_r+0x26>
   8346a:	bf00      	nop
   8346c:	20070990 	.word	0x20070990

00083470 <__ascii_wctomb>:
   83470:	b121      	cbz	r1, 8347c <__ascii_wctomb+0xc>
   83472:	2aff      	cmp	r2, #255	; 0xff
   83474:	d804      	bhi.n	83480 <__ascii_wctomb+0x10>
   83476:	700a      	strb	r2, [r1, #0]
   83478:	2001      	movs	r0, #1
   8347a:	4770      	bx	lr
   8347c:	4608      	mov	r0, r1
   8347e:	4770      	bx	lr
   83480:	238a      	movs	r3, #138	; 0x8a
   83482:	6003      	str	r3, [r0, #0]
   83484:	f04f 30ff 	mov.w	r0, #4294967295
   83488:	4770      	bx	lr
   8348a:	bf00      	nop

0008348c <_write_r>:
   8348c:	b570      	push	{r4, r5, r6, lr}
   8348e:	4c08      	ldr	r4, [pc, #32]	; (834b0 <_write_r+0x24>)
   83490:	4606      	mov	r6, r0
   83492:	2500      	movs	r5, #0
   83494:	4608      	mov	r0, r1
   83496:	4611      	mov	r1, r2
   83498:	461a      	mov	r2, r3
   8349a:	6025      	str	r5, [r4, #0]
   8349c:	f7fc fff2 	bl	80484 <_write>
   834a0:	1c43      	adds	r3, r0, #1
   834a2:	d000      	beq.n	834a6 <_write_r+0x1a>
   834a4:	bd70      	pop	{r4, r5, r6, pc}
   834a6:	6823      	ldr	r3, [r4, #0]
   834a8:	2b00      	cmp	r3, #0
   834aa:	d0fb      	beq.n	834a4 <_write_r+0x18>
   834ac:	6033      	str	r3, [r6, #0]
   834ae:	bd70      	pop	{r4, r5, r6, pc}
   834b0:	20070a68 	.word	0x20070a68

000834b4 <__register_exitproc>:
   834b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834b8:	4c25      	ldr	r4, [pc, #148]	; (83550 <__register_exitproc+0x9c>)
   834ba:	4606      	mov	r6, r0
   834bc:	6825      	ldr	r5, [r4, #0]
   834be:	4688      	mov	r8, r1
   834c0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   834c4:	4692      	mov	sl, r2
   834c6:	4699      	mov	r9, r3
   834c8:	b3c4      	cbz	r4, 8353c <__register_exitproc+0x88>
   834ca:	6860      	ldr	r0, [r4, #4]
   834cc:	281f      	cmp	r0, #31
   834ce:	dc17      	bgt.n	83500 <__register_exitproc+0x4c>
   834d0:	1c41      	adds	r1, r0, #1
   834d2:	b176      	cbz	r6, 834f2 <__register_exitproc+0x3e>
   834d4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   834d8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   834dc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   834e0:	2201      	movs	r2, #1
   834e2:	4082      	lsls	r2, r0
   834e4:	4315      	orrs	r5, r2
   834e6:	2e02      	cmp	r6, #2
   834e8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   834ec:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   834f0:	d01e      	beq.n	83530 <__register_exitproc+0x7c>
   834f2:	1c83      	adds	r3, r0, #2
   834f4:	6061      	str	r1, [r4, #4]
   834f6:	2000      	movs	r0, #0
   834f8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   834fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83500:	4b14      	ldr	r3, [pc, #80]	; (83554 <__register_exitproc+0xa0>)
   83502:	b303      	cbz	r3, 83546 <__register_exitproc+0x92>
   83504:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83508:	f7ff f93a 	bl	82780 <malloc>
   8350c:	4604      	mov	r4, r0
   8350e:	b1d0      	cbz	r0, 83546 <__register_exitproc+0x92>
   83510:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83514:	2700      	movs	r7, #0
   83516:	e884 0088 	stmia.w	r4, {r3, r7}
   8351a:	4638      	mov	r0, r7
   8351c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83520:	2101      	movs	r1, #1
   83522:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83526:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8352a:	2e00      	cmp	r6, #0
   8352c:	d0e1      	beq.n	834f2 <__register_exitproc+0x3e>
   8352e:	e7d1      	b.n	834d4 <__register_exitproc+0x20>
   83530:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83534:	431a      	orrs	r2, r3
   83536:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8353a:	e7da      	b.n	834f2 <__register_exitproc+0x3e>
   8353c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83540:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83544:	e7c1      	b.n	834ca <__register_exitproc+0x16>
   83546:	f04f 30ff 	mov.w	r0, #4294967295
   8354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8354e:	bf00      	nop
   83550:	00083c64 	.word	0x00083c64
   83554:	00082781 	.word	0x00082781

00083558 <_close_r>:
   83558:	b538      	push	{r3, r4, r5, lr}
   8355a:	4c07      	ldr	r4, [pc, #28]	; (83578 <_close_r+0x20>)
   8355c:	2300      	movs	r3, #0
   8355e:	4605      	mov	r5, r0
   83560:	4608      	mov	r0, r1
   83562:	6023      	str	r3, [r4, #0]
   83564:	f7fd fb7c 	bl	80c60 <_close>
   83568:	1c43      	adds	r3, r0, #1
   8356a:	d000      	beq.n	8356e <_close_r+0x16>
   8356c:	bd38      	pop	{r3, r4, r5, pc}
   8356e:	6823      	ldr	r3, [r4, #0]
   83570:	2b00      	cmp	r3, #0
   83572:	d0fb      	beq.n	8356c <_close_r+0x14>
   83574:	602b      	str	r3, [r5, #0]
   83576:	bd38      	pop	{r3, r4, r5, pc}
   83578:	20070a68 	.word	0x20070a68

0008357c <_fclose_r>:
   8357c:	2900      	cmp	r1, #0
   8357e:	d03d      	beq.n	835fc <_fclose_r+0x80>
   83580:	b570      	push	{r4, r5, r6, lr}
   83582:	4605      	mov	r5, r0
   83584:	460c      	mov	r4, r1
   83586:	b108      	cbz	r0, 8358c <_fclose_r+0x10>
   83588:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8358a:	b37b      	cbz	r3, 835ec <_fclose_r+0x70>
   8358c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83590:	b90b      	cbnz	r3, 83596 <_fclose_r+0x1a>
   83592:	2000      	movs	r0, #0
   83594:	bd70      	pop	{r4, r5, r6, pc}
   83596:	4628      	mov	r0, r5
   83598:	4621      	mov	r1, r4
   8359a:	f7fe fbd7 	bl	81d4c <__sflush_r>
   8359e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   835a0:	4606      	mov	r6, r0
   835a2:	b133      	cbz	r3, 835b2 <_fclose_r+0x36>
   835a4:	4628      	mov	r0, r5
   835a6:	69e1      	ldr	r1, [r4, #28]
   835a8:	4798      	blx	r3
   835aa:	2800      	cmp	r0, #0
   835ac:	bfb8      	it	lt
   835ae:	f04f 36ff 	movlt.w	r6, #4294967295
   835b2:	89a3      	ldrh	r3, [r4, #12]
   835b4:	061b      	lsls	r3, r3, #24
   835b6:	d41c      	bmi.n	835f2 <_fclose_r+0x76>
   835b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   835ba:	b141      	cbz	r1, 835ce <_fclose_r+0x52>
   835bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   835c0:	4299      	cmp	r1, r3
   835c2:	d002      	beq.n	835ca <_fclose_r+0x4e>
   835c4:	4628      	mov	r0, r5
   835c6:	f7fe fdd1 	bl	8216c <_free_r>
   835ca:	2300      	movs	r3, #0
   835cc:	6323      	str	r3, [r4, #48]	; 0x30
   835ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
   835d0:	b121      	cbz	r1, 835dc <_fclose_r+0x60>
   835d2:	4628      	mov	r0, r5
   835d4:	f7fe fdca 	bl	8216c <_free_r>
   835d8:	2300      	movs	r3, #0
   835da:	6463      	str	r3, [r4, #68]	; 0x44
   835dc:	f7fe fcf4 	bl	81fc8 <__sfp_lock_acquire>
   835e0:	2300      	movs	r3, #0
   835e2:	81a3      	strh	r3, [r4, #12]
   835e4:	f7fe fcf2 	bl	81fcc <__sfp_lock_release>
   835e8:	4630      	mov	r0, r6
   835ea:	bd70      	pop	{r4, r5, r6, pc}
   835ec:	f7fe fce6 	bl	81fbc <__sinit>
   835f0:	e7cc      	b.n	8358c <_fclose_r+0x10>
   835f2:	4628      	mov	r0, r5
   835f4:	6921      	ldr	r1, [r4, #16]
   835f6:	f7fe fdb9 	bl	8216c <_free_r>
   835fa:	e7dd      	b.n	835b8 <_fclose_r+0x3c>
   835fc:	2000      	movs	r0, #0
   835fe:	4770      	bx	lr

00083600 <_fstat_r>:
   83600:	b538      	push	{r3, r4, r5, lr}
   83602:	4c08      	ldr	r4, [pc, #32]	; (83624 <_fstat_r+0x24>)
   83604:	2300      	movs	r3, #0
   83606:	4605      	mov	r5, r0
   83608:	4608      	mov	r0, r1
   8360a:	4611      	mov	r1, r2
   8360c:	6023      	str	r3, [r4, #0]
   8360e:	f7fd fb2b 	bl	80c68 <_fstat>
   83612:	1c43      	adds	r3, r0, #1
   83614:	d000      	beq.n	83618 <_fstat_r+0x18>
   83616:	bd38      	pop	{r3, r4, r5, pc}
   83618:	6823      	ldr	r3, [r4, #0]
   8361a:	2b00      	cmp	r3, #0
   8361c:	d0fb      	beq.n	83616 <_fstat_r+0x16>
   8361e:	602b      	str	r3, [r5, #0]
   83620:	bd38      	pop	{r3, r4, r5, pc}
   83622:	bf00      	nop
   83624:	20070a68 	.word	0x20070a68

00083628 <_isatty_r>:
   83628:	b538      	push	{r3, r4, r5, lr}
   8362a:	4c07      	ldr	r4, [pc, #28]	; (83648 <_isatty_r+0x20>)
   8362c:	2300      	movs	r3, #0
   8362e:	4605      	mov	r5, r0
   83630:	4608      	mov	r0, r1
   83632:	6023      	str	r3, [r4, #0]
   83634:	f7fd fb1e 	bl	80c74 <_isatty>
   83638:	1c43      	adds	r3, r0, #1
   8363a:	d000      	beq.n	8363e <_isatty_r+0x16>
   8363c:	bd38      	pop	{r3, r4, r5, pc}
   8363e:	6823      	ldr	r3, [r4, #0]
   83640:	2b00      	cmp	r3, #0
   83642:	d0fb      	beq.n	8363c <_isatty_r+0x14>
   83644:	602b      	str	r3, [r5, #0]
   83646:	bd38      	pop	{r3, r4, r5, pc}
   83648:	20070a68 	.word	0x20070a68

0008364c <_lseek_r>:
   8364c:	b570      	push	{r4, r5, r6, lr}
   8364e:	4c08      	ldr	r4, [pc, #32]	; (83670 <_lseek_r+0x24>)
   83650:	4606      	mov	r6, r0
   83652:	2500      	movs	r5, #0
   83654:	4608      	mov	r0, r1
   83656:	4611      	mov	r1, r2
   83658:	461a      	mov	r2, r3
   8365a:	6025      	str	r5, [r4, #0]
   8365c:	f7fd fb0c 	bl	80c78 <_lseek>
   83660:	1c43      	adds	r3, r0, #1
   83662:	d000      	beq.n	83666 <_lseek_r+0x1a>
   83664:	bd70      	pop	{r4, r5, r6, pc}
   83666:	6823      	ldr	r3, [r4, #0]
   83668:	2b00      	cmp	r3, #0
   8366a:	d0fb      	beq.n	83664 <_lseek_r+0x18>
   8366c:	6033      	str	r3, [r6, #0]
   8366e:	bd70      	pop	{r4, r5, r6, pc}
   83670:	20070a68 	.word	0x20070a68

00083674 <_read_r>:
   83674:	b570      	push	{r4, r5, r6, lr}
   83676:	4c08      	ldr	r4, [pc, #32]	; (83698 <_read_r+0x24>)
   83678:	4606      	mov	r6, r0
   8367a:	2500      	movs	r5, #0
   8367c:	4608      	mov	r0, r1
   8367e:	4611      	mov	r1, r2
   83680:	461a      	mov	r2, r3
   83682:	6025      	str	r5, [r4, #0]
   83684:	f7fc fee0 	bl	80448 <_read>
   83688:	1c43      	adds	r3, r0, #1
   8368a:	d000      	beq.n	8368e <_read_r+0x1a>
   8368c:	bd70      	pop	{r4, r5, r6, pc}
   8368e:	6823      	ldr	r3, [r4, #0]
   83690:	2b00      	cmp	r3, #0
   83692:	d0fb      	beq.n	8368c <_read_r+0x18>
   83694:	6033      	str	r3, [r6, #0]
   83696:	bd70      	pop	{r4, r5, r6, pc}
   83698:	20070a68 	.word	0x20070a68

0008369c <__aeabi_uldivmod>:
   8369c:	b953      	cbnz	r3, 836b4 <__aeabi_uldivmod+0x18>
   8369e:	b94a      	cbnz	r2, 836b4 <__aeabi_uldivmod+0x18>
   836a0:	2900      	cmp	r1, #0
   836a2:	bf08      	it	eq
   836a4:	2800      	cmpeq	r0, #0
   836a6:	bf1c      	itt	ne
   836a8:	f04f 31ff 	movne.w	r1, #4294967295
   836ac:	f04f 30ff 	movne.w	r0, #4294967295
   836b0:	f000 b83c 	b.w	8372c <__aeabi_idiv0>
   836b4:	b082      	sub	sp, #8
   836b6:	46ec      	mov	ip, sp
   836b8:	e92d 5000 	stmdb	sp!, {ip, lr}
   836bc:	f000 f81e 	bl	836fc <__gnu_uldivmod_helper>
   836c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   836c4:	b002      	add	sp, #8
   836c6:	bc0c      	pop	{r2, r3}
   836c8:	4770      	bx	lr
   836ca:	bf00      	nop

000836cc <__gnu_ldivmod_helper>:
   836cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836d0:	9c06      	ldr	r4, [sp, #24]
   836d2:	4690      	mov	r8, r2
   836d4:	4606      	mov	r6, r0
   836d6:	460f      	mov	r7, r1
   836d8:	461d      	mov	r5, r3
   836da:	f000 f829 	bl	83730 <__divdi3>
   836de:	fb08 fc01 	mul.w	ip, r8, r1
   836e2:	fba8 2300 	umull	r2, r3, r8, r0
   836e6:	fb00 c505 	mla	r5, r0, r5, ip
   836ea:	1ab2      	subs	r2, r6, r2
   836ec:	442b      	add	r3, r5
   836ee:	eb67 0303 	sbc.w	r3, r7, r3
   836f2:	4686      	mov	lr, r0
   836f4:	e9c4 2300 	strd	r2, r3, [r4]
   836f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000836fc <__gnu_uldivmod_helper>:
   836fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83700:	9e08      	ldr	r6, [sp, #32]
   83702:	4617      	mov	r7, r2
   83704:	4680      	mov	r8, r0
   83706:	4689      	mov	r9, r1
   83708:	461d      	mov	r5, r3
   8370a:	f000 f967 	bl	839dc <__udivdi3>
   8370e:	fb00 f305 	mul.w	r3, r0, r5
   83712:	fba0 4507 	umull	r4, r5, r0, r7
   83716:	fb07 3701 	mla	r7, r7, r1, r3
   8371a:	ebb8 0404 	subs.w	r4, r8, r4
   8371e:	443d      	add	r5, r7
   83720:	eb69 0505 	sbc.w	r5, r9, r5
   83724:	e9c6 4500 	strd	r4, r5, [r6]
   83728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008372c <__aeabi_idiv0>:
   8372c:	4770      	bx	lr
   8372e:	bf00      	nop

00083730 <__divdi3>:
   83730:	2900      	cmp	r1, #0
   83732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83736:	f2c0 80a8 	blt.w	8388a <__divdi3+0x15a>
   8373a:	2600      	movs	r6, #0
   8373c:	2b00      	cmp	r3, #0
   8373e:	f2c0 809e 	blt.w	8387e <__divdi3+0x14e>
   83742:	4681      	mov	r9, r0
   83744:	468e      	mov	lr, r1
   83746:	4690      	mov	r8, r2
   83748:	469c      	mov	ip, r3
   8374a:	4617      	mov	r7, r2
   8374c:	4604      	mov	r4, r0
   8374e:	460d      	mov	r5, r1
   83750:	2b00      	cmp	r3, #0
   83752:	d13d      	bne.n	837d0 <__divdi3+0xa0>
   83754:	428a      	cmp	r2, r1
   83756:	d959      	bls.n	8380c <__divdi3+0xdc>
   83758:	fab2 f382 	clz	r3, r2
   8375c:	b13b      	cbz	r3, 8376e <__divdi3+0x3e>
   8375e:	f1c3 0220 	rsb	r2, r3, #32
   83762:	409d      	lsls	r5, r3
   83764:	fa20 f202 	lsr.w	r2, r0, r2
   83768:	409f      	lsls	r7, r3
   8376a:	4315      	orrs	r5, r2
   8376c:	409c      	lsls	r4, r3
   8376e:	0c39      	lsrs	r1, r7, #16
   83770:	fbb5 f0f1 	udiv	r0, r5, r1
   83774:	fa1f fe87 	uxth.w	lr, r7
   83778:	fb01 5510 	mls	r5, r1, r0, r5
   8377c:	fb0e f300 	mul.w	r3, lr, r0
   83780:	0c22      	lsrs	r2, r4, #16
   83782:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   83786:	42ab      	cmp	r3, r5
   83788:	d909      	bls.n	8379e <__divdi3+0x6e>
   8378a:	19ed      	adds	r5, r5, r7
   8378c:	f100 32ff 	add.w	r2, r0, #4294967295
   83790:	f080 810b 	bcs.w	839aa <__divdi3+0x27a>
   83794:	42ab      	cmp	r3, r5
   83796:	f240 8108 	bls.w	839aa <__divdi3+0x27a>
   8379a:	3802      	subs	r0, #2
   8379c:	443d      	add	r5, r7
   8379e:	1aed      	subs	r5, r5, r3
   837a0:	fbb5 f3f1 	udiv	r3, r5, r1
   837a4:	fb01 5513 	mls	r5, r1, r3, r5
   837a8:	fb0e fe03 	mul.w	lr, lr, r3
   837ac:	b2a4      	uxth	r4, r4
   837ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   837b2:	45ae      	cmp	lr, r5
   837b4:	d908      	bls.n	837c8 <__divdi3+0x98>
   837b6:	19ed      	adds	r5, r5, r7
   837b8:	f103 32ff 	add.w	r2, r3, #4294967295
   837bc:	f080 80f7 	bcs.w	839ae <__divdi3+0x27e>
   837c0:	45ae      	cmp	lr, r5
   837c2:	f240 80f4 	bls.w	839ae <__divdi3+0x27e>
   837c6:	3b02      	subs	r3, #2
   837c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   837cc:	2200      	movs	r2, #0
   837ce:	e003      	b.n	837d8 <__divdi3+0xa8>
   837d0:	428b      	cmp	r3, r1
   837d2:	d90f      	bls.n	837f4 <__divdi3+0xc4>
   837d4:	2200      	movs	r2, #0
   837d6:	4613      	mov	r3, r2
   837d8:	1c34      	adds	r4, r6, #0
   837da:	bf18      	it	ne
   837dc:	2401      	movne	r4, #1
   837de:	4260      	negs	r0, r4
   837e0:	f04f 0500 	mov.w	r5, #0
   837e4:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   837e8:	4058      	eors	r0, r3
   837ea:	4051      	eors	r1, r2
   837ec:	1900      	adds	r0, r0, r4
   837ee:	4169      	adcs	r1, r5
   837f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   837f4:	fab3 f283 	clz	r2, r3
   837f8:	2a00      	cmp	r2, #0
   837fa:	f040 8089 	bne.w	83910 <__divdi3+0x1e0>
   837fe:	428b      	cmp	r3, r1
   83800:	d302      	bcc.n	83808 <__divdi3+0xd8>
   83802:	4580      	cmp	r8, r0
   83804:	f200 80e2 	bhi.w	839cc <__divdi3+0x29c>
   83808:	2301      	movs	r3, #1
   8380a:	e7e5      	b.n	837d8 <__divdi3+0xa8>
   8380c:	b912      	cbnz	r2, 83814 <__divdi3+0xe4>
   8380e:	2301      	movs	r3, #1
   83810:	fbb3 f7f2 	udiv	r7, r3, r2
   83814:	fab7 f887 	clz	r8, r7
   83818:	f1b8 0f00 	cmp.w	r8, #0
   8381c:	d13b      	bne.n	83896 <__divdi3+0x166>
   8381e:	1bed      	subs	r5, r5, r7
   83820:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83824:	fa1f fe87 	uxth.w	lr, r7
   83828:	2201      	movs	r2, #1
   8382a:	fbb5 f0fc 	udiv	r0, r5, ip
   8382e:	fb0c 5510 	mls	r5, ip, r0, r5
   83832:	fb0e f300 	mul.w	r3, lr, r0
   83836:	0c21      	lsrs	r1, r4, #16
   83838:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8383c:	42ab      	cmp	r3, r5
   8383e:	d907      	bls.n	83850 <__divdi3+0x120>
   83840:	19ed      	adds	r5, r5, r7
   83842:	f100 31ff 	add.w	r1, r0, #4294967295
   83846:	d202      	bcs.n	8384e <__divdi3+0x11e>
   83848:	42ab      	cmp	r3, r5
   8384a:	f200 80c3 	bhi.w	839d4 <__divdi3+0x2a4>
   8384e:	4608      	mov	r0, r1
   83850:	1aed      	subs	r5, r5, r3
   83852:	fbb5 f3fc 	udiv	r3, r5, ip
   83856:	fb0c 5513 	mls	r5, ip, r3, r5
   8385a:	fb0e fe03 	mul.w	lr, lr, r3
   8385e:	b2a4      	uxth	r4, r4
   83860:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83864:	45ae      	cmp	lr, r5
   83866:	d907      	bls.n	83878 <__divdi3+0x148>
   83868:	19ed      	adds	r5, r5, r7
   8386a:	f103 31ff 	add.w	r1, r3, #4294967295
   8386e:	d202      	bcs.n	83876 <__divdi3+0x146>
   83870:	45ae      	cmp	lr, r5
   83872:	f200 80ad 	bhi.w	839d0 <__divdi3+0x2a0>
   83876:	460b      	mov	r3, r1
   83878:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   8387c:	e7ac      	b.n	837d8 <__divdi3+0xa8>
   8387e:	4252      	negs	r2, r2
   83880:	ea6f 0606 	mvn.w	r6, r6
   83884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83888:	e75b      	b.n	83742 <__divdi3+0x12>
   8388a:	4240      	negs	r0, r0
   8388c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83890:	f04f 36ff 	mov.w	r6, #4294967295
   83894:	e752      	b.n	8373c <__divdi3+0xc>
   83896:	fa07 f708 	lsl.w	r7, r7, r8
   8389a:	f1c8 0220 	rsb	r2, r8, #32
   8389e:	fa25 f302 	lsr.w	r3, r5, r2
   838a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   838a6:	fbb3 f1fc 	udiv	r1, r3, ip
   838aa:	fa1f fe87 	uxth.w	lr, r7
   838ae:	fb0c 3311 	mls	r3, ip, r1, r3
   838b2:	fa24 f202 	lsr.w	r2, r4, r2
   838b6:	fa05 f508 	lsl.w	r5, r5, r8
   838ba:	fb0e f901 	mul.w	r9, lr, r1
   838be:	432a      	orrs	r2, r5
   838c0:	0c10      	lsrs	r0, r2, #16
   838c2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   838c6:	4599      	cmp	r9, r3
   838c8:	fa04 f408 	lsl.w	r4, r4, r8
   838cc:	d907      	bls.n	838de <__divdi3+0x1ae>
   838ce:	19db      	adds	r3, r3, r7
   838d0:	f101 30ff 	add.w	r0, r1, #4294967295
   838d4:	d278      	bcs.n	839c8 <__divdi3+0x298>
   838d6:	4599      	cmp	r9, r3
   838d8:	d976      	bls.n	839c8 <__divdi3+0x298>
   838da:	3902      	subs	r1, #2
   838dc:	443b      	add	r3, r7
   838de:	ebc9 0303 	rsb	r3, r9, r3
   838e2:	fbb3 f0fc 	udiv	r0, r3, ip
   838e6:	fb0c 3310 	mls	r3, ip, r0, r3
   838ea:	fb0e f500 	mul.w	r5, lr, r0
   838ee:	b292      	uxth	r2, r2
   838f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   838f4:	429d      	cmp	r5, r3
   838f6:	d907      	bls.n	83908 <__divdi3+0x1d8>
   838f8:	19db      	adds	r3, r3, r7
   838fa:	f100 32ff 	add.w	r2, r0, #4294967295
   838fe:	d25f      	bcs.n	839c0 <__divdi3+0x290>
   83900:	429d      	cmp	r5, r3
   83902:	d95d      	bls.n	839c0 <__divdi3+0x290>
   83904:	3802      	subs	r0, #2
   83906:	443b      	add	r3, r7
   83908:	1b5d      	subs	r5, r3, r5
   8390a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   8390e:	e78c      	b.n	8382a <__divdi3+0xfa>
   83910:	f1c2 0320 	rsb	r3, r2, #32
   83914:	fa28 f103 	lsr.w	r1, r8, r3
   83918:	fa0c fc02 	lsl.w	ip, ip, r2
   8391c:	ea41 0c0c 	orr.w	ip, r1, ip
   83920:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83924:	fa2e f103 	lsr.w	r1, lr, r3
   83928:	fbb1 f5f0 	udiv	r5, r1, r0
   8392c:	fa1f f78c 	uxth.w	r7, ip
   83930:	fb00 1115 	mls	r1, r0, r5, r1
   83934:	fa29 f303 	lsr.w	r3, r9, r3
   83938:	fa0e fe02 	lsl.w	lr, lr, r2
   8393c:	fb07 f905 	mul.w	r9, r7, r5
   83940:	ea43 0e0e 	orr.w	lr, r3, lr
   83944:	ea4f 431e 	mov.w	r3, lr, lsr #16
   83948:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8394c:	4589      	cmp	r9, r1
   8394e:	fa08 f802 	lsl.w	r8, r8, r2
   83952:	d908      	bls.n	83966 <__divdi3+0x236>
   83954:	eb11 010c 	adds.w	r1, r1, ip
   83958:	f105 33ff 	add.w	r3, r5, #4294967295
   8395c:	d232      	bcs.n	839c4 <__divdi3+0x294>
   8395e:	4589      	cmp	r9, r1
   83960:	d930      	bls.n	839c4 <__divdi3+0x294>
   83962:	3d02      	subs	r5, #2
   83964:	4461      	add	r1, ip
   83966:	ebc9 0101 	rsb	r1, r9, r1
   8396a:	fbb1 f3f0 	udiv	r3, r1, r0
   8396e:	fb00 1113 	mls	r1, r0, r3, r1
   83972:	fb07 f703 	mul.w	r7, r7, r3
   83976:	fa1f fe8e 	uxth.w	lr, lr
   8397a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   8397e:	4577      	cmp	r7, lr
   83980:	d908      	bls.n	83994 <__divdi3+0x264>
   83982:	eb1e 0e0c 	adds.w	lr, lr, ip
   83986:	f103 31ff 	add.w	r1, r3, #4294967295
   8398a:	d217      	bcs.n	839bc <__divdi3+0x28c>
   8398c:	4577      	cmp	r7, lr
   8398e:	d915      	bls.n	839bc <__divdi3+0x28c>
   83990:	3b02      	subs	r3, #2
   83992:	44e6      	add	lr, ip
   83994:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   83998:	fba3 8908 	umull	r8, r9, r3, r8
   8399c:	ebc7 0e0e 	rsb	lr, r7, lr
   839a0:	45ce      	cmp	lr, r9
   839a2:	d309      	bcc.n	839b8 <__divdi3+0x288>
   839a4:	d005      	beq.n	839b2 <__divdi3+0x282>
   839a6:	2200      	movs	r2, #0
   839a8:	e716      	b.n	837d8 <__divdi3+0xa8>
   839aa:	4610      	mov	r0, r2
   839ac:	e6f7      	b.n	8379e <__divdi3+0x6e>
   839ae:	4613      	mov	r3, r2
   839b0:	e70a      	b.n	837c8 <__divdi3+0x98>
   839b2:	4094      	lsls	r4, r2
   839b4:	4544      	cmp	r4, r8
   839b6:	d2f6      	bcs.n	839a6 <__divdi3+0x276>
   839b8:	3b01      	subs	r3, #1
   839ba:	e7f4      	b.n	839a6 <__divdi3+0x276>
   839bc:	460b      	mov	r3, r1
   839be:	e7e9      	b.n	83994 <__divdi3+0x264>
   839c0:	4610      	mov	r0, r2
   839c2:	e7a1      	b.n	83908 <__divdi3+0x1d8>
   839c4:	461d      	mov	r5, r3
   839c6:	e7ce      	b.n	83966 <__divdi3+0x236>
   839c8:	4601      	mov	r1, r0
   839ca:	e788      	b.n	838de <__divdi3+0x1ae>
   839cc:	4613      	mov	r3, r2
   839ce:	e703      	b.n	837d8 <__divdi3+0xa8>
   839d0:	3b02      	subs	r3, #2
   839d2:	e751      	b.n	83878 <__divdi3+0x148>
   839d4:	3802      	subs	r0, #2
   839d6:	443d      	add	r5, r7
   839d8:	e73a      	b.n	83850 <__divdi3+0x120>
   839da:	bf00      	nop

000839dc <__udivdi3>:
   839dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   839e0:	2b00      	cmp	r3, #0
   839e2:	d144      	bne.n	83a6e <__udivdi3+0x92>
   839e4:	428a      	cmp	r2, r1
   839e6:	4615      	mov	r5, r2
   839e8:	4604      	mov	r4, r0
   839ea:	d94f      	bls.n	83a8c <__udivdi3+0xb0>
   839ec:	fab2 f782 	clz	r7, r2
   839f0:	460e      	mov	r6, r1
   839f2:	b14f      	cbz	r7, 83a08 <__udivdi3+0x2c>
   839f4:	f1c7 0320 	rsb	r3, r7, #32
   839f8:	40b9      	lsls	r1, r7
   839fa:	fa20 f603 	lsr.w	r6, r0, r3
   839fe:	fa02 f507 	lsl.w	r5, r2, r7
   83a02:	430e      	orrs	r6, r1
   83a04:	fa00 f407 	lsl.w	r4, r0, r7
   83a08:	0c2f      	lsrs	r7, r5, #16
   83a0a:	fbb6 f0f7 	udiv	r0, r6, r7
   83a0e:	fa1f fe85 	uxth.w	lr, r5
   83a12:	fb07 6210 	mls	r2, r7, r0, r6
   83a16:	fb0e f100 	mul.w	r1, lr, r0
   83a1a:	0c26      	lsrs	r6, r4, #16
   83a1c:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   83a20:	4299      	cmp	r1, r3
   83a22:	d909      	bls.n	83a38 <__udivdi3+0x5c>
   83a24:	195b      	adds	r3, r3, r5
   83a26:	f100 32ff 	add.w	r2, r0, #4294967295
   83a2a:	f080 80ee 	bcs.w	83c0a <__udivdi3+0x22e>
   83a2e:	4299      	cmp	r1, r3
   83a30:	f240 80eb 	bls.w	83c0a <__udivdi3+0x22e>
   83a34:	3802      	subs	r0, #2
   83a36:	442b      	add	r3, r5
   83a38:	1a59      	subs	r1, r3, r1
   83a3a:	fbb1 f3f7 	udiv	r3, r1, r7
   83a3e:	fb07 1113 	mls	r1, r7, r3, r1
   83a42:	fb0e fe03 	mul.w	lr, lr, r3
   83a46:	b2a4      	uxth	r4, r4
   83a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   83a4c:	458e      	cmp	lr, r1
   83a4e:	d908      	bls.n	83a62 <__udivdi3+0x86>
   83a50:	1949      	adds	r1, r1, r5
   83a52:	f103 32ff 	add.w	r2, r3, #4294967295
   83a56:	f080 80da 	bcs.w	83c0e <__udivdi3+0x232>
   83a5a:	458e      	cmp	lr, r1
   83a5c:	f240 80d7 	bls.w	83c0e <__udivdi3+0x232>
   83a60:	3b02      	subs	r3, #2
   83a62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83a66:	2600      	movs	r6, #0
   83a68:	4631      	mov	r1, r6
   83a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a6e:	428b      	cmp	r3, r1
   83a70:	d847      	bhi.n	83b02 <__udivdi3+0x126>
   83a72:	fab3 f683 	clz	r6, r3
   83a76:	2e00      	cmp	r6, #0
   83a78:	d148      	bne.n	83b0c <__udivdi3+0x130>
   83a7a:	428b      	cmp	r3, r1
   83a7c:	d302      	bcc.n	83a84 <__udivdi3+0xa8>
   83a7e:	4282      	cmp	r2, r0
   83a80:	f200 80cf 	bhi.w	83c22 <__udivdi3+0x246>
   83a84:	2001      	movs	r0, #1
   83a86:	4631      	mov	r1, r6
   83a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a8c:	b912      	cbnz	r2, 83a94 <__udivdi3+0xb8>
   83a8e:	2501      	movs	r5, #1
   83a90:	fbb5 f5f2 	udiv	r5, r5, r2
   83a94:	fab5 fc85 	clz	ip, r5
   83a98:	f1bc 0f00 	cmp.w	ip, #0
   83a9c:	d178      	bne.n	83b90 <__udivdi3+0x1b4>
   83a9e:	1b49      	subs	r1, r1, r5
   83aa0:	0c2f      	lsrs	r7, r5, #16
   83aa2:	fa1f fe85 	uxth.w	lr, r5
   83aa6:	2601      	movs	r6, #1
   83aa8:	fbb1 f0f7 	udiv	r0, r1, r7
   83aac:	fb07 1110 	mls	r1, r7, r0, r1
   83ab0:	fb0e f200 	mul.w	r2, lr, r0
   83ab4:	0c23      	lsrs	r3, r4, #16
   83ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83aba:	428a      	cmp	r2, r1
   83abc:	d907      	bls.n	83ace <__udivdi3+0xf2>
   83abe:	1949      	adds	r1, r1, r5
   83ac0:	f100 33ff 	add.w	r3, r0, #4294967295
   83ac4:	d202      	bcs.n	83acc <__udivdi3+0xf0>
   83ac6:	428a      	cmp	r2, r1
   83ac8:	f200 80bc 	bhi.w	83c44 <__udivdi3+0x268>
   83acc:	4618      	mov	r0, r3
   83ace:	1a89      	subs	r1, r1, r2
   83ad0:	fbb1 f3f7 	udiv	r3, r1, r7
   83ad4:	fb07 1113 	mls	r1, r7, r3, r1
   83ad8:	fb0e fe03 	mul.w	lr, lr, r3
   83adc:	b2a4      	uxth	r4, r4
   83ade:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   83ae2:	4596      	cmp	lr, r2
   83ae4:	d908      	bls.n	83af8 <__udivdi3+0x11c>
   83ae6:	1952      	adds	r2, r2, r5
   83ae8:	f103 31ff 	add.w	r1, r3, #4294967295
   83aec:	f080 8091 	bcs.w	83c12 <__udivdi3+0x236>
   83af0:	4596      	cmp	lr, r2
   83af2:	f240 808e 	bls.w	83c12 <__udivdi3+0x236>
   83af6:	3b02      	subs	r3, #2
   83af8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83afc:	4631      	mov	r1, r6
   83afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b02:	2600      	movs	r6, #0
   83b04:	4630      	mov	r0, r6
   83b06:	4631      	mov	r1, r6
   83b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b0c:	f1c6 0420 	rsb	r4, r6, #32
   83b10:	fa22 f504 	lsr.w	r5, r2, r4
   83b14:	40b3      	lsls	r3, r6
   83b16:	432b      	orrs	r3, r5
   83b18:	fa21 f704 	lsr.w	r7, r1, r4
   83b1c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   83b20:	fbb7 fcf8 	udiv	ip, r7, r8
   83b24:	fa1f f983 	uxth.w	r9, r3
   83b28:	fb08 771c 	mls	r7, r8, ip, r7
   83b2c:	fa20 fe04 	lsr.w	lr, r0, r4
   83b30:	fa01 f506 	lsl.w	r5, r1, r6
   83b34:	fb09 f40c 	mul.w	r4, r9, ip
   83b38:	ea4e 0505 	orr.w	r5, lr, r5
   83b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   83b40:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   83b44:	42bc      	cmp	r4, r7
   83b46:	fa02 f206 	lsl.w	r2, r2, r6
   83b4a:	d904      	bls.n	83b56 <__udivdi3+0x17a>
   83b4c:	18ff      	adds	r7, r7, r3
   83b4e:	f10c 31ff 	add.w	r1, ip, #4294967295
   83b52:	d368      	bcc.n	83c26 <__udivdi3+0x24a>
   83b54:	468c      	mov	ip, r1
   83b56:	1b3f      	subs	r7, r7, r4
   83b58:	fbb7 f4f8 	udiv	r4, r7, r8
   83b5c:	fb08 7714 	mls	r7, r8, r4, r7
   83b60:	fb09 f904 	mul.w	r9, r9, r4
   83b64:	b2ad      	uxth	r5, r5
   83b66:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   83b6a:	4589      	cmp	r9, r1
   83b6c:	d904      	bls.n	83b78 <__udivdi3+0x19c>
   83b6e:	18c9      	adds	r1, r1, r3
   83b70:	f104 35ff 	add.w	r5, r4, #4294967295
   83b74:	d35d      	bcc.n	83c32 <__udivdi3+0x256>
   83b76:	462c      	mov	r4, r5
   83b78:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   83b7c:	fba4 2302 	umull	r2, r3, r4, r2
   83b80:	ebc9 0101 	rsb	r1, r9, r1
   83b84:	4299      	cmp	r1, r3
   83b86:	d349      	bcc.n	83c1c <__udivdi3+0x240>
   83b88:	d045      	beq.n	83c16 <__udivdi3+0x23a>
   83b8a:	4620      	mov	r0, r4
   83b8c:	2600      	movs	r6, #0
   83b8e:	e76b      	b.n	83a68 <__udivdi3+0x8c>
   83b90:	f1cc 0420 	rsb	r4, ip, #32
   83b94:	fa05 f50c 	lsl.w	r5, r5, ip
   83b98:	fa21 f304 	lsr.w	r3, r1, r4
   83b9c:	0c2a      	lsrs	r2, r5, #16
   83b9e:	fbb3 f6f2 	udiv	r6, r3, r2
   83ba2:	fa1f fe85 	uxth.w	lr, r5
   83ba6:	fb02 3816 	mls	r8, r2, r6, r3
   83baa:	fa20 f704 	lsr.w	r7, r0, r4
   83bae:	fa01 f10c 	lsl.w	r1, r1, ip
   83bb2:	fb0e f906 	mul.w	r9, lr, r6
   83bb6:	430f      	orrs	r7, r1
   83bb8:	0c3c      	lsrs	r4, r7, #16
   83bba:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   83bbe:	4599      	cmp	r9, r3
   83bc0:	fa00 f40c 	lsl.w	r4, r0, ip
   83bc4:	d907      	bls.n	83bd6 <__udivdi3+0x1fa>
   83bc6:	195b      	adds	r3, r3, r5
   83bc8:	f106 31ff 	add.w	r1, r6, #4294967295
   83bcc:	d238      	bcs.n	83c40 <__udivdi3+0x264>
   83bce:	4599      	cmp	r9, r3
   83bd0:	d936      	bls.n	83c40 <__udivdi3+0x264>
   83bd2:	3e02      	subs	r6, #2
   83bd4:	442b      	add	r3, r5
   83bd6:	ebc9 0303 	rsb	r3, r9, r3
   83bda:	fbb3 f0f2 	udiv	r0, r3, r2
   83bde:	fb02 3310 	mls	r3, r2, r0, r3
   83be2:	fb0e f100 	mul.w	r1, lr, r0
   83be6:	b2bf      	uxth	r7, r7
   83be8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   83bec:	4299      	cmp	r1, r3
   83bee:	d907      	bls.n	83c00 <__udivdi3+0x224>
   83bf0:	195b      	adds	r3, r3, r5
   83bf2:	f100 37ff 	add.w	r7, r0, #4294967295
   83bf6:	d221      	bcs.n	83c3c <__udivdi3+0x260>
   83bf8:	4299      	cmp	r1, r3
   83bfa:	d91f      	bls.n	83c3c <__udivdi3+0x260>
   83bfc:	3802      	subs	r0, #2
   83bfe:	442b      	add	r3, r5
   83c00:	4617      	mov	r7, r2
   83c02:	1a59      	subs	r1, r3, r1
   83c04:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   83c08:	e74e      	b.n	83aa8 <__udivdi3+0xcc>
   83c0a:	4610      	mov	r0, r2
   83c0c:	e714      	b.n	83a38 <__udivdi3+0x5c>
   83c0e:	4613      	mov	r3, r2
   83c10:	e727      	b.n	83a62 <__udivdi3+0x86>
   83c12:	460b      	mov	r3, r1
   83c14:	e770      	b.n	83af8 <__udivdi3+0x11c>
   83c16:	40b0      	lsls	r0, r6
   83c18:	4290      	cmp	r0, r2
   83c1a:	d2b6      	bcs.n	83b8a <__udivdi3+0x1ae>
   83c1c:	1e60      	subs	r0, r4, #1
   83c1e:	2600      	movs	r6, #0
   83c20:	e722      	b.n	83a68 <__udivdi3+0x8c>
   83c22:	4630      	mov	r0, r6
   83c24:	e720      	b.n	83a68 <__udivdi3+0x8c>
   83c26:	42bc      	cmp	r4, r7
   83c28:	d994      	bls.n	83b54 <__udivdi3+0x178>
   83c2a:	f1ac 0c02 	sub.w	ip, ip, #2
   83c2e:	441f      	add	r7, r3
   83c30:	e791      	b.n	83b56 <__udivdi3+0x17a>
   83c32:	4589      	cmp	r9, r1
   83c34:	d99f      	bls.n	83b76 <__udivdi3+0x19a>
   83c36:	3c02      	subs	r4, #2
   83c38:	4419      	add	r1, r3
   83c3a:	e79d      	b.n	83b78 <__udivdi3+0x19c>
   83c3c:	4638      	mov	r0, r7
   83c3e:	e7df      	b.n	83c00 <__udivdi3+0x224>
   83c40:	460e      	mov	r6, r1
   83c42:	e7c8      	b.n	83bd6 <__udivdi3+0x1fa>
   83c44:	3802      	subs	r0, #2
   83c46:	4429      	add	r1, r5
   83c48:	e741      	b.n	83ace <__udivdi3+0xf2>
   83c4a:	bf00      	nop
   83c4c:	64343025 	.word	0x64343025
   83c50:	2e766d20 	.word	0x2e766d20
   83c54:	20202020 	.word	0x20202020
   83c58:	00000000 	.word	0x00000000
   83c5c:	0000000d 	.word	0x0000000d
   83c60:	00000043 	.word	0x00000043

00083c64 <_global_impure_ptr>:
   83c64:	20070130 0000000a                       0.. ....

00083c6c <zeroes.6869>:
   83c6c:	30303030 30303030 30303030 30303030     0000000000000000
   83c7c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   83c8c:	00000000 33323130 37363534 62613938     ....0123456789ab
   83c9c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00083cac <blanks.6868>:
   83cac:	20202020 20202020 20202020 20202020                     

00083cbc <_init>:
   83cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83cbe:	bf00      	nop
   83cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83cc2:	bc08      	pop	{r3}
   83cc4:	469e      	mov	lr, r3
   83cc6:	4770      	bx	lr

00083cc8 <__init_array_start>:
   83cc8:	00081d2d 	.word	0x00081d2d

00083ccc <__frame_dummy_init_array_entry>:
   83ccc:	00080119                                ....

00083cd0 <_fini>:
   83cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83cd2:	bf00      	nop
   83cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83cd6:	bc08      	pop	{r3}
   83cd8:	469e      	mov	lr, r3
   83cda:	4770      	bx	lr

00083cdc <__fini_array_start>:
   83cdc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00083c60 00000000 00000000 00000000     `<..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	00083471                                q4..
