
PPM_PWM_Decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000428  20070000  00080704  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20070428  00080b2c  00020428  2**2
                  ALLOC
  3 .stack        00002004  200704b4  00080bb8  00020428  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020451  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000401e  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b74  00000000  00000000  000244c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001eb1  00000000  00000000  0002503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000420  00000000  00000000  00026eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003b0  00000000  00000000  0002730d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00002b28  00000000  00000000  000276bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005b9a  00000000  00000000  0002a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000612dc  00000000  00000000  0002fd7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000099c  00000000  00000000  0009105c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200724b8 	.word	0x200724b8
   80004:	000804e1 	.word	0x000804e1
   80008:	000804dd 	.word	0x000804dd
   8000c:	000804dd 	.word	0x000804dd
   80010:	000804dd 	.word	0x000804dd
   80014:	000804dd 	.word	0x000804dd
   80018:	000804dd 	.word	0x000804dd
	...
   8002c:	000804dd 	.word	0x000804dd
   80030:	000804dd 	.word	0x000804dd
   80034:	00000000 	.word	0x00000000
   80038:	000804dd 	.word	0x000804dd
   8003c:	000804dd 	.word	0x000804dd
   80040:	000804dd 	.word	0x000804dd
   80044:	000804dd 	.word	0x000804dd
   80048:	000804dd 	.word	0x000804dd
   8004c:	000804dd 	.word	0x000804dd
   80050:	000804dd 	.word	0x000804dd
   80054:	000804dd 	.word	0x000804dd
   80058:	000804dd 	.word	0x000804dd
   8005c:	000804dd 	.word	0x000804dd
   80060:	000804dd 	.word	0x000804dd
   80064:	000804dd 	.word	0x000804dd
   80068:	00000000 	.word	0x00000000
   8006c:	00080439 	.word	0x00080439
   80070:	0008044d 	.word	0x0008044d
   80074:	00080461 	.word	0x00080461
   80078:	00080475 	.word	0x00080475
	...
   80084:	000804dd 	.word	0x000804dd
   80088:	000804dd 	.word	0x000804dd
   8008c:	000804dd 	.word	0x000804dd
   80090:	000804dd 	.word	0x000804dd
   80094:	000804dd 	.word	0x000804dd
   80098:	000804dd 	.word	0x000804dd
   8009c:	000804dd 	.word	0x000804dd
   800a0:	000804dd 	.word	0x000804dd
   800a4:	00000000 	.word	0x00000000
   800a8:	000804dd 	.word	0x000804dd
   800ac:	000804dd 	.word	0x000804dd
   800b0:	000804dd 	.word	0x000804dd
   800b4:	000804dd 	.word	0x000804dd
   800b8:	000804dd 	.word	0x000804dd
   800bc:	000804dd 	.word	0x000804dd
   800c0:	000804dd 	.word	0x000804dd
   800c4:	000804dd 	.word	0x000804dd
   800c8:	000804dd 	.word	0x000804dd
   800cc:	000804dd 	.word	0x000804dd
   800d0:	000804dd 	.word	0x000804dd
   800d4:	000804dd 	.word	0x000804dd
   800d8:	000804dd 	.word	0x000804dd
   800dc:	000804dd 	.word	0x000804dd
   800e0:	000804dd 	.word	0x000804dd
   800e4:	000804dd 	.word	0x000804dd
   800e8:	000804dd 	.word	0x000804dd
   800ec:	000804dd 	.word	0x000804dd
   800f0:	000804dd 	.word	0x000804dd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070428 	.word	0x20070428
   80110:	00000000 	.word	0x00000000
   80114:	00080704 	.word	0x00080704

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007042c 	.word	0x2007042c
   80144:	00080704 	.word	0x00080704
   80148:	00080704 	.word	0x00080704
   8014c:	00000000 	.word	0x00000000

00080150 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80150:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80152:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80156:	4b16      	ldr	r3, [pc, #88]	; (801b0 <board_init+0x60>)
   80158:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8015a:	200b      	movs	r0, #11
   8015c:	4c15      	ldr	r4, [pc, #84]	; (801b4 <board_init+0x64>)
   8015e:	47a0      	blx	r4
   80160:	200c      	movs	r0, #12
   80162:	47a0      	blx	r4
   80164:	200d      	movs	r0, #13
   80166:	47a0      	blx	r4
   80168:	200e      	movs	r0, #14
   8016a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8016c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80170:	203b      	movs	r0, #59	; 0x3b
   80172:	4c11      	ldr	r4, [pc, #68]	; (801b8 <board_init+0x68>)
   80174:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80176:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8017a:	2055      	movs	r0, #85	; 0x55
   8017c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8017e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80182:	2056      	movs	r0, #86	; 0x56
   80184:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80186:	490d      	ldr	r1, [pc, #52]	; (801bc <board_init+0x6c>)
   80188:	2068      	movs	r0, #104	; 0x68
   8018a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8018c:	490c      	ldr	r1, [pc, #48]	; (801c0 <board_init+0x70>)
   8018e:	205c      	movs	r0, #92	; 0x5c
   80190:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80192:	4a0c      	ldr	r2, [pc, #48]	; (801c4 <board_init+0x74>)
   80194:	f44f 7140 	mov.w	r1, #768	; 0x300
   80198:	480b      	ldr	r0, [pc, #44]	; (801c8 <board_init+0x78>)
   8019a:	4b0c      	ldr	r3, [pc, #48]	; (801cc <board_init+0x7c>)
   8019c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8019e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801a2:	202b      	movs	r0, #43	; 0x2b
   801a4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   801a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801aa:	202a      	movs	r0, #42	; 0x2a
   801ac:	47a0      	blx	r4
   801ae:	bd10      	pop	{r4, pc}
   801b0:	400e1a50 	.word	0x400e1a50
   801b4:	00080489 	.word	0x00080489
   801b8:	00080275 	.word	0x00080275
   801bc:	28000079 	.word	0x28000079
   801c0:	28000001 	.word	0x28000001
   801c4:	08000001 	.word	0x08000001
   801c8:	400e0e00 	.word	0x400e0e00
   801cc:	00080349 	.word	0x00080349

000801d0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   801d0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   801d2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   801d6:	d016      	beq.n	80206 <pio_set_peripheral+0x36>
   801d8:	d804      	bhi.n	801e4 <pio_set_peripheral+0x14>
   801da:	b1c1      	cbz	r1, 8020e <pio_set_peripheral+0x3e>
   801dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   801e0:	d00a      	beq.n	801f8 <pio_set_peripheral+0x28>
   801e2:	e013      	b.n	8020c <pio_set_peripheral+0x3c>
   801e4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   801e8:	d011      	beq.n	8020e <pio_set_peripheral+0x3e>
   801ea:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   801ee:	d00e      	beq.n	8020e <pio_set_peripheral+0x3e>
   801f0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   801f4:	d10a      	bne.n	8020c <pio_set_peripheral+0x3c>
   801f6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   801f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   801fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
   801fc:	400b      	ands	r3, r1
   801fe:	ea23 0302 	bic.w	r3, r3, r2
   80202:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80204:	e002      	b.n	8020c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80206:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80208:	4313      	orrs	r3, r2
   8020a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8020c:	6042      	str	r2, [r0, #4]
   8020e:	4770      	bx	lr

00080210 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80210:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80212:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80216:	bf14      	ite	ne
   80218:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8021a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8021c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80220:	bf14      	ite	ne
   80222:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80224:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80226:	f012 0f02 	tst.w	r2, #2
   8022a:	d002      	beq.n	80232 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8022c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80230:	e004      	b.n	8023c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80232:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80236:	bf18      	it	ne
   80238:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8023c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8023e:	6001      	str	r1, [r0, #0]
   80240:	4770      	bx	lr
   80242:	bf00      	nop

00080244 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80244:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80246:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80248:	9c01      	ldr	r4, [sp, #4]
   8024a:	b10c      	cbz	r4, 80250 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8024c:	6641      	str	r1, [r0, #100]	; 0x64
   8024e:	e000      	b.n	80252 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80250:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80252:	b10b      	cbz	r3, 80258 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80254:	6501      	str	r1, [r0, #80]	; 0x50
   80256:	e000      	b.n	8025a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80258:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8025a:	b10a      	cbz	r2, 80260 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8025c:	6301      	str	r1, [r0, #48]	; 0x30
   8025e:	e000      	b.n	80262 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80260:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80262:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80264:	6001      	str	r1, [r0, #0]
}
   80266:	bc10      	pop	{r4}
   80268:	4770      	bx	lr
   8026a:	bf00      	nop

0008026c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8026c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8026e:	4770      	bx	lr

00080270 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80270:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80272:	4770      	bx	lr

00080274 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80274:	b570      	push	{r4, r5, r6, lr}
   80276:	b082      	sub	sp, #8
   80278:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8027a:	0943      	lsrs	r3, r0, #5
   8027c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80280:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80284:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80286:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8028a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8028e:	d030      	beq.n	802f2 <pio_configure_pin+0x7e>
   80290:	d806      	bhi.n	802a0 <pio_configure_pin+0x2c>
   80292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80296:	d00a      	beq.n	802ae <pio_configure_pin+0x3a>
   80298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8029c:	d018      	beq.n	802d0 <pio_configure_pin+0x5c>
   8029e:	e049      	b.n	80334 <pio_configure_pin+0xc0>
   802a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   802a4:	d030      	beq.n	80308 <pio_configure_pin+0x94>
   802a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   802aa:	d02d      	beq.n	80308 <pio_configure_pin+0x94>
   802ac:	e042      	b.n	80334 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   802ae:	f000 001f 	and.w	r0, r0, #31
   802b2:	2601      	movs	r6, #1
   802b4:	4086      	lsls	r6, r0
   802b6:	4632      	mov	r2, r6
   802b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802bc:	4620      	mov	r0, r4
   802be:	4b1f      	ldr	r3, [pc, #124]	; (8033c <pio_configure_pin+0xc8>)
   802c0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802c2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802c6:	bf14      	ite	ne
   802c8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802ca:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	e032      	b.n	80336 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   802d0:	f000 001f 	and.w	r0, r0, #31
   802d4:	2601      	movs	r6, #1
   802d6:	4086      	lsls	r6, r0
   802d8:	4632      	mov	r2, r6
   802da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802de:	4620      	mov	r0, r4
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <pio_configure_pin+0xc8>)
   802e2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802e4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802e8:	bf14      	ite	ne
   802ea:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802ec:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802ee:	2001      	movs	r0, #1
   802f0:	e021      	b.n	80336 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   802f2:	f000 011f 	and.w	r1, r0, #31
   802f6:	2601      	movs	r6, #1
   802f8:	462a      	mov	r2, r5
   802fa:	fa06 f101 	lsl.w	r1, r6, r1
   802fe:	4620      	mov	r0, r4
   80300:	4b0f      	ldr	r3, [pc, #60]	; (80340 <pio_configure_pin+0xcc>)
   80302:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80304:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80306:	e016      	b.n	80336 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80308:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   8030c:	f000 011f 	and.w	r1, r0, #31
   80310:	2601      	movs	r6, #1
   80312:	ea05 0306 	and.w	r3, r5, r6
   80316:	9300      	str	r3, [sp, #0]
   80318:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8031c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80320:	bf14      	ite	ne
   80322:	2200      	movne	r2, #0
   80324:	2201      	moveq	r2, #1
   80326:	fa06 f101 	lsl.w	r1, r6, r1
   8032a:	4620      	mov	r0, r4
   8032c:	4c05      	ldr	r4, [pc, #20]	; (80344 <pio_configure_pin+0xd0>)
   8032e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80330:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80332:	e000      	b.n	80336 <pio_configure_pin+0xc2>

	default:
		return 0;
   80334:	2000      	movs	r0, #0
	}

	return 1;
}
   80336:	b002      	add	sp, #8
   80338:	bd70      	pop	{r4, r5, r6, pc}
   8033a:	bf00      	nop
   8033c:	000801d1 	.word	0x000801d1
   80340:	00080211 	.word	0x00080211
   80344:	00080245 	.word	0x00080245

00080348 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80348:	b570      	push	{r4, r5, r6, lr}
   8034a:	b082      	sub	sp, #8
   8034c:	4605      	mov	r5, r0
   8034e:	460e      	mov	r6, r1
   80350:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80352:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80356:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8035a:	d026      	beq.n	803aa <pio_configure_pin_group+0x62>
   8035c:	d806      	bhi.n	8036c <pio_configure_pin_group+0x24>
   8035e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80362:	d00a      	beq.n	8037a <pio_configure_pin_group+0x32>
   80364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80368:	d013      	beq.n	80392 <pio_configure_pin_group+0x4a>
   8036a:	e034      	b.n	803d6 <pio_configure_pin_group+0x8e>
   8036c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80370:	d01f      	beq.n	803b2 <pio_configure_pin_group+0x6a>
   80372:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80376:	d01c      	beq.n	803b2 <pio_configure_pin_group+0x6a>
   80378:	e02d      	b.n	803d6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8037a:	460a      	mov	r2, r1
   8037c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80380:	4b16      	ldr	r3, [pc, #88]	; (803dc <pio_configure_pin_group+0x94>)
   80382:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80384:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80388:	bf14      	ite	ne
   8038a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8038c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8038e:	2001      	movs	r0, #1
   80390:	e022      	b.n	803d8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80392:	460a      	mov	r2, r1
   80394:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80398:	4b10      	ldr	r3, [pc, #64]	; (803dc <pio_configure_pin_group+0x94>)
   8039a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8039c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   803a0:	bf14      	ite	ne
   803a2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803a4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803a6:	2001      	movs	r0, #1
   803a8:	e016      	b.n	803d8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   803aa:	4b0d      	ldr	r3, [pc, #52]	; (803e0 <pio_configure_pin_group+0x98>)
   803ac:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803ae:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   803b0:	e012      	b.n	803d8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   803b2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   803b6:	f004 0301 	and.w	r3, r4, #1
   803ba:	9300      	str	r3, [sp, #0]
   803bc:	f3c4 0380 	ubfx	r3, r4, #2, #1
   803c0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803c4:	bf14      	ite	ne
   803c6:	2200      	movne	r2, #0
   803c8:	2201      	moveq	r2, #1
   803ca:	4631      	mov	r1, r6
   803cc:	4628      	mov	r0, r5
   803ce:	4c05      	ldr	r4, [pc, #20]	; (803e4 <pio_configure_pin_group+0x9c>)
   803d0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   803d2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   803d4:	e000      	b.n	803d8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   803d6:	2000      	movs	r0, #0
	}

	return 1;
}
   803d8:	b002      	add	sp, #8
   803da:	bd70      	pop	{r4, r5, r6, pc}
   803dc:	000801d1 	.word	0x000801d1
   803e0:	00080211 	.word	0x00080211
   803e4:	00080245 	.word	0x00080245

000803e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   803e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803ec:	4604      	mov	r4, r0
   803ee:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   803f0:	4b0e      	ldr	r3, [pc, #56]	; (8042c <pio_handler_process+0x44>)
   803f2:	4798      	blx	r3
   803f4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   803f6:	4620      	mov	r0, r4
   803f8:	4b0d      	ldr	r3, [pc, #52]	; (80430 <pio_handler_process+0x48>)
   803fa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   803fc:	4005      	ands	r5, r0
   803fe:	d013      	beq.n	80428 <pio_handler_process+0x40>
   80400:	4c0c      	ldr	r4, [pc, #48]	; (80434 <pio_handler_process+0x4c>)
   80402:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80406:	6823      	ldr	r3, [r4, #0]
   80408:	4543      	cmp	r3, r8
   8040a:	d108      	bne.n	8041e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8040c:	6861      	ldr	r1, [r4, #4]
   8040e:	4229      	tst	r1, r5
   80410:	d005      	beq.n	8041e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80412:	68e3      	ldr	r3, [r4, #12]
   80414:	4640      	mov	r0, r8
   80416:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80418:	6863      	ldr	r3, [r4, #4]
   8041a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8041e:	42b4      	cmp	r4, r6
   80420:	d002      	beq.n	80428 <pio_handler_process+0x40>
   80422:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80424:	2d00      	cmp	r5, #0
   80426:	d1ee      	bne.n	80406 <pio_handler_process+0x1e>
   80428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8042c:	0008026d 	.word	0x0008026d
   80430:	00080271 	.word	0x00080271
   80434:	20070444 	.word	0x20070444

00080438 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80438:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8043a:	210b      	movs	r1, #11
   8043c:	4801      	ldr	r0, [pc, #4]	; (80444 <PIOA_Handler+0xc>)
   8043e:	4b02      	ldr	r3, [pc, #8]	; (80448 <PIOA_Handler+0x10>)
   80440:	4798      	blx	r3
   80442:	bd08      	pop	{r3, pc}
   80444:	400e0e00 	.word	0x400e0e00
   80448:	000803e9 	.word	0x000803e9

0008044c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8044c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8044e:	210c      	movs	r1, #12
   80450:	4801      	ldr	r0, [pc, #4]	; (80458 <PIOB_Handler+0xc>)
   80452:	4b02      	ldr	r3, [pc, #8]	; (8045c <PIOB_Handler+0x10>)
   80454:	4798      	blx	r3
   80456:	bd08      	pop	{r3, pc}
   80458:	400e1000 	.word	0x400e1000
   8045c:	000803e9 	.word	0x000803e9

00080460 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80460:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80462:	210d      	movs	r1, #13
   80464:	4801      	ldr	r0, [pc, #4]	; (8046c <PIOC_Handler+0xc>)
   80466:	4b02      	ldr	r3, [pc, #8]	; (80470 <PIOC_Handler+0x10>)
   80468:	4798      	blx	r3
   8046a:	bd08      	pop	{r3, pc}
   8046c:	400e1200 	.word	0x400e1200
   80470:	000803e9 	.word	0x000803e9

00080474 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80474:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80476:	210e      	movs	r1, #14
   80478:	4801      	ldr	r0, [pc, #4]	; (80480 <PIOD_Handler+0xc>)
   8047a:	4b02      	ldr	r3, [pc, #8]	; (80484 <PIOD_Handler+0x10>)
   8047c:	4798      	blx	r3
   8047e:	bd08      	pop	{r3, pc}
   80480:	400e1400 	.word	0x400e1400
   80484:	000803e9 	.word	0x000803e9

00080488 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80488:	282c      	cmp	r0, #44	; 0x2c
   8048a:	d81e      	bhi.n	804ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8048c:	281f      	cmp	r0, #31
   8048e:	d80c      	bhi.n	804aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80490:	4b11      	ldr	r3, [pc, #68]	; (804d8 <pmc_enable_periph_clk+0x50>)
   80492:	699a      	ldr	r2, [r3, #24]
   80494:	2301      	movs	r3, #1
   80496:	4083      	lsls	r3, r0
   80498:	4393      	bics	r3, r2
   8049a:	d018      	beq.n	804ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8049c:	2301      	movs	r3, #1
   8049e:	fa03 f000 	lsl.w	r0, r3, r0
   804a2:	4b0d      	ldr	r3, [pc, #52]	; (804d8 <pmc_enable_periph_clk+0x50>)
   804a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   804a6:	2000      	movs	r0, #0
   804a8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   804aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   804ac:	4b0a      	ldr	r3, [pc, #40]	; (804d8 <pmc_enable_periph_clk+0x50>)
   804ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   804b2:	2301      	movs	r3, #1
   804b4:	4083      	lsls	r3, r0
   804b6:	4393      	bics	r3, r2
   804b8:	d00b      	beq.n	804d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   804ba:	2301      	movs	r3, #1
   804bc:	fa03 f000 	lsl.w	r0, r3, r0
   804c0:	4b05      	ldr	r3, [pc, #20]	; (804d8 <pmc_enable_periph_clk+0x50>)
   804c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   804c6:	2000      	movs	r0, #0
   804c8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   804ca:	2001      	movs	r0, #1
   804cc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   804ce:	2000      	movs	r0, #0
   804d0:	4770      	bx	lr
   804d2:	2000      	movs	r0, #0
}
   804d4:	4770      	bx	lr
   804d6:	bf00      	nop
   804d8:	400e0600 	.word	0x400e0600

000804dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804dc:	e7fe      	b.n	804dc <Dummy_Handler>
   804de:	bf00      	nop

000804e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   804e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   804e2:	4b1e      	ldr	r3, [pc, #120]	; (8055c <Reset_Handler+0x7c>)
   804e4:	4a1e      	ldr	r2, [pc, #120]	; (80560 <Reset_Handler+0x80>)
   804e6:	429a      	cmp	r2, r3
   804e8:	d003      	beq.n	804f2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   804ea:	4b1e      	ldr	r3, [pc, #120]	; (80564 <Reset_Handler+0x84>)
   804ec:	4a1b      	ldr	r2, [pc, #108]	; (8055c <Reset_Handler+0x7c>)
   804ee:	429a      	cmp	r2, r3
   804f0:	d304      	bcc.n	804fc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   804f2:	4b1d      	ldr	r3, [pc, #116]	; (80568 <Reset_Handler+0x88>)
   804f4:	4a1d      	ldr	r2, [pc, #116]	; (8056c <Reset_Handler+0x8c>)
   804f6:	429a      	cmp	r2, r3
   804f8:	d30f      	bcc.n	8051a <Reset_Handler+0x3a>
   804fa:	e01a      	b.n	80532 <Reset_Handler+0x52>
   804fc:	4917      	ldr	r1, [pc, #92]	; (8055c <Reset_Handler+0x7c>)
   804fe:	4b1c      	ldr	r3, [pc, #112]	; (80570 <Reset_Handler+0x90>)
   80500:	1a5b      	subs	r3, r3, r1
   80502:	f023 0303 	bic.w	r3, r3, #3
   80506:	3304      	adds	r3, #4
   80508:	4a15      	ldr	r2, [pc, #84]	; (80560 <Reset_Handler+0x80>)
   8050a:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8050c:	f852 0b04 	ldr.w	r0, [r2], #4
   80510:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80514:	429a      	cmp	r2, r3
   80516:	d1f9      	bne.n	8050c <Reset_Handler+0x2c>
   80518:	e7eb      	b.n	804f2 <Reset_Handler+0x12>
   8051a:	4b16      	ldr	r3, [pc, #88]	; (80574 <Reset_Handler+0x94>)
   8051c:	4a16      	ldr	r2, [pc, #88]	; (80578 <Reset_Handler+0x98>)
   8051e:	1ad2      	subs	r2, r2, r3
   80520:	f022 0203 	bic.w	r2, r2, #3
   80524:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80526:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80528:	2100      	movs	r1, #0
   8052a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8052e:	4293      	cmp	r3, r2
   80530:	d1fb      	bne.n	8052a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80532:	4b12      	ldr	r3, [pc, #72]	; (8057c <Reset_Handler+0x9c>)
   80534:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80538:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8053c:	4910      	ldr	r1, [pc, #64]	; (80580 <Reset_Handler+0xa0>)
   8053e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80540:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80548:	d203      	bcs.n	80552 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8054a:	688b      	ldr	r3, [r1, #8]
   8054c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80550:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80552:	4b0c      	ldr	r3, [pc, #48]	; (80584 <Reset_Handler+0xa4>)
   80554:	4798      	blx	r3

	/* Branch to main function */
	main();
   80556:	4b0c      	ldr	r3, [pc, #48]	; (80588 <Reset_Handler+0xa8>)
   80558:	4798      	blx	r3
   8055a:	e7fe      	b.n	8055a <Reset_Handler+0x7a>
   8055c:	20070000 	.word	0x20070000
   80560:	00080704 	.word	0x00080704
   80564:	20070428 	.word	0x20070428
   80568:	200704b4 	.word	0x200704b4
   8056c:	20070428 	.word	0x20070428
   80570:	20070427 	.word	0x20070427
   80574:	2007042c 	.word	0x2007042c
   80578:	200704b7 	.word	0x200704b7
   8057c:	00080000 	.word	0x00080000
   80580:	e000ed00 	.word	0xe000ed00
   80584:	0008059d 	.word	0x0008059d
   80588:	0008058d 	.word	0x0008058d

0008058c <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
   8058c:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   8058e:	4b02      	ldr	r3, [pc, #8]	; (80598 <main+0xc>)
   80590:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
   80592:	2000      	movs	r0, #0
   80594:	bd08      	pop	{r3, pc}
   80596:	bf00      	nop
   80598:	00080151 	.word	0x00080151

0008059c <__libc_init_array>:
   8059c:	b570      	push	{r4, r5, r6, lr}
   8059e:	4e0f      	ldr	r6, [pc, #60]	; (805dc <__libc_init_array+0x40>)
   805a0:	4d0f      	ldr	r5, [pc, #60]	; (805e0 <__libc_init_array+0x44>)
   805a2:	1b76      	subs	r6, r6, r5
   805a4:	10b6      	asrs	r6, r6, #2
   805a6:	bf18      	it	ne
   805a8:	2400      	movne	r4, #0
   805aa:	d005      	beq.n	805b8 <__libc_init_array+0x1c>
   805ac:	3401      	adds	r4, #1
   805ae:	f855 3b04 	ldr.w	r3, [r5], #4
   805b2:	4798      	blx	r3
   805b4:	42a6      	cmp	r6, r4
   805b6:	d1f9      	bne.n	805ac <__libc_init_array+0x10>
   805b8:	4e0a      	ldr	r6, [pc, #40]	; (805e4 <__libc_init_array+0x48>)
   805ba:	4d0b      	ldr	r5, [pc, #44]	; (805e8 <__libc_init_array+0x4c>)
   805bc:	f000 f890 	bl	806e0 <_init>
   805c0:	1b76      	subs	r6, r6, r5
   805c2:	10b6      	asrs	r6, r6, #2
   805c4:	bf18      	it	ne
   805c6:	2400      	movne	r4, #0
   805c8:	d006      	beq.n	805d8 <__libc_init_array+0x3c>
   805ca:	3401      	adds	r4, #1
   805cc:	f855 3b04 	ldr.w	r3, [r5], #4
   805d0:	4798      	blx	r3
   805d2:	42a6      	cmp	r6, r4
   805d4:	d1f9      	bne.n	805ca <__libc_init_array+0x2e>
   805d6:	bd70      	pop	{r4, r5, r6, pc}
   805d8:	bd70      	pop	{r4, r5, r6, pc}
   805da:	bf00      	nop
   805dc:	000806ec 	.word	0x000806ec
   805e0:	000806ec 	.word	0x000806ec
   805e4:	000806f4 	.word	0x000806f4
   805e8:	000806ec 	.word	0x000806ec

000805ec <register_fini>:
   805ec:	4b02      	ldr	r3, [pc, #8]	; (805f8 <register_fini+0xc>)
   805ee:	b113      	cbz	r3, 805f6 <register_fini+0xa>
   805f0:	4802      	ldr	r0, [pc, #8]	; (805fc <register_fini+0x10>)
   805f2:	f000 b805 	b.w	80600 <atexit>
   805f6:	4770      	bx	lr
   805f8:	00000000 	.word	0x00000000
   805fc:	0008060d 	.word	0x0008060d

00080600 <atexit>:
   80600:	2300      	movs	r3, #0
   80602:	4601      	mov	r1, r0
   80604:	461a      	mov	r2, r3
   80606:	4618      	mov	r0, r3
   80608:	f000 b814 	b.w	80634 <__register_exitproc>

0008060c <__libc_fini_array>:
   8060c:	b538      	push	{r3, r4, r5, lr}
   8060e:	4d07      	ldr	r5, [pc, #28]	; (8062c <__libc_fini_array+0x20>)
   80610:	4c07      	ldr	r4, [pc, #28]	; (80630 <__libc_fini_array+0x24>)
   80612:	1b2c      	subs	r4, r5, r4
   80614:	10a4      	asrs	r4, r4, #2
   80616:	d005      	beq.n	80624 <__libc_fini_array+0x18>
   80618:	3c01      	subs	r4, #1
   8061a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8061e:	4798      	blx	r3
   80620:	2c00      	cmp	r4, #0
   80622:	d1f9      	bne.n	80618 <__libc_fini_array+0xc>
   80624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80628:	f000 b864 	b.w	806f4 <_fini>
   8062c:	00080704 	.word	0x00080704
   80630:	00080700 	.word	0x00080700

00080634 <__register_exitproc>:
   80634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80638:	4c25      	ldr	r4, [pc, #148]	; (806d0 <__register_exitproc+0x9c>)
   8063a:	4606      	mov	r6, r0
   8063c:	6825      	ldr	r5, [r4, #0]
   8063e:	4688      	mov	r8, r1
   80640:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   80644:	4692      	mov	sl, r2
   80646:	4699      	mov	r9, r3
   80648:	b3c4      	cbz	r4, 806bc <__register_exitproc+0x88>
   8064a:	6860      	ldr	r0, [r4, #4]
   8064c:	281f      	cmp	r0, #31
   8064e:	dc17      	bgt.n	80680 <__register_exitproc+0x4c>
   80650:	1c41      	adds	r1, r0, #1
   80652:	b176      	cbz	r6, 80672 <__register_exitproc+0x3e>
   80654:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80658:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8065c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   80660:	2201      	movs	r2, #1
   80662:	4082      	lsls	r2, r0
   80664:	4315      	orrs	r5, r2
   80666:	2e02      	cmp	r6, #2
   80668:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8066c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   80670:	d01e      	beq.n	806b0 <__register_exitproc+0x7c>
   80672:	1c83      	adds	r3, r0, #2
   80674:	6061      	str	r1, [r4, #4]
   80676:	2000      	movs	r0, #0
   80678:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8067c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80680:	4b14      	ldr	r3, [pc, #80]	; (806d4 <__register_exitproc+0xa0>)
   80682:	b303      	cbz	r3, 806c6 <__register_exitproc+0x92>
   80684:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80688:	f3af 8000 	nop.w
   8068c:	4604      	mov	r4, r0
   8068e:	b1d0      	cbz	r0, 806c6 <__register_exitproc+0x92>
   80690:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   80694:	2700      	movs	r7, #0
   80696:	e884 0088 	stmia.w	r4, {r3, r7}
   8069a:	4638      	mov	r0, r7
   8069c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   806a0:	2101      	movs	r1, #1
   806a2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   806a6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   806aa:	2e00      	cmp	r6, #0
   806ac:	d0e1      	beq.n	80672 <__register_exitproc+0x3e>
   806ae:	e7d1      	b.n	80654 <__register_exitproc+0x20>
   806b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   806b4:	431a      	orrs	r2, r3
   806b6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   806ba:	e7da      	b.n	80672 <__register_exitproc+0x3e>
   806bc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   806c0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   806c4:	e7c1      	b.n	8064a <__register_exitproc+0x16>
   806c6:	f04f 30ff 	mov.w	r0, #4294967295
   806ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   806ce:	bf00      	nop
   806d0:	000806dc 	.word	0x000806dc
   806d4:	00000000 	.word	0x00000000
   806d8:	00000043 	.word	0x00000043

000806dc <_global_impure_ptr>:
   806dc:	20070000                                ... 

000806e0 <_init>:
   806e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806e2:	bf00      	nop
   806e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   806e6:	bc08      	pop	{r3}
   806e8:	469e      	mov	lr, r3
   806ea:	4770      	bx	lr

000806ec <__init_array_start>:
   806ec:	000805ed 	.word	0x000805ed

000806f0 <__frame_dummy_init_array_entry>:
   806f0:	00080119                                ....

000806f4 <_fini>:
   806f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806f6:	bf00      	nop
   806f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   806fa:	bc08      	pop	{r3}
   806fc:	469e      	mov	lr, r3
   806fe:	4770      	bx	lr

00080700 <__fini_array_start>:
   80700:	000800f5 	.word	0x000800f5
