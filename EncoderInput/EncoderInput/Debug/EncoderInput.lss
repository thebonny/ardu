
EncoderInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cb8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083cb8  00083cb8  0000bcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00083cc0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000dc  20070994  00084654  00010994  2**2
                  ALLOC
  4 .stack        00002000  20070a70  00084730  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009172  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019db  00000000  00000000  00019b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000039cc  00000000  00000000  0001b565  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d8  00000000  00000000  0001ef31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f8  00000000  00000000  0001f809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015e7b  00000000  00000000  00020001  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a975  00000000  00000000  00035e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062b47  00000000  00000000  000407f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f54  00000000  00000000  000a3338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a70 	.word	0x20072a70
   80004:	0008085d 	.word	0x0008085d
   80008:	00080859 	.word	0x00080859
   8000c:	00080859 	.word	0x00080859
   80010:	00080859 	.word	0x00080859
   80014:	00080859 	.word	0x00080859
   80018:	00080859 	.word	0x00080859
	...
   8002c:	00080859 	.word	0x00080859
   80030:	00080859 	.word	0x00080859
   80034:	00000000 	.word	0x00000000
   80038:	00080859 	.word	0x00080859
   8003c:	00080859 	.word	0x00080859
   80040:	00080859 	.word	0x00080859
   80044:	00080859 	.word	0x00080859
   80048:	00080859 	.word	0x00080859
   8004c:	00080859 	.word	0x00080859
   80050:	00080859 	.word	0x00080859
   80054:	00080859 	.word	0x00080859
   80058:	00080859 	.word	0x00080859
   8005c:	00080859 	.word	0x00080859
   80060:	00080859 	.word	0x00080859
   80064:	00080859 	.word	0x00080859
   80068:	00000000 	.word	0x00000000
   8006c:	00080649 	.word	0x00080649
   80070:	0008065d 	.word	0x0008065d
   80074:	00080671 	.word	0x00080671
   80078:	00080685 	.word	0x00080685
	...
   80084:	00080859 	.word	0x00080859
   80088:	00080859 	.word	0x00080859
   8008c:	00080859 	.word	0x00080859
   80090:	00080859 	.word	0x00080859
   80094:	00080859 	.word	0x00080859
   80098:	00080859 	.word	0x00080859
   8009c:	00080859 	.word	0x00080859
   800a0:	00080859 	.word	0x00080859
   800a4:	00000000 	.word	0x00000000
   800a8:	00080859 	.word	0x00080859
   800ac:	00080859 	.word	0x00080859
   800b0:	00080859 	.word	0x00080859
   800b4:	00080859 	.word	0x00080859
   800b8:	00080859 	.word	0x00080859
   800bc:	00080859 	.word	0x00080859
   800c0:	00080859 	.word	0x00080859
   800c4:	00080859 	.word	0x00080859
   800c8:	00080859 	.word	0x00080859
   800cc:	00080859 	.word	0x00080859
   800d0:	00080859 	.word	0x00080859
   800d4:	00080859 	.word	0x00080859
   800d8:	00080859 	.word	0x00080859
   800dc:	00080859 	.word	0x00080859
   800e0:	00080859 	.word	0x00080859
   800e4:	00080859 	.word	0x00080859
   800e8:	00080859 	.word	0x00080859
   800ec:	00080859 	.word	0x00080859
   800f0:	00080859 	.word	0x00080859

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00083cc0 	.word	0x00083cc0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00083cc0 	.word	0x00083cc0
   80144:	20070998 	.word	0x20070998
   80148:	00083cc0 	.word	0x00083cc0
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b9a8      	cbnz	r0, 8017e <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0a      	ble.n	80174 <_read+0x24>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42bc      	cmp	r4, r7
   80170:	d1f8      	bne.n	80164 <_read+0x14>
   80172:	e001      	b.n	80178 <_read+0x28>
   80174:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80178:	4640      	mov	r0, r8
   8017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8017e:	f04f 30ff 	mov.w	r0, #4294967295
   80182:	4770      	bx	lr
   80184:	20070a68 	.word	0x20070a68
   80188:	20070a60 	.word	0x20070a60

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801b8:	3801      	subs	r0, #1
   801ba:	2802      	cmp	r0, #2
   801bc:	d818      	bhi.n	801f0 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801c2:	460e      	mov	r6, r1
   801c4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801c6:	b182      	cbz	r2, 801ea <_write+0x32>
   801c8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80204 <_write+0x4c>
   801ce:	4f0c      	ldr	r7, [pc, #48]	; (80200 <_write+0x48>)
   801d0:	f8d8 0000 	ldr.w	r0, [r8]
   801d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   801d8:	683b      	ldr	r3, [r7, #0]
   801da:	4798      	blx	r3
   801dc:	2800      	cmp	r0, #0
   801de:	db0a      	blt.n	801f6 <_write+0x3e>
   801e0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801e2:	3c01      	subs	r4, #1
   801e4:	d1f4      	bne.n	801d0 <_write+0x18>
   801e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801ea:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   801ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   801f0:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   801f4:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   801f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801fe:	bf00      	nop
   80200:	20070a64 	.word	0x20070a64
   80204:	20070a68 	.word	0x20070a68

00080208 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80208:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8020a:	23ac      	movs	r3, #172	; 0xac
   8020c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8020e:	680b      	ldr	r3, [r1, #0]
   80210:	684a      	ldr	r2, [r1, #4]
   80212:	fbb3 f3f2 	udiv	r3, r3, r2
   80216:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80218:	1e5c      	subs	r4, r3, #1
   8021a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8021e:	4294      	cmp	r4, r2
   80220:	d80a      	bhi.n	80238 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80222:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80224:	688b      	ldr	r3, [r1, #8]
   80226:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80228:	f240 2302 	movw	r3, #514	; 0x202
   8022c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80230:	2350      	movs	r3, #80	; 0x50
   80232:	6003      	str	r3, [r0, #0]

	return 0;
   80234:	2000      	movs	r0, #0
   80236:	e000      	b.n	8023a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80238:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8023a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8023e:	4770      	bx	lr

00080240 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80240:	6943      	ldr	r3, [r0, #20]
   80242:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80246:	bf1a      	itte	ne
   80248:	61c1      	strne	r1, [r0, #28]
	return 0;
   8024a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8024c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8024e:	4770      	bx	lr

00080250 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80250:	6943      	ldr	r3, [r0, #20]
   80252:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80256:	bf1d      	ittte	ne
   80258:	6983      	ldrne	r3, [r0, #24]
   8025a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8025c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8025e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80260:	4770      	bx	lr
   80262:	bf00      	nop

00080264 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80264:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80266:	480e      	ldr	r0, [pc, #56]	; (802a0 <sysclk_init+0x3c>)
   80268:	4b0e      	ldr	r3, [pc, #56]	; (802a4 <sysclk_init+0x40>)
   8026a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8026c:	2000      	movs	r0, #0
   8026e:	213e      	movs	r1, #62	; 0x3e
   80270:	4b0d      	ldr	r3, [pc, #52]	; (802a8 <sysclk_init+0x44>)
   80272:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80274:	4c0d      	ldr	r4, [pc, #52]	; (802ac <sysclk_init+0x48>)
   80276:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80278:	2800      	cmp	r0, #0
   8027a:	d0fc      	beq.n	80276 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8027c:	4b0c      	ldr	r3, [pc, #48]	; (802b0 <sysclk_init+0x4c>)
   8027e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80280:	4a0c      	ldr	r2, [pc, #48]	; (802b4 <sysclk_init+0x50>)
   80282:	4b0d      	ldr	r3, [pc, #52]	; (802b8 <sysclk_init+0x54>)
   80284:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80286:	4c0d      	ldr	r4, [pc, #52]	; (802bc <sysclk_init+0x58>)
   80288:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8028a:	2800      	cmp	r0, #0
   8028c:	d0fc      	beq.n	80288 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8028e:	2010      	movs	r0, #16
   80290:	4b0b      	ldr	r3, [pc, #44]	; (802c0 <sysclk_init+0x5c>)
   80292:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80294:	4b0b      	ldr	r3, [pc, #44]	; (802c4 <sysclk_init+0x60>)
   80296:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80298:	4801      	ldr	r0, [pc, #4]	; (802a0 <sysclk_init+0x3c>)
   8029a:	4b02      	ldr	r3, [pc, #8]	; (802a4 <sysclk_init+0x40>)
   8029c:	4798      	blx	r3
   8029e:	bd10      	pop	{r4, pc}
   802a0:	0501bd00 	.word	0x0501bd00
   802a4:	200700a5 	.word	0x200700a5
   802a8:	00080781 	.word	0x00080781
   802ac:	000807d5 	.word	0x000807d5
   802b0:	000807e5 	.word	0x000807e5
   802b4:	200d3f01 	.word	0x200d3f01
   802b8:	400e0600 	.word	0x400e0600
   802bc:	000807f5 	.word	0x000807f5
   802c0:	00080719 	.word	0x00080719
   802c4:	0008090d 	.word	0x0008090d

000802c8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   802c8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   802ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   802ce:	4b16      	ldr	r3, [pc, #88]	; (80328 <board_init+0x60>)
   802d0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802d2:	200b      	movs	r0, #11
   802d4:	4c15      	ldr	r4, [pc, #84]	; (8032c <board_init+0x64>)
   802d6:	47a0      	blx	r4
   802d8:	200c      	movs	r0, #12
   802da:	47a0      	blx	r4
   802dc:	200d      	movs	r0, #13
   802de:	47a0      	blx	r4
   802e0:	200e      	movs	r0, #14
   802e2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   802e4:	203b      	movs	r0, #59	; 0x3b
   802e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802ea:	4c11      	ldr	r4, [pc, #68]	; (80330 <board_init+0x68>)
   802ec:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   802ee:	2055      	movs	r0, #85	; 0x55
   802f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802f4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   802f6:	2056      	movs	r0, #86	; 0x56
   802f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802fc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   802fe:	2068      	movs	r0, #104	; 0x68
   80300:	490c      	ldr	r1, [pc, #48]	; (80334 <board_init+0x6c>)
   80302:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80304:	205c      	movs	r0, #92	; 0x5c
   80306:	490c      	ldr	r1, [pc, #48]	; (80338 <board_init+0x70>)
   80308:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8030a:	480c      	ldr	r0, [pc, #48]	; (8033c <board_init+0x74>)
   8030c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80310:	4a0b      	ldr	r2, [pc, #44]	; (80340 <board_init+0x78>)
   80312:	4b0c      	ldr	r3, [pc, #48]	; (80344 <board_init+0x7c>)
   80314:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80316:	202b      	movs	r0, #43	; 0x2b
   80318:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8031c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8031e:	202a      	movs	r0, #42	; 0x2a
   80320:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80324:	47a0      	blx	r4
   80326:	bd10      	pop	{r4, pc}
   80328:	400e1a50 	.word	0x400e1a50
   8032c:	00080805 	.word	0x00080805
   80330:	00080445 	.word	0x00080445
   80334:	28000079 	.word	0x28000079
   80338:	28000001 	.word	0x28000001
   8033c:	400e0e00 	.word	0x400e0e00
   80340:	08000001 	.word	0x08000001
   80344:	00080519 	.word	0x00080519

00080348 <pio_set_debounce_filter>:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
#elif (SAM3XA || SAM3U)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_DIFSR = ul_mask;
   80348:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
   8034c:	0052      	lsls	r2, r2, #1
   8034e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80352:	fbb3 f2f2 	udiv	r2, r3, r2
   80356:	3a01      	subs	r2, #1
   80358:	f3c2 020d 	ubfx	r2, r2, #0, #14
   8035c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   80360:	4770      	bx	lr
   80362:	bf00      	nop

00080364 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80364:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80366:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8036a:	d016      	beq.n	8039a <pio_set_peripheral+0x36>
   8036c:	d804      	bhi.n	80378 <pio_set_peripheral+0x14>
   8036e:	b1c1      	cbz	r1, 803a2 <pio_set_peripheral+0x3e>
   80370:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80374:	d00a      	beq.n	8038c <pio_set_peripheral+0x28>
   80376:	e013      	b.n	803a0 <pio_set_peripheral+0x3c>
   80378:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8037c:	d011      	beq.n	803a2 <pio_set_peripheral+0x3e>
   8037e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80382:	d00e      	beq.n	803a2 <pio_set_peripheral+0x3e>
   80384:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80388:	d10a      	bne.n	803a0 <pio_set_peripheral+0x3c>
   8038a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8038c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8038e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80390:	400b      	ands	r3, r1
   80392:	ea23 0302 	bic.w	r3, r3, r2
   80396:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80398:	e002      	b.n	803a0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8039a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8039c:	4313      	orrs	r3, r2
   8039e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803a0:	6042      	str	r2, [r0, #4]
   803a2:	4770      	bx	lr

000803a4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803a4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803a6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803aa:	bf14      	ite	ne
   803ac:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803ae:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803b0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803b4:	bf14      	ite	ne
   803b6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803b8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803ba:	f012 0f02 	tst.w	r2, #2
   803be:	d002      	beq.n	803c6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803c0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803c4:	e004      	b.n	803d0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803c6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803ca:	bf18      	it	ne
   803cc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803d0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803d2:	6001      	str	r1, [r0, #0]
   803d4:	4770      	bx	lr
   803d6:	bf00      	nop

000803d8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803d8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803da:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803dc:	9c01      	ldr	r4, [sp, #4]
   803de:	b10c      	cbz	r4, 803e4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803e0:	6641      	str	r1, [r0, #100]	; 0x64
   803e2:	e000      	b.n	803e6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803e4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803e6:	b10b      	cbz	r3, 803ec <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803e8:	6501      	str	r1, [r0, #80]	; 0x50
   803ea:	e000      	b.n	803ee <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803ec:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803ee:	b10a      	cbz	r2, 803f4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803f0:	6301      	str	r1, [r0, #48]	; 0x30
   803f2:	e000      	b.n	803f6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803f4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803f8:	6001      	str	r1, [r0, #0]
}
   803fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   803fe:	4770      	bx	lr

00080400 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80400:	f012 0f10 	tst.w	r2, #16
   80404:	d010      	beq.n	80428 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80406:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8040a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8040e:	bf14      	ite	ne
   80410:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80414:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80418:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8041c:	bf14      	ite	ne
   8041e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80422:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80426:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80428:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8042c:	4770      	bx	lr
   8042e:	bf00      	nop

00080430 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80430:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80432:	6401      	str	r1, [r0, #64]	; 0x40
   80434:	4770      	bx	lr
   80436:	bf00      	nop

00080438 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80438:	6441      	str	r1, [r0, #68]	; 0x44
   8043a:	4770      	bx	lr

0008043c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8043c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8043e:	4770      	bx	lr

00080440 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80440:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80442:	4770      	bx	lr

00080444 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80444:	b570      	push	{r4, r5, r6, lr}
   80446:	b082      	sub	sp, #8
   80448:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8044a:	0943      	lsrs	r3, r0, #5
   8044c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80450:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80454:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80456:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8045a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8045e:	d030      	beq.n	804c2 <pio_configure_pin+0x7e>
   80460:	d806      	bhi.n	80470 <pio_configure_pin+0x2c>
   80462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80466:	d00a      	beq.n	8047e <pio_configure_pin+0x3a>
   80468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8046c:	d018      	beq.n	804a0 <pio_configure_pin+0x5c>
   8046e:	e049      	b.n	80504 <pio_configure_pin+0xc0>
   80470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80474:	d030      	beq.n	804d8 <pio_configure_pin+0x94>
   80476:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8047a:	d02d      	beq.n	804d8 <pio_configure_pin+0x94>
   8047c:	e042      	b.n	80504 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8047e:	f000 001f 	and.w	r0, r0, #31
   80482:	2601      	movs	r6, #1
   80484:	4086      	lsls	r6, r0
   80486:	4620      	mov	r0, r4
   80488:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8048c:	4632      	mov	r2, r6
   8048e:	4b1f      	ldr	r3, [pc, #124]	; (8050c <pio_configure_pin+0xc8>)
   80490:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80492:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80496:	bf14      	ite	ne
   80498:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8049a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8049c:	2001      	movs	r0, #1
   8049e:	e032      	b.n	80506 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   804a0:	f000 001f 	and.w	r0, r0, #31
   804a4:	2601      	movs	r6, #1
   804a6:	4086      	lsls	r6, r0
   804a8:	4620      	mov	r0, r4
   804aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804ae:	4632      	mov	r2, r6
   804b0:	4b16      	ldr	r3, [pc, #88]	; (8050c <pio_configure_pin+0xc8>)
   804b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804b8:	bf14      	ite	ne
   804ba:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804bc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804be:	2001      	movs	r0, #1
   804c0:	e021      	b.n	80506 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   804c2:	f000 031f 	and.w	r3, r0, #31
   804c6:	2601      	movs	r6, #1
   804c8:	4620      	mov	r0, r4
   804ca:	fa06 f103 	lsl.w	r1, r6, r3
   804ce:	462a      	mov	r2, r5
   804d0:	4b0f      	ldr	r3, [pc, #60]	; (80510 <pio_configure_pin+0xcc>)
   804d2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804d4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804d6:	e016      	b.n	80506 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804d8:	f000 031f 	and.w	r3, r0, #31
   804dc:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804de:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804e2:	ea05 0106 	and.w	r1, r5, r6
   804e6:	9100      	str	r1, [sp, #0]
   804e8:	4620      	mov	r0, r4
   804ea:	fa06 f103 	lsl.w	r1, r6, r3
   804ee:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804f2:	bf14      	ite	ne
   804f4:	2200      	movne	r2, #0
   804f6:	2201      	moveq	r2, #1
   804f8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804fc:	4c05      	ldr	r4, [pc, #20]	; (80514 <pio_configure_pin+0xd0>)
   804fe:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80500:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80502:	e000      	b.n	80506 <pio_configure_pin+0xc2>

	default:
		return 0;
   80504:	2000      	movs	r0, #0
	}

	return 1;
}
   80506:	b002      	add	sp, #8
   80508:	bd70      	pop	{r4, r5, r6, pc}
   8050a:	bf00      	nop
   8050c:	00080365 	.word	0x00080365
   80510:	000803a5 	.word	0x000803a5
   80514:	000803d9 	.word	0x000803d9

00080518 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80518:	b570      	push	{r4, r5, r6, lr}
   8051a:	b082      	sub	sp, #8
   8051c:	4606      	mov	r6, r0
   8051e:	460d      	mov	r5, r1
   80520:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80522:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80526:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8052a:	d026      	beq.n	8057a <pio_configure_pin_group+0x62>
   8052c:	d806      	bhi.n	8053c <pio_configure_pin_group+0x24>
   8052e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80532:	d00a      	beq.n	8054a <pio_configure_pin_group+0x32>
   80534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80538:	d013      	beq.n	80562 <pio_configure_pin_group+0x4a>
   8053a:	e034      	b.n	805a6 <pio_configure_pin_group+0x8e>
   8053c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80540:	d01f      	beq.n	80582 <pio_configure_pin_group+0x6a>
   80542:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80546:	d01c      	beq.n	80582 <pio_configure_pin_group+0x6a>
   80548:	e02d      	b.n	805a6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8054a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8054e:	462a      	mov	r2, r5
   80550:	4b16      	ldr	r3, [pc, #88]	; (805ac <pio_configure_pin_group+0x94>)
   80552:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80554:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80558:	bf14      	ite	ne
   8055a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8055c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8055e:	2001      	movs	r0, #1
   80560:	e022      	b.n	805a8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80562:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80566:	462a      	mov	r2, r5
   80568:	4b10      	ldr	r3, [pc, #64]	; (805ac <pio_configure_pin_group+0x94>)
   8056a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8056c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80570:	bf14      	ite	ne
   80572:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80574:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80576:	2001      	movs	r0, #1
   80578:	e016      	b.n	805a8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8057a:	4b0d      	ldr	r3, [pc, #52]	; (805b0 <pio_configure_pin_group+0x98>)
   8057c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8057e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80580:	e012      	b.n	805a8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80582:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80586:	f004 0301 	and.w	r3, r4, #1
   8058a:	9300      	str	r3, [sp, #0]
   8058c:	4630      	mov	r0, r6
   8058e:	4629      	mov	r1, r5
   80590:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80594:	bf14      	ite	ne
   80596:	2200      	movne	r2, #0
   80598:	2201      	moveq	r2, #1
   8059a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8059e:	4c05      	ldr	r4, [pc, #20]	; (805b4 <pio_configure_pin_group+0x9c>)
   805a0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   805a2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   805a4:	e000      	b.n	805a8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   805a6:	2000      	movs	r0, #0
	}

	return 1;
}
   805a8:	b002      	add	sp, #8
   805aa:	bd70      	pop	{r4, r5, r6, pc}
   805ac:	00080365 	.word	0x00080365
   805b0:	000803a5 	.word	0x000803a5
   805b4:	000803d9 	.word	0x000803d9

000805b8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   805b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805bc:	4604      	mov	r4, r0
   805be:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   805c0:	4b0e      	ldr	r3, [pc, #56]	; (805fc <pio_handler_process+0x44>)
   805c2:	4798      	blx	r3
   805c4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   805c6:	4620      	mov	r0, r4
   805c8:	4b0d      	ldr	r3, [pc, #52]	; (80600 <pio_handler_process+0x48>)
   805ca:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805cc:	4005      	ands	r5, r0
   805ce:	d013      	beq.n	805f8 <pio_handler_process+0x40>
   805d0:	4c0c      	ldr	r4, [pc, #48]	; (80604 <pio_handler_process+0x4c>)
   805d2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805d6:	6823      	ldr	r3, [r4, #0]
   805d8:	4543      	cmp	r3, r8
   805da:	d108      	bne.n	805ee <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805dc:	6861      	ldr	r1, [r4, #4]
   805de:	4229      	tst	r1, r5
   805e0:	d005      	beq.n	805ee <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805e2:	68e3      	ldr	r3, [r4, #12]
   805e4:	4640      	mov	r0, r8
   805e6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805e8:	6863      	ldr	r3, [r4, #4]
   805ea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805ee:	42b4      	cmp	r4, r6
   805f0:	d002      	beq.n	805f8 <pio_handler_process+0x40>
   805f2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805f4:	2d00      	cmp	r5, #0
   805f6:	d1ee      	bne.n	805d6 <pio_handler_process+0x1e>
   805f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805fc:	0008043d 	.word	0x0008043d
   80600:	00080441 	.word	0x00080441
   80604:	200709b4 	.word	0x200709b4

00080608 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8060a:	4c0c      	ldr	r4, [pc, #48]	; (8063c <pio_handler_set+0x34>)
   8060c:	6824      	ldr	r4, [r4, #0]
   8060e:	2c06      	cmp	r4, #6
   80610:	d811      	bhi.n	80636 <pio_handler_set+0x2e>
   80612:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
   80614:	4f0a      	ldr	r7, [pc, #40]	; (80640 <pio_handler_set+0x38>)
   80616:	0122      	lsls	r2, r4, #4
   80618:	18be      	adds	r6, r7, r2
   8061a:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
   8061c:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
   8061e:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
   80620:	9a06      	ldr	r2, [sp, #24]
   80622:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
   80624:	3401      	adds	r4, #1
   80626:	4a05      	ldr	r2, [pc, #20]	; (8063c <pio_handler_set+0x34>)
   80628:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   8062a:	4629      	mov	r1, r5
   8062c:	461a      	mov	r2, r3
   8062e:	4b05      	ldr	r3, [pc, #20]	; (80644 <pio_handler_set+0x3c>)
   80630:	4798      	blx	r3

	return 0;
   80632:	2000      	movs	r0, #0
   80634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80636:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8063a:	bf00      	nop
   8063c:	200709b0 	.word	0x200709b0
   80640:	200709b4 	.word	0x200709b4
   80644:	00080401 	.word	0x00080401

00080648 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80648:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8064a:	4802      	ldr	r0, [pc, #8]	; (80654 <PIOA_Handler+0xc>)
   8064c:	210b      	movs	r1, #11
   8064e:	4b02      	ldr	r3, [pc, #8]	; (80658 <PIOA_Handler+0x10>)
   80650:	4798      	blx	r3
   80652:	bd08      	pop	{r3, pc}
   80654:	400e0e00 	.word	0x400e0e00
   80658:	000805b9 	.word	0x000805b9

0008065c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8065c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8065e:	4802      	ldr	r0, [pc, #8]	; (80668 <PIOB_Handler+0xc>)
   80660:	210c      	movs	r1, #12
   80662:	4b02      	ldr	r3, [pc, #8]	; (8066c <PIOB_Handler+0x10>)
   80664:	4798      	blx	r3
   80666:	bd08      	pop	{r3, pc}
   80668:	400e1000 	.word	0x400e1000
   8066c:	000805b9 	.word	0x000805b9

00080670 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80670:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80672:	4802      	ldr	r0, [pc, #8]	; (8067c <PIOC_Handler+0xc>)
   80674:	210d      	movs	r1, #13
   80676:	4b02      	ldr	r3, [pc, #8]	; (80680 <PIOC_Handler+0x10>)
   80678:	4798      	blx	r3
   8067a:	bd08      	pop	{r3, pc}
   8067c:	400e1200 	.word	0x400e1200
   80680:	000805b9 	.word	0x000805b9

00080684 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80684:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80686:	4802      	ldr	r0, [pc, #8]	; (80690 <PIOD_Handler+0xc>)
   80688:	210e      	movs	r1, #14
   8068a:	4b02      	ldr	r3, [pc, #8]	; (80694 <PIOD_Handler+0x10>)
   8068c:	4798      	blx	r3
   8068e:	bd08      	pop	{r3, pc}
   80690:	400e1400 	.word	0x400e1400
   80694:	000805b9 	.word	0x000805b9

00080698 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
   80698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8069a:	4605      	mov	r5, r0
   8069c:	460c      	mov	r4, r1
   8069e:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
   806a0:	4b18      	ldr	r3, [pc, #96]	; (80704 <pio_handler_set_priority+0x6c>)
   806a2:	4798      	blx	r3
   806a4:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
   806a6:	4628      	mov	r0, r5
   806a8:	f04f 31ff 	mov.w	r1, #4294967295
   806ac:	4b16      	ldr	r3, [pc, #88]	; (80708 <pio_handler_set_priority+0x70>)
   806ae:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
   806b0:	4628      	mov	r0, r5
   806b2:	4b16      	ldr	r3, [pc, #88]	; (8070c <pio_handler_set_priority+0x74>)
   806b4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   806b6:	b2e2      	uxtb	r2, r4
   806b8:	f002 031f 	and.w	r3, r2, #31
   806bc:	2101      	movs	r1, #1
   806be:	4099      	lsls	r1, r3
   806c0:	0963      	lsrs	r3, r4, #5
   806c2:	009b      	lsls	r3, r3, #2
   806c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   806c8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   806cc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   806d0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
   806d4:	2c00      	cmp	r4, #0
   806d6:	da06      	bge.n	806e6 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   806d8:	f002 020f 	and.w	r2, r2, #15
   806dc:	013f      	lsls	r7, r7, #4
   806de:	b2ff      	uxtb	r7, r7
   806e0:	480b      	ldr	r0, [pc, #44]	; (80710 <pio_handler_set_priority+0x78>)
   806e2:	5487      	strb	r7, [r0, r2]
   806e4:	e007      	b.n	806f6 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   806e6:	013f      	lsls	r7, r7, #4
   806e8:	b2ff      	uxtb	r7, r7
   806ea:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
   806ee:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
   806f2:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806f6:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
   806f8:	4628      	mov	r0, r5
   806fa:	4631      	mov	r1, r6
   806fc:	4b05      	ldr	r3, [pc, #20]	; (80714 <pio_handler_set_priority+0x7c>)
   806fe:	4798      	blx	r3
   80700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80702:	bf00      	nop
   80704:	00080441 	.word	0x00080441
   80708:	00080439 	.word	0x00080439
   8070c:	0008043d 	.word	0x0008043d
   80710:	e000ed14 	.word	0xe000ed14
   80714:	00080431 	.word	0x00080431

00080718 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80718:	4a18      	ldr	r2, [pc, #96]	; (8077c <pmc_switch_mck_to_pllack+0x64>)
   8071a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8071c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80720:	4318      	orrs	r0, r3
   80722:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80724:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80726:	f013 0f08 	tst.w	r3, #8
   8072a:	d003      	beq.n	80734 <pmc_switch_mck_to_pllack+0x1c>
   8072c:	e009      	b.n	80742 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8072e:	3b01      	subs	r3, #1
   80730:	d103      	bne.n	8073a <pmc_switch_mck_to_pllack+0x22>
   80732:	e01e      	b.n	80772 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80734:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80738:	4910      	ldr	r1, [pc, #64]	; (8077c <pmc_switch_mck_to_pllack+0x64>)
   8073a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8073c:	f012 0f08 	tst.w	r2, #8
   80740:	d0f5      	beq.n	8072e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80742:	4a0e      	ldr	r2, [pc, #56]	; (8077c <pmc_switch_mck_to_pllack+0x64>)
   80744:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80746:	f023 0303 	bic.w	r3, r3, #3
   8074a:	f043 0302 	orr.w	r3, r3, #2
   8074e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80750:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80752:	f010 0008 	ands.w	r0, r0, #8
   80756:	d004      	beq.n	80762 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80758:	2000      	movs	r0, #0
   8075a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8075c:	3b01      	subs	r3, #1
   8075e:	d103      	bne.n	80768 <pmc_switch_mck_to_pllack+0x50>
   80760:	e009      	b.n	80776 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80762:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80766:	4905      	ldr	r1, [pc, #20]	; (8077c <pmc_switch_mck_to_pllack+0x64>)
   80768:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8076a:	f012 0f08 	tst.w	r2, #8
   8076e:	d0f5      	beq.n	8075c <pmc_switch_mck_to_pllack+0x44>
   80770:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80772:	2001      	movs	r0, #1
   80774:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80776:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80778:	4770      	bx	lr
   8077a:	bf00      	nop
   8077c:	400e0600 	.word	0x400e0600

00080780 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80780:	b138      	cbz	r0, 80792 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80782:	4911      	ldr	r1, [pc, #68]	; (807c8 <pmc_switch_mainck_to_xtal+0x48>)
   80784:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80786:	4a11      	ldr	r2, [pc, #68]	; (807cc <pmc_switch_mainck_to_xtal+0x4c>)
   80788:	401a      	ands	r2, r3
   8078a:	4b11      	ldr	r3, [pc, #68]	; (807d0 <pmc_switch_mainck_to_xtal+0x50>)
   8078c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8078e:	620b      	str	r3, [r1, #32]
   80790:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80792:	4a0d      	ldr	r2, [pc, #52]	; (807c8 <pmc_switch_mainck_to_xtal+0x48>)
   80794:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80796:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8079a:	f023 0303 	bic.w	r3, r3, #3
   8079e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   807a2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   807a6:	0209      	lsls	r1, r1, #8
   807a8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   807aa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   807ac:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   807ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
   807b0:	f013 0f01 	tst.w	r3, #1
   807b4:	d0fb      	beq.n	807ae <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   807b6:	4a04      	ldr	r2, [pc, #16]	; (807c8 <pmc_switch_mainck_to_xtal+0x48>)
   807b8:	6a13      	ldr	r3, [r2, #32]
   807ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   807be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   807c2:	6213      	str	r3, [r2, #32]
   807c4:	4770      	bx	lr
   807c6:	bf00      	nop
   807c8:	400e0600 	.word	0x400e0600
   807cc:	fec8fffc 	.word	0xfec8fffc
   807d0:	01370002 	.word	0x01370002

000807d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   807d4:	4b02      	ldr	r3, [pc, #8]	; (807e0 <pmc_osc_is_ready_mainck+0xc>)
   807d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	400e0600 	.word	0x400e0600

000807e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   807e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   807e8:	4b01      	ldr	r3, [pc, #4]	; (807f0 <pmc_disable_pllack+0xc>)
   807ea:	629a      	str	r2, [r3, #40]	; 0x28
   807ec:	4770      	bx	lr
   807ee:	bf00      	nop
   807f0:	400e0600 	.word	0x400e0600

000807f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   807f4:	4b02      	ldr	r3, [pc, #8]	; (80800 <pmc_is_locked_pllack+0xc>)
   807f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807f8:	f000 0002 	and.w	r0, r0, #2
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop
   80800:	400e0600 	.word	0x400e0600

00080804 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80804:	282c      	cmp	r0, #44	; 0x2c
   80806:	d81e      	bhi.n	80846 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80808:	281f      	cmp	r0, #31
   8080a:	d80c      	bhi.n	80826 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8080c:	4b11      	ldr	r3, [pc, #68]	; (80854 <pmc_enable_periph_clk+0x50>)
   8080e:	699a      	ldr	r2, [r3, #24]
   80810:	2301      	movs	r3, #1
   80812:	4083      	lsls	r3, r0
   80814:	401a      	ands	r2, r3
   80816:	4293      	cmp	r3, r2
   80818:	d017      	beq.n	8084a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8081a:	2301      	movs	r3, #1
   8081c:	4083      	lsls	r3, r0
   8081e:	4a0d      	ldr	r2, [pc, #52]	; (80854 <pmc_enable_periph_clk+0x50>)
   80820:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80822:	2000      	movs	r0, #0
   80824:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80826:	4b0b      	ldr	r3, [pc, #44]	; (80854 <pmc_enable_periph_clk+0x50>)
   80828:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8082c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8082e:	2301      	movs	r3, #1
   80830:	4083      	lsls	r3, r0
   80832:	401a      	ands	r2, r3
   80834:	4293      	cmp	r3, r2
   80836:	d00a      	beq.n	8084e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80838:	2301      	movs	r3, #1
   8083a:	4083      	lsls	r3, r0
   8083c:	4a05      	ldr	r2, [pc, #20]	; (80854 <pmc_enable_periph_clk+0x50>)
   8083e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80842:	2000      	movs	r0, #0
   80844:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80846:	2001      	movs	r0, #1
   80848:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8084a:	2000      	movs	r0, #0
   8084c:	4770      	bx	lr
   8084e:	2000      	movs	r0, #0
}
   80850:	4770      	bx	lr
   80852:	bf00      	nop
   80854:	400e0600 	.word	0x400e0600

00080858 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80858:	e7fe      	b.n	80858 <Dummy_Handler>
   8085a:	bf00      	nop

0008085c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8085c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8085e:	4b1f      	ldr	r3, [pc, #124]	; (808dc <Reset_Handler+0x80>)
   80860:	4a1f      	ldr	r2, [pc, #124]	; (808e0 <Reset_Handler+0x84>)
   80862:	429a      	cmp	r2, r3
   80864:	d003      	beq.n	8086e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80866:	4b1f      	ldr	r3, [pc, #124]	; (808e4 <Reset_Handler+0x88>)
   80868:	4a1c      	ldr	r2, [pc, #112]	; (808dc <Reset_Handler+0x80>)
   8086a:	429a      	cmp	r2, r3
   8086c:	d304      	bcc.n	80878 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8086e:	4b1e      	ldr	r3, [pc, #120]	; (808e8 <Reset_Handler+0x8c>)
   80870:	4a1e      	ldr	r2, [pc, #120]	; (808ec <Reset_Handler+0x90>)
   80872:	429a      	cmp	r2, r3
   80874:	d310      	bcc.n	80898 <Reset_Handler+0x3c>
   80876:	e01b      	b.n	808b0 <Reset_Handler+0x54>
   80878:	4918      	ldr	r1, [pc, #96]	; (808dc <Reset_Handler+0x80>)
   8087a:	1d0a      	adds	r2, r1, #4
   8087c:	4b1c      	ldr	r3, [pc, #112]	; (808f0 <Reset_Handler+0x94>)
   8087e:	1a9b      	subs	r3, r3, r2
   80880:	f023 0303 	bic.w	r3, r3, #3
   80884:	3304      	adds	r3, #4
   80886:	4a16      	ldr	r2, [pc, #88]	; (808e0 <Reset_Handler+0x84>)
   80888:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8088a:	f852 0b04 	ldr.w	r0, [r2], #4
   8088e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80892:	429a      	cmp	r2, r3
   80894:	d1f9      	bne.n	8088a <Reset_Handler+0x2e>
   80896:	e7ea      	b.n	8086e <Reset_Handler+0x12>
   80898:	4b16      	ldr	r3, [pc, #88]	; (808f4 <Reset_Handler+0x98>)
   8089a:	4a17      	ldr	r2, [pc, #92]	; (808f8 <Reset_Handler+0x9c>)
   8089c:	1ad2      	subs	r2, r2, r3
   8089e:	f022 0203 	bic.w	r2, r2, #3
   808a2:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808a4:	3b04      	subs	r3, #4
		*pDest++ = 0;
   808a6:	2100      	movs	r1, #0
   808a8:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808ac:	4293      	cmp	r3, r2
   808ae:	d1fb      	bne.n	808a8 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   808b0:	4b12      	ldr	r3, [pc, #72]	; (808fc <Reset_Handler+0xa0>)
   808b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   808b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   808ba:	4911      	ldr	r1, [pc, #68]	; (80900 <Reset_Handler+0xa4>)
   808bc:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   808be:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   808c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   808c6:	d203      	bcs.n	808d0 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   808c8:	688b      	ldr	r3, [r1, #8]
   808ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   808ce:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   808d0:	4b0c      	ldr	r3, [pc, #48]	; (80904 <Reset_Handler+0xa8>)
   808d2:	4798      	blx	r3

	/* Branch to main function */
	main();
   808d4:	4b0c      	ldr	r3, [pc, #48]	; (80908 <Reset_Handler+0xac>)
   808d6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   808d8:	e7fe      	b.n	808d8 <Reset_Handler+0x7c>
   808da:	bf00      	nop
   808dc:	20070000 	.word	0x20070000
   808e0:	00083cc0 	.word	0x00083cc0
   808e4:	20070994 	.word	0x20070994
   808e8:	20070a70 	.word	0x20070a70
   808ec:	20070994 	.word	0x20070994
   808f0:	20070997 	.word	0x20070997
   808f4:	20070998 	.word	0x20070998
   808f8:	20070a73 	.word	0x20070a73
   808fc:	00080000 	.word	0x00080000
   80900:	e000ed00 	.word	0xe000ed00
   80904:	00080ccd 	.word	0x00080ccd
   80908:	00080bdd 	.word	0x00080bdd

0008090c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8090c:	4b3e      	ldr	r3, [pc, #248]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   8090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80910:	f003 0303 	and.w	r3, r3, #3
   80914:	2b03      	cmp	r3, #3
   80916:	d85f      	bhi.n	809d8 <SystemCoreClockUpdate+0xcc>
   80918:	e8df f003 	tbb	[pc, r3]
   8091c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80920:	4b3a      	ldr	r3, [pc, #232]	; (80a0c <SystemCoreClockUpdate+0x100>)
   80922:	695b      	ldr	r3, [r3, #20]
   80924:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80928:	bf14      	ite	ne
   8092a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8092e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80932:	4b37      	ldr	r3, [pc, #220]	; (80a10 <SystemCoreClockUpdate+0x104>)
   80934:	601a      	str	r2, [r3, #0]
   80936:	e04f      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80938:	4b33      	ldr	r3, [pc, #204]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   8093a:	6a1b      	ldr	r3, [r3, #32]
   8093c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80940:	d003      	beq.n	8094a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80942:	4a34      	ldr	r2, [pc, #208]	; (80a14 <SystemCoreClockUpdate+0x108>)
   80944:	4b32      	ldr	r3, [pc, #200]	; (80a10 <SystemCoreClockUpdate+0x104>)
   80946:	601a      	str	r2, [r3, #0]
   80948:	e046      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8094a:	4a33      	ldr	r2, [pc, #204]	; (80a18 <SystemCoreClockUpdate+0x10c>)
   8094c:	4b30      	ldr	r3, [pc, #192]	; (80a10 <SystemCoreClockUpdate+0x104>)
   8094e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80950:	4b2d      	ldr	r3, [pc, #180]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   80952:	6a1b      	ldr	r3, [r3, #32]
   80954:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80958:	2b10      	cmp	r3, #16
   8095a:	d002      	beq.n	80962 <SystemCoreClockUpdate+0x56>
   8095c:	2b20      	cmp	r3, #32
   8095e:	d004      	beq.n	8096a <SystemCoreClockUpdate+0x5e>
   80960:	e03a      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80962:	4a2e      	ldr	r2, [pc, #184]	; (80a1c <SystemCoreClockUpdate+0x110>)
   80964:	4b2a      	ldr	r3, [pc, #168]	; (80a10 <SystemCoreClockUpdate+0x104>)
   80966:	601a      	str	r2, [r3, #0]
				break;
   80968:	e036      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8096a:	4a2a      	ldr	r2, [pc, #168]	; (80a14 <SystemCoreClockUpdate+0x108>)
   8096c:	4b28      	ldr	r3, [pc, #160]	; (80a10 <SystemCoreClockUpdate+0x104>)
   8096e:	601a      	str	r2, [r3, #0]
				break;
   80970:	e032      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80972:	4b25      	ldr	r3, [pc, #148]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   80974:	6a1b      	ldr	r3, [r3, #32]
   80976:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8097a:	d003      	beq.n	80984 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8097c:	4a25      	ldr	r2, [pc, #148]	; (80a14 <SystemCoreClockUpdate+0x108>)
   8097e:	4b24      	ldr	r3, [pc, #144]	; (80a10 <SystemCoreClockUpdate+0x104>)
   80980:	601a      	str	r2, [r3, #0]
   80982:	e012      	b.n	809aa <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80984:	4a24      	ldr	r2, [pc, #144]	; (80a18 <SystemCoreClockUpdate+0x10c>)
   80986:	4b22      	ldr	r3, [pc, #136]	; (80a10 <SystemCoreClockUpdate+0x104>)
   80988:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8098a:	4b1f      	ldr	r3, [pc, #124]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   8098c:	6a1b      	ldr	r3, [r3, #32]
   8098e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80992:	2b10      	cmp	r3, #16
   80994:	d002      	beq.n	8099c <SystemCoreClockUpdate+0x90>
   80996:	2b20      	cmp	r3, #32
   80998:	d004      	beq.n	809a4 <SystemCoreClockUpdate+0x98>
   8099a:	e006      	b.n	809aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8099c:	4a1f      	ldr	r2, [pc, #124]	; (80a1c <SystemCoreClockUpdate+0x110>)
   8099e:	4b1c      	ldr	r3, [pc, #112]	; (80a10 <SystemCoreClockUpdate+0x104>)
   809a0:	601a      	str	r2, [r3, #0]
				break;
   809a2:	e002      	b.n	809aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809a4:	4a1b      	ldr	r2, [pc, #108]	; (80a14 <SystemCoreClockUpdate+0x108>)
   809a6:	4b1a      	ldr	r3, [pc, #104]	; (80a10 <SystemCoreClockUpdate+0x104>)
   809a8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   809aa:	4b17      	ldr	r3, [pc, #92]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   809ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809ae:	f003 0303 	and.w	r3, r3, #3
   809b2:	2b02      	cmp	r3, #2
   809b4:	d10d      	bne.n	809d2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809b6:	4a14      	ldr	r2, [pc, #80]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   809b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   809ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
   809bc:	4814      	ldr	r0, [pc, #80]	; (80a10 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809be:	f3c3 410a 	ubfx	r1, r3, #16, #11
   809c2:	6803      	ldr	r3, [r0, #0]
   809c4:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   809c8:	b2d2      	uxtb	r2, r2
   809ca:	fbb3 f3f2 	udiv	r3, r3, r2
   809ce:	6003      	str	r3, [r0, #0]
   809d0:	e002      	b.n	809d8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   809d2:	4a13      	ldr	r2, [pc, #76]	; (80a20 <SystemCoreClockUpdate+0x114>)
   809d4:	4b0e      	ldr	r3, [pc, #56]	; (80a10 <SystemCoreClockUpdate+0x104>)
   809d6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   809d8:	4b0b      	ldr	r3, [pc, #44]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   809da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809e0:	2b70      	cmp	r3, #112	; 0x70
   809e2:	d107      	bne.n	809f4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   809e4:	4a0a      	ldr	r2, [pc, #40]	; (80a10 <SystemCoreClockUpdate+0x104>)
   809e6:	6813      	ldr	r3, [r2, #0]
   809e8:	490e      	ldr	r1, [pc, #56]	; (80a24 <SystemCoreClockUpdate+0x118>)
   809ea:	fba1 1303 	umull	r1, r3, r1, r3
   809ee:	085b      	lsrs	r3, r3, #1
   809f0:	6013      	str	r3, [r2, #0]
   809f2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   809f4:	4b04      	ldr	r3, [pc, #16]	; (80a08 <SystemCoreClockUpdate+0xfc>)
   809f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   809f8:	4905      	ldr	r1, [pc, #20]	; (80a10 <SystemCoreClockUpdate+0x104>)
   809fa:	f3c2 1202 	ubfx	r2, r2, #4, #3
   809fe:	680b      	ldr	r3, [r1, #0]
   80a00:	40d3      	lsrs	r3, r2
   80a02:	600b      	str	r3, [r1, #0]
   80a04:	4770      	bx	lr
   80a06:	bf00      	nop
   80a08:	400e0600 	.word	0x400e0600
   80a0c:	400e1a10 	.word	0x400e1a10
   80a10:	2007012c 	.word	0x2007012c
   80a14:	00b71b00 	.word	0x00b71b00
   80a18:	003d0900 	.word	0x003d0900
   80a1c:	007a1200 	.word	0x007a1200
   80a20:	0e4e1c00 	.word	0x0e4e1c00
   80a24:	aaaaaaab 	.word	0xaaaaaaab

00080a28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80a28:	4b09      	ldr	r3, [pc, #36]	; (80a50 <_sbrk+0x28>)
   80a2a:	681b      	ldr	r3, [r3, #0]
   80a2c:	b913      	cbnz	r3, 80a34 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80a2e:	4a09      	ldr	r2, [pc, #36]	; (80a54 <_sbrk+0x2c>)
   80a30:	4b07      	ldr	r3, [pc, #28]	; (80a50 <_sbrk+0x28>)
   80a32:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a34:	4b06      	ldr	r3, [pc, #24]	; (80a50 <_sbrk+0x28>)
   80a36:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a38:	181a      	adds	r2, r3, r0
   80a3a:	4907      	ldr	r1, [pc, #28]	; (80a58 <_sbrk+0x30>)
   80a3c:	4291      	cmp	r1, r2
   80a3e:	db04      	blt.n	80a4a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a40:	4610      	mov	r0, r2
   80a42:	4a03      	ldr	r2, [pc, #12]	; (80a50 <_sbrk+0x28>)
   80a44:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a46:	4618      	mov	r0, r3
   80a48:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a4a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a4e:	4770      	bx	lr
   80a50:	20070a24 	.word	0x20070a24
   80a54:	20072a70 	.word	0x20072a70
   80a58:	20087ffc 	.word	0x20087ffc

00080a5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80a5c:	f04f 30ff 	mov.w	r0, #4294967295
   80a60:	4770      	bx	lr
   80a62:	bf00      	nop

00080a64 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80a68:	604b      	str	r3, [r1, #4]

	return 0;
}
   80a6a:	2000      	movs	r0, #0
   80a6c:	4770      	bx	lr
   80a6e:	bf00      	nop

00080a70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80a70:	2001      	movs	r0, #1
   80a72:	4770      	bx	lr

00080a74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80a74:	2000      	movs	r0, #0
   80a76:	4770      	bx	lr

00080a78 <Encoder_Handler>:
	stdio_serial_init(CONF_UART, &uart_serial_options);
}


static void Encoder_Handler(uint32_t id, uint32_t mask)
{
   80a78:	b508      	push	{r3, lr}
	if (id == id && mask == mask) {
		counter++;
   80a7a:	4b04      	ldr	r3, [pc, #16]	; (80a8c <Encoder_Handler+0x14>)
   80a7c:	681a      	ldr	r2, [r3, #0]
   80a7e:	3201      	adds	r2, #1
   80a80:	601a      	str	r2, [r3, #0]
		printf("counter=%i::", counter);
   80a82:	6819      	ldr	r1, [r3, #0]
   80a84:	4802      	ldr	r0, [pc, #8]	; (80a90 <Encoder_Handler+0x18>)
   80a86:	4b03      	ldr	r3, [pc, #12]	; (80a94 <Encoder_Handler+0x1c>)
   80a88:	4798      	blx	r3
   80a8a:	bd08      	pop	{r3, pc}
   80a8c:	20070a28 	.word	0x20070a28
   80a90:	00083c2c 	.word	0x00083c2c
   80a94:	00080d1d 	.word	0x00080d1d

00080a98 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a9a:	b083      	sub	sp, #12
   80a9c:	4604      	mov	r4, r0
   80a9e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80aa0:	2300      	movs	r3, #0
   80aa2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80aa4:	4b1f      	ldr	r3, [pc, #124]	; (80b24 <usart_serial_getchar+0x8c>)
   80aa6:	4298      	cmp	r0, r3
   80aa8:	d107      	bne.n	80aba <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80aaa:	461f      	mov	r7, r3
   80aac:	4e1e      	ldr	r6, [pc, #120]	; (80b28 <usart_serial_getchar+0x90>)
   80aae:	4638      	mov	r0, r7
   80ab0:	4629      	mov	r1, r5
   80ab2:	47b0      	blx	r6
   80ab4:	2800      	cmp	r0, #0
   80ab6:	d1fa      	bne.n	80aae <usart_serial_getchar+0x16>
   80ab8:	e019      	b.n	80aee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80aba:	4b1c      	ldr	r3, [pc, #112]	; (80b2c <usart_serial_getchar+0x94>)
   80abc:	4298      	cmp	r0, r3
   80abe:	d109      	bne.n	80ad4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80ac0:	461f      	mov	r7, r3
   80ac2:	4e1b      	ldr	r6, [pc, #108]	; (80b30 <usart_serial_getchar+0x98>)
   80ac4:	4638      	mov	r0, r7
   80ac6:	a901      	add	r1, sp, #4
   80ac8:	47b0      	blx	r6
   80aca:	2800      	cmp	r0, #0
   80acc:	d1fa      	bne.n	80ac4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80ace:	9b01      	ldr	r3, [sp, #4]
   80ad0:	702b      	strb	r3, [r5, #0]
   80ad2:	e019      	b.n	80b08 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ad4:	4b17      	ldr	r3, [pc, #92]	; (80b34 <usart_serial_getchar+0x9c>)
   80ad6:	4298      	cmp	r0, r3
   80ad8:	d109      	bne.n	80aee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80ada:	461e      	mov	r6, r3
   80adc:	4c14      	ldr	r4, [pc, #80]	; (80b30 <usart_serial_getchar+0x98>)
   80ade:	4630      	mov	r0, r6
   80ae0:	a901      	add	r1, sp, #4
   80ae2:	47a0      	blx	r4
   80ae4:	2800      	cmp	r0, #0
   80ae6:	d1fa      	bne.n	80ade <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80ae8:	9b01      	ldr	r3, [sp, #4]
   80aea:	702b      	strb	r3, [r5, #0]
   80aec:	e018      	b.n	80b20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80aee:	4b12      	ldr	r3, [pc, #72]	; (80b38 <usart_serial_getchar+0xa0>)
   80af0:	429c      	cmp	r4, r3
   80af2:	d109      	bne.n	80b08 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80af4:	461e      	mov	r6, r3
   80af6:	4c0e      	ldr	r4, [pc, #56]	; (80b30 <usart_serial_getchar+0x98>)
   80af8:	4630      	mov	r0, r6
   80afa:	a901      	add	r1, sp, #4
   80afc:	47a0      	blx	r4
   80afe:	2800      	cmp	r0, #0
   80b00:	d1fa      	bne.n	80af8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80b02:	9b01      	ldr	r3, [sp, #4]
   80b04:	702b      	strb	r3, [r5, #0]
   80b06:	e00b      	b.n	80b20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b08:	4b0c      	ldr	r3, [pc, #48]	; (80b3c <usart_serial_getchar+0xa4>)
   80b0a:	429c      	cmp	r4, r3
   80b0c:	d108      	bne.n	80b20 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80b0e:	461e      	mov	r6, r3
   80b10:	4c07      	ldr	r4, [pc, #28]	; (80b30 <usart_serial_getchar+0x98>)
   80b12:	4630      	mov	r0, r6
   80b14:	a901      	add	r1, sp, #4
   80b16:	47a0      	blx	r4
   80b18:	2800      	cmp	r0, #0
   80b1a:	d1fa      	bne.n	80b12 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80b1c:	9b01      	ldr	r3, [sp, #4]
   80b1e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80b20:	b003      	add	sp, #12
   80b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b24:	400e0800 	.word	0x400e0800
   80b28:	00080251 	.word	0x00080251
   80b2c:	40098000 	.word	0x40098000
   80b30:	000801a1 	.word	0x000801a1
   80b34:	4009c000 	.word	0x4009c000
   80b38:	400a0000 	.word	0x400a0000
   80b3c:	400a4000 	.word	0x400a4000

00080b40 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80b40:	b570      	push	{r4, r5, r6, lr}
   80b42:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b44:	4b1e      	ldr	r3, [pc, #120]	; (80bc0 <usart_serial_putchar+0x80>)
   80b46:	4298      	cmp	r0, r3
   80b48:	d108      	bne.n	80b5c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80b4a:	461e      	mov	r6, r3
   80b4c:	4d1d      	ldr	r5, [pc, #116]	; (80bc4 <usart_serial_putchar+0x84>)
   80b4e:	4630      	mov	r0, r6
   80b50:	4621      	mov	r1, r4
   80b52:	47a8      	blx	r5
   80b54:	2800      	cmp	r0, #0
   80b56:	d1fa      	bne.n	80b4e <usart_serial_putchar+0xe>
		return 1;
   80b58:	2001      	movs	r0, #1
   80b5a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b5c:	4b1a      	ldr	r3, [pc, #104]	; (80bc8 <usart_serial_putchar+0x88>)
   80b5e:	4298      	cmp	r0, r3
   80b60:	d108      	bne.n	80b74 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80b62:	461e      	mov	r6, r3
   80b64:	4d19      	ldr	r5, [pc, #100]	; (80bcc <usart_serial_putchar+0x8c>)
   80b66:	4630      	mov	r0, r6
   80b68:	4621      	mov	r1, r4
   80b6a:	47a8      	blx	r5
   80b6c:	2800      	cmp	r0, #0
   80b6e:	d1fa      	bne.n	80b66 <usart_serial_putchar+0x26>
		return 1;
   80b70:	2001      	movs	r0, #1
   80b72:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b74:	4b16      	ldr	r3, [pc, #88]	; (80bd0 <usart_serial_putchar+0x90>)
   80b76:	4298      	cmp	r0, r3
   80b78:	d108      	bne.n	80b8c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80b7a:	461e      	mov	r6, r3
   80b7c:	4d13      	ldr	r5, [pc, #76]	; (80bcc <usart_serial_putchar+0x8c>)
   80b7e:	4630      	mov	r0, r6
   80b80:	4621      	mov	r1, r4
   80b82:	47a8      	blx	r5
   80b84:	2800      	cmp	r0, #0
   80b86:	d1fa      	bne.n	80b7e <usart_serial_putchar+0x3e>
		return 1;
   80b88:	2001      	movs	r0, #1
   80b8a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b8c:	4b11      	ldr	r3, [pc, #68]	; (80bd4 <usart_serial_putchar+0x94>)
   80b8e:	4298      	cmp	r0, r3
   80b90:	d108      	bne.n	80ba4 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80b92:	461e      	mov	r6, r3
   80b94:	4d0d      	ldr	r5, [pc, #52]	; (80bcc <usart_serial_putchar+0x8c>)
   80b96:	4630      	mov	r0, r6
   80b98:	4621      	mov	r1, r4
   80b9a:	47a8      	blx	r5
   80b9c:	2800      	cmp	r0, #0
   80b9e:	d1fa      	bne.n	80b96 <usart_serial_putchar+0x56>
		return 1;
   80ba0:	2001      	movs	r0, #1
   80ba2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ba4:	4b0c      	ldr	r3, [pc, #48]	; (80bd8 <usart_serial_putchar+0x98>)
   80ba6:	4298      	cmp	r0, r3
   80ba8:	d108      	bne.n	80bbc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80baa:	461e      	mov	r6, r3
   80bac:	4d07      	ldr	r5, [pc, #28]	; (80bcc <usart_serial_putchar+0x8c>)
   80bae:	4630      	mov	r0, r6
   80bb0:	4621      	mov	r1, r4
   80bb2:	47a8      	blx	r5
   80bb4:	2800      	cmp	r0, #0
   80bb6:	d1fa      	bne.n	80bae <usart_serial_putchar+0x6e>
		return 1;
   80bb8:	2001      	movs	r0, #1
   80bba:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80bbc:	2000      	movs	r0, #0
}
   80bbe:	bd70      	pop	{r4, r5, r6, pc}
   80bc0:	400e0800 	.word	0x400e0800
   80bc4:	00080241 	.word	0x00080241
   80bc8:	40098000 	.word	0x40098000
   80bcc:	0008018d 	.word	0x0008018d
   80bd0:	4009c000 	.word	0x4009c000
   80bd4:	400a0000 	.word	0x400a0000
   80bd8:	400a4000 	.word	0x400a4000

00080bdc <main>:
	}
}
int main(void)
{
   80bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   80bde:	b087      	sub	sp, #28

	/* Initialize the SAM system */
	sysclk_init();
   80be0:	4b25      	ldr	r3, [pc, #148]	; (80c78 <main+0x9c>)
   80be2:	4798      	blx	r3
	board_init();
   80be4:	4b25      	ldr	r3, [pc, #148]	; (80c7c <main+0xa0>)
   80be6:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80be8:	4e25      	ldr	r6, [pc, #148]	; (80c80 <main+0xa4>)
   80bea:	4b26      	ldr	r3, [pc, #152]	; (80c84 <main+0xa8>)
   80bec:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80bee:	4a26      	ldr	r2, [pc, #152]	; (80c88 <main+0xac>)
   80bf0:	4b26      	ldr	r3, [pc, #152]	; (80c8c <main+0xb0>)
   80bf2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80bf4:	4a26      	ldr	r2, [pc, #152]	; (80c90 <main+0xb4>)
   80bf6:	4b27      	ldr	r3, [pc, #156]	; (80c94 <main+0xb8>)
   80bf8:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80bfa:	4b27      	ldr	r3, [pc, #156]	; (80c98 <main+0xbc>)
   80bfc:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
   80bfe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80c02:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
   80c04:	f44f 6500 	mov.w	r5, #2048	; 0x800
   80c08:	9505      	str	r5, [sp, #20]
   80c0a:	2008      	movs	r0, #8
   80c0c:	4c23      	ldr	r4, [pc, #140]	; (80c9c <main+0xc0>)
   80c0e:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80c10:	4630      	mov	r0, r6
   80c12:	a903      	add	r1, sp, #12
   80c14:	4b22      	ldr	r3, [pc, #136]	; (80ca0 <main+0xc4>)
   80c16:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80c18:	4f22      	ldr	r7, [pc, #136]	; (80ca4 <main+0xc8>)
   80c1a:	683b      	ldr	r3, [r7, #0]
   80c1c:	6898      	ldr	r0, [r3, #8]
   80c1e:	2100      	movs	r1, #0
   80c20:	4e21      	ldr	r6, [pc, #132]	; (80ca8 <main+0xcc>)
   80c22:	47b0      	blx	r6
	setbuf(stdin, NULL);
   80c24:	683b      	ldr	r3, [r7, #0]
   80c26:	6858      	ldr	r0, [r3, #4]
   80c28:	2100      	movs	r1, #0
   80c2a:	47b0      	blx	r6

	/* Initialize the console uart */
	configure_console();
	
	pmc_enable_periph_clk(ID_PIOA);
   80c2c:	200b      	movs	r0, #11
   80c2e:	47a0      	blx	r4
	
	pio_set_input(PIOA, PIO_PA16, PIO_PULLUP);
   80c30:	4c1e      	ldr	r4, [pc, #120]	; (80cac <main+0xd0>)
   80c32:	4620      	mov	r0, r4
   80c34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80c38:	2201      	movs	r2, #1
   80c3a:	4b1d      	ldr	r3, [pc, #116]	; (80cb0 <main+0xd4>)
   80c3c:	4798      	blx	r3
	pio_set_debounce_filter(PIOA, PIO_PA16, 1);
   80c3e:	4620      	mov	r0, r4
   80c40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80c44:	2201      	movs	r2, #1
   80c46:	4b1b      	ldr	r3, [pc, #108]	; (80cb4 <main+0xd8>)
   80c48:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIO_PA16, 0 /* TODO genaues Flanken/Level-Attribut festlegen */, Encoder_Handler);
   80c4a:	4b1b      	ldr	r3, [pc, #108]	; (80cb8 <main+0xdc>)
   80c4c:	9300      	str	r3, [sp, #0]
   80c4e:	4620      	mov	r0, r4
   80c50:	210b      	movs	r1, #11
   80c52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80c56:	2300      	movs	r3, #0
   80c58:	4e18      	ldr	r6, [pc, #96]	; (80cbc <main+0xe0>)
   80c5a:	47b0      	blx	r6
   80c5c:	4b18      	ldr	r3, [pc, #96]	; (80cc0 <main+0xe4>)
   80c5e:	601d      	str	r5, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	pio_handler_set_priority(PIOA,(IRQn_Type) ID_PIOA, 0 /* highest priority = 0 */);
   80c60:	4620      	mov	r0, r4
   80c62:	210b      	movs	r1, #11
   80c64:	2200      	movs	r2, #0
   80c66:	4b17      	ldr	r3, [pc, #92]	; (80cc4 <main+0xe8>)
   80c68:	4798      	blx	r3
	pio_enable_interrupt(PIOA, PIO_PA16);
   80c6a:	4620      	mov	r0, r4
   80c6c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80c70:	4b15      	ldr	r3, [pc, #84]	; (80cc8 <main+0xec>)
   80c72:	4798      	blx	r3
	int counter = 0;
	int active = 1;

	while (1) {
	
	}
   80c74:	e7fe      	b.n	80c74 <main+0x98>
   80c76:	bf00      	nop
   80c78:	00080265 	.word	0x00080265
   80c7c:	000802c9 	.word	0x000802c9
   80c80:	400e0800 	.word	0x400e0800
   80c84:	20070a68 	.word	0x20070a68
   80c88:	00080b41 	.word	0x00080b41
   80c8c:	20070a64 	.word	0x20070a64
   80c90:	00080a99 	.word	0x00080a99
   80c94:	20070a60 	.word	0x20070a60
   80c98:	0501bd00 	.word	0x0501bd00
   80c9c:	00080805 	.word	0x00080805
   80ca0:	00080209 	.word	0x00080209
   80ca4:	20070558 	.word	0x20070558
   80ca8:	00080de1 	.word	0x00080de1
   80cac:	400e0e00 	.word	0x400e0e00
   80cb0:	000803a5 	.word	0x000803a5
   80cb4:	00080349 	.word	0x00080349
   80cb8:	00080a79 	.word	0x00080a79
   80cbc:	00080609 	.word	0x00080609
   80cc0:	e000e100 	.word	0xe000e100
   80cc4:	00080699 	.word	0x00080699
   80cc8:	00080431 	.word	0x00080431

00080ccc <__libc_init_array>:
   80ccc:	b570      	push	{r4, r5, r6, lr}
   80cce:	4e0f      	ldr	r6, [pc, #60]	; (80d0c <__libc_init_array+0x40>)
   80cd0:	4d0f      	ldr	r5, [pc, #60]	; (80d10 <__libc_init_array+0x44>)
   80cd2:	1b76      	subs	r6, r6, r5
   80cd4:	10b6      	asrs	r6, r6, #2
   80cd6:	bf18      	it	ne
   80cd8:	2400      	movne	r4, #0
   80cda:	d005      	beq.n	80ce8 <__libc_init_array+0x1c>
   80cdc:	3401      	adds	r4, #1
   80cde:	f855 3b04 	ldr.w	r3, [r5], #4
   80ce2:	4798      	blx	r3
   80ce4:	42a6      	cmp	r6, r4
   80ce6:	d1f9      	bne.n	80cdc <__libc_init_array+0x10>
   80ce8:	4e0a      	ldr	r6, [pc, #40]	; (80d14 <__libc_init_array+0x48>)
   80cea:	4d0b      	ldr	r5, [pc, #44]	; (80d18 <__libc_init_array+0x4c>)
   80cec:	f002 ffd2 	bl	83c94 <_init>
   80cf0:	1b76      	subs	r6, r6, r5
   80cf2:	10b6      	asrs	r6, r6, #2
   80cf4:	bf18      	it	ne
   80cf6:	2400      	movne	r4, #0
   80cf8:	d006      	beq.n	80d08 <__libc_init_array+0x3c>
   80cfa:	3401      	adds	r4, #1
   80cfc:	f855 3b04 	ldr.w	r3, [r5], #4
   80d00:	4798      	blx	r3
   80d02:	42a6      	cmp	r6, r4
   80d04:	d1f9      	bne.n	80cfa <__libc_init_array+0x2e>
   80d06:	bd70      	pop	{r4, r5, r6, pc}
   80d08:	bd70      	pop	{r4, r5, r6, pc}
   80d0a:	bf00      	nop
   80d0c:	00083ca0 	.word	0x00083ca0
   80d10:	00083ca0 	.word	0x00083ca0
   80d14:	00083ca8 	.word	0x00083ca8
   80d18:	00083ca0 	.word	0x00083ca0

00080d1c <iprintf>:
   80d1c:	b40f      	push	{r0, r1, r2, r3}
   80d1e:	b510      	push	{r4, lr}
   80d20:	4b07      	ldr	r3, [pc, #28]	; (80d40 <iprintf+0x24>)
   80d22:	b082      	sub	sp, #8
   80d24:	ac04      	add	r4, sp, #16
   80d26:	f854 2b04 	ldr.w	r2, [r4], #4
   80d2a:	6818      	ldr	r0, [r3, #0]
   80d2c:	4623      	mov	r3, r4
   80d2e:	6881      	ldr	r1, [r0, #8]
   80d30:	9401      	str	r4, [sp, #4]
   80d32:	f000 f915 	bl	80f60 <_vfiprintf_r>
   80d36:	b002      	add	sp, #8
   80d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80d3c:	b004      	add	sp, #16
   80d3e:	4770      	bx	lr
   80d40:	20070558 	.word	0x20070558

00080d44 <memset>:
   80d44:	b470      	push	{r4, r5, r6}
   80d46:	0784      	lsls	r4, r0, #30
   80d48:	d046      	beq.n	80dd8 <memset+0x94>
   80d4a:	1e54      	subs	r4, r2, #1
   80d4c:	2a00      	cmp	r2, #0
   80d4e:	d041      	beq.n	80dd4 <memset+0x90>
   80d50:	b2cd      	uxtb	r5, r1
   80d52:	4603      	mov	r3, r0
   80d54:	e002      	b.n	80d5c <memset+0x18>
   80d56:	1e62      	subs	r2, r4, #1
   80d58:	b3e4      	cbz	r4, 80dd4 <memset+0x90>
   80d5a:	4614      	mov	r4, r2
   80d5c:	f803 5b01 	strb.w	r5, [r3], #1
   80d60:	079a      	lsls	r2, r3, #30
   80d62:	d1f8      	bne.n	80d56 <memset+0x12>
   80d64:	2c03      	cmp	r4, #3
   80d66:	d92e      	bls.n	80dc6 <memset+0x82>
   80d68:	b2cd      	uxtb	r5, r1
   80d6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80d6e:	2c0f      	cmp	r4, #15
   80d70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80d74:	d919      	bls.n	80daa <memset+0x66>
   80d76:	4626      	mov	r6, r4
   80d78:	f103 0210 	add.w	r2, r3, #16
   80d7c:	3e10      	subs	r6, #16
   80d7e:	2e0f      	cmp	r6, #15
   80d80:	f842 5c10 	str.w	r5, [r2, #-16]
   80d84:	f842 5c0c 	str.w	r5, [r2, #-12]
   80d88:	f842 5c08 	str.w	r5, [r2, #-8]
   80d8c:	f842 5c04 	str.w	r5, [r2, #-4]
   80d90:	f102 0210 	add.w	r2, r2, #16
   80d94:	d8f2      	bhi.n	80d7c <memset+0x38>
   80d96:	f1a4 0210 	sub.w	r2, r4, #16
   80d9a:	f022 020f 	bic.w	r2, r2, #15
   80d9e:	f004 040f 	and.w	r4, r4, #15
   80da2:	3210      	adds	r2, #16
   80da4:	2c03      	cmp	r4, #3
   80da6:	4413      	add	r3, r2
   80da8:	d90d      	bls.n	80dc6 <memset+0x82>
   80daa:	461e      	mov	r6, r3
   80dac:	4622      	mov	r2, r4
   80dae:	3a04      	subs	r2, #4
   80db0:	2a03      	cmp	r2, #3
   80db2:	f846 5b04 	str.w	r5, [r6], #4
   80db6:	d8fa      	bhi.n	80dae <memset+0x6a>
   80db8:	1f22      	subs	r2, r4, #4
   80dba:	f022 0203 	bic.w	r2, r2, #3
   80dbe:	3204      	adds	r2, #4
   80dc0:	4413      	add	r3, r2
   80dc2:	f004 0403 	and.w	r4, r4, #3
   80dc6:	b12c      	cbz	r4, 80dd4 <memset+0x90>
   80dc8:	b2c9      	uxtb	r1, r1
   80dca:	441c      	add	r4, r3
   80dcc:	f803 1b01 	strb.w	r1, [r3], #1
   80dd0:	42a3      	cmp	r3, r4
   80dd2:	d1fb      	bne.n	80dcc <memset+0x88>
   80dd4:	bc70      	pop	{r4, r5, r6}
   80dd6:	4770      	bx	lr
   80dd8:	4614      	mov	r4, r2
   80dda:	4603      	mov	r3, r0
   80ddc:	e7c2      	b.n	80d64 <memset+0x20>
   80dde:	bf00      	nop

00080de0 <setbuf>:
   80de0:	2900      	cmp	r1, #0
   80de2:	bf0c      	ite	eq
   80de4:	2202      	moveq	r2, #2
   80de6:	2200      	movne	r2, #0
   80de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80dec:	f000 b800 	b.w	80df0 <setvbuf>

00080df0 <setvbuf>:
   80df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80df4:	4d3a      	ldr	r5, [pc, #232]	; (80ee0 <setvbuf+0xf0>)
   80df6:	4604      	mov	r4, r0
   80df8:	682e      	ldr	r6, [r5, #0]
   80dfa:	4690      	mov	r8, r2
   80dfc:	460d      	mov	r5, r1
   80dfe:	461f      	mov	r7, r3
   80e00:	b116      	cbz	r6, 80e08 <setvbuf+0x18>
   80e02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   80e04:	2b00      	cmp	r3, #0
   80e06:	d03c      	beq.n	80e82 <setvbuf+0x92>
   80e08:	f1b8 0f02 	cmp.w	r8, #2
   80e0c:	d82f      	bhi.n	80e6e <setvbuf+0x7e>
   80e0e:	2f00      	cmp	r7, #0
   80e10:	db2d      	blt.n	80e6e <setvbuf+0x7e>
   80e12:	4621      	mov	r1, r4
   80e14:	4630      	mov	r0, r6
   80e16:	f000 ffff 	bl	81e18 <_fflush_r>
   80e1a:	89a1      	ldrh	r1, [r4, #12]
   80e1c:	2300      	movs	r3, #0
   80e1e:	6063      	str	r3, [r4, #4]
   80e20:	61a3      	str	r3, [r4, #24]
   80e22:	060b      	lsls	r3, r1, #24
   80e24:	d427      	bmi.n	80e76 <setvbuf+0x86>
   80e26:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   80e2a:	b289      	uxth	r1, r1
   80e2c:	f1b8 0f02 	cmp.w	r8, #2
   80e30:	81a1      	strh	r1, [r4, #12]
   80e32:	d02a      	beq.n	80e8a <setvbuf+0x9a>
   80e34:	2d00      	cmp	r5, #0
   80e36:	d036      	beq.n	80ea6 <setvbuf+0xb6>
   80e38:	f1b8 0f01 	cmp.w	r8, #1
   80e3c:	d011      	beq.n	80e62 <setvbuf+0x72>
   80e3e:	b289      	uxth	r1, r1
   80e40:	f001 0008 	and.w	r0, r1, #8
   80e44:	4b27      	ldr	r3, [pc, #156]	; (80ee4 <setvbuf+0xf4>)
   80e46:	b280      	uxth	r0, r0
   80e48:	63f3      	str	r3, [r6, #60]	; 0x3c
   80e4a:	6025      	str	r5, [r4, #0]
   80e4c:	6125      	str	r5, [r4, #16]
   80e4e:	6167      	str	r7, [r4, #20]
   80e50:	b178      	cbz	r0, 80e72 <setvbuf+0x82>
   80e52:	f011 0f03 	tst.w	r1, #3
   80e56:	bf18      	it	ne
   80e58:	2700      	movne	r7, #0
   80e5a:	2000      	movs	r0, #0
   80e5c:	60a7      	str	r7, [r4, #8]
   80e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e62:	f041 0101 	orr.w	r1, r1, #1
   80e66:	427b      	negs	r3, r7
   80e68:	81a1      	strh	r1, [r4, #12]
   80e6a:	61a3      	str	r3, [r4, #24]
   80e6c:	e7e7      	b.n	80e3e <setvbuf+0x4e>
   80e6e:	f04f 30ff 	mov.w	r0, #4294967295
   80e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e76:	6921      	ldr	r1, [r4, #16]
   80e78:	4630      	mov	r0, r6
   80e7a:	f001 f939 	bl	820f0 <_free_r>
   80e7e:	89a1      	ldrh	r1, [r4, #12]
   80e80:	e7d1      	b.n	80e26 <setvbuf+0x36>
   80e82:	4630      	mov	r0, r6
   80e84:	f001 f85c 	bl	81f40 <__sinit>
   80e88:	e7be      	b.n	80e08 <setvbuf+0x18>
   80e8a:	2000      	movs	r0, #0
   80e8c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   80e90:	f041 0102 	orr.w	r1, r1, #2
   80e94:	2500      	movs	r5, #0
   80e96:	2201      	movs	r2, #1
   80e98:	81a1      	strh	r1, [r4, #12]
   80e9a:	60a5      	str	r5, [r4, #8]
   80e9c:	6023      	str	r3, [r4, #0]
   80e9e:	6123      	str	r3, [r4, #16]
   80ea0:	6162      	str	r2, [r4, #20]
   80ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ea6:	2f00      	cmp	r7, #0
   80ea8:	bf08      	it	eq
   80eaa:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80eae:	4638      	mov	r0, r7
   80eb0:	f001 fc28 	bl	82704 <malloc>
   80eb4:	4605      	mov	r5, r0
   80eb6:	b128      	cbz	r0, 80ec4 <setvbuf+0xd4>
   80eb8:	89a1      	ldrh	r1, [r4, #12]
   80eba:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80ebe:	b289      	uxth	r1, r1
   80ec0:	81a1      	strh	r1, [r4, #12]
   80ec2:	e7b9      	b.n	80e38 <setvbuf+0x48>
   80ec4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80ec8:	f001 fc1c 	bl	82704 <malloc>
   80ecc:	4605      	mov	r5, r0
   80ece:	b918      	cbnz	r0, 80ed8 <setvbuf+0xe8>
   80ed0:	89a1      	ldrh	r1, [r4, #12]
   80ed2:	f04f 30ff 	mov.w	r0, #4294967295
   80ed6:	e7d9      	b.n	80e8c <setvbuf+0x9c>
   80ed8:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80edc:	e7ec      	b.n	80eb8 <setvbuf+0xc8>
   80ede:	bf00      	nop
   80ee0:	20070558 	.word	0x20070558
   80ee4:	00081e45 	.word	0x00081e45

00080ee8 <__sprint_r.part.0>:
   80ee8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80eee:	049c      	lsls	r4, r3, #18
   80ef0:	460f      	mov	r7, r1
   80ef2:	4692      	mov	sl, r2
   80ef4:	d52b      	bpl.n	80f4e <__sprint_r.part.0+0x66>
   80ef6:	6893      	ldr	r3, [r2, #8]
   80ef8:	6812      	ldr	r2, [r2, #0]
   80efa:	b333      	cbz	r3, 80f4a <__sprint_r.part.0+0x62>
   80efc:	4680      	mov	r8, r0
   80efe:	f102 0908 	add.w	r9, r2, #8
   80f02:	e919 0060 	ldmdb	r9, {r5, r6}
   80f06:	08b6      	lsrs	r6, r6, #2
   80f08:	d017      	beq.n	80f3a <__sprint_r.part.0+0x52>
   80f0a:	3d04      	subs	r5, #4
   80f0c:	2400      	movs	r4, #0
   80f0e:	e001      	b.n	80f14 <__sprint_r.part.0+0x2c>
   80f10:	42a6      	cmp	r6, r4
   80f12:	d010      	beq.n	80f36 <__sprint_r.part.0+0x4e>
   80f14:	4640      	mov	r0, r8
   80f16:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80f1a:	463a      	mov	r2, r7
   80f1c:	f001 f888 	bl	82030 <_fputwc_r>
   80f20:	1c43      	adds	r3, r0, #1
   80f22:	f104 0401 	add.w	r4, r4, #1
   80f26:	d1f3      	bne.n	80f10 <__sprint_r.part.0+0x28>
   80f28:	2300      	movs	r3, #0
   80f2a:	f8ca 3008 	str.w	r3, [sl, #8]
   80f2e:	f8ca 3004 	str.w	r3, [sl, #4]
   80f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80f36:	f8da 3008 	ldr.w	r3, [sl, #8]
   80f3a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   80f3e:	f8ca 3008 	str.w	r3, [sl, #8]
   80f42:	f109 0908 	add.w	r9, r9, #8
   80f46:	2b00      	cmp	r3, #0
   80f48:	d1db      	bne.n	80f02 <__sprint_r.part.0+0x1a>
   80f4a:	2000      	movs	r0, #0
   80f4c:	e7ec      	b.n	80f28 <__sprint_r.part.0+0x40>
   80f4e:	f001 f9a7 	bl	822a0 <__sfvwrite_r>
   80f52:	2300      	movs	r3, #0
   80f54:	f8ca 3008 	str.w	r3, [sl, #8]
   80f58:	f8ca 3004 	str.w	r3, [sl, #4]
   80f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00080f60 <_vfiprintf_r>:
   80f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f64:	b0ab      	sub	sp, #172	; 0xac
   80f66:	461c      	mov	r4, r3
   80f68:	9100      	str	r1, [sp, #0]
   80f6a:	4693      	mov	fp, r2
   80f6c:	9304      	str	r3, [sp, #16]
   80f6e:	9001      	str	r0, [sp, #4]
   80f70:	b118      	cbz	r0, 80f7a <_vfiprintf_r+0x1a>
   80f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80f74:	2b00      	cmp	r3, #0
   80f76:	f000 80e3 	beq.w	81140 <_vfiprintf_r+0x1e0>
   80f7a:	9b00      	ldr	r3, [sp, #0]
   80f7c:	8999      	ldrh	r1, [r3, #12]
   80f7e:	b28a      	uxth	r2, r1
   80f80:	0490      	lsls	r0, r2, #18
   80f82:	d408      	bmi.n	80f96 <_vfiprintf_r+0x36>
   80f84:	4618      	mov	r0, r3
   80f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   80f88:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   80f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   80f90:	8182      	strh	r2, [r0, #12]
   80f92:	6643      	str	r3, [r0, #100]	; 0x64
   80f94:	b292      	uxth	r2, r2
   80f96:	0711      	lsls	r1, r2, #28
   80f98:	f140 80b2 	bpl.w	81100 <_vfiprintf_r+0x1a0>
   80f9c:	9b00      	ldr	r3, [sp, #0]
   80f9e:	691b      	ldr	r3, [r3, #16]
   80fa0:	2b00      	cmp	r3, #0
   80fa2:	f000 80ad 	beq.w	81100 <_vfiprintf_r+0x1a0>
   80fa6:	f002 021a 	and.w	r2, r2, #26
   80faa:	2a0a      	cmp	r2, #10
   80fac:	f000 80b4 	beq.w	81118 <_vfiprintf_r+0x1b8>
   80fb0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   80fb4:	4654      	mov	r4, sl
   80fb6:	2300      	movs	r3, #0
   80fb8:	9309      	str	r3, [sp, #36]	; 0x24
   80fba:	9302      	str	r3, [sp, #8]
   80fbc:	930f      	str	r3, [sp, #60]	; 0x3c
   80fbe:	930e      	str	r3, [sp, #56]	; 0x38
   80fc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   80fc4:	f89b 3000 	ldrb.w	r3, [fp]
   80fc8:	2b00      	cmp	r3, #0
   80fca:	f000 84a3 	beq.w	81914 <_vfiprintf_r+0x9b4>
   80fce:	2b25      	cmp	r3, #37	; 0x25
   80fd0:	f000 84a0 	beq.w	81914 <_vfiprintf_r+0x9b4>
   80fd4:	465a      	mov	r2, fp
   80fd6:	e001      	b.n	80fdc <_vfiprintf_r+0x7c>
   80fd8:	2b25      	cmp	r3, #37	; 0x25
   80fda:	d003      	beq.n	80fe4 <_vfiprintf_r+0x84>
   80fdc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	d1f9      	bne.n	80fd8 <_vfiprintf_r+0x78>
   80fe4:	ebcb 0602 	rsb	r6, fp, r2
   80fe8:	4615      	mov	r5, r2
   80fea:	b196      	cbz	r6, 81012 <_vfiprintf_r+0xb2>
   80fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   80fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   80ff0:	3301      	adds	r3, #1
   80ff2:	4432      	add	r2, r6
   80ff4:	2b07      	cmp	r3, #7
   80ff6:	f8c4 b000 	str.w	fp, [r4]
   80ffa:	6066      	str	r6, [r4, #4]
   80ffc:	920f      	str	r2, [sp, #60]	; 0x3c
   80ffe:	930e      	str	r3, [sp, #56]	; 0x38
   81000:	dd79      	ble.n	810f6 <_vfiprintf_r+0x196>
   81002:	2a00      	cmp	r2, #0
   81004:	f040 84ad 	bne.w	81962 <_vfiprintf_r+0xa02>
   81008:	4654      	mov	r4, sl
   8100a:	9b02      	ldr	r3, [sp, #8]
   8100c:	920e      	str	r2, [sp, #56]	; 0x38
   8100e:	4433      	add	r3, r6
   81010:	9302      	str	r3, [sp, #8]
   81012:	782b      	ldrb	r3, [r5, #0]
   81014:	2b00      	cmp	r3, #0
   81016:	f000 835f 	beq.w	816d8 <_vfiprintf_r+0x778>
   8101a:	f04f 0300 	mov.w	r3, #0
   8101e:	2100      	movs	r1, #0
   81020:	f04f 3cff 	mov.w	ip, #4294967295
   81024:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81028:	1c68      	adds	r0, r5, #1
   8102a:	786b      	ldrb	r3, [r5, #1]
   8102c:	4688      	mov	r8, r1
   8102e:	460d      	mov	r5, r1
   81030:	4666      	mov	r6, ip
   81032:	f100 0b01 	add.w	fp, r0, #1
   81036:	f1a3 0220 	sub.w	r2, r3, #32
   8103a:	2a58      	cmp	r2, #88	; 0x58
   8103c:	f200 82aa 	bhi.w	81594 <_vfiprintf_r+0x634>
   81040:	e8df f012 	tbh	[pc, r2, lsl #1]
   81044:	02a8029a 	.word	0x02a8029a
   81048:	02a202a8 	.word	0x02a202a8
   8104c:	02a802a8 	.word	0x02a802a8
   81050:	02a802a8 	.word	0x02a802a8
   81054:	02a802a8 	.word	0x02a802a8
   81058:	02600254 	.word	0x02600254
   8105c:	010d02a8 	.word	0x010d02a8
   81060:	02a8026c 	.word	0x02a8026c
   81064:	012f0129 	.word	0x012f0129
   81068:	012f012f 	.word	0x012f012f
   8106c:	012f012f 	.word	0x012f012f
   81070:	012f012f 	.word	0x012f012f
   81074:	012f012f 	.word	0x012f012f
   81078:	02a802a8 	.word	0x02a802a8
   8107c:	02a802a8 	.word	0x02a802a8
   81080:	02a802a8 	.word	0x02a802a8
   81084:	02a802a8 	.word	0x02a802a8
   81088:	02a802a8 	.word	0x02a802a8
   8108c:	02a8013d 	.word	0x02a8013d
   81090:	02a802a8 	.word	0x02a802a8
   81094:	02a802a8 	.word	0x02a802a8
   81098:	02a802a8 	.word	0x02a802a8
   8109c:	02a802a8 	.word	0x02a802a8
   810a0:	017402a8 	.word	0x017402a8
   810a4:	02a802a8 	.word	0x02a802a8
   810a8:	02a802a8 	.word	0x02a802a8
   810ac:	018b02a8 	.word	0x018b02a8
   810b0:	02a802a8 	.word	0x02a802a8
   810b4:	02a801a3 	.word	0x02a801a3
   810b8:	02a802a8 	.word	0x02a802a8
   810bc:	02a802a8 	.word	0x02a802a8
   810c0:	02a802a8 	.word	0x02a802a8
   810c4:	02a802a8 	.word	0x02a802a8
   810c8:	01c702a8 	.word	0x01c702a8
   810cc:	02a801da 	.word	0x02a801da
   810d0:	02a802a8 	.word	0x02a802a8
   810d4:	01da0123 	.word	0x01da0123
   810d8:	02a802a8 	.word	0x02a802a8
   810dc:	02a8024b 	.word	0x02a8024b
   810e0:	01130288 	.word	0x01130288
   810e4:	020701f4 	.word	0x020701f4
   810e8:	020d02a8 	.word	0x020d02a8
   810ec:	008102a8 	.word	0x008102a8
   810f0:	02a802a8 	.word	0x02a802a8
   810f4:	0232      	.short	0x0232
   810f6:	3408      	adds	r4, #8
   810f8:	9b02      	ldr	r3, [sp, #8]
   810fa:	4433      	add	r3, r6
   810fc:	9302      	str	r3, [sp, #8]
   810fe:	e788      	b.n	81012 <_vfiprintf_r+0xb2>
   81100:	9801      	ldr	r0, [sp, #4]
   81102:	9900      	ldr	r1, [sp, #0]
   81104:	f000 fd72 	bl	81bec <__swsetup_r>
   81108:	b9a8      	cbnz	r0, 81136 <_vfiprintf_r+0x1d6>
   8110a:	9b00      	ldr	r3, [sp, #0]
   8110c:	899a      	ldrh	r2, [r3, #12]
   8110e:	f002 021a 	and.w	r2, r2, #26
   81112:	2a0a      	cmp	r2, #10
   81114:	f47f af4c 	bne.w	80fb0 <_vfiprintf_r+0x50>
   81118:	9b00      	ldr	r3, [sp, #0]
   8111a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   8111e:	2b00      	cmp	r3, #0
   81120:	f6ff af46 	blt.w	80fb0 <_vfiprintf_r+0x50>
   81124:	9801      	ldr	r0, [sp, #4]
   81126:	9900      	ldr	r1, [sp, #0]
   81128:	465a      	mov	r2, fp
   8112a:	4623      	mov	r3, r4
   8112c:	f000 fd20 	bl	81b70 <__sbprintf>
   81130:	b02b      	add	sp, #172	; 0xac
   81132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81136:	f04f 30ff 	mov.w	r0, #4294967295
   8113a:	b02b      	add	sp, #172	; 0xac
   8113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81140:	f000 fefe 	bl	81f40 <__sinit>
   81144:	e719      	b.n	80f7a <_vfiprintf_r+0x1a>
   81146:	f018 0f20 	tst.w	r8, #32
   8114a:	9503      	str	r5, [sp, #12]
   8114c:	46b4      	mov	ip, r6
   8114e:	f000 810c 	beq.w	8136a <_vfiprintf_r+0x40a>
   81152:	9b04      	ldr	r3, [sp, #16]
   81154:	3307      	adds	r3, #7
   81156:	f023 0307 	bic.w	r3, r3, #7
   8115a:	f103 0208 	add.w	r2, r3, #8
   8115e:	e9d3 6700 	ldrd	r6, r7, [r3]
   81162:	9204      	str	r2, [sp, #16]
   81164:	2301      	movs	r3, #1
   81166:	f04f 0200 	mov.w	r2, #0
   8116a:	46e1      	mov	r9, ip
   8116c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   81170:	2500      	movs	r5, #0
   81172:	f1bc 0f00 	cmp.w	ip, #0
   81176:	bfa8      	it	ge
   81178:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   8117c:	ea56 0207 	orrs.w	r2, r6, r7
   81180:	f040 80c4 	bne.w	8130c <_vfiprintf_r+0x3ac>
   81184:	f1bc 0f00 	cmp.w	ip, #0
   81188:	f000 8380 	beq.w	8188c <_vfiprintf_r+0x92c>
   8118c:	2b01      	cmp	r3, #1
   8118e:	f000 80c5 	beq.w	8131c <_vfiprintf_r+0x3bc>
   81192:	2b02      	cmp	r3, #2
   81194:	f000 8386 	beq.w	818a4 <_vfiprintf_r+0x944>
   81198:	4651      	mov	r1, sl
   8119a:	08f2      	lsrs	r2, r6, #3
   8119c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   811a0:	08f8      	lsrs	r0, r7, #3
   811a2:	f006 0307 	and.w	r3, r6, #7
   811a6:	4607      	mov	r7, r0
   811a8:	4616      	mov	r6, r2
   811aa:	3330      	adds	r3, #48	; 0x30
   811ac:	ea56 0207 	orrs.w	r2, r6, r7
   811b0:	f801 3d01 	strb.w	r3, [r1, #-1]!
   811b4:	d1f1      	bne.n	8119a <_vfiprintf_r+0x23a>
   811b6:	f018 0f01 	tst.w	r8, #1
   811ba:	9107      	str	r1, [sp, #28]
   811bc:	f040 83fa 	bne.w	819b4 <_vfiprintf_r+0xa54>
   811c0:	ebc1 090a 	rsb	r9, r1, sl
   811c4:	45e1      	cmp	r9, ip
   811c6:	464e      	mov	r6, r9
   811c8:	bfb8      	it	lt
   811ca:	4666      	movlt	r6, ip
   811cc:	b105      	cbz	r5, 811d0 <_vfiprintf_r+0x270>
   811ce:	3601      	adds	r6, #1
   811d0:	f018 0302 	ands.w	r3, r8, #2
   811d4:	9305      	str	r3, [sp, #20]
   811d6:	bf18      	it	ne
   811d8:	3602      	addne	r6, #2
   811da:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   811de:	9306      	str	r3, [sp, #24]
   811e0:	f040 81f9 	bne.w	815d6 <_vfiprintf_r+0x676>
   811e4:	9b03      	ldr	r3, [sp, #12]
   811e6:	1b9d      	subs	r5, r3, r6
   811e8:	2d00      	cmp	r5, #0
   811ea:	f340 81f4 	ble.w	815d6 <_vfiprintf_r+0x676>
   811ee:	2d10      	cmp	r5, #16
   811f0:	f340 848a 	ble.w	81b08 <_vfiprintf_r+0xba8>
   811f4:	4620      	mov	r0, r4
   811f6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   811fa:	4664      	mov	r4, ip
   811fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   811fe:	4fc4      	ldr	r7, [pc, #784]	; (81510 <_vfiprintf_r+0x5b0>)
   81200:	2310      	movs	r3, #16
   81202:	4671      	mov	r1, lr
   81204:	4684      	mov	ip, r0
   81206:	e007      	b.n	81218 <_vfiprintf_r+0x2b8>
   81208:	f101 0e02 	add.w	lr, r1, #2
   8120c:	4601      	mov	r1, r0
   8120e:	f10c 0c08 	add.w	ip, ip, #8
   81212:	3d10      	subs	r5, #16
   81214:	2d10      	cmp	r5, #16
   81216:	dd13      	ble.n	81240 <_vfiprintf_r+0x2e0>
   81218:	1c48      	adds	r0, r1, #1
   8121a:	3210      	adds	r2, #16
   8121c:	2807      	cmp	r0, #7
   8121e:	920f      	str	r2, [sp, #60]	; 0x3c
   81220:	f8cc 7000 	str.w	r7, [ip]
   81224:	f8cc 3004 	str.w	r3, [ip, #4]
   81228:	900e      	str	r0, [sp, #56]	; 0x38
   8122a:	dded      	ble.n	81208 <_vfiprintf_r+0x2a8>
   8122c:	2a00      	cmp	r2, #0
   8122e:	f040 81c2 	bne.w	815b6 <_vfiprintf_r+0x656>
   81232:	3d10      	subs	r5, #16
   81234:	2d10      	cmp	r5, #16
   81236:	4611      	mov	r1, r2
   81238:	f04f 0e01 	mov.w	lr, #1
   8123c:	46d4      	mov	ip, sl
   8123e:	dceb      	bgt.n	81218 <_vfiprintf_r+0x2b8>
   81240:	4663      	mov	r3, ip
   81242:	4671      	mov	r1, lr
   81244:	46a4      	mov	ip, r4
   81246:	461c      	mov	r4, r3
   81248:	442a      	add	r2, r5
   8124a:	2907      	cmp	r1, #7
   8124c:	920f      	str	r2, [sp, #60]	; 0x3c
   8124e:	6027      	str	r7, [r4, #0]
   81250:	6065      	str	r5, [r4, #4]
   81252:	910e      	str	r1, [sp, #56]	; 0x38
   81254:	f300 8346 	bgt.w	818e4 <_vfiprintf_r+0x984>
   81258:	3408      	adds	r4, #8
   8125a:	1c48      	adds	r0, r1, #1
   8125c:	e1be      	b.n	815dc <_vfiprintf_r+0x67c>
   8125e:	4658      	mov	r0, fp
   81260:	f048 0804 	orr.w	r8, r8, #4
   81264:	f89b 3000 	ldrb.w	r3, [fp]
   81268:	e6e3      	b.n	81032 <_vfiprintf_r+0xd2>
   8126a:	f018 0320 	ands.w	r3, r8, #32
   8126e:	9503      	str	r5, [sp, #12]
   81270:	46b4      	mov	ip, r6
   81272:	d062      	beq.n	8133a <_vfiprintf_r+0x3da>
   81274:	9b04      	ldr	r3, [sp, #16]
   81276:	3307      	adds	r3, #7
   81278:	f023 0307 	bic.w	r3, r3, #7
   8127c:	f103 0208 	add.w	r2, r3, #8
   81280:	e9d3 6700 	ldrd	r6, r7, [r3]
   81284:	9204      	str	r2, [sp, #16]
   81286:	2300      	movs	r3, #0
   81288:	e76d      	b.n	81166 <_vfiprintf_r+0x206>
   8128a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   8128e:	f89b 3000 	ldrb.w	r3, [fp]
   81292:	4658      	mov	r0, fp
   81294:	e6cd      	b.n	81032 <_vfiprintf_r+0xd2>
   81296:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8129a:	f89b 3000 	ldrb.w	r3, [fp]
   8129e:	4658      	mov	r0, fp
   812a0:	e6c7      	b.n	81032 <_vfiprintf_r+0xd2>
   812a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   812a6:	2500      	movs	r5, #0
   812a8:	f81b 3b01 	ldrb.w	r3, [fp], #1
   812ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   812b0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   812b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   812b8:	2a09      	cmp	r2, #9
   812ba:	d9f5      	bls.n	812a8 <_vfiprintf_r+0x348>
   812bc:	e6bb      	b.n	81036 <_vfiprintf_r+0xd6>
   812be:	f048 0810 	orr.w	r8, r8, #16
   812c2:	f018 0f20 	tst.w	r8, #32
   812c6:	9503      	str	r5, [sp, #12]
   812c8:	46b4      	mov	ip, r6
   812ca:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   812ce:	f000 809b 	beq.w	81408 <_vfiprintf_r+0x4a8>
   812d2:	9904      	ldr	r1, [sp, #16]
   812d4:	3107      	adds	r1, #7
   812d6:	f021 0107 	bic.w	r1, r1, #7
   812da:	e9d1 2300 	ldrd	r2, r3, [r1]
   812de:	4616      	mov	r6, r2
   812e0:	461f      	mov	r7, r3
   812e2:	3108      	adds	r1, #8
   812e4:	9104      	str	r1, [sp, #16]
   812e6:	2a00      	cmp	r2, #0
   812e8:	f173 0300 	sbcs.w	r3, r3, #0
   812ec:	f2c0 83a4 	blt.w	81a38 <_vfiprintf_r+0xad8>
   812f0:	f1bc 0f00 	cmp.w	ip, #0
   812f4:	bfa8      	it	ge
   812f6:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   812fa:	ea56 0207 	orrs.w	r2, r6, r7
   812fe:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81302:	46e1      	mov	r9, ip
   81304:	f04f 0301 	mov.w	r3, #1
   81308:	f43f af3c 	beq.w	81184 <_vfiprintf_r+0x224>
   8130c:	2b01      	cmp	r3, #1
   8130e:	f47f af40 	bne.w	81192 <_vfiprintf_r+0x232>
   81312:	2f00      	cmp	r7, #0
   81314:	bf08      	it	eq
   81316:	2e0a      	cmpeq	r6, #10
   81318:	f080 8332 	bcs.w	81980 <_vfiprintf_r+0xa20>
   8131c:	ab2a      	add	r3, sp, #168	; 0xa8
   8131e:	3630      	adds	r6, #48	; 0x30
   81320:	f803 6d41 	strb.w	r6, [r3, #-65]!
   81324:	ebc3 090a 	rsb	r9, r3, sl
   81328:	9307      	str	r3, [sp, #28]
   8132a:	e74b      	b.n	811c4 <_vfiprintf_r+0x264>
   8132c:	f048 0810 	orr.w	r8, r8, #16
   81330:	f018 0320 	ands.w	r3, r8, #32
   81334:	9503      	str	r5, [sp, #12]
   81336:	46b4      	mov	ip, r6
   81338:	d19c      	bne.n	81274 <_vfiprintf_r+0x314>
   8133a:	f018 0210 	ands.w	r2, r8, #16
   8133e:	f040 82f7 	bne.w	81930 <_vfiprintf_r+0x9d0>
   81342:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   81346:	f000 82f3 	beq.w	81930 <_vfiprintf_r+0x9d0>
   8134a:	9904      	ldr	r1, [sp, #16]
   8134c:	4613      	mov	r3, r2
   8134e:	460a      	mov	r2, r1
   81350:	3204      	adds	r2, #4
   81352:	880e      	ldrh	r6, [r1, #0]
   81354:	2700      	movs	r7, #0
   81356:	9204      	str	r2, [sp, #16]
   81358:	e705      	b.n	81166 <_vfiprintf_r+0x206>
   8135a:	f048 0810 	orr.w	r8, r8, #16
   8135e:	f018 0f20 	tst.w	r8, #32
   81362:	9503      	str	r5, [sp, #12]
   81364:	46b4      	mov	ip, r6
   81366:	f47f aef4 	bne.w	81152 <_vfiprintf_r+0x1f2>
   8136a:	9a04      	ldr	r2, [sp, #16]
   8136c:	f018 0f10 	tst.w	r8, #16
   81370:	4613      	mov	r3, r2
   81372:	f040 82e4 	bne.w	8193e <_vfiprintf_r+0x9de>
   81376:	f018 0f40 	tst.w	r8, #64	; 0x40
   8137a:	f000 82e0 	beq.w	8193e <_vfiprintf_r+0x9de>
   8137e:	8816      	ldrh	r6, [r2, #0]
   81380:	3204      	adds	r2, #4
   81382:	2700      	movs	r7, #0
   81384:	2301      	movs	r3, #1
   81386:	9204      	str	r2, [sp, #16]
   81388:	e6ed      	b.n	81166 <_vfiprintf_r+0x206>
   8138a:	4a62      	ldr	r2, [pc, #392]	; (81514 <_vfiprintf_r+0x5b4>)
   8138c:	f018 0f20 	tst.w	r8, #32
   81390:	9503      	str	r5, [sp, #12]
   81392:	46b4      	mov	ip, r6
   81394:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81398:	9209      	str	r2, [sp, #36]	; 0x24
   8139a:	f000 808f 	beq.w	814bc <_vfiprintf_r+0x55c>
   8139e:	9a04      	ldr	r2, [sp, #16]
   813a0:	3207      	adds	r2, #7
   813a2:	f022 0207 	bic.w	r2, r2, #7
   813a6:	f102 0108 	add.w	r1, r2, #8
   813aa:	9104      	str	r1, [sp, #16]
   813ac:	e9d2 6700 	ldrd	r6, r7, [r2]
   813b0:	f018 0f01 	tst.w	r8, #1
   813b4:	f000 828f 	beq.w	818d6 <_vfiprintf_r+0x976>
   813b8:	ea56 0207 	orrs.w	r2, r6, r7
   813bc:	f000 828b 	beq.w	818d6 <_vfiprintf_r+0x976>
   813c0:	2230      	movs	r2, #48	; 0x30
   813c2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   813c6:	f048 0802 	orr.w	r8, r8, #2
   813ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   813ce:	2302      	movs	r3, #2
   813d0:	e6c9      	b.n	81166 <_vfiprintf_r+0x206>
   813d2:	9a04      	ldr	r2, [sp, #16]
   813d4:	2601      	movs	r6, #1
   813d6:	6813      	ldr	r3, [r2, #0]
   813d8:	f04f 0100 	mov.w	r1, #0
   813dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   813e0:	4613      	mov	r3, r2
   813e2:	46b1      	mov	r9, r6
   813e4:	3304      	adds	r3, #4
   813e6:	9304      	str	r3, [sp, #16]
   813e8:	ab10      	add	r3, sp, #64	; 0x40
   813ea:	9503      	str	r5, [sp, #12]
   813ec:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   813f0:	9307      	str	r3, [sp, #28]
   813f2:	f04f 0c00 	mov.w	ip, #0
   813f6:	e6eb      	b.n	811d0 <_vfiprintf_r+0x270>
   813f8:	f018 0f20 	tst.w	r8, #32
   813fc:	9503      	str	r5, [sp, #12]
   813fe:	46b4      	mov	ip, r6
   81400:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81404:	f47f af65 	bne.w	812d2 <_vfiprintf_r+0x372>
   81408:	9a04      	ldr	r2, [sp, #16]
   8140a:	f018 0f10 	tst.w	r8, #16
   8140e:	4613      	mov	r3, r2
   81410:	f040 82a0 	bne.w	81954 <_vfiprintf_r+0x9f4>
   81414:	f018 0f40 	tst.w	r8, #64	; 0x40
   81418:	f000 829c 	beq.w	81954 <_vfiprintf_r+0x9f4>
   8141c:	f9b2 6000 	ldrsh.w	r6, [r2]
   81420:	3304      	adds	r3, #4
   81422:	17f7      	asrs	r7, r6, #31
   81424:	9304      	str	r3, [sp, #16]
   81426:	4632      	mov	r2, r6
   81428:	463b      	mov	r3, r7
   8142a:	e75c      	b.n	812e6 <_vfiprintf_r+0x386>
   8142c:	9904      	ldr	r1, [sp, #16]
   8142e:	2378      	movs	r3, #120	; 0x78
   81430:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81434:	4b38      	ldr	r3, [pc, #224]	; (81518 <_vfiprintf_r+0x5b8>)
   81436:	46b4      	mov	ip, r6
   81438:	2230      	movs	r2, #48	; 0x30
   8143a:	680e      	ldr	r6, [r1, #0]
   8143c:	3104      	adds	r1, #4
   8143e:	9309      	str	r3, [sp, #36]	; 0x24
   81440:	9503      	str	r5, [sp, #12]
   81442:	f048 0802 	orr.w	r8, r8, #2
   81446:	9104      	str	r1, [sp, #16]
   81448:	2700      	movs	r7, #0
   8144a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8144e:	2302      	movs	r3, #2
   81450:	e689      	b.n	81166 <_vfiprintf_r+0x206>
   81452:	f048 0820 	orr.w	r8, r8, #32
   81456:	f89b 3000 	ldrb.w	r3, [fp]
   8145a:	4658      	mov	r0, fp
   8145c:	e5e9      	b.n	81032 <_vfiprintf_r+0xd2>
   8145e:	f04f 0100 	mov.w	r1, #0
   81462:	9a04      	ldr	r2, [sp, #16]
   81464:	9503      	str	r5, [sp, #12]
   81466:	6813      	ldr	r3, [r2, #0]
   81468:	46b4      	mov	ip, r6
   8146a:	9307      	str	r3, [sp, #28]
   8146c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81470:	1d15      	adds	r5, r2, #4
   81472:	2b00      	cmp	r3, #0
   81474:	f000 834e 	beq.w	81b14 <_vfiprintf_r+0xbb4>
   81478:	2e00      	cmp	r6, #0
   8147a:	f2c0 8329 	blt.w	81ad0 <_vfiprintf_r+0xb70>
   8147e:	9e07      	ldr	r6, [sp, #28]
   81480:	4662      	mov	r2, ip
   81482:	4630      	mov	r0, r6
   81484:	2100      	movs	r1, #0
   81486:	f8cd c010 	str.w	ip, [sp, #16]
   8148a:	f001 fbc9 	bl	82c20 <memchr>
   8148e:	f8dd c010 	ldr.w	ip, [sp, #16]
   81492:	2800      	cmp	r0, #0
   81494:	f000 834e 	beq.w	81b34 <_vfiprintf_r+0xbd4>
   81498:	9504      	str	r5, [sp, #16]
   8149a:	ebc6 0900 	rsb	r9, r6, r0
   8149e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   814a2:	f04f 0c00 	mov.w	ip, #0
   814a6:	e68d      	b.n	811c4 <_vfiprintf_r+0x264>
   814a8:	4a1b      	ldr	r2, [pc, #108]	; (81518 <_vfiprintf_r+0x5b8>)
   814aa:	f018 0f20 	tst.w	r8, #32
   814ae:	9503      	str	r5, [sp, #12]
   814b0:	46b4      	mov	ip, r6
   814b2:	9209      	str	r2, [sp, #36]	; 0x24
   814b4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   814b8:	f47f af71 	bne.w	8139e <_vfiprintf_r+0x43e>
   814bc:	9904      	ldr	r1, [sp, #16]
   814be:	f018 0f10 	tst.w	r8, #16
   814c2:	460a      	mov	r2, r1
   814c4:	f040 8241 	bne.w	8194a <_vfiprintf_r+0x9ea>
   814c8:	f018 0f40 	tst.w	r8, #64	; 0x40
   814cc:	f000 823d 	beq.w	8194a <_vfiprintf_r+0x9ea>
   814d0:	3204      	adds	r2, #4
   814d2:	880e      	ldrh	r6, [r1, #0]
   814d4:	2700      	movs	r7, #0
   814d6:	9204      	str	r2, [sp, #16]
   814d8:	e76a      	b.n	813b0 <_vfiprintf_r+0x450>
   814da:	f89b 3000 	ldrb.w	r3, [fp]
   814de:	2b6c      	cmp	r3, #108	; 0x6c
   814e0:	f000 82e9 	beq.w	81ab6 <_vfiprintf_r+0xb56>
   814e4:	f048 0810 	orr.w	r8, r8, #16
   814e8:	4658      	mov	r0, fp
   814ea:	e5a2      	b.n	81032 <_vfiprintf_r+0xd2>
   814ec:	9a04      	ldr	r2, [sp, #16]
   814ee:	4613      	mov	r3, r2
   814f0:	6815      	ldr	r5, [r2, #0]
   814f2:	3304      	adds	r3, #4
   814f4:	2d00      	cmp	r5, #0
   814f6:	f2c0 82e6 	blt.w	81ac6 <_vfiprintf_r+0xb66>
   814fa:	9304      	str	r3, [sp, #16]
   814fc:	f89b 3000 	ldrb.w	r3, [fp]
   81500:	4658      	mov	r0, fp
   81502:	e596      	b.n	81032 <_vfiprintf_r+0xd2>
   81504:	f89b 3000 	ldrb.w	r3, [fp]
   81508:	4658      	mov	r0, fp
   8150a:	212b      	movs	r1, #43	; 0x2b
   8150c:	e591      	b.n	81032 <_vfiprintf_r+0xd2>
   8150e:	bf00      	nop
   81510:	00083c84 	.word	0x00083c84
   81514:	00083c54 	.word	0x00083c54
   81518:	00083c68 	.word	0x00083c68
   8151c:	f89b 3000 	ldrb.w	r3, [fp]
   81520:	f10b 0001 	add.w	r0, fp, #1
   81524:	2b2a      	cmp	r3, #42	; 0x2a
   81526:	f000 830f 	beq.w	81b48 <_vfiprintf_r+0xbe8>
   8152a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8152e:	2a09      	cmp	r2, #9
   81530:	4683      	mov	fp, r0
   81532:	f04f 0600 	mov.w	r6, #0
   81536:	f63f ad7e 	bhi.w	81036 <_vfiprintf_r+0xd6>
   8153a:	f81b 3b01 	ldrb.w	r3, [fp], #1
   8153e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81542:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   81546:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8154a:	2a09      	cmp	r2, #9
   8154c:	d9f5      	bls.n	8153a <_vfiprintf_r+0x5da>
   8154e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   81552:	e570      	b.n	81036 <_vfiprintf_r+0xd6>
   81554:	f018 0f20 	tst.w	r8, #32
   81558:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8155c:	f000 8283 	beq.w	81a66 <_vfiprintf_r+0xb06>
   81560:	9a04      	ldr	r2, [sp, #16]
   81562:	4613      	mov	r3, r2
   81564:	3304      	adds	r3, #4
   81566:	9304      	str	r3, [sp, #16]
   81568:	9b02      	ldr	r3, [sp, #8]
   8156a:	6811      	ldr	r1, [r2, #0]
   8156c:	17df      	asrs	r7, r3, #31
   8156e:	461a      	mov	r2, r3
   81570:	463b      	mov	r3, r7
   81572:	e9c1 2300 	strd	r2, r3, [r1]
   81576:	e525      	b.n	80fc4 <_vfiprintf_r+0x64>
   81578:	4658      	mov	r0, fp
   8157a:	f89b 3000 	ldrb.w	r3, [fp]
   8157e:	2900      	cmp	r1, #0
   81580:	f47f ad57 	bne.w	81032 <_vfiprintf_r+0xd2>
   81584:	2120      	movs	r1, #32
   81586:	e554      	b.n	81032 <_vfiprintf_r+0xd2>
   81588:	f048 0801 	orr.w	r8, r8, #1
   8158c:	4658      	mov	r0, fp
   8158e:	f89b 3000 	ldrb.w	r3, [fp]
   81592:	e54e      	b.n	81032 <_vfiprintf_r+0xd2>
   81594:	9503      	str	r5, [sp, #12]
   81596:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8159a:	2b00      	cmp	r3, #0
   8159c:	f000 809c 	beq.w	816d8 <_vfiprintf_r+0x778>
   815a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   815a4:	f04f 0300 	mov.w	r3, #0
   815a8:	2601      	movs	r6, #1
   815aa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   815ae:	ab10      	add	r3, sp, #64	; 0x40
   815b0:	46b1      	mov	r9, r6
   815b2:	9307      	str	r3, [sp, #28]
   815b4:	e71d      	b.n	813f2 <_vfiprintf_r+0x492>
   815b6:	9801      	ldr	r0, [sp, #4]
   815b8:	9900      	ldr	r1, [sp, #0]
   815ba:	aa0d      	add	r2, sp, #52	; 0x34
   815bc:	9308      	str	r3, [sp, #32]
   815be:	f7ff fc93 	bl	80ee8 <__sprint_r.part.0>
   815c2:	2800      	cmp	r0, #0
   815c4:	f040 808f 	bne.w	816e6 <_vfiprintf_r+0x786>
   815c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   815ca:	46d4      	mov	ip, sl
   815cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   815ce:	f101 0e01 	add.w	lr, r1, #1
   815d2:	9b08      	ldr	r3, [sp, #32]
   815d4:	e61d      	b.n	81212 <_vfiprintf_r+0x2b2>
   815d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   815d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   815da:	1c48      	adds	r0, r1, #1
   815dc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   815e0:	b16b      	cbz	r3, 815fe <_vfiprintf_r+0x69e>
   815e2:	3201      	adds	r2, #1
   815e4:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   815e8:	2101      	movs	r1, #1
   815ea:	2807      	cmp	r0, #7
   815ec:	920f      	str	r2, [sp, #60]	; 0x3c
   815ee:	900e      	str	r0, [sp, #56]	; 0x38
   815f0:	6023      	str	r3, [r4, #0]
   815f2:	6061      	str	r1, [r4, #4]
   815f4:	f300 8134 	bgt.w	81860 <_vfiprintf_r+0x900>
   815f8:	4601      	mov	r1, r0
   815fa:	3408      	adds	r4, #8
   815fc:	3001      	adds	r0, #1
   815fe:	9b05      	ldr	r3, [sp, #20]
   81600:	b163      	cbz	r3, 8161c <_vfiprintf_r+0x6bc>
   81602:	3202      	adds	r2, #2
   81604:	a90c      	add	r1, sp, #48	; 0x30
   81606:	2302      	movs	r3, #2
   81608:	2807      	cmp	r0, #7
   8160a:	920f      	str	r2, [sp, #60]	; 0x3c
   8160c:	900e      	str	r0, [sp, #56]	; 0x38
   8160e:	e884 000a 	stmia.w	r4, {r1, r3}
   81612:	f300 8134 	bgt.w	8187e <_vfiprintf_r+0x91e>
   81616:	4601      	mov	r1, r0
   81618:	3408      	adds	r4, #8
   8161a:	3001      	adds	r0, #1
   8161c:	9b06      	ldr	r3, [sp, #24]
   8161e:	2b80      	cmp	r3, #128	; 0x80
   81620:	f000 80d4 	beq.w	817cc <_vfiprintf_r+0x86c>
   81624:	ebc9 070c 	rsb	r7, r9, ip
   81628:	2f00      	cmp	r7, #0
   8162a:	dd2b      	ble.n	81684 <_vfiprintf_r+0x724>
   8162c:	2f10      	cmp	r7, #16
   8162e:	4dab      	ldr	r5, [pc, #684]	; (818dc <_vfiprintf_r+0x97c>)
   81630:	dd1f      	ble.n	81672 <_vfiprintf_r+0x712>
   81632:	46a6      	mov	lr, r4
   81634:	2310      	movs	r3, #16
   81636:	9c01      	ldr	r4, [sp, #4]
   81638:	e007      	b.n	8164a <_vfiprintf_r+0x6ea>
   8163a:	f101 0c02 	add.w	ip, r1, #2
   8163e:	4601      	mov	r1, r0
   81640:	f10e 0e08 	add.w	lr, lr, #8
   81644:	3f10      	subs	r7, #16
   81646:	2f10      	cmp	r7, #16
   81648:	dd11      	ble.n	8166e <_vfiprintf_r+0x70e>
   8164a:	1c48      	adds	r0, r1, #1
   8164c:	3210      	adds	r2, #16
   8164e:	2807      	cmp	r0, #7
   81650:	920f      	str	r2, [sp, #60]	; 0x3c
   81652:	f8ce 5000 	str.w	r5, [lr]
   81656:	f8ce 3004 	str.w	r3, [lr, #4]
   8165a:	900e      	str	r0, [sp, #56]	; 0x38
   8165c:	dded      	ble.n	8163a <_vfiprintf_r+0x6da>
   8165e:	bb6a      	cbnz	r2, 816bc <_vfiprintf_r+0x75c>
   81660:	3f10      	subs	r7, #16
   81662:	2f10      	cmp	r7, #16
   81664:	f04f 0c01 	mov.w	ip, #1
   81668:	4611      	mov	r1, r2
   8166a:	46d6      	mov	lr, sl
   8166c:	dced      	bgt.n	8164a <_vfiprintf_r+0x6ea>
   8166e:	4674      	mov	r4, lr
   81670:	4660      	mov	r0, ip
   81672:	443a      	add	r2, r7
   81674:	2807      	cmp	r0, #7
   81676:	920f      	str	r2, [sp, #60]	; 0x3c
   81678:	e884 00a0 	stmia.w	r4, {r5, r7}
   8167c:	900e      	str	r0, [sp, #56]	; 0x38
   8167e:	dc3b      	bgt.n	816f8 <_vfiprintf_r+0x798>
   81680:	3408      	adds	r4, #8
   81682:	3001      	adds	r0, #1
   81684:	eb02 0309 	add.w	r3, r2, r9
   81688:	9a07      	ldr	r2, [sp, #28]
   8168a:	2807      	cmp	r0, #7
   8168c:	930f      	str	r3, [sp, #60]	; 0x3c
   8168e:	e884 0204 	stmia.w	r4, {r2, r9}
   81692:	900e      	str	r0, [sp, #56]	; 0x38
   81694:	dd3d      	ble.n	81712 <_vfiprintf_r+0x7b2>
   81696:	2b00      	cmp	r3, #0
   81698:	f040 813f 	bne.w	8191a <_vfiprintf_r+0x9ba>
   8169c:	f018 0f04 	tst.w	r8, #4
   816a0:	930e      	str	r3, [sp, #56]	; 0x38
   816a2:	f040 8130 	bne.w	81906 <_vfiprintf_r+0x9a6>
   816a6:	9b02      	ldr	r3, [sp, #8]
   816a8:	9a03      	ldr	r2, [sp, #12]
   816aa:	4296      	cmp	r6, r2
   816ac:	bfac      	ite	ge
   816ae:	199b      	addge	r3, r3, r6
   816b0:	189b      	addlt	r3, r3, r2
   816b2:	9302      	str	r3, [sp, #8]
   816b4:	2300      	movs	r3, #0
   816b6:	930e      	str	r3, [sp, #56]	; 0x38
   816b8:	4654      	mov	r4, sl
   816ba:	e483      	b.n	80fc4 <_vfiprintf_r+0x64>
   816bc:	4620      	mov	r0, r4
   816be:	9900      	ldr	r1, [sp, #0]
   816c0:	aa0d      	add	r2, sp, #52	; 0x34
   816c2:	9305      	str	r3, [sp, #20]
   816c4:	f7ff fc10 	bl	80ee8 <__sprint_r.part.0>
   816c8:	b968      	cbnz	r0, 816e6 <_vfiprintf_r+0x786>
   816ca:	990e      	ldr	r1, [sp, #56]	; 0x38
   816cc:	46d6      	mov	lr, sl
   816ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   816d0:	f101 0c01 	add.w	ip, r1, #1
   816d4:	9b05      	ldr	r3, [sp, #20]
   816d6:	e7b5      	b.n	81644 <_vfiprintf_r+0x6e4>
   816d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   816da:	b123      	cbz	r3, 816e6 <_vfiprintf_r+0x786>
   816dc:	9801      	ldr	r0, [sp, #4]
   816de:	9900      	ldr	r1, [sp, #0]
   816e0:	aa0d      	add	r2, sp, #52	; 0x34
   816e2:	f7ff fc01 	bl	80ee8 <__sprint_r.part.0>
   816e6:	9b00      	ldr	r3, [sp, #0]
   816e8:	899b      	ldrh	r3, [r3, #12]
   816ea:	065b      	lsls	r3, r3, #25
   816ec:	f53f ad23 	bmi.w	81136 <_vfiprintf_r+0x1d6>
   816f0:	9802      	ldr	r0, [sp, #8]
   816f2:	b02b      	add	sp, #172	; 0xac
   816f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816f8:	2a00      	cmp	r2, #0
   816fa:	f040 8190 	bne.w	81a1e <_vfiprintf_r+0xabe>
   816fe:	464b      	mov	r3, r9
   81700:	4654      	mov	r4, sl
   81702:	9907      	ldr	r1, [sp, #28]
   81704:	2201      	movs	r2, #1
   81706:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   8170a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8170e:	911a      	str	r1, [sp, #104]	; 0x68
   81710:	920e      	str	r2, [sp, #56]	; 0x38
   81712:	f104 0208 	add.w	r2, r4, #8
   81716:	f018 0f04 	tst.w	r8, #4
   8171a:	d039      	beq.n	81790 <_vfiprintf_r+0x830>
   8171c:	9903      	ldr	r1, [sp, #12]
   8171e:	1b8d      	subs	r5, r1, r6
   81720:	2d00      	cmp	r5, #0
   81722:	dd35      	ble.n	81790 <_vfiprintf_r+0x830>
   81724:	2d10      	cmp	r5, #16
   81726:	f340 8200 	ble.w	81b2a <_vfiprintf_r+0xbca>
   8172a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8172c:	4f6c      	ldr	r7, [pc, #432]	; (818e0 <_vfiprintf_r+0x980>)
   8172e:	2410      	movs	r4, #16
   81730:	f8dd 8004 	ldr.w	r8, [sp, #4]
   81734:	f8dd 9000 	ldr.w	r9, [sp]
   81738:	e006      	b.n	81748 <_vfiprintf_r+0x7e8>
   8173a:	f100 0e02 	add.w	lr, r0, #2
   8173e:	4608      	mov	r0, r1
   81740:	3208      	adds	r2, #8
   81742:	3d10      	subs	r5, #16
   81744:	2d10      	cmp	r5, #16
   81746:	dd10      	ble.n	8176a <_vfiprintf_r+0x80a>
   81748:	1c41      	adds	r1, r0, #1
   8174a:	3310      	adds	r3, #16
   8174c:	2907      	cmp	r1, #7
   8174e:	930f      	str	r3, [sp, #60]	; 0x3c
   81750:	6017      	str	r7, [r2, #0]
   81752:	6054      	str	r4, [r2, #4]
   81754:	910e      	str	r1, [sp, #56]	; 0x38
   81756:	ddf0      	ble.n	8173a <_vfiprintf_r+0x7da>
   81758:	2b00      	cmp	r3, #0
   8175a:	d12a      	bne.n	817b2 <_vfiprintf_r+0x852>
   8175c:	3d10      	subs	r5, #16
   8175e:	2d10      	cmp	r5, #16
   81760:	f04f 0e01 	mov.w	lr, #1
   81764:	4618      	mov	r0, r3
   81766:	4652      	mov	r2, sl
   81768:	dcee      	bgt.n	81748 <_vfiprintf_r+0x7e8>
   8176a:	442b      	add	r3, r5
   8176c:	f1be 0f07 	cmp.w	lr, #7
   81770:	930f      	str	r3, [sp, #60]	; 0x3c
   81772:	6017      	str	r7, [r2, #0]
   81774:	6055      	str	r5, [r2, #4]
   81776:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8177a:	dd09      	ble.n	81790 <_vfiprintf_r+0x830>
   8177c:	2b00      	cmp	r3, #0
   8177e:	d092      	beq.n	816a6 <_vfiprintf_r+0x746>
   81780:	9801      	ldr	r0, [sp, #4]
   81782:	9900      	ldr	r1, [sp, #0]
   81784:	aa0d      	add	r2, sp, #52	; 0x34
   81786:	f7ff fbaf 	bl	80ee8 <__sprint_r.part.0>
   8178a:	2800      	cmp	r0, #0
   8178c:	d1ab      	bne.n	816e6 <_vfiprintf_r+0x786>
   8178e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81790:	9a02      	ldr	r2, [sp, #8]
   81792:	9903      	ldr	r1, [sp, #12]
   81794:	428e      	cmp	r6, r1
   81796:	bfac      	ite	ge
   81798:	1992      	addge	r2, r2, r6
   8179a:	1852      	addlt	r2, r2, r1
   8179c:	9202      	str	r2, [sp, #8]
   8179e:	2b00      	cmp	r3, #0
   817a0:	d088      	beq.n	816b4 <_vfiprintf_r+0x754>
   817a2:	9801      	ldr	r0, [sp, #4]
   817a4:	9900      	ldr	r1, [sp, #0]
   817a6:	aa0d      	add	r2, sp, #52	; 0x34
   817a8:	f7ff fb9e 	bl	80ee8 <__sprint_r.part.0>
   817ac:	2800      	cmp	r0, #0
   817ae:	d081      	beq.n	816b4 <_vfiprintf_r+0x754>
   817b0:	e799      	b.n	816e6 <_vfiprintf_r+0x786>
   817b2:	4640      	mov	r0, r8
   817b4:	4649      	mov	r1, r9
   817b6:	aa0d      	add	r2, sp, #52	; 0x34
   817b8:	f7ff fb96 	bl	80ee8 <__sprint_r.part.0>
   817bc:	2800      	cmp	r0, #0
   817be:	d192      	bne.n	816e6 <_vfiprintf_r+0x786>
   817c0:	980e      	ldr	r0, [sp, #56]	; 0x38
   817c2:	4652      	mov	r2, sl
   817c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   817c6:	f100 0e01 	add.w	lr, r0, #1
   817ca:	e7ba      	b.n	81742 <_vfiprintf_r+0x7e2>
   817cc:	9b03      	ldr	r3, [sp, #12]
   817ce:	1b9f      	subs	r7, r3, r6
   817d0:	2f00      	cmp	r7, #0
   817d2:	f77f af27 	ble.w	81624 <_vfiprintf_r+0x6c4>
   817d6:	2f10      	cmp	r7, #16
   817d8:	f340 81b3 	ble.w	81b42 <_vfiprintf_r+0xbe2>
   817dc:	4620      	mov	r0, r4
   817de:	4d3f      	ldr	r5, [pc, #252]	; (818dc <_vfiprintf_r+0x97c>)
   817e0:	4664      	mov	r4, ip
   817e2:	2310      	movs	r3, #16
   817e4:	4684      	mov	ip, r0
   817e6:	e007      	b.n	817f8 <_vfiprintf_r+0x898>
   817e8:	f101 0e02 	add.w	lr, r1, #2
   817ec:	4601      	mov	r1, r0
   817ee:	f10c 0c08 	add.w	ip, ip, #8
   817f2:	3f10      	subs	r7, #16
   817f4:	2f10      	cmp	r7, #16
   817f6:	dd11      	ble.n	8181c <_vfiprintf_r+0x8bc>
   817f8:	1c48      	adds	r0, r1, #1
   817fa:	3210      	adds	r2, #16
   817fc:	2807      	cmp	r0, #7
   817fe:	920f      	str	r2, [sp, #60]	; 0x3c
   81800:	f8cc 5000 	str.w	r5, [ip]
   81804:	f8cc 3004 	str.w	r3, [ip, #4]
   81808:	900e      	str	r0, [sp, #56]	; 0x38
   8180a:	dded      	ble.n	817e8 <_vfiprintf_r+0x888>
   8180c:	b9c2      	cbnz	r2, 81840 <_vfiprintf_r+0x8e0>
   8180e:	3f10      	subs	r7, #16
   81810:	2f10      	cmp	r7, #16
   81812:	f04f 0e01 	mov.w	lr, #1
   81816:	4611      	mov	r1, r2
   81818:	46d4      	mov	ip, sl
   8181a:	dced      	bgt.n	817f8 <_vfiprintf_r+0x898>
   8181c:	4663      	mov	r3, ip
   8181e:	46a4      	mov	ip, r4
   81820:	461c      	mov	r4, r3
   81822:	443a      	add	r2, r7
   81824:	f1be 0f07 	cmp.w	lr, #7
   81828:	920f      	str	r2, [sp, #60]	; 0x3c
   8182a:	e884 00a0 	stmia.w	r4, {r5, r7}
   8182e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81832:	f300 80ee 	bgt.w	81a12 <_vfiprintf_r+0xab2>
   81836:	3408      	adds	r4, #8
   81838:	f10e 0001 	add.w	r0, lr, #1
   8183c:	4671      	mov	r1, lr
   8183e:	e6f1      	b.n	81624 <_vfiprintf_r+0x6c4>
   81840:	9801      	ldr	r0, [sp, #4]
   81842:	9900      	ldr	r1, [sp, #0]
   81844:	aa0d      	add	r2, sp, #52	; 0x34
   81846:	9305      	str	r3, [sp, #20]
   81848:	f7ff fb4e 	bl	80ee8 <__sprint_r.part.0>
   8184c:	2800      	cmp	r0, #0
   8184e:	f47f af4a 	bne.w	816e6 <_vfiprintf_r+0x786>
   81852:	990e      	ldr	r1, [sp, #56]	; 0x38
   81854:	46d4      	mov	ip, sl
   81856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81858:	f101 0e01 	add.w	lr, r1, #1
   8185c:	9b05      	ldr	r3, [sp, #20]
   8185e:	e7c8      	b.n	817f2 <_vfiprintf_r+0x892>
   81860:	2a00      	cmp	r2, #0
   81862:	f040 80c5 	bne.w	819f0 <_vfiprintf_r+0xa90>
   81866:	9b05      	ldr	r3, [sp, #20]
   81868:	2b00      	cmp	r3, #0
   8186a:	f000 8085 	beq.w	81978 <_vfiprintf_r+0xa18>
   8186e:	aa0c      	add	r2, sp, #48	; 0x30
   81870:	2302      	movs	r3, #2
   81872:	921a      	str	r2, [sp, #104]	; 0x68
   81874:	4608      	mov	r0, r1
   81876:	931b      	str	r3, [sp, #108]	; 0x6c
   81878:	461a      	mov	r2, r3
   8187a:	4654      	mov	r4, sl
   8187c:	e6cb      	b.n	81616 <_vfiprintf_r+0x6b6>
   8187e:	2a00      	cmp	r2, #0
   81880:	f040 80a5 	bne.w	819ce <_vfiprintf_r+0xa6e>
   81884:	2001      	movs	r0, #1
   81886:	4611      	mov	r1, r2
   81888:	4654      	mov	r4, sl
   8188a:	e6c7      	b.n	8161c <_vfiprintf_r+0x6bc>
   8188c:	bb03      	cbnz	r3, 818d0 <_vfiprintf_r+0x970>
   8188e:	f018 0f01 	tst.w	r8, #1
   81892:	d01d      	beq.n	818d0 <_vfiprintf_r+0x970>
   81894:	ab2a      	add	r3, sp, #168	; 0xa8
   81896:	2230      	movs	r2, #48	; 0x30
   81898:	f803 2d41 	strb.w	r2, [r3, #-65]!
   8189c:	ebc3 090a 	rsb	r9, r3, sl
   818a0:	9307      	str	r3, [sp, #28]
   818a2:	e48f      	b.n	811c4 <_vfiprintf_r+0x264>
   818a4:	46d1      	mov	r9, sl
   818a6:	9809      	ldr	r0, [sp, #36]	; 0x24
   818a8:	0933      	lsrs	r3, r6, #4
   818aa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   818ae:	0939      	lsrs	r1, r7, #4
   818b0:	f006 020f 	and.w	r2, r6, #15
   818b4:	460f      	mov	r7, r1
   818b6:	461e      	mov	r6, r3
   818b8:	5c83      	ldrb	r3, [r0, r2]
   818ba:	f809 3d01 	strb.w	r3, [r9, #-1]!
   818be:	ea56 0307 	orrs.w	r3, r6, r7
   818c2:	d1f1      	bne.n	818a8 <_vfiprintf_r+0x948>
   818c4:	464b      	mov	r3, r9
   818c6:	f8cd 901c 	str.w	r9, [sp, #28]
   818ca:	ebc3 090a 	rsb	r9, r3, sl
   818ce:	e479      	b.n	811c4 <_vfiprintf_r+0x264>
   818d0:	f8cd a01c 	str.w	sl, [sp, #28]
   818d4:	e476      	b.n	811c4 <_vfiprintf_r+0x264>
   818d6:	2302      	movs	r3, #2
   818d8:	e445      	b.n	81166 <_vfiprintf_r+0x206>
   818da:	bf00      	nop
   818dc:	00083c44 	.word	0x00083c44
   818e0:	00083c84 	.word	0x00083c84
   818e4:	2a00      	cmp	r2, #0
   818e6:	f040 80d5 	bne.w	81a94 <_vfiprintf_r+0xb34>
   818ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   818ee:	2b00      	cmp	r3, #0
   818f0:	f000 80ac 	beq.w	81a4c <_vfiprintf_r+0xaec>
   818f4:	2301      	movs	r3, #1
   818f6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   818fa:	4618      	mov	r0, r3
   818fc:	931b      	str	r3, [sp, #108]	; 0x6c
   818fe:	461a      	mov	r2, r3
   81900:	911a      	str	r1, [sp, #104]	; 0x68
   81902:	4654      	mov	r4, sl
   81904:	e678      	b.n	815f8 <_vfiprintf_r+0x698>
   81906:	9a03      	ldr	r2, [sp, #12]
   81908:	1b95      	subs	r5, r2, r6
   8190a:	2d00      	cmp	r5, #0
   8190c:	4652      	mov	r2, sl
   8190e:	f73f af09 	bgt.w	81724 <_vfiprintf_r+0x7c4>
   81912:	e6c8      	b.n	816a6 <_vfiprintf_r+0x746>
   81914:	465d      	mov	r5, fp
   81916:	f7ff bb7c 	b.w	81012 <_vfiprintf_r+0xb2>
   8191a:	9801      	ldr	r0, [sp, #4]
   8191c:	9900      	ldr	r1, [sp, #0]
   8191e:	aa0d      	add	r2, sp, #52	; 0x34
   81920:	f7ff fae2 	bl	80ee8 <__sprint_r.part.0>
   81924:	2800      	cmp	r0, #0
   81926:	f47f aede 	bne.w	816e6 <_vfiprintf_r+0x786>
   8192a:	4652      	mov	r2, sl
   8192c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8192e:	e6f2      	b.n	81716 <_vfiprintf_r+0x7b6>
   81930:	9904      	ldr	r1, [sp, #16]
   81932:	2700      	movs	r7, #0
   81934:	460a      	mov	r2, r1
   81936:	3204      	adds	r2, #4
   81938:	680e      	ldr	r6, [r1, #0]
   8193a:	9204      	str	r2, [sp, #16]
   8193c:	e413      	b.n	81166 <_vfiprintf_r+0x206>
   8193e:	3204      	adds	r2, #4
   81940:	681e      	ldr	r6, [r3, #0]
   81942:	2700      	movs	r7, #0
   81944:	2301      	movs	r3, #1
   81946:	9204      	str	r2, [sp, #16]
   81948:	e40d      	b.n	81166 <_vfiprintf_r+0x206>
   8194a:	6816      	ldr	r6, [r2, #0]
   8194c:	3204      	adds	r2, #4
   8194e:	9204      	str	r2, [sp, #16]
   81950:	2700      	movs	r7, #0
   81952:	e52d      	b.n	813b0 <_vfiprintf_r+0x450>
   81954:	681e      	ldr	r6, [r3, #0]
   81956:	3304      	adds	r3, #4
   81958:	17f7      	asrs	r7, r6, #31
   8195a:	9304      	str	r3, [sp, #16]
   8195c:	4632      	mov	r2, r6
   8195e:	463b      	mov	r3, r7
   81960:	e4c1      	b.n	812e6 <_vfiprintf_r+0x386>
   81962:	9801      	ldr	r0, [sp, #4]
   81964:	9900      	ldr	r1, [sp, #0]
   81966:	aa0d      	add	r2, sp, #52	; 0x34
   81968:	f7ff fabe 	bl	80ee8 <__sprint_r.part.0>
   8196c:	2800      	cmp	r0, #0
   8196e:	f47f aeba 	bne.w	816e6 <_vfiprintf_r+0x786>
   81972:	4654      	mov	r4, sl
   81974:	f7ff bbc0 	b.w	810f8 <_vfiprintf_r+0x198>
   81978:	4608      	mov	r0, r1
   8197a:	4654      	mov	r4, sl
   8197c:	4611      	mov	r1, r2
   8197e:	e64d      	b.n	8161c <_vfiprintf_r+0x6bc>
   81980:	46d1      	mov	r9, sl
   81982:	f8cd c014 	str.w	ip, [sp, #20]
   81986:	4630      	mov	r0, r6
   81988:	4639      	mov	r1, r7
   8198a:	220a      	movs	r2, #10
   8198c:	2300      	movs	r3, #0
   8198e:	f001 fe75 	bl	8367c <__aeabi_uldivmod>
   81992:	3230      	adds	r2, #48	; 0x30
   81994:	4630      	mov	r0, r6
   81996:	4639      	mov	r1, r7
   81998:	f809 2d01 	strb.w	r2, [r9, #-1]!
   8199c:	2300      	movs	r3, #0
   8199e:	220a      	movs	r2, #10
   819a0:	f001 fe6c 	bl	8367c <__aeabi_uldivmod>
   819a4:	4606      	mov	r6, r0
   819a6:	460f      	mov	r7, r1
   819a8:	ea56 0307 	orrs.w	r3, r6, r7
   819ac:	d1eb      	bne.n	81986 <_vfiprintf_r+0xa26>
   819ae:	f8dd c014 	ldr.w	ip, [sp, #20]
   819b2:	e787      	b.n	818c4 <_vfiprintf_r+0x964>
   819b4:	2b30      	cmp	r3, #48	; 0x30
   819b6:	9b07      	ldr	r3, [sp, #28]
   819b8:	d087      	beq.n	818ca <_vfiprintf_r+0x96a>
   819ba:	3b01      	subs	r3, #1
   819bc:	461a      	mov	r2, r3
   819be:	9307      	str	r3, [sp, #28]
   819c0:	2330      	movs	r3, #48	; 0x30
   819c2:	ebc2 090a 	rsb	r9, r2, sl
   819c6:	f801 3c01 	strb.w	r3, [r1, #-1]
   819ca:	f7ff bbfb 	b.w	811c4 <_vfiprintf_r+0x264>
   819ce:	9801      	ldr	r0, [sp, #4]
   819d0:	9900      	ldr	r1, [sp, #0]
   819d2:	aa0d      	add	r2, sp, #52	; 0x34
   819d4:	f8cd c014 	str.w	ip, [sp, #20]
   819d8:	f7ff fa86 	bl	80ee8 <__sprint_r.part.0>
   819dc:	2800      	cmp	r0, #0
   819de:	f47f ae82 	bne.w	816e6 <_vfiprintf_r+0x786>
   819e2:	990e      	ldr	r1, [sp, #56]	; 0x38
   819e4:	4654      	mov	r4, sl
   819e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   819e8:	1c48      	adds	r0, r1, #1
   819ea:	f8dd c014 	ldr.w	ip, [sp, #20]
   819ee:	e615      	b.n	8161c <_vfiprintf_r+0x6bc>
   819f0:	9801      	ldr	r0, [sp, #4]
   819f2:	9900      	ldr	r1, [sp, #0]
   819f4:	aa0d      	add	r2, sp, #52	; 0x34
   819f6:	f8cd c020 	str.w	ip, [sp, #32]
   819fa:	f7ff fa75 	bl	80ee8 <__sprint_r.part.0>
   819fe:	2800      	cmp	r0, #0
   81a00:	f47f ae71 	bne.w	816e6 <_vfiprintf_r+0x786>
   81a04:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a06:	4654      	mov	r4, sl
   81a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a0a:	1c48      	adds	r0, r1, #1
   81a0c:	f8dd c020 	ldr.w	ip, [sp, #32]
   81a10:	e5f5      	b.n	815fe <_vfiprintf_r+0x69e>
   81a12:	2a00      	cmp	r2, #0
   81a14:	d167      	bne.n	81ae6 <_vfiprintf_r+0xb86>
   81a16:	2001      	movs	r0, #1
   81a18:	4611      	mov	r1, r2
   81a1a:	4654      	mov	r4, sl
   81a1c:	e602      	b.n	81624 <_vfiprintf_r+0x6c4>
   81a1e:	9801      	ldr	r0, [sp, #4]
   81a20:	9900      	ldr	r1, [sp, #0]
   81a22:	aa0d      	add	r2, sp, #52	; 0x34
   81a24:	f7ff fa60 	bl	80ee8 <__sprint_r.part.0>
   81a28:	2800      	cmp	r0, #0
   81a2a:	f47f ae5c 	bne.w	816e6 <_vfiprintf_r+0x786>
   81a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
   81a30:	4654      	mov	r4, sl
   81a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a34:	3001      	adds	r0, #1
   81a36:	e625      	b.n	81684 <_vfiprintf_r+0x724>
   81a38:	252d      	movs	r5, #45	; 0x2d
   81a3a:	4276      	negs	r6, r6
   81a3c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81a40:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   81a44:	46e1      	mov	r9, ip
   81a46:	2301      	movs	r3, #1
   81a48:	f7ff bb93 	b.w	81172 <_vfiprintf_r+0x212>
   81a4c:	9b05      	ldr	r3, [sp, #20]
   81a4e:	4611      	mov	r1, r2
   81a50:	2001      	movs	r0, #1
   81a52:	4654      	mov	r4, sl
   81a54:	2b00      	cmp	r3, #0
   81a56:	f43f ade5 	beq.w	81624 <_vfiprintf_r+0x6c4>
   81a5a:	aa0c      	add	r2, sp, #48	; 0x30
   81a5c:	2302      	movs	r3, #2
   81a5e:	e88a 000c 	stmia.w	sl, {r2, r3}
   81a62:	461a      	mov	r2, r3
   81a64:	e5d7      	b.n	81616 <_vfiprintf_r+0x6b6>
   81a66:	f018 0f10 	tst.w	r8, #16
   81a6a:	d10b      	bne.n	81a84 <_vfiprintf_r+0xb24>
   81a6c:	f018 0f40 	tst.w	r8, #64	; 0x40
   81a70:	d008      	beq.n	81a84 <_vfiprintf_r+0xb24>
   81a72:	9a04      	ldr	r2, [sp, #16]
   81a74:	6813      	ldr	r3, [r2, #0]
   81a76:	3204      	adds	r2, #4
   81a78:	9204      	str	r2, [sp, #16]
   81a7a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   81a7e:	801a      	strh	r2, [r3, #0]
   81a80:	f7ff baa0 	b.w	80fc4 <_vfiprintf_r+0x64>
   81a84:	9a04      	ldr	r2, [sp, #16]
   81a86:	6813      	ldr	r3, [r2, #0]
   81a88:	3204      	adds	r2, #4
   81a8a:	9204      	str	r2, [sp, #16]
   81a8c:	9a02      	ldr	r2, [sp, #8]
   81a8e:	601a      	str	r2, [r3, #0]
   81a90:	f7ff ba98 	b.w	80fc4 <_vfiprintf_r+0x64>
   81a94:	9801      	ldr	r0, [sp, #4]
   81a96:	9900      	ldr	r1, [sp, #0]
   81a98:	aa0d      	add	r2, sp, #52	; 0x34
   81a9a:	f8cd c020 	str.w	ip, [sp, #32]
   81a9e:	f7ff fa23 	bl	80ee8 <__sprint_r.part.0>
   81aa2:	2800      	cmp	r0, #0
   81aa4:	f47f ae1f 	bne.w	816e6 <_vfiprintf_r+0x786>
   81aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
   81aaa:	4654      	mov	r4, sl
   81aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81aae:	1c48      	adds	r0, r1, #1
   81ab0:	f8dd c020 	ldr.w	ip, [sp, #32]
   81ab4:	e592      	b.n	815dc <_vfiprintf_r+0x67c>
   81ab6:	f048 0820 	orr.w	r8, r8, #32
   81aba:	f10b 0001 	add.w	r0, fp, #1
   81abe:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81ac2:	f7ff bab6 	b.w	81032 <_vfiprintf_r+0xd2>
   81ac6:	426d      	negs	r5, r5
   81ac8:	9304      	str	r3, [sp, #16]
   81aca:	4658      	mov	r0, fp
   81acc:	f7ff bbc8 	b.w	81260 <_vfiprintf_r+0x300>
   81ad0:	9807      	ldr	r0, [sp, #28]
   81ad2:	9504      	str	r5, [sp, #16]
   81ad4:	f001 fc10 	bl	832f8 <strlen>
   81ad8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81adc:	4681      	mov	r9, r0
   81ade:	f04f 0c00 	mov.w	ip, #0
   81ae2:	f7ff bb6f 	b.w	811c4 <_vfiprintf_r+0x264>
   81ae6:	9801      	ldr	r0, [sp, #4]
   81ae8:	9900      	ldr	r1, [sp, #0]
   81aea:	aa0d      	add	r2, sp, #52	; 0x34
   81aec:	f8cd c014 	str.w	ip, [sp, #20]
   81af0:	f7ff f9fa 	bl	80ee8 <__sprint_r.part.0>
   81af4:	2800      	cmp	r0, #0
   81af6:	f47f adf6 	bne.w	816e6 <_vfiprintf_r+0x786>
   81afa:	990e      	ldr	r1, [sp, #56]	; 0x38
   81afc:	4654      	mov	r4, sl
   81afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b00:	1c48      	adds	r0, r1, #1
   81b02:	f8dd c014 	ldr.w	ip, [sp, #20]
   81b06:	e58d      	b.n	81624 <_vfiprintf_r+0x6c4>
   81b08:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81b0c:	3101      	adds	r1, #1
   81b0e:	4f15      	ldr	r7, [pc, #84]	; (81b64 <_vfiprintf_r+0xc04>)
   81b10:	f7ff bb9a 	b.w	81248 <_vfiprintf_r+0x2e8>
   81b14:	2e06      	cmp	r6, #6
   81b16:	4b14      	ldr	r3, [pc, #80]	; (81b68 <_vfiprintf_r+0xc08>)
   81b18:	bf28      	it	cs
   81b1a:	f04f 0c06 	movcs.w	ip, #6
   81b1e:	46e1      	mov	r9, ip
   81b20:	9504      	str	r5, [sp, #16]
   81b22:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   81b26:	9307      	str	r3, [sp, #28]
   81b28:	e463      	b.n	813f2 <_vfiprintf_r+0x492>
   81b2a:	990e      	ldr	r1, [sp, #56]	; 0x38
   81b2c:	4f0d      	ldr	r7, [pc, #52]	; (81b64 <_vfiprintf_r+0xc04>)
   81b2e:	f101 0e01 	add.w	lr, r1, #1
   81b32:	e61a      	b.n	8176a <_vfiprintf_r+0x80a>
   81b34:	46e1      	mov	r9, ip
   81b36:	9504      	str	r5, [sp, #16]
   81b38:	4684      	mov	ip, r0
   81b3a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81b3e:	f7ff bb41 	b.w	811c4 <_vfiprintf_r+0x264>
   81b42:	4686      	mov	lr, r0
   81b44:	4d09      	ldr	r5, [pc, #36]	; (81b6c <_vfiprintf_r+0xc0c>)
   81b46:	e66c      	b.n	81822 <_vfiprintf_r+0x8c2>
   81b48:	9a04      	ldr	r2, [sp, #16]
   81b4a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81b4e:	6816      	ldr	r6, [r2, #0]
   81b50:	3204      	adds	r2, #4
   81b52:	2e00      	cmp	r6, #0
   81b54:	9204      	str	r2, [sp, #16]
   81b56:	f6bf aa6c 	bge.w	81032 <_vfiprintf_r+0xd2>
   81b5a:	f04f 36ff 	mov.w	r6, #4294967295
   81b5e:	f7ff ba68 	b.w	81032 <_vfiprintf_r+0xd2>
   81b62:	bf00      	nop
   81b64:	00083c84 	.word	0x00083c84
   81b68:	00083c7c 	.word	0x00083c7c
   81b6c:	00083c44 	.word	0x00083c44

00081b70 <__sbprintf>:
   81b70:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   81b74:	4688      	mov	r8, r1
   81b76:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81b78:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81b7c:	9719      	str	r7, [sp, #100]	; 0x64
   81b7e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81b82:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   81b86:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   81b8a:	9707      	str	r7, [sp, #28]
   81b8c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81b90:	ac1a      	add	r4, sp, #104	; 0x68
   81b92:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81b96:	f02e 0e02 	bic.w	lr, lr, #2
   81b9a:	2600      	movs	r6, #0
   81b9c:	4669      	mov	r1, sp
   81b9e:	9400      	str	r4, [sp, #0]
   81ba0:	9404      	str	r4, [sp, #16]
   81ba2:	9502      	str	r5, [sp, #8]
   81ba4:	9505      	str	r5, [sp, #20]
   81ba6:	f8ad e00c 	strh.w	lr, [sp, #12]
   81baa:	f8ad a00e 	strh.w	sl, [sp, #14]
   81bae:	9709      	str	r7, [sp, #36]	; 0x24
   81bb0:	9606      	str	r6, [sp, #24]
   81bb2:	4605      	mov	r5, r0
   81bb4:	f7ff f9d4 	bl	80f60 <_vfiprintf_r>
   81bb8:	1e04      	subs	r4, r0, #0
   81bba:	db07      	blt.n	81bcc <__sbprintf+0x5c>
   81bbc:	4628      	mov	r0, r5
   81bbe:	4669      	mov	r1, sp
   81bc0:	f000 f92a 	bl	81e18 <_fflush_r>
   81bc4:	42b0      	cmp	r0, r6
   81bc6:	bf18      	it	ne
   81bc8:	f04f 34ff 	movne.w	r4, #4294967295
   81bcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81bd0:	065b      	lsls	r3, r3, #25
   81bd2:	d505      	bpl.n	81be0 <__sbprintf+0x70>
   81bd4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81bdc:	f8a8 300c 	strh.w	r3, [r8, #12]
   81be0:	4620      	mov	r0, r4
   81be2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   81be6:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   81bea:	bf00      	nop

00081bec <__swsetup_r>:
   81bec:	b538      	push	{r3, r4, r5, lr}
   81bee:	4b2f      	ldr	r3, [pc, #188]	; (81cac <__swsetup_r+0xc0>)
   81bf0:	4605      	mov	r5, r0
   81bf2:	6818      	ldr	r0, [r3, #0]
   81bf4:	460c      	mov	r4, r1
   81bf6:	b110      	cbz	r0, 81bfe <__swsetup_r+0x12>
   81bf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81bfa:	2b00      	cmp	r3, #0
   81bfc:	d036      	beq.n	81c6c <__swsetup_r+0x80>
   81bfe:	89a2      	ldrh	r2, [r4, #12]
   81c00:	b293      	uxth	r3, r2
   81c02:	0718      	lsls	r0, r3, #28
   81c04:	d50c      	bpl.n	81c20 <__swsetup_r+0x34>
   81c06:	6920      	ldr	r0, [r4, #16]
   81c08:	b1a8      	cbz	r0, 81c36 <__swsetup_r+0x4a>
   81c0a:	f013 0201 	ands.w	r2, r3, #1
   81c0e:	d01e      	beq.n	81c4e <__swsetup_r+0x62>
   81c10:	6963      	ldr	r3, [r4, #20]
   81c12:	2200      	movs	r2, #0
   81c14:	425b      	negs	r3, r3
   81c16:	61a3      	str	r3, [r4, #24]
   81c18:	60a2      	str	r2, [r4, #8]
   81c1a:	b1f0      	cbz	r0, 81c5a <__swsetup_r+0x6e>
   81c1c:	2000      	movs	r0, #0
   81c1e:	bd38      	pop	{r3, r4, r5, pc}
   81c20:	06d9      	lsls	r1, r3, #27
   81c22:	d53a      	bpl.n	81c9a <__swsetup_r+0xae>
   81c24:	0758      	lsls	r0, r3, #29
   81c26:	d424      	bmi.n	81c72 <__swsetup_r+0x86>
   81c28:	6920      	ldr	r0, [r4, #16]
   81c2a:	f042 0308 	orr.w	r3, r2, #8
   81c2e:	81a3      	strh	r3, [r4, #12]
   81c30:	b29b      	uxth	r3, r3
   81c32:	2800      	cmp	r0, #0
   81c34:	d1e9      	bne.n	81c0a <__swsetup_r+0x1e>
   81c36:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81c3a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81c3e:	d0e4      	beq.n	81c0a <__swsetup_r+0x1e>
   81c40:	4628      	mov	r0, r5
   81c42:	4621      	mov	r1, r4
   81c44:	f000 fcee 	bl	82624 <__smakebuf_r>
   81c48:	89a3      	ldrh	r3, [r4, #12]
   81c4a:	6920      	ldr	r0, [r4, #16]
   81c4c:	e7dd      	b.n	81c0a <__swsetup_r+0x1e>
   81c4e:	0799      	lsls	r1, r3, #30
   81c50:	bf58      	it	pl
   81c52:	6962      	ldrpl	r2, [r4, #20]
   81c54:	60a2      	str	r2, [r4, #8]
   81c56:	2800      	cmp	r0, #0
   81c58:	d1e0      	bne.n	81c1c <__swsetup_r+0x30>
   81c5a:	89a3      	ldrh	r3, [r4, #12]
   81c5c:	061a      	lsls	r2, r3, #24
   81c5e:	d5de      	bpl.n	81c1e <__swsetup_r+0x32>
   81c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81c64:	81a3      	strh	r3, [r4, #12]
   81c66:	f04f 30ff 	mov.w	r0, #4294967295
   81c6a:	bd38      	pop	{r3, r4, r5, pc}
   81c6c:	f000 f968 	bl	81f40 <__sinit>
   81c70:	e7c5      	b.n	81bfe <__swsetup_r+0x12>
   81c72:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81c74:	b149      	cbz	r1, 81c8a <__swsetup_r+0x9e>
   81c76:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81c7a:	4299      	cmp	r1, r3
   81c7c:	d003      	beq.n	81c86 <__swsetup_r+0x9a>
   81c7e:	4628      	mov	r0, r5
   81c80:	f000 fa36 	bl	820f0 <_free_r>
   81c84:	89a2      	ldrh	r2, [r4, #12]
   81c86:	2300      	movs	r3, #0
   81c88:	6323      	str	r3, [r4, #48]	; 0x30
   81c8a:	6920      	ldr	r0, [r4, #16]
   81c8c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81c90:	2300      	movs	r3, #0
   81c92:	b292      	uxth	r2, r2
   81c94:	e884 0009 	stmia.w	r4, {r0, r3}
   81c98:	e7c7      	b.n	81c2a <__swsetup_r+0x3e>
   81c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81c9e:	2309      	movs	r3, #9
   81ca0:	602b      	str	r3, [r5, #0]
   81ca2:	f04f 30ff 	mov.w	r0, #4294967295
   81ca6:	81a2      	strh	r2, [r4, #12]
   81ca8:	bd38      	pop	{r3, r4, r5, pc}
   81caa:	bf00      	nop
   81cac:	20070558 	.word	0x20070558

00081cb0 <register_fini>:
   81cb0:	4b02      	ldr	r3, [pc, #8]	; (81cbc <register_fini+0xc>)
   81cb2:	b113      	cbz	r3, 81cba <register_fini+0xa>
   81cb4:	4802      	ldr	r0, [pc, #8]	; (81cc0 <register_fini+0x10>)
   81cb6:	f000 b805 	b.w	81cc4 <atexit>
   81cba:	4770      	bx	lr
   81cbc:	00000000 	.word	0x00000000
   81cc0:	00081f55 	.word	0x00081f55

00081cc4 <atexit>:
   81cc4:	4601      	mov	r1, r0
   81cc6:	2000      	movs	r0, #0
   81cc8:	4602      	mov	r2, r0
   81cca:	4603      	mov	r3, r0
   81ccc:	f001 bbe2 	b.w	83494 <__register_exitproc>

00081cd0 <__sflush_r>:
   81cd0:	898b      	ldrh	r3, [r1, #12]
   81cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81cd6:	b29a      	uxth	r2, r3
   81cd8:	460d      	mov	r5, r1
   81cda:	0711      	lsls	r1, r2, #28
   81cdc:	4680      	mov	r8, r0
   81cde:	d43c      	bmi.n	81d5a <__sflush_r+0x8a>
   81ce0:	686a      	ldr	r2, [r5, #4]
   81ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81ce6:	2a00      	cmp	r2, #0
   81ce8:	81ab      	strh	r3, [r5, #12]
   81cea:	dd65      	ble.n	81db8 <__sflush_r+0xe8>
   81cec:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81cee:	2e00      	cmp	r6, #0
   81cf0:	d04b      	beq.n	81d8a <__sflush_r+0xba>
   81cf2:	b29b      	uxth	r3, r3
   81cf4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81cf8:	2100      	movs	r1, #0
   81cfa:	b292      	uxth	r2, r2
   81cfc:	f8d8 4000 	ldr.w	r4, [r8]
   81d00:	f8c8 1000 	str.w	r1, [r8]
   81d04:	2a00      	cmp	r2, #0
   81d06:	d05b      	beq.n	81dc0 <__sflush_r+0xf0>
   81d08:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81d0a:	075f      	lsls	r7, r3, #29
   81d0c:	d505      	bpl.n	81d1a <__sflush_r+0x4a>
   81d0e:	6869      	ldr	r1, [r5, #4]
   81d10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81d12:	1a52      	subs	r2, r2, r1
   81d14:	b10b      	cbz	r3, 81d1a <__sflush_r+0x4a>
   81d16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81d18:	1ad2      	subs	r2, r2, r3
   81d1a:	4640      	mov	r0, r8
   81d1c:	69e9      	ldr	r1, [r5, #28]
   81d1e:	2300      	movs	r3, #0
   81d20:	47b0      	blx	r6
   81d22:	1c46      	adds	r6, r0, #1
   81d24:	d056      	beq.n	81dd4 <__sflush_r+0x104>
   81d26:	89ab      	ldrh	r3, [r5, #12]
   81d28:	692a      	ldr	r2, [r5, #16]
   81d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81d2e:	b29b      	uxth	r3, r3
   81d30:	2100      	movs	r1, #0
   81d32:	602a      	str	r2, [r5, #0]
   81d34:	04da      	lsls	r2, r3, #19
   81d36:	81ab      	strh	r3, [r5, #12]
   81d38:	6069      	str	r1, [r5, #4]
   81d3a:	d43b      	bmi.n	81db4 <__sflush_r+0xe4>
   81d3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81d3e:	f8c8 4000 	str.w	r4, [r8]
   81d42:	b311      	cbz	r1, 81d8a <__sflush_r+0xba>
   81d44:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81d48:	4299      	cmp	r1, r3
   81d4a:	d002      	beq.n	81d52 <__sflush_r+0x82>
   81d4c:	4640      	mov	r0, r8
   81d4e:	f000 f9cf 	bl	820f0 <_free_r>
   81d52:	2000      	movs	r0, #0
   81d54:	6328      	str	r0, [r5, #48]	; 0x30
   81d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d5a:	692e      	ldr	r6, [r5, #16]
   81d5c:	b1ae      	cbz	r6, 81d8a <__sflush_r+0xba>
   81d5e:	0791      	lsls	r1, r2, #30
   81d60:	682c      	ldr	r4, [r5, #0]
   81d62:	bf0c      	ite	eq
   81d64:	696b      	ldreq	r3, [r5, #20]
   81d66:	2300      	movne	r3, #0
   81d68:	602e      	str	r6, [r5, #0]
   81d6a:	1ba4      	subs	r4, r4, r6
   81d6c:	60ab      	str	r3, [r5, #8]
   81d6e:	e00a      	b.n	81d86 <__sflush_r+0xb6>
   81d70:	4632      	mov	r2, r6
   81d72:	4623      	mov	r3, r4
   81d74:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81d76:	4640      	mov	r0, r8
   81d78:	69e9      	ldr	r1, [r5, #28]
   81d7a:	47b8      	blx	r7
   81d7c:	2800      	cmp	r0, #0
   81d7e:	eba4 0400 	sub.w	r4, r4, r0
   81d82:	4406      	add	r6, r0
   81d84:	dd04      	ble.n	81d90 <__sflush_r+0xc0>
   81d86:	2c00      	cmp	r4, #0
   81d88:	dcf2      	bgt.n	81d70 <__sflush_r+0xa0>
   81d8a:	2000      	movs	r0, #0
   81d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d90:	89ab      	ldrh	r3, [r5, #12]
   81d92:	f04f 30ff 	mov.w	r0, #4294967295
   81d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d9a:	81ab      	strh	r3, [r5, #12]
   81d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81da0:	89ab      	ldrh	r3, [r5, #12]
   81da2:	692a      	ldr	r2, [r5, #16]
   81da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81da8:	b29b      	uxth	r3, r3
   81daa:	81ab      	strh	r3, [r5, #12]
   81dac:	04db      	lsls	r3, r3, #19
   81dae:	6069      	str	r1, [r5, #4]
   81db0:	602a      	str	r2, [r5, #0]
   81db2:	d5c3      	bpl.n	81d3c <__sflush_r+0x6c>
   81db4:	6528      	str	r0, [r5, #80]	; 0x50
   81db6:	e7c1      	b.n	81d3c <__sflush_r+0x6c>
   81db8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81dba:	2a00      	cmp	r2, #0
   81dbc:	dc96      	bgt.n	81cec <__sflush_r+0x1c>
   81dbe:	e7e4      	b.n	81d8a <__sflush_r+0xba>
   81dc0:	2301      	movs	r3, #1
   81dc2:	4640      	mov	r0, r8
   81dc4:	69e9      	ldr	r1, [r5, #28]
   81dc6:	47b0      	blx	r6
   81dc8:	1c43      	adds	r3, r0, #1
   81dca:	4602      	mov	r2, r0
   81dcc:	d019      	beq.n	81e02 <__sflush_r+0x132>
   81dce:	89ab      	ldrh	r3, [r5, #12]
   81dd0:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81dd2:	e79a      	b.n	81d0a <__sflush_r+0x3a>
   81dd4:	f8d8 1000 	ldr.w	r1, [r8]
   81dd8:	2900      	cmp	r1, #0
   81dda:	d0e1      	beq.n	81da0 <__sflush_r+0xd0>
   81ddc:	291d      	cmp	r1, #29
   81dde:	d007      	beq.n	81df0 <__sflush_r+0x120>
   81de0:	2916      	cmp	r1, #22
   81de2:	d005      	beq.n	81df0 <__sflush_r+0x120>
   81de4:	89ab      	ldrh	r3, [r5, #12]
   81de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81dea:	81ab      	strh	r3, [r5, #12]
   81dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81df0:	89ab      	ldrh	r3, [r5, #12]
   81df2:	6929      	ldr	r1, [r5, #16]
   81df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81df8:	2200      	movs	r2, #0
   81dfa:	81ab      	strh	r3, [r5, #12]
   81dfc:	e885 0006 	stmia.w	r5, {r1, r2}
   81e00:	e79c      	b.n	81d3c <__sflush_r+0x6c>
   81e02:	f8d8 3000 	ldr.w	r3, [r8]
   81e06:	2b00      	cmp	r3, #0
   81e08:	d0e1      	beq.n	81dce <__sflush_r+0xfe>
   81e0a:	2b1d      	cmp	r3, #29
   81e0c:	d001      	beq.n	81e12 <__sflush_r+0x142>
   81e0e:	2b16      	cmp	r3, #22
   81e10:	d1be      	bne.n	81d90 <__sflush_r+0xc0>
   81e12:	f8c8 4000 	str.w	r4, [r8]
   81e16:	e7b8      	b.n	81d8a <__sflush_r+0xba>

00081e18 <_fflush_r>:
   81e18:	b510      	push	{r4, lr}
   81e1a:	4604      	mov	r4, r0
   81e1c:	b082      	sub	sp, #8
   81e1e:	b108      	cbz	r0, 81e24 <_fflush_r+0xc>
   81e20:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e22:	b153      	cbz	r3, 81e3a <_fflush_r+0x22>
   81e24:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81e28:	b908      	cbnz	r0, 81e2e <_fflush_r+0x16>
   81e2a:	b002      	add	sp, #8
   81e2c:	bd10      	pop	{r4, pc}
   81e2e:	4620      	mov	r0, r4
   81e30:	b002      	add	sp, #8
   81e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81e36:	f7ff bf4b 	b.w	81cd0 <__sflush_r>
   81e3a:	9101      	str	r1, [sp, #4]
   81e3c:	f000 f880 	bl	81f40 <__sinit>
   81e40:	9901      	ldr	r1, [sp, #4]
   81e42:	e7ef      	b.n	81e24 <_fflush_r+0xc>

00081e44 <_cleanup_r>:
   81e44:	4901      	ldr	r1, [pc, #4]	; (81e4c <_cleanup_r+0x8>)
   81e46:	f000 bbbb 	b.w	825c0 <_fwalk_reent>
   81e4a:	bf00      	nop
   81e4c:	0008355d 	.word	0x0008355d

00081e50 <__sinit.part.1>:
   81e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e54:	4607      	mov	r7, r0
   81e56:	4835      	ldr	r0, [pc, #212]	; (81f2c <__sinit.part.1+0xdc>)
   81e58:	687d      	ldr	r5, [r7, #4]
   81e5a:	2400      	movs	r4, #0
   81e5c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81e60:	2304      	movs	r3, #4
   81e62:	2103      	movs	r1, #3
   81e64:	63f8      	str	r0, [r7, #60]	; 0x3c
   81e66:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81e6a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81e6e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81e72:	b083      	sub	sp, #12
   81e74:	602c      	str	r4, [r5, #0]
   81e76:	606c      	str	r4, [r5, #4]
   81e78:	60ac      	str	r4, [r5, #8]
   81e7a:	666c      	str	r4, [r5, #100]	; 0x64
   81e7c:	81ec      	strh	r4, [r5, #14]
   81e7e:	612c      	str	r4, [r5, #16]
   81e80:	616c      	str	r4, [r5, #20]
   81e82:	61ac      	str	r4, [r5, #24]
   81e84:	81ab      	strh	r3, [r5, #12]
   81e86:	4621      	mov	r1, r4
   81e88:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81e8c:	2208      	movs	r2, #8
   81e8e:	f7fe ff59 	bl	80d44 <memset>
   81e92:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81f30 <__sinit.part.1+0xe0>
   81e96:	68be      	ldr	r6, [r7, #8]
   81e98:	f8df a098 	ldr.w	sl, [pc, #152]	; 81f34 <__sinit.part.1+0xe4>
   81e9c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81f38 <__sinit.part.1+0xe8>
   81ea0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81f3c <__sinit.part.1+0xec>
   81ea4:	2301      	movs	r3, #1
   81ea6:	2209      	movs	r2, #9
   81ea8:	f8c5 b020 	str.w	fp, [r5, #32]
   81eac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81eb0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81eb4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81eb8:	61ed      	str	r5, [r5, #28]
   81eba:	4621      	mov	r1, r4
   81ebc:	81f3      	strh	r3, [r6, #14]
   81ebe:	81b2      	strh	r2, [r6, #12]
   81ec0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81ec4:	6034      	str	r4, [r6, #0]
   81ec6:	6074      	str	r4, [r6, #4]
   81ec8:	60b4      	str	r4, [r6, #8]
   81eca:	6674      	str	r4, [r6, #100]	; 0x64
   81ecc:	6134      	str	r4, [r6, #16]
   81ece:	6174      	str	r4, [r6, #20]
   81ed0:	61b4      	str	r4, [r6, #24]
   81ed2:	2208      	movs	r2, #8
   81ed4:	9301      	str	r3, [sp, #4]
   81ed6:	f7fe ff35 	bl	80d44 <memset>
   81eda:	68fd      	ldr	r5, [r7, #12]
   81edc:	2012      	movs	r0, #18
   81ede:	2202      	movs	r2, #2
   81ee0:	61f6      	str	r6, [r6, #28]
   81ee2:	f8c6 b020 	str.w	fp, [r6, #32]
   81ee6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81eea:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   81eee:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   81ef2:	4621      	mov	r1, r4
   81ef4:	81a8      	strh	r0, [r5, #12]
   81ef6:	81ea      	strh	r2, [r5, #14]
   81ef8:	602c      	str	r4, [r5, #0]
   81efa:	606c      	str	r4, [r5, #4]
   81efc:	60ac      	str	r4, [r5, #8]
   81efe:	666c      	str	r4, [r5, #100]	; 0x64
   81f00:	612c      	str	r4, [r5, #16]
   81f02:	616c      	str	r4, [r5, #20]
   81f04:	61ac      	str	r4, [r5, #24]
   81f06:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f0a:	2208      	movs	r2, #8
   81f0c:	f7fe ff1a 	bl	80d44 <memset>
   81f10:	9b01      	ldr	r3, [sp, #4]
   81f12:	61ed      	str	r5, [r5, #28]
   81f14:	f8c5 b020 	str.w	fp, [r5, #32]
   81f18:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81f1c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81f20:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81f24:	63bb      	str	r3, [r7, #56]	; 0x38
   81f26:	b003      	add	sp, #12
   81f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f2c:	00081e45 	.word	0x00081e45
   81f30:	00083275 	.word	0x00083275
   81f34:	00083299 	.word	0x00083299
   81f38:	000832d1 	.word	0x000832d1
   81f3c:	000832f1 	.word	0x000832f1

00081f40 <__sinit>:
   81f40:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f42:	b103      	cbz	r3, 81f46 <__sinit+0x6>
   81f44:	4770      	bx	lr
   81f46:	f7ff bf83 	b.w	81e50 <__sinit.part.1>
   81f4a:	bf00      	nop

00081f4c <__sfp_lock_acquire>:
   81f4c:	4770      	bx	lr
   81f4e:	bf00      	nop

00081f50 <__sfp_lock_release>:
   81f50:	4770      	bx	lr
   81f52:	bf00      	nop

00081f54 <__libc_fini_array>:
   81f54:	b538      	push	{r3, r4, r5, lr}
   81f56:	4b08      	ldr	r3, [pc, #32]	; (81f78 <__libc_fini_array+0x24>)
   81f58:	4d08      	ldr	r5, [pc, #32]	; (81f7c <__libc_fini_array+0x28>)
   81f5a:	1aed      	subs	r5, r5, r3
   81f5c:	10ac      	asrs	r4, r5, #2
   81f5e:	bf18      	it	ne
   81f60:	18ed      	addne	r5, r5, r3
   81f62:	d005      	beq.n	81f70 <__libc_fini_array+0x1c>
   81f64:	3c01      	subs	r4, #1
   81f66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81f6a:	4798      	blx	r3
   81f6c:	2c00      	cmp	r4, #0
   81f6e:	d1f9      	bne.n	81f64 <__libc_fini_array+0x10>
   81f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81f74:	f001 be98 	b.w	83ca8 <_fini>
   81f78:	00083cb4 	.word	0x00083cb4
   81f7c:	00083cb8 	.word	0x00083cb8

00081f80 <__fputwc>:
   81f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f84:	b082      	sub	sp, #8
   81f86:	4607      	mov	r7, r0
   81f88:	460e      	mov	r6, r1
   81f8a:	4614      	mov	r4, r2
   81f8c:	f000 fb44 	bl	82618 <__locale_mb_cur_max>
   81f90:	2801      	cmp	r0, #1
   81f92:	d040      	beq.n	82016 <__fputwc+0x96>
   81f94:	4638      	mov	r0, r7
   81f96:	a901      	add	r1, sp, #4
   81f98:	4632      	mov	r2, r6
   81f9a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   81f9e:	f001 fa2d 	bl	833fc <_wcrtomb_r>
   81fa2:	f1b0 3fff 	cmp.w	r0, #4294967295
   81fa6:	4680      	mov	r8, r0
   81fa8:	d02e      	beq.n	82008 <__fputwc+0x88>
   81faa:	2800      	cmp	r0, #0
   81fac:	d03b      	beq.n	82026 <__fputwc+0xa6>
   81fae:	f89d 1004 	ldrb.w	r1, [sp, #4]
   81fb2:	2500      	movs	r5, #0
   81fb4:	e009      	b.n	81fca <__fputwc+0x4a>
   81fb6:	6823      	ldr	r3, [r4, #0]
   81fb8:	7019      	strb	r1, [r3, #0]
   81fba:	6823      	ldr	r3, [r4, #0]
   81fbc:	3301      	adds	r3, #1
   81fbe:	6023      	str	r3, [r4, #0]
   81fc0:	3501      	adds	r5, #1
   81fc2:	45a8      	cmp	r8, r5
   81fc4:	d92f      	bls.n	82026 <__fputwc+0xa6>
   81fc6:	ab01      	add	r3, sp, #4
   81fc8:	5d59      	ldrb	r1, [r3, r5]
   81fca:	68a3      	ldr	r3, [r4, #8]
   81fcc:	3b01      	subs	r3, #1
   81fce:	2b00      	cmp	r3, #0
   81fd0:	60a3      	str	r3, [r4, #8]
   81fd2:	daf0      	bge.n	81fb6 <__fputwc+0x36>
   81fd4:	69a2      	ldr	r2, [r4, #24]
   81fd6:	4293      	cmp	r3, r2
   81fd8:	db06      	blt.n	81fe8 <__fputwc+0x68>
   81fda:	6823      	ldr	r3, [r4, #0]
   81fdc:	7019      	strb	r1, [r3, #0]
   81fde:	6823      	ldr	r3, [r4, #0]
   81fe0:	7819      	ldrb	r1, [r3, #0]
   81fe2:	3301      	adds	r3, #1
   81fe4:	290a      	cmp	r1, #10
   81fe6:	d1ea      	bne.n	81fbe <__fputwc+0x3e>
   81fe8:	4638      	mov	r0, r7
   81fea:	4622      	mov	r2, r4
   81fec:	f001 f9b2 	bl	83354 <__swbuf_r>
   81ff0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   81ff4:	fab0 f080 	clz	r0, r0
   81ff8:	0940      	lsrs	r0, r0, #5
   81ffa:	2800      	cmp	r0, #0
   81ffc:	d0e0      	beq.n	81fc0 <__fputwc+0x40>
   81ffe:	f04f 30ff 	mov.w	r0, #4294967295
   82002:	b002      	add	sp, #8
   82004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82008:	89a3      	ldrh	r3, [r4, #12]
   8200a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8200e:	81a3      	strh	r3, [r4, #12]
   82010:	b002      	add	sp, #8
   82012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82016:	1e73      	subs	r3, r6, #1
   82018:	2bfe      	cmp	r3, #254	; 0xfe
   8201a:	d8bb      	bhi.n	81f94 <__fputwc+0x14>
   8201c:	b2f1      	uxtb	r1, r6
   8201e:	4680      	mov	r8, r0
   82020:	f88d 1004 	strb.w	r1, [sp, #4]
   82024:	e7c5      	b.n	81fb2 <__fputwc+0x32>
   82026:	4630      	mov	r0, r6
   82028:	b002      	add	sp, #8
   8202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8202e:	bf00      	nop

00082030 <_fputwc_r>:
   82030:	8993      	ldrh	r3, [r2, #12]
   82032:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82036:	d10b      	bne.n	82050 <_fputwc_r+0x20>
   82038:	b410      	push	{r4}
   8203a:	6e54      	ldr	r4, [r2, #100]	; 0x64
   8203c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82040:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   82044:	6654      	str	r4, [r2, #100]	; 0x64
   82046:	8193      	strh	r3, [r2, #12]
   82048:	f85d 4b04 	ldr.w	r4, [sp], #4
   8204c:	f7ff bf98 	b.w	81f80 <__fputwc>
   82050:	f7ff bf96 	b.w	81f80 <__fputwc>

00082054 <_malloc_trim_r>:
   82054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82056:	460c      	mov	r4, r1
   82058:	4f22      	ldr	r7, [pc, #136]	; (820e4 <_malloc_trim_r+0x90>)
   8205a:	4606      	mov	r6, r0
   8205c:	f000 ff04 	bl	82e68 <__malloc_lock>
   82060:	68bb      	ldr	r3, [r7, #8]
   82062:	685d      	ldr	r5, [r3, #4]
   82064:	f025 0503 	bic.w	r5, r5, #3
   82068:	1b29      	subs	r1, r5, r4
   8206a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8206e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82072:	f021 010f 	bic.w	r1, r1, #15
   82076:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8207a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8207e:	db07      	blt.n	82090 <_malloc_trim_r+0x3c>
   82080:	4630      	mov	r0, r6
   82082:	2100      	movs	r1, #0
   82084:	f001 f8e4 	bl	83250 <_sbrk_r>
   82088:	68bb      	ldr	r3, [r7, #8]
   8208a:	442b      	add	r3, r5
   8208c:	4298      	cmp	r0, r3
   8208e:	d004      	beq.n	8209a <_malloc_trim_r+0x46>
   82090:	4630      	mov	r0, r6
   82092:	f000 feeb 	bl	82e6c <__malloc_unlock>
   82096:	2000      	movs	r0, #0
   82098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8209a:	4630      	mov	r0, r6
   8209c:	4261      	negs	r1, r4
   8209e:	f001 f8d7 	bl	83250 <_sbrk_r>
   820a2:	3001      	adds	r0, #1
   820a4:	d00d      	beq.n	820c2 <_malloc_trim_r+0x6e>
   820a6:	4b10      	ldr	r3, [pc, #64]	; (820e8 <_malloc_trim_r+0x94>)
   820a8:	68ba      	ldr	r2, [r7, #8]
   820aa:	6819      	ldr	r1, [r3, #0]
   820ac:	1b2d      	subs	r5, r5, r4
   820ae:	f045 0501 	orr.w	r5, r5, #1
   820b2:	4630      	mov	r0, r6
   820b4:	1b09      	subs	r1, r1, r4
   820b6:	6055      	str	r5, [r2, #4]
   820b8:	6019      	str	r1, [r3, #0]
   820ba:	f000 fed7 	bl	82e6c <__malloc_unlock>
   820be:	2001      	movs	r0, #1
   820c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   820c2:	4630      	mov	r0, r6
   820c4:	2100      	movs	r1, #0
   820c6:	f001 f8c3 	bl	83250 <_sbrk_r>
   820ca:	68ba      	ldr	r2, [r7, #8]
   820cc:	1a83      	subs	r3, r0, r2
   820ce:	2b0f      	cmp	r3, #15
   820d0:	ddde      	ble.n	82090 <_malloc_trim_r+0x3c>
   820d2:	4c06      	ldr	r4, [pc, #24]	; (820ec <_malloc_trim_r+0x98>)
   820d4:	4904      	ldr	r1, [pc, #16]	; (820e8 <_malloc_trim_r+0x94>)
   820d6:	6824      	ldr	r4, [r4, #0]
   820d8:	f043 0301 	orr.w	r3, r3, #1
   820dc:	1b00      	subs	r0, r0, r4
   820de:	6053      	str	r3, [r2, #4]
   820e0:	6008      	str	r0, [r1, #0]
   820e2:	e7d5      	b.n	82090 <_malloc_trim_r+0x3c>
   820e4:	20070580 	.word	0x20070580
   820e8:	20070a38 	.word	0x20070a38
   820ec:	2007098c 	.word	0x2007098c

000820f0 <_free_r>:
   820f0:	2900      	cmp	r1, #0
   820f2:	d04e      	beq.n	82192 <_free_r+0xa2>
   820f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820f8:	460c      	mov	r4, r1
   820fa:	4680      	mov	r8, r0
   820fc:	f000 feb4 	bl	82e68 <__malloc_lock>
   82100:	f854 7c04 	ldr.w	r7, [r4, #-4]
   82104:	4962      	ldr	r1, [pc, #392]	; (82290 <_free_r+0x1a0>)
   82106:	f1a4 0508 	sub.w	r5, r4, #8
   8210a:	f027 0201 	bic.w	r2, r7, #1
   8210e:	18ab      	adds	r3, r5, r2
   82110:	688e      	ldr	r6, [r1, #8]
   82112:	6858      	ldr	r0, [r3, #4]
   82114:	429e      	cmp	r6, r3
   82116:	f020 0003 	bic.w	r0, r0, #3
   8211a:	d05a      	beq.n	821d2 <_free_r+0xe2>
   8211c:	07fe      	lsls	r6, r7, #31
   8211e:	6058      	str	r0, [r3, #4]
   82120:	d40b      	bmi.n	8213a <_free_r+0x4a>
   82122:	f854 7c08 	ldr.w	r7, [r4, #-8]
   82126:	f101 0e08 	add.w	lr, r1, #8
   8212a:	1bed      	subs	r5, r5, r7
   8212c:	68ac      	ldr	r4, [r5, #8]
   8212e:	443a      	add	r2, r7
   82130:	4574      	cmp	r4, lr
   82132:	d067      	beq.n	82204 <_free_r+0x114>
   82134:	68ef      	ldr	r7, [r5, #12]
   82136:	60e7      	str	r7, [r4, #12]
   82138:	60bc      	str	r4, [r7, #8]
   8213a:	181c      	adds	r4, r3, r0
   8213c:	6864      	ldr	r4, [r4, #4]
   8213e:	07e4      	lsls	r4, r4, #31
   82140:	d40c      	bmi.n	8215c <_free_r+0x6c>
   82142:	4f54      	ldr	r7, [pc, #336]	; (82294 <_free_r+0x1a4>)
   82144:	689c      	ldr	r4, [r3, #8]
   82146:	4402      	add	r2, r0
   82148:	42bc      	cmp	r4, r7
   8214a:	d07c      	beq.n	82246 <_free_r+0x156>
   8214c:	68d8      	ldr	r0, [r3, #12]
   8214e:	f042 0301 	orr.w	r3, r2, #1
   82152:	60e0      	str	r0, [r4, #12]
   82154:	6084      	str	r4, [r0, #8]
   82156:	606b      	str	r3, [r5, #4]
   82158:	50aa      	str	r2, [r5, r2]
   8215a:	e003      	b.n	82164 <_free_r+0x74>
   8215c:	f042 0301 	orr.w	r3, r2, #1
   82160:	606b      	str	r3, [r5, #4]
   82162:	50aa      	str	r2, [r5, r2]
   82164:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82168:	d214      	bcs.n	82194 <_free_r+0xa4>
   8216a:	08d2      	lsrs	r2, r2, #3
   8216c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   82170:	2401      	movs	r4, #1
   82172:	6848      	ldr	r0, [r1, #4]
   82174:	1092      	asrs	r2, r2, #2
   82176:	fa04 f202 	lsl.w	r2, r4, r2
   8217a:	689c      	ldr	r4, [r3, #8]
   8217c:	4310      	orrs	r0, r2
   8217e:	60ac      	str	r4, [r5, #8]
   82180:	60eb      	str	r3, [r5, #12]
   82182:	6048      	str	r0, [r1, #4]
   82184:	609d      	str	r5, [r3, #8]
   82186:	60e5      	str	r5, [r4, #12]
   82188:	4640      	mov	r0, r8
   8218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8218e:	f000 be6d 	b.w	82e6c <__malloc_unlock>
   82192:	4770      	bx	lr
   82194:	0a53      	lsrs	r3, r2, #9
   82196:	2b04      	cmp	r3, #4
   82198:	d847      	bhi.n	8222a <_free_r+0x13a>
   8219a:	0993      	lsrs	r3, r2, #6
   8219c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   821a0:	0060      	lsls	r0, r4, #1
   821a2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   821a6:	6883      	ldr	r3, [r0, #8]
   821a8:	4939      	ldr	r1, [pc, #228]	; (82290 <_free_r+0x1a0>)
   821aa:	4283      	cmp	r3, r0
   821ac:	d043      	beq.n	82236 <_free_r+0x146>
   821ae:	6859      	ldr	r1, [r3, #4]
   821b0:	f021 0103 	bic.w	r1, r1, #3
   821b4:	4291      	cmp	r1, r2
   821b6:	d902      	bls.n	821be <_free_r+0xce>
   821b8:	689b      	ldr	r3, [r3, #8]
   821ba:	4298      	cmp	r0, r3
   821bc:	d1f7      	bne.n	821ae <_free_r+0xbe>
   821be:	68da      	ldr	r2, [r3, #12]
   821c0:	60ea      	str	r2, [r5, #12]
   821c2:	60ab      	str	r3, [r5, #8]
   821c4:	4640      	mov	r0, r8
   821c6:	6095      	str	r5, [r2, #8]
   821c8:	60dd      	str	r5, [r3, #12]
   821ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   821ce:	f000 be4d 	b.w	82e6c <__malloc_unlock>
   821d2:	07ff      	lsls	r7, r7, #31
   821d4:	4402      	add	r2, r0
   821d6:	d407      	bmi.n	821e8 <_free_r+0xf8>
   821d8:	f854 4c08 	ldr.w	r4, [r4, #-8]
   821dc:	1b2d      	subs	r5, r5, r4
   821de:	68eb      	ldr	r3, [r5, #12]
   821e0:	68a8      	ldr	r0, [r5, #8]
   821e2:	4422      	add	r2, r4
   821e4:	60c3      	str	r3, [r0, #12]
   821e6:	6098      	str	r0, [r3, #8]
   821e8:	4b2b      	ldr	r3, [pc, #172]	; (82298 <_free_r+0x1a8>)
   821ea:	f042 0001 	orr.w	r0, r2, #1
   821ee:	681b      	ldr	r3, [r3, #0]
   821f0:	6068      	str	r0, [r5, #4]
   821f2:	429a      	cmp	r2, r3
   821f4:	608d      	str	r5, [r1, #8]
   821f6:	d3c7      	bcc.n	82188 <_free_r+0x98>
   821f8:	4b28      	ldr	r3, [pc, #160]	; (8229c <_free_r+0x1ac>)
   821fa:	4640      	mov	r0, r8
   821fc:	6819      	ldr	r1, [r3, #0]
   821fe:	f7ff ff29 	bl	82054 <_malloc_trim_r>
   82202:	e7c1      	b.n	82188 <_free_r+0x98>
   82204:	1819      	adds	r1, r3, r0
   82206:	6849      	ldr	r1, [r1, #4]
   82208:	07c9      	lsls	r1, r1, #31
   8220a:	d409      	bmi.n	82220 <_free_r+0x130>
   8220c:	68d9      	ldr	r1, [r3, #12]
   8220e:	4402      	add	r2, r0
   82210:	689b      	ldr	r3, [r3, #8]
   82212:	f042 0001 	orr.w	r0, r2, #1
   82216:	60d9      	str	r1, [r3, #12]
   82218:	608b      	str	r3, [r1, #8]
   8221a:	6068      	str	r0, [r5, #4]
   8221c:	50aa      	str	r2, [r5, r2]
   8221e:	e7b3      	b.n	82188 <_free_r+0x98>
   82220:	f042 0301 	orr.w	r3, r2, #1
   82224:	606b      	str	r3, [r5, #4]
   82226:	50aa      	str	r2, [r5, r2]
   82228:	e7ae      	b.n	82188 <_free_r+0x98>
   8222a:	2b14      	cmp	r3, #20
   8222c:	d814      	bhi.n	82258 <_free_r+0x168>
   8222e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   82232:	0060      	lsls	r0, r4, #1
   82234:	e7b5      	b.n	821a2 <_free_r+0xb2>
   82236:	684a      	ldr	r2, [r1, #4]
   82238:	10a4      	asrs	r4, r4, #2
   8223a:	2001      	movs	r0, #1
   8223c:	40a0      	lsls	r0, r4
   8223e:	4302      	orrs	r2, r0
   82240:	604a      	str	r2, [r1, #4]
   82242:	461a      	mov	r2, r3
   82244:	e7bc      	b.n	821c0 <_free_r+0xd0>
   82246:	f042 0301 	orr.w	r3, r2, #1
   8224a:	614d      	str	r5, [r1, #20]
   8224c:	610d      	str	r5, [r1, #16]
   8224e:	60ec      	str	r4, [r5, #12]
   82250:	60ac      	str	r4, [r5, #8]
   82252:	606b      	str	r3, [r5, #4]
   82254:	50aa      	str	r2, [r5, r2]
   82256:	e797      	b.n	82188 <_free_r+0x98>
   82258:	2b54      	cmp	r3, #84	; 0x54
   8225a:	d804      	bhi.n	82266 <_free_r+0x176>
   8225c:	0b13      	lsrs	r3, r2, #12
   8225e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   82262:	0060      	lsls	r0, r4, #1
   82264:	e79d      	b.n	821a2 <_free_r+0xb2>
   82266:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8226a:	d804      	bhi.n	82276 <_free_r+0x186>
   8226c:	0bd3      	lsrs	r3, r2, #15
   8226e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   82272:	0060      	lsls	r0, r4, #1
   82274:	e795      	b.n	821a2 <_free_r+0xb2>
   82276:	f240 5054 	movw	r0, #1364	; 0x554
   8227a:	4283      	cmp	r3, r0
   8227c:	d804      	bhi.n	82288 <_free_r+0x198>
   8227e:	0c93      	lsrs	r3, r2, #18
   82280:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82284:	0060      	lsls	r0, r4, #1
   82286:	e78c      	b.n	821a2 <_free_r+0xb2>
   82288:	20fc      	movs	r0, #252	; 0xfc
   8228a:	247e      	movs	r4, #126	; 0x7e
   8228c:	e789      	b.n	821a2 <_free_r+0xb2>
   8228e:	bf00      	nop
   82290:	20070580 	.word	0x20070580
   82294:	20070588 	.word	0x20070588
   82298:	20070988 	.word	0x20070988
   8229c:	20070a34 	.word	0x20070a34

000822a0 <__sfvwrite_r>:
   822a0:	6893      	ldr	r3, [r2, #8]
   822a2:	2b00      	cmp	r3, #0
   822a4:	f000 80b1 	beq.w	8240a <__sfvwrite_r+0x16a>
   822a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822ac:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   822b0:	b083      	sub	sp, #12
   822b2:	f01e 0f08 	tst.w	lr, #8
   822b6:	460c      	mov	r4, r1
   822b8:	4681      	mov	r9, r0
   822ba:	4616      	mov	r6, r2
   822bc:	d028      	beq.n	82310 <__sfvwrite_r+0x70>
   822be:	690b      	ldr	r3, [r1, #16]
   822c0:	b333      	cbz	r3, 82310 <__sfvwrite_r+0x70>
   822c2:	f00e 0802 	and.w	r8, lr, #2
   822c6:	fa1f f088 	uxth.w	r0, r8
   822ca:	6835      	ldr	r5, [r6, #0]
   822cc:	b380      	cbz	r0, 82330 <__sfvwrite_r+0x90>
   822ce:	f04f 0b00 	mov.w	fp, #0
   822d2:	46d8      	mov	r8, fp
   822d4:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 825bc <__sfvwrite_r+0x31c>
   822d8:	f1b8 0f00 	cmp.w	r8, #0
   822dc:	f000 808f 	beq.w	823fe <__sfvwrite_r+0x15e>
   822e0:	45d0      	cmp	r8, sl
   822e2:	4643      	mov	r3, r8
   822e4:	4648      	mov	r0, r9
   822e6:	bf28      	it	cs
   822e8:	4653      	movcs	r3, sl
   822ea:	69e1      	ldr	r1, [r4, #28]
   822ec:	465a      	mov	r2, fp
   822ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
   822f0:	47b8      	blx	r7
   822f2:	2800      	cmp	r0, #0
   822f4:	f340 80a8 	ble.w	82448 <__sfvwrite_r+0x1a8>
   822f8:	68b3      	ldr	r3, [r6, #8]
   822fa:	4483      	add	fp, r0
   822fc:	1a1b      	subs	r3, r3, r0
   822fe:	ebc0 0808 	rsb	r8, r0, r8
   82302:	60b3      	str	r3, [r6, #8]
   82304:	2b00      	cmp	r3, #0
   82306:	d1e7      	bne.n	822d8 <__sfvwrite_r+0x38>
   82308:	2000      	movs	r0, #0
   8230a:	b003      	add	sp, #12
   8230c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82310:	4648      	mov	r0, r9
   82312:	4621      	mov	r1, r4
   82314:	f7ff fc6a 	bl	81bec <__swsetup_r>
   82318:	2800      	cmp	r0, #0
   8231a:	f040 8146 	bne.w	825aa <__sfvwrite_r+0x30a>
   8231e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   82322:	6835      	ldr	r5, [r6, #0]
   82324:	f00e 0802 	and.w	r8, lr, #2
   82328:	fa1f f088 	uxth.w	r0, r8
   8232c:	2800      	cmp	r0, #0
   8232e:	d1ce      	bne.n	822ce <__sfvwrite_r+0x2e>
   82330:	f01e 0b01 	ands.w	fp, lr, #1
   82334:	f040 8091 	bne.w	8245a <__sfvwrite_r+0x1ba>
   82338:	46d8      	mov	r8, fp
   8233a:	f1b8 0f00 	cmp.w	r8, #0
   8233e:	d058      	beq.n	823f2 <__sfvwrite_r+0x152>
   82340:	f41e 7f00 	tst.w	lr, #512	; 0x200
   82344:	68a7      	ldr	r7, [r4, #8]
   82346:	d062      	beq.n	8240e <__sfvwrite_r+0x16e>
   82348:	45b8      	cmp	r8, r7
   8234a:	46ba      	mov	sl, r7
   8234c:	f0c0 80c2 	bcc.w	824d4 <__sfvwrite_r+0x234>
   82350:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   82354:	f000 80c0 	beq.w	824d8 <__sfvwrite_r+0x238>
   82358:	6967      	ldr	r7, [r4, #20]
   8235a:	6921      	ldr	r1, [r4, #16]
   8235c:	6823      	ldr	r3, [r4, #0]
   8235e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82362:	1a5b      	subs	r3, r3, r1
   82364:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82368:	1c58      	adds	r0, r3, #1
   8236a:	107f      	asrs	r7, r7, #1
   8236c:	4440      	add	r0, r8
   8236e:	4287      	cmp	r7, r0
   82370:	463a      	mov	r2, r7
   82372:	bf3c      	itt	cc
   82374:	4607      	movcc	r7, r0
   82376:	463a      	movcc	r2, r7
   82378:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   8237c:	9300      	str	r3, [sp, #0]
   8237e:	f000 80fb 	beq.w	82578 <__sfvwrite_r+0x2d8>
   82382:	4611      	mov	r1, r2
   82384:	4648      	mov	r0, r9
   82386:	f000 f9c5 	bl	82714 <_malloc_r>
   8238a:	9b00      	ldr	r3, [sp, #0]
   8238c:	4682      	mov	sl, r0
   8238e:	2800      	cmp	r0, #0
   82390:	f000 810e 	beq.w	825b0 <__sfvwrite_r+0x310>
   82394:	461a      	mov	r2, r3
   82396:	6921      	ldr	r1, [r4, #16]
   82398:	9300      	str	r3, [sp, #0]
   8239a:	f000 fc8b 	bl	82cb4 <memcpy>
   8239e:	89a2      	ldrh	r2, [r4, #12]
   823a0:	9b00      	ldr	r3, [sp, #0]
   823a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   823a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   823aa:	81a2      	strh	r2, [r4, #12]
   823ac:	eb0a 0003 	add.w	r0, sl, r3
   823b0:	f8c4 a010 	str.w	sl, [r4, #16]
   823b4:	1afb      	subs	r3, r7, r3
   823b6:	6167      	str	r7, [r4, #20]
   823b8:	46c2      	mov	sl, r8
   823ba:	4647      	mov	r7, r8
   823bc:	6020      	str	r0, [r4, #0]
   823be:	60a3      	str	r3, [r4, #8]
   823c0:	4652      	mov	r2, sl
   823c2:	4659      	mov	r1, fp
   823c4:	f000 fcec 	bl	82da0 <memmove>
   823c8:	68a0      	ldr	r0, [r4, #8]
   823ca:	6822      	ldr	r2, [r4, #0]
   823cc:	1bc0      	subs	r0, r0, r7
   823ce:	60a0      	str	r0, [r4, #8]
   823d0:	4640      	mov	r0, r8
   823d2:	eb02 030a 	add.w	r3, r2, sl
   823d6:	6023      	str	r3, [r4, #0]
   823d8:	68b3      	ldr	r3, [r6, #8]
   823da:	4483      	add	fp, r0
   823dc:	1a1b      	subs	r3, r3, r0
   823de:	ebc0 0808 	rsb	r8, r0, r8
   823e2:	60b3      	str	r3, [r6, #8]
   823e4:	2b00      	cmp	r3, #0
   823e6:	d08f      	beq.n	82308 <__sfvwrite_r+0x68>
   823e8:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   823ec:	f1b8 0f00 	cmp.w	r8, #0
   823f0:	d1a6      	bne.n	82340 <__sfvwrite_r+0xa0>
   823f2:	f8d5 b000 	ldr.w	fp, [r5]
   823f6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   823fa:	3508      	adds	r5, #8
   823fc:	e79d      	b.n	8233a <__sfvwrite_r+0x9a>
   823fe:	f8d5 b000 	ldr.w	fp, [r5]
   82402:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82406:	3508      	adds	r5, #8
   82408:	e766      	b.n	822d8 <__sfvwrite_r+0x38>
   8240a:	2000      	movs	r0, #0
   8240c:	4770      	bx	lr
   8240e:	6820      	ldr	r0, [r4, #0]
   82410:	6923      	ldr	r3, [r4, #16]
   82412:	4298      	cmp	r0, r3
   82414:	d803      	bhi.n	8241e <__sfvwrite_r+0x17e>
   82416:	6962      	ldr	r2, [r4, #20]
   82418:	4590      	cmp	r8, r2
   8241a:	f080 8085 	bcs.w	82528 <__sfvwrite_r+0x288>
   8241e:	4547      	cmp	r7, r8
   82420:	bf28      	it	cs
   82422:	4647      	movcs	r7, r8
   82424:	4659      	mov	r1, fp
   82426:	463a      	mov	r2, r7
   82428:	f000 fcba 	bl	82da0 <memmove>
   8242c:	68a3      	ldr	r3, [r4, #8]
   8242e:	6822      	ldr	r2, [r4, #0]
   82430:	1bdb      	subs	r3, r3, r7
   82432:	443a      	add	r2, r7
   82434:	60a3      	str	r3, [r4, #8]
   82436:	6022      	str	r2, [r4, #0]
   82438:	2b00      	cmp	r3, #0
   8243a:	d149      	bne.n	824d0 <__sfvwrite_r+0x230>
   8243c:	4648      	mov	r0, r9
   8243e:	4621      	mov	r1, r4
   82440:	f7ff fcea 	bl	81e18 <_fflush_r>
   82444:	2800      	cmp	r0, #0
   82446:	d043      	beq.n	824d0 <__sfvwrite_r+0x230>
   82448:	89a3      	ldrh	r3, [r4, #12]
   8244a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8244e:	f04f 30ff 	mov.w	r0, #4294967295
   82452:	81a3      	strh	r3, [r4, #12]
   82454:	b003      	add	sp, #12
   82456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8245a:	4680      	mov	r8, r0
   8245c:	4683      	mov	fp, r0
   8245e:	4682      	mov	sl, r0
   82460:	9000      	str	r0, [sp, #0]
   82462:	f1ba 0f00 	cmp.w	sl, #0
   82466:	d02b      	beq.n	824c0 <__sfvwrite_r+0x220>
   82468:	9b00      	ldr	r3, [sp, #0]
   8246a:	2b00      	cmp	r3, #0
   8246c:	d04f      	beq.n	8250e <__sfvwrite_r+0x26e>
   8246e:	45d0      	cmp	r8, sl
   82470:	4643      	mov	r3, r8
   82472:	bf28      	it	cs
   82474:	4653      	movcs	r3, sl
   82476:	6820      	ldr	r0, [r4, #0]
   82478:	6921      	ldr	r1, [r4, #16]
   8247a:	461f      	mov	r7, r3
   8247c:	4288      	cmp	r0, r1
   8247e:	f8d4 e008 	ldr.w	lr, [r4, #8]
   82482:	6962      	ldr	r2, [r4, #20]
   82484:	d903      	bls.n	8248e <__sfvwrite_r+0x1ee>
   82486:	eb0e 0c02 	add.w	ip, lr, r2
   8248a:	4563      	cmp	r3, ip
   8248c:	dc5e      	bgt.n	8254c <__sfvwrite_r+0x2ac>
   8248e:	4293      	cmp	r3, r2
   82490:	db24      	blt.n	824dc <__sfvwrite_r+0x23c>
   82492:	4613      	mov	r3, r2
   82494:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82496:	4648      	mov	r0, r9
   82498:	69e1      	ldr	r1, [r4, #28]
   8249a:	465a      	mov	r2, fp
   8249c:	47b8      	blx	r7
   8249e:	1e07      	subs	r7, r0, #0
   824a0:	ddd2      	ble.n	82448 <__sfvwrite_r+0x1a8>
   824a2:	ebb8 0807 	subs.w	r8, r8, r7
   824a6:	d029      	beq.n	824fc <__sfvwrite_r+0x25c>
   824a8:	68b3      	ldr	r3, [r6, #8]
   824aa:	44bb      	add	fp, r7
   824ac:	1bdb      	subs	r3, r3, r7
   824ae:	ebc7 0a0a 	rsb	sl, r7, sl
   824b2:	60b3      	str	r3, [r6, #8]
   824b4:	2b00      	cmp	r3, #0
   824b6:	f43f af27 	beq.w	82308 <__sfvwrite_r+0x68>
   824ba:	f1ba 0f00 	cmp.w	sl, #0
   824be:	d1d3      	bne.n	82468 <__sfvwrite_r+0x1c8>
   824c0:	2300      	movs	r3, #0
   824c2:	f8d5 b000 	ldr.w	fp, [r5]
   824c6:	f8d5 a004 	ldr.w	sl, [r5, #4]
   824ca:	9300      	str	r3, [sp, #0]
   824cc:	3508      	adds	r5, #8
   824ce:	e7c8      	b.n	82462 <__sfvwrite_r+0x1c2>
   824d0:	4638      	mov	r0, r7
   824d2:	e781      	b.n	823d8 <__sfvwrite_r+0x138>
   824d4:	4647      	mov	r7, r8
   824d6:	46c2      	mov	sl, r8
   824d8:	6820      	ldr	r0, [r4, #0]
   824da:	e771      	b.n	823c0 <__sfvwrite_r+0x120>
   824dc:	461a      	mov	r2, r3
   824de:	4659      	mov	r1, fp
   824e0:	9301      	str	r3, [sp, #4]
   824e2:	f000 fc5d 	bl	82da0 <memmove>
   824e6:	68a2      	ldr	r2, [r4, #8]
   824e8:	6821      	ldr	r1, [r4, #0]
   824ea:	9b01      	ldr	r3, [sp, #4]
   824ec:	ebb8 0807 	subs.w	r8, r8, r7
   824f0:	eba2 0203 	sub.w	r2, r2, r3
   824f4:	440b      	add	r3, r1
   824f6:	60a2      	str	r2, [r4, #8]
   824f8:	6023      	str	r3, [r4, #0]
   824fa:	d1d5      	bne.n	824a8 <__sfvwrite_r+0x208>
   824fc:	4648      	mov	r0, r9
   824fe:	4621      	mov	r1, r4
   82500:	f7ff fc8a 	bl	81e18 <_fflush_r>
   82504:	2800      	cmp	r0, #0
   82506:	d19f      	bne.n	82448 <__sfvwrite_r+0x1a8>
   82508:	f8cd 8000 	str.w	r8, [sp]
   8250c:	e7cc      	b.n	824a8 <__sfvwrite_r+0x208>
   8250e:	4658      	mov	r0, fp
   82510:	210a      	movs	r1, #10
   82512:	4652      	mov	r2, sl
   82514:	f000 fb84 	bl	82c20 <memchr>
   82518:	2800      	cmp	r0, #0
   8251a:	d041      	beq.n	825a0 <__sfvwrite_r+0x300>
   8251c:	3001      	adds	r0, #1
   8251e:	2301      	movs	r3, #1
   82520:	ebcb 0800 	rsb	r8, fp, r0
   82524:	9300      	str	r3, [sp, #0]
   82526:	e7a2      	b.n	8246e <__sfvwrite_r+0x1ce>
   82528:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8252c:	4543      	cmp	r3, r8
   8252e:	bf28      	it	cs
   82530:	4643      	movcs	r3, r8
   82532:	fb93 f3f2 	sdiv	r3, r3, r2
   82536:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82538:	fb03 f302 	mul.w	r3, r3, r2
   8253c:	4648      	mov	r0, r9
   8253e:	69e1      	ldr	r1, [r4, #28]
   82540:	465a      	mov	r2, fp
   82542:	47b8      	blx	r7
   82544:	2800      	cmp	r0, #0
   82546:	f73f af47 	bgt.w	823d8 <__sfvwrite_r+0x138>
   8254a:	e77d      	b.n	82448 <__sfvwrite_r+0x1a8>
   8254c:	4662      	mov	r2, ip
   8254e:	4659      	mov	r1, fp
   82550:	f8cd c004 	str.w	ip, [sp, #4]
   82554:	f000 fc24 	bl	82da0 <memmove>
   82558:	6823      	ldr	r3, [r4, #0]
   8255a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8255e:	4648      	mov	r0, r9
   82560:	4463      	add	r3, ip
   82562:	6023      	str	r3, [r4, #0]
   82564:	4621      	mov	r1, r4
   82566:	f7ff fc57 	bl	81e18 <_fflush_r>
   8256a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8256e:	2800      	cmp	r0, #0
   82570:	f47f af6a 	bne.w	82448 <__sfvwrite_r+0x1a8>
   82574:	4667      	mov	r7, ip
   82576:	e794      	b.n	824a2 <__sfvwrite_r+0x202>
   82578:	4648      	mov	r0, r9
   8257a:	f000 fc79 	bl	82e70 <_realloc_r>
   8257e:	9b00      	ldr	r3, [sp, #0]
   82580:	4682      	mov	sl, r0
   82582:	2800      	cmp	r0, #0
   82584:	f47f af12 	bne.w	823ac <__sfvwrite_r+0x10c>
   82588:	4648      	mov	r0, r9
   8258a:	6921      	ldr	r1, [r4, #16]
   8258c:	f7ff fdb0 	bl	820f0 <_free_r>
   82590:	89a3      	ldrh	r3, [r4, #12]
   82592:	220c      	movs	r2, #12
   82594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82598:	b29b      	uxth	r3, r3
   8259a:	f8c9 2000 	str.w	r2, [r9]
   8259e:	e754      	b.n	8244a <__sfvwrite_r+0x1aa>
   825a0:	2301      	movs	r3, #1
   825a2:	f10a 0801 	add.w	r8, sl, #1
   825a6:	9300      	str	r3, [sp, #0]
   825a8:	e761      	b.n	8246e <__sfvwrite_r+0x1ce>
   825aa:	f04f 30ff 	mov.w	r0, #4294967295
   825ae:	e6ac      	b.n	8230a <__sfvwrite_r+0x6a>
   825b0:	230c      	movs	r3, #12
   825b2:	f8c9 3000 	str.w	r3, [r9]
   825b6:	89a3      	ldrh	r3, [r4, #12]
   825b8:	e747      	b.n	8244a <__sfvwrite_r+0x1aa>
   825ba:	bf00      	nop
   825bc:	7ffffc00 	.word	0x7ffffc00

000825c0 <_fwalk_reent>:
   825c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   825c4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   825c8:	d01e      	beq.n	82608 <_fwalk_reent+0x48>
   825ca:	4688      	mov	r8, r1
   825cc:	4607      	mov	r7, r0
   825ce:	f04f 0900 	mov.w	r9, #0
   825d2:	6875      	ldr	r5, [r6, #4]
   825d4:	68b4      	ldr	r4, [r6, #8]
   825d6:	3d01      	subs	r5, #1
   825d8:	d410      	bmi.n	825fc <_fwalk_reent+0x3c>
   825da:	89a3      	ldrh	r3, [r4, #12]
   825dc:	3d01      	subs	r5, #1
   825de:	2b01      	cmp	r3, #1
   825e0:	d908      	bls.n	825f4 <_fwalk_reent+0x34>
   825e2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   825e6:	3301      	adds	r3, #1
   825e8:	d004      	beq.n	825f4 <_fwalk_reent+0x34>
   825ea:	4638      	mov	r0, r7
   825ec:	4621      	mov	r1, r4
   825ee:	47c0      	blx	r8
   825f0:	ea49 0900 	orr.w	r9, r9, r0
   825f4:	1c6b      	adds	r3, r5, #1
   825f6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   825fa:	d1ee      	bne.n	825da <_fwalk_reent+0x1a>
   825fc:	6836      	ldr	r6, [r6, #0]
   825fe:	2e00      	cmp	r6, #0
   82600:	d1e7      	bne.n	825d2 <_fwalk_reent+0x12>
   82602:	4648      	mov	r0, r9
   82604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82608:	46b1      	mov	r9, r6
   8260a:	4648      	mov	r0, r9
   8260c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082610 <__locale_charset>:
   82610:	4800      	ldr	r0, [pc, #0]	; (82614 <__locale_charset+0x4>)
   82612:	4770      	bx	lr
   82614:	2007055c 	.word	0x2007055c

00082618 <__locale_mb_cur_max>:
   82618:	4b01      	ldr	r3, [pc, #4]	; (82620 <__locale_mb_cur_max+0x8>)
   8261a:	6818      	ldr	r0, [r3, #0]
   8261c:	4770      	bx	lr
   8261e:	bf00      	nop
   82620:	2007057c 	.word	0x2007057c

00082624 <__smakebuf_r>:
   82624:	898b      	ldrh	r3, [r1, #12]
   82626:	b29a      	uxth	r2, r3
   82628:	f012 0f02 	tst.w	r2, #2
   8262c:	d13c      	bne.n	826a8 <__smakebuf_r+0x84>
   8262e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82630:	460c      	mov	r4, r1
   82632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82636:	b091      	sub	sp, #68	; 0x44
   82638:	2900      	cmp	r1, #0
   8263a:	4605      	mov	r5, r0
   8263c:	db19      	blt.n	82672 <__smakebuf_r+0x4e>
   8263e:	aa01      	add	r2, sp, #4
   82640:	f000 ffce 	bl	835e0 <_fstat_r>
   82644:	2800      	cmp	r0, #0
   82646:	db12      	blt.n	8266e <__smakebuf_r+0x4a>
   82648:	9b02      	ldr	r3, [sp, #8]
   8264a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8264e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   82652:	fab7 f787 	clz	r7, r7
   82656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8265a:	ea4f 1757 	mov.w	r7, r7, lsr #5
   8265e:	d02a      	beq.n	826b6 <__smakebuf_r+0x92>
   82660:	89a3      	ldrh	r3, [r4, #12]
   82662:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82666:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8266a:	81a3      	strh	r3, [r4, #12]
   8266c:	e00b      	b.n	82686 <__smakebuf_r+0x62>
   8266e:	89a3      	ldrh	r3, [r4, #12]
   82670:	b29a      	uxth	r2, r3
   82672:	f012 0f80 	tst.w	r2, #128	; 0x80
   82676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8267a:	81a3      	strh	r3, [r4, #12]
   8267c:	bf0c      	ite	eq
   8267e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82682:	2640      	movne	r6, #64	; 0x40
   82684:	2700      	movs	r7, #0
   82686:	4628      	mov	r0, r5
   82688:	4631      	mov	r1, r6
   8268a:	f000 f843 	bl	82714 <_malloc_r>
   8268e:	89a3      	ldrh	r3, [r4, #12]
   82690:	b340      	cbz	r0, 826e4 <__smakebuf_r+0xc0>
   82692:	4a1a      	ldr	r2, [pc, #104]	; (826fc <__smakebuf_r+0xd8>)
   82694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82698:	63ea      	str	r2, [r5, #60]	; 0x3c
   8269a:	81a3      	strh	r3, [r4, #12]
   8269c:	6020      	str	r0, [r4, #0]
   8269e:	6120      	str	r0, [r4, #16]
   826a0:	6166      	str	r6, [r4, #20]
   826a2:	b99f      	cbnz	r7, 826cc <__smakebuf_r+0xa8>
   826a4:	b011      	add	sp, #68	; 0x44
   826a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   826a8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   826ac:	2201      	movs	r2, #1
   826ae:	600b      	str	r3, [r1, #0]
   826b0:	610b      	str	r3, [r1, #16]
   826b2:	614a      	str	r2, [r1, #20]
   826b4:	4770      	bx	lr
   826b6:	4b12      	ldr	r3, [pc, #72]	; (82700 <__smakebuf_r+0xdc>)
   826b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   826ba:	429a      	cmp	r2, r3
   826bc:	d1d0      	bne.n	82660 <__smakebuf_r+0x3c>
   826be:	89a3      	ldrh	r3, [r4, #12]
   826c0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   826c4:	4333      	orrs	r3, r6
   826c6:	81a3      	strh	r3, [r4, #12]
   826c8:	64e6      	str	r6, [r4, #76]	; 0x4c
   826ca:	e7dc      	b.n	82686 <__smakebuf_r+0x62>
   826cc:	4628      	mov	r0, r5
   826ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   826d2:	f000 ff99 	bl	83608 <_isatty_r>
   826d6:	2800      	cmp	r0, #0
   826d8:	d0e4      	beq.n	826a4 <__smakebuf_r+0x80>
   826da:	89a3      	ldrh	r3, [r4, #12]
   826dc:	f043 0301 	orr.w	r3, r3, #1
   826e0:	81a3      	strh	r3, [r4, #12]
   826e2:	e7df      	b.n	826a4 <__smakebuf_r+0x80>
   826e4:	059a      	lsls	r2, r3, #22
   826e6:	d4dd      	bmi.n	826a4 <__smakebuf_r+0x80>
   826e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   826ec:	f043 0302 	orr.w	r3, r3, #2
   826f0:	2101      	movs	r1, #1
   826f2:	81a3      	strh	r3, [r4, #12]
   826f4:	6022      	str	r2, [r4, #0]
   826f6:	6122      	str	r2, [r4, #16]
   826f8:	6161      	str	r1, [r4, #20]
   826fa:	e7d3      	b.n	826a4 <__smakebuf_r+0x80>
   826fc:	00081e45 	.word	0x00081e45
   82700:	000832d1 	.word	0x000832d1

00082704 <malloc>:
   82704:	4b02      	ldr	r3, [pc, #8]	; (82710 <malloc+0xc>)
   82706:	4601      	mov	r1, r0
   82708:	6818      	ldr	r0, [r3, #0]
   8270a:	f000 b803 	b.w	82714 <_malloc_r>
   8270e:	bf00      	nop
   82710:	20070558 	.word	0x20070558

00082714 <_malloc_r>:
   82714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82718:	f101 050b 	add.w	r5, r1, #11
   8271c:	2d16      	cmp	r5, #22
   8271e:	b083      	sub	sp, #12
   82720:	4606      	mov	r6, r0
   82722:	d927      	bls.n	82774 <_malloc_r+0x60>
   82724:	f035 0507 	bics.w	r5, r5, #7
   82728:	f100 80b6 	bmi.w	82898 <_malloc_r+0x184>
   8272c:	42a9      	cmp	r1, r5
   8272e:	f200 80b3 	bhi.w	82898 <_malloc_r+0x184>
   82732:	f000 fb99 	bl	82e68 <__malloc_lock>
   82736:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8273a:	d222      	bcs.n	82782 <_malloc_r+0x6e>
   8273c:	4fbc      	ldr	r7, [pc, #752]	; (82a30 <_malloc_r+0x31c>)
   8273e:	08e8      	lsrs	r0, r5, #3
   82740:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82744:	68dc      	ldr	r4, [r3, #12]
   82746:	429c      	cmp	r4, r3
   82748:	f000 81bc 	beq.w	82ac4 <_malloc_r+0x3b0>
   8274c:	6863      	ldr	r3, [r4, #4]
   8274e:	68e1      	ldr	r1, [r4, #12]
   82750:	f023 0303 	bic.w	r3, r3, #3
   82754:	4423      	add	r3, r4
   82756:	685a      	ldr	r2, [r3, #4]
   82758:	68a5      	ldr	r5, [r4, #8]
   8275a:	f042 0201 	orr.w	r2, r2, #1
   8275e:	60e9      	str	r1, [r5, #12]
   82760:	4630      	mov	r0, r6
   82762:	608d      	str	r5, [r1, #8]
   82764:	605a      	str	r2, [r3, #4]
   82766:	f000 fb81 	bl	82e6c <__malloc_unlock>
   8276a:	3408      	adds	r4, #8
   8276c:	4620      	mov	r0, r4
   8276e:	b003      	add	sp, #12
   82770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82774:	2910      	cmp	r1, #16
   82776:	f200 808f 	bhi.w	82898 <_malloc_r+0x184>
   8277a:	f000 fb75 	bl	82e68 <__malloc_lock>
   8277e:	2510      	movs	r5, #16
   82780:	e7dc      	b.n	8273c <_malloc_r+0x28>
   82782:	0a68      	lsrs	r0, r5, #9
   82784:	f000 808f 	beq.w	828a6 <_malloc_r+0x192>
   82788:	2804      	cmp	r0, #4
   8278a:	f200 8147 	bhi.w	82a1c <_malloc_r+0x308>
   8278e:	09a8      	lsrs	r0, r5, #6
   82790:	3038      	adds	r0, #56	; 0x38
   82792:	0041      	lsls	r1, r0, #1
   82794:	4fa6      	ldr	r7, [pc, #664]	; (82a30 <_malloc_r+0x31c>)
   82796:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8279a:	68cc      	ldr	r4, [r1, #12]
   8279c:	42a1      	cmp	r1, r4
   8279e:	d106      	bne.n	827ae <_malloc_r+0x9a>
   827a0:	e00c      	b.n	827bc <_malloc_r+0xa8>
   827a2:	2a00      	cmp	r2, #0
   827a4:	f280 8082 	bge.w	828ac <_malloc_r+0x198>
   827a8:	68e4      	ldr	r4, [r4, #12]
   827aa:	42a1      	cmp	r1, r4
   827ac:	d006      	beq.n	827bc <_malloc_r+0xa8>
   827ae:	6863      	ldr	r3, [r4, #4]
   827b0:	f023 0303 	bic.w	r3, r3, #3
   827b4:	1b5a      	subs	r2, r3, r5
   827b6:	2a0f      	cmp	r2, #15
   827b8:	ddf3      	ble.n	827a2 <_malloc_r+0x8e>
   827ba:	3801      	subs	r0, #1
   827bc:	3001      	adds	r0, #1
   827be:	499c      	ldr	r1, [pc, #624]	; (82a30 <_malloc_r+0x31c>)
   827c0:	693c      	ldr	r4, [r7, #16]
   827c2:	f101 0e08 	add.w	lr, r1, #8
   827c6:	4574      	cmp	r4, lr
   827c8:	f000 8171 	beq.w	82aae <_malloc_r+0x39a>
   827cc:	6863      	ldr	r3, [r4, #4]
   827ce:	f023 0303 	bic.w	r3, r3, #3
   827d2:	1b5a      	subs	r2, r3, r5
   827d4:	2a0f      	cmp	r2, #15
   827d6:	f300 8157 	bgt.w	82a88 <_malloc_r+0x374>
   827da:	2a00      	cmp	r2, #0
   827dc:	f8c1 e014 	str.w	lr, [r1, #20]
   827e0:	f8c1 e010 	str.w	lr, [r1, #16]
   827e4:	da66      	bge.n	828b4 <_malloc_r+0x1a0>
   827e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   827ea:	f080 812d 	bcs.w	82a48 <_malloc_r+0x334>
   827ee:	08db      	lsrs	r3, r3, #3
   827f0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   827f4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   827f8:	684a      	ldr	r2, [r1, #4]
   827fa:	2301      	movs	r3, #1
   827fc:	fa03 f30c 	lsl.w	r3, r3, ip
   82800:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82804:	4313      	orrs	r3, r2
   82806:	f8c4 c008 	str.w	ip, [r4, #8]
   8280a:	f8c4 800c 	str.w	r8, [r4, #12]
   8280e:	604b      	str	r3, [r1, #4]
   82810:	f8c8 4008 	str.w	r4, [r8, #8]
   82814:	f8cc 400c 	str.w	r4, [ip, #12]
   82818:	1082      	asrs	r2, r0, #2
   8281a:	2401      	movs	r4, #1
   8281c:	4094      	lsls	r4, r2
   8281e:	429c      	cmp	r4, r3
   82820:	d855      	bhi.n	828ce <_malloc_r+0x1ba>
   82822:	4223      	tst	r3, r4
   82824:	d106      	bne.n	82834 <_malloc_r+0x120>
   82826:	f020 0003 	bic.w	r0, r0, #3
   8282a:	0064      	lsls	r4, r4, #1
   8282c:	4223      	tst	r3, r4
   8282e:	f100 0004 	add.w	r0, r0, #4
   82832:	d0fa      	beq.n	8282a <_malloc_r+0x116>
   82834:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   82838:	46c4      	mov	ip, r8
   8283a:	4681      	mov	r9, r0
   8283c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82840:	459c      	cmp	ip, r3
   82842:	d107      	bne.n	82854 <_malloc_r+0x140>
   82844:	e135      	b.n	82ab2 <_malloc_r+0x39e>
   82846:	2900      	cmp	r1, #0
   82848:	f280 8145 	bge.w	82ad6 <_malloc_r+0x3c2>
   8284c:	68db      	ldr	r3, [r3, #12]
   8284e:	459c      	cmp	ip, r3
   82850:	f000 812f 	beq.w	82ab2 <_malloc_r+0x39e>
   82854:	685a      	ldr	r2, [r3, #4]
   82856:	f022 0203 	bic.w	r2, r2, #3
   8285a:	1b51      	subs	r1, r2, r5
   8285c:	290f      	cmp	r1, #15
   8285e:	ddf2      	ble.n	82846 <_malloc_r+0x132>
   82860:	461c      	mov	r4, r3
   82862:	68da      	ldr	r2, [r3, #12]
   82864:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82868:	f045 0901 	orr.w	r9, r5, #1
   8286c:	f041 0801 	orr.w	r8, r1, #1
   82870:	441d      	add	r5, r3
   82872:	f8c3 9004 	str.w	r9, [r3, #4]
   82876:	4630      	mov	r0, r6
   82878:	f8cc 200c 	str.w	r2, [ip, #12]
   8287c:	f8c2 c008 	str.w	ip, [r2, #8]
   82880:	617d      	str	r5, [r7, #20]
   82882:	613d      	str	r5, [r7, #16]
   82884:	f8c5 e00c 	str.w	lr, [r5, #12]
   82888:	f8c5 e008 	str.w	lr, [r5, #8]
   8288c:	f8c5 8004 	str.w	r8, [r5, #4]
   82890:	5069      	str	r1, [r5, r1]
   82892:	f000 faeb 	bl	82e6c <__malloc_unlock>
   82896:	e769      	b.n	8276c <_malloc_r+0x58>
   82898:	2400      	movs	r4, #0
   8289a:	4620      	mov	r0, r4
   8289c:	230c      	movs	r3, #12
   8289e:	6033      	str	r3, [r6, #0]
   828a0:	b003      	add	sp, #12
   828a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828a6:	217e      	movs	r1, #126	; 0x7e
   828a8:	203f      	movs	r0, #63	; 0x3f
   828aa:	e773      	b.n	82794 <_malloc_r+0x80>
   828ac:	4423      	add	r3, r4
   828ae:	685a      	ldr	r2, [r3, #4]
   828b0:	68e1      	ldr	r1, [r4, #12]
   828b2:	e751      	b.n	82758 <_malloc_r+0x44>
   828b4:	4423      	add	r3, r4
   828b6:	685a      	ldr	r2, [r3, #4]
   828b8:	4630      	mov	r0, r6
   828ba:	f042 0201 	orr.w	r2, r2, #1
   828be:	605a      	str	r2, [r3, #4]
   828c0:	3408      	adds	r4, #8
   828c2:	f000 fad3 	bl	82e6c <__malloc_unlock>
   828c6:	4620      	mov	r0, r4
   828c8:	b003      	add	sp, #12
   828ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828ce:	68bc      	ldr	r4, [r7, #8]
   828d0:	6863      	ldr	r3, [r4, #4]
   828d2:	f023 0803 	bic.w	r8, r3, #3
   828d6:	4545      	cmp	r5, r8
   828d8:	d804      	bhi.n	828e4 <_malloc_r+0x1d0>
   828da:	ebc5 0308 	rsb	r3, r5, r8
   828de:	2b0f      	cmp	r3, #15
   828e0:	f300 808c 	bgt.w	829fc <_malloc_r+0x2e8>
   828e4:	4b53      	ldr	r3, [pc, #332]	; (82a34 <_malloc_r+0x320>)
   828e6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 82a44 <_malloc_r+0x330>
   828ea:	681a      	ldr	r2, [r3, #0]
   828ec:	f8da 3000 	ldr.w	r3, [sl]
   828f0:	442a      	add	r2, r5
   828f2:	3301      	adds	r3, #1
   828f4:	eb04 0b08 	add.w	fp, r4, r8
   828f8:	f000 8151 	beq.w	82b9e <_malloc_r+0x48a>
   828fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   82900:	320f      	adds	r2, #15
   82902:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82906:	f022 020f 	bic.w	r2, r2, #15
   8290a:	4611      	mov	r1, r2
   8290c:	4630      	mov	r0, r6
   8290e:	9201      	str	r2, [sp, #4]
   82910:	f000 fc9e 	bl	83250 <_sbrk_r>
   82914:	f1b0 3fff 	cmp.w	r0, #4294967295
   82918:	4681      	mov	r9, r0
   8291a:	9a01      	ldr	r2, [sp, #4]
   8291c:	f000 8148 	beq.w	82bb0 <_malloc_r+0x49c>
   82920:	4583      	cmp	fp, r0
   82922:	f200 80ef 	bhi.w	82b04 <_malloc_r+0x3f0>
   82926:	4b44      	ldr	r3, [pc, #272]	; (82a38 <_malloc_r+0x324>)
   82928:	45cb      	cmp	fp, r9
   8292a:	6819      	ldr	r1, [r3, #0]
   8292c:	4411      	add	r1, r2
   8292e:	6019      	str	r1, [r3, #0]
   82930:	f000 8143 	beq.w	82bba <_malloc_r+0x4a6>
   82934:	f8da 0000 	ldr.w	r0, [sl]
   82938:	f8df e108 	ldr.w	lr, [pc, #264]	; 82a44 <_malloc_r+0x330>
   8293c:	3001      	adds	r0, #1
   8293e:	bf1b      	ittet	ne
   82940:	ebcb 0b09 	rsbne	fp, fp, r9
   82944:	4459      	addne	r1, fp
   82946:	f8ce 9000 	streq.w	r9, [lr]
   8294a:	6019      	strne	r1, [r3, #0]
   8294c:	f019 0107 	ands.w	r1, r9, #7
   82950:	f000 8108 	beq.w	82b64 <_malloc_r+0x450>
   82954:	f1c1 0008 	rsb	r0, r1, #8
   82958:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8295c:	4481      	add	r9, r0
   8295e:	3108      	adds	r1, #8
   82960:	444a      	add	r2, r9
   82962:	f3c2 020b 	ubfx	r2, r2, #0, #12
   82966:	ebc2 0a01 	rsb	sl, r2, r1
   8296a:	4651      	mov	r1, sl
   8296c:	4630      	mov	r0, r6
   8296e:	9301      	str	r3, [sp, #4]
   82970:	f000 fc6e 	bl	83250 <_sbrk_r>
   82974:	1c43      	adds	r3, r0, #1
   82976:	9b01      	ldr	r3, [sp, #4]
   82978:	f000 812d 	beq.w	82bd6 <_malloc_r+0x4c2>
   8297c:	ebc9 0200 	rsb	r2, r9, r0
   82980:	4452      	add	r2, sl
   82982:	f042 0201 	orr.w	r2, r2, #1
   82986:	6819      	ldr	r1, [r3, #0]
   82988:	42bc      	cmp	r4, r7
   8298a:	4451      	add	r1, sl
   8298c:	f8c7 9008 	str.w	r9, [r7, #8]
   82990:	6019      	str	r1, [r3, #0]
   82992:	f8c9 2004 	str.w	r2, [r9, #4]
   82996:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 82a38 <_malloc_r+0x324>
   8299a:	d016      	beq.n	829ca <_malloc_r+0x2b6>
   8299c:	f1b8 0f0f 	cmp.w	r8, #15
   829a0:	f240 80ef 	bls.w	82b82 <_malloc_r+0x46e>
   829a4:	6862      	ldr	r2, [r4, #4]
   829a6:	f1a8 030c 	sub.w	r3, r8, #12
   829aa:	f023 0307 	bic.w	r3, r3, #7
   829ae:	f002 0201 	and.w	r2, r2, #1
   829b2:	18e0      	adds	r0, r4, r3
   829b4:	f04f 0e05 	mov.w	lr, #5
   829b8:	431a      	orrs	r2, r3
   829ba:	2b0f      	cmp	r3, #15
   829bc:	6062      	str	r2, [r4, #4]
   829be:	f8c0 e004 	str.w	lr, [r0, #4]
   829c2:	f8c0 e008 	str.w	lr, [r0, #8]
   829c6:	f200 810a 	bhi.w	82bde <_malloc_r+0x4ca>
   829ca:	4b1c      	ldr	r3, [pc, #112]	; (82a3c <_malloc_r+0x328>)
   829cc:	68bc      	ldr	r4, [r7, #8]
   829ce:	681a      	ldr	r2, [r3, #0]
   829d0:	4291      	cmp	r1, r2
   829d2:	bf88      	it	hi
   829d4:	6019      	strhi	r1, [r3, #0]
   829d6:	4b1a      	ldr	r3, [pc, #104]	; (82a40 <_malloc_r+0x32c>)
   829d8:	681a      	ldr	r2, [r3, #0]
   829da:	4291      	cmp	r1, r2
   829dc:	6862      	ldr	r2, [r4, #4]
   829de:	bf88      	it	hi
   829e0:	6019      	strhi	r1, [r3, #0]
   829e2:	f022 0203 	bic.w	r2, r2, #3
   829e6:	4295      	cmp	r5, r2
   829e8:	eba2 0305 	sub.w	r3, r2, r5
   829ec:	d801      	bhi.n	829f2 <_malloc_r+0x2de>
   829ee:	2b0f      	cmp	r3, #15
   829f0:	dc04      	bgt.n	829fc <_malloc_r+0x2e8>
   829f2:	4630      	mov	r0, r6
   829f4:	f000 fa3a 	bl	82e6c <__malloc_unlock>
   829f8:	2400      	movs	r4, #0
   829fa:	e6b7      	b.n	8276c <_malloc_r+0x58>
   829fc:	f045 0201 	orr.w	r2, r5, #1
   82a00:	f043 0301 	orr.w	r3, r3, #1
   82a04:	4425      	add	r5, r4
   82a06:	6062      	str	r2, [r4, #4]
   82a08:	4630      	mov	r0, r6
   82a0a:	60bd      	str	r5, [r7, #8]
   82a0c:	3408      	adds	r4, #8
   82a0e:	606b      	str	r3, [r5, #4]
   82a10:	f000 fa2c 	bl	82e6c <__malloc_unlock>
   82a14:	4620      	mov	r0, r4
   82a16:	b003      	add	sp, #12
   82a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a1c:	2814      	cmp	r0, #20
   82a1e:	d969      	bls.n	82af4 <_malloc_r+0x3e0>
   82a20:	2854      	cmp	r0, #84	; 0x54
   82a22:	f200 8098 	bhi.w	82b56 <_malloc_r+0x442>
   82a26:	0b28      	lsrs	r0, r5, #12
   82a28:	306e      	adds	r0, #110	; 0x6e
   82a2a:	0041      	lsls	r1, r0, #1
   82a2c:	e6b2      	b.n	82794 <_malloc_r+0x80>
   82a2e:	bf00      	nop
   82a30:	20070580 	.word	0x20070580
   82a34:	20070a34 	.word	0x20070a34
   82a38:	20070a38 	.word	0x20070a38
   82a3c:	20070a30 	.word	0x20070a30
   82a40:	20070a2c 	.word	0x20070a2c
   82a44:	2007098c 	.word	0x2007098c
   82a48:	0a5a      	lsrs	r2, r3, #9
   82a4a:	2a04      	cmp	r2, #4
   82a4c:	d955      	bls.n	82afa <_malloc_r+0x3e6>
   82a4e:	2a14      	cmp	r2, #20
   82a50:	f200 80a7 	bhi.w	82ba2 <_malloc_r+0x48e>
   82a54:	325b      	adds	r2, #91	; 0x5b
   82a56:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82a5a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   82a5e:	f8dc 1008 	ldr.w	r1, [ip, #8]
   82a62:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82c1c <_malloc_r+0x508>
   82a66:	4561      	cmp	r1, ip
   82a68:	d07f      	beq.n	82b6a <_malloc_r+0x456>
   82a6a:	684a      	ldr	r2, [r1, #4]
   82a6c:	f022 0203 	bic.w	r2, r2, #3
   82a70:	4293      	cmp	r3, r2
   82a72:	d202      	bcs.n	82a7a <_malloc_r+0x366>
   82a74:	6889      	ldr	r1, [r1, #8]
   82a76:	458c      	cmp	ip, r1
   82a78:	d1f7      	bne.n	82a6a <_malloc_r+0x356>
   82a7a:	68ca      	ldr	r2, [r1, #12]
   82a7c:	687b      	ldr	r3, [r7, #4]
   82a7e:	60e2      	str	r2, [r4, #12]
   82a80:	60a1      	str	r1, [r4, #8]
   82a82:	6094      	str	r4, [r2, #8]
   82a84:	60cc      	str	r4, [r1, #12]
   82a86:	e6c7      	b.n	82818 <_malloc_r+0x104>
   82a88:	f045 0701 	orr.w	r7, r5, #1
   82a8c:	f042 0301 	orr.w	r3, r2, #1
   82a90:	4425      	add	r5, r4
   82a92:	6067      	str	r7, [r4, #4]
   82a94:	4630      	mov	r0, r6
   82a96:	614d      	str	r5, [r1, #20]
   82a98:	610d      	str	r5, [r1, #16]
   82a9a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82a9e:	f8c5 e008 	str.w	lr, [r5, #8]
   82aa2:	606b      	str	r3, [r5, #4]
   82aa4:	50aa      	str	r2, [r5, r2]
   82aa6:	3408      	adds	r4, #8
   82aa8:	f000 f9e0 	bl	82e6c <__malloc_unlock>
   82aac:	e65e      	b.n	8276c <_malloc_r+0x58>
   82aae:	684b      	ldr	r3, [r1, #4]
   82ab0:	e6b2      	b.n	82818 <_malloc_r+0x104>
   82ab2:	f109 0901 	add.w	r9, r9, #1
   82ab6:	f019 0f03 	tst.w	r9, #3
   82aba:	f10c 0c08 	add.w	ip, ip, #8
   82abe:	f47f aebd 	bne.w	8283c <_malloc_r+0x128>
   82ac2:	e02c      	b.n	82b1e <_malloc_r+0x40a>
   82ac4:	f104 0308 	add.w	r3, r4, #8
   82ac8:	6964      	ldr	r4, [r4, #20]
   82aca:	42a3      	cmp	r3, r4
   82acc:	bf08      	it	eq
   82ace:	3002      	addeq	r0, #2
   82ad0:	f43f ae75 	beq.w	827be <_malloc_r+0xaa>
   82ad4:	e63a      	b.n	8274c <_malloc_r+0x38>
   82ad6:	461c      	mov	r4, r3
   82ad8:	441a      	add	r2, r3
   82ada:	6851      	ldr	r1, [r2, #4]
   82adc:	68db      	ldr	r3, [r3, #12]
   82ade:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82ae2:	f041 0101 	orr.w	r1, r1, #1
   82ae6:	6051      	str	r1, [r2, #4]
   82ae8:	4630      	mov	r0, r6
   82aea:	60eb      	str	r3, [r5, #12]
   82aec:	609d      	str	r5, [r3, #8]
   82aee:	f000 f9bd 	bl	82e6c <__malloc_unlock>
   82af2:	e63b      	b.n	8276c <_malloc_r+0x58>
   82af4:	305b      	adds	r0, #91	; 0x5b
   82af6:	0041      	lsls	r1, r0, #1
   82af8:	e64c      	b.n	82794 <_malloc_r+0x80>
   82afa:	099a      	lsrs	r2, r3, #6
   82afc:	3238      	adds	r2, #56	; 0x38
   82afe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82b02:	e7aa      	b.n	82a5a <_malloc_r+0x346>
   82b04:	42bc      	cmp	r4, r7
   82b06:	4b45      	ldr	r3, [pc, #276]	; (82c1c <_malloc_r+0x508>)
   82b08:	f43f af0d 	beq.w	82926 <_malloc_r+0x212>
   82b0c:	689c      	ldr	r4, [r3, #8]
   82b0e:	6862      	ldr	r2, [r4, #4]
   82b10:	f022 0203 	bic.w	r2, r2, #3
   82b14:	e767      	b.n	829e6 <_malloc_r+0x2d2>
   82b16:	f8d8 8000 	ldr.w	r8, [r8]
   82b1a:	4598      	cmp	r8, r3
   82b1c:	d17c      	bne.n	82c18 <_malloc_r+0x504>
   82b1e:	f010 0f03 	tst.w	r0, #3
   82b22:	f1a8 0308 	sub.w	r3, r8, #8
   82b26:	f100 30ff 	add.w	r0, r0, #4294967295
   82b2a:	d1f4      	bne.n	82b16 <_malloc_r+0x402>
   82b2c:	687b      	ldr	r3, [r7, #4]
   82b2e:	ea23 0304 	bic.w	r3, r3, r4
   82b32:	607b      	str	r3, [r7, #4]
   82b34:	0064      	lsls	r4, r4, #1
   82b36:	429c      	cmp	r4, r3
   82b38:	f63f aec9 	bhi.w	828ce <_malloc_r+0x1ba>
   82b3c:	2c00      	cmp	r4, #0
   82b3e:	f43f aec6 	beq.w	828ce <_malloc_r+0x1ba>
   82b42:	4223      	tst	r3, r4
   82b44:	4648      	mov	r0, r9
   82b46:	f47f ae75 	bne.w	82834 <_malloc_r+0x120>
   82b4a:	0064      	lsls	r4, r4, #1
   82b4c:	4223      	tst	r3, r4
   82b4e:	f100 0004 	add.w	r0, r0, #4
   82b52:	d0fa      	beq.n	82b4a <_malloc_r+0x436>
   82b54:	e66e      	b.n	82834 <_malloc_r+0x120>
   82b56:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82b5a:	d818      	bhi.n	82b8e <_malloc_r+0x47a>
   82b5c:	0be8      	lsrs	r0, r5, #15
   82b5e:	3077      	adds	r0, #119	; 0x77
   82b60:	0041      	lsls	r1, r0, #1
   82b62:	e617      	b.n	82794 <_malloc_r+0x80>
   82b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82b68:	e6fa      	b.n	82960 <_malloc_r+0x24c>
   82b6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82b6e:	1092      	asrs	r2, r2, #2
   82b70:	f04f 0c01 	mov.w	ip, #1
   82b74:	fa0c f202 	lsl.w	r2, ip, r2
   82b78:	4313      	orrs	r3, r2
   82b7a:	f8c8 3004 	str.w	r3, [r8, #4]
   82b7e:	460a      	mov	r2, r1
   82b80:	e77d      	b.n	82a7e <_malloc_r+0x36a>
   82b82:	2301      	movs	r3, #1
   82b84:	f8c9 3004 	str.w	r3, [r9, #4]
   82b88:	464c      	mov	r4, r9
   82b8a:	2200      	movs	r2, #0
   82b8c:	e72b      	b.n	829e6 <_malloc_r+0x2d2>
   82b8e:	f240 5354 	movw	r3, #1364	; 0x554
   82b92:	4298      	cmp	r0, r3
   82b94:	d81c      	bhi.n	82bd0 <_malloc_r+0x4bc>
   82b96:	0ca8      	lsrs	r0, r5, #18
   82b98:	307c      	adds	r0, #124	; 0x7c
   82b9a:	0041      	lsls	r1, r0, #1
   82b9c:	e5fa      	b.n	82794 <_malloc_r+0x80>
   82b9e:	3210      	adds	r2, #16
   82ba0:	e6b3      	b.n	8290a <_malloc_r+0x1f6>
   82ba2:	2a54      	cmp	r2, #84	; 0x54
   82ba4:	d823      	bhi.n	82bee <_malloc_r+0x4da>
   82ba6:	0b1a      	lsrs	r2, r3, #12
   82ba8:	326e      	adds	r2, #110	; 0x6e
   82baa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82bae:	e754      	b.n	82a5a <_malloc_r+0x346>
   82bb0:	68bc      	ldr	r4, [r7, #8]
   82bb2:	6862      	ldr	r2, [r4, #4]
   82bb4:	f022 0203 	bic.w	r2, r2, #3
   82bb8:	e715      	b.n	829e6 <_malloc_r+0x2d2>
   82bba:	f3cb 000b 	ubfx	r0, fp, #0, #12
   82bbe:	2800      	cmp	r0, #0
   82bc0:	f47f aeb8 	bne.w	82934 <_malloc_r+0x220>
   82bc4:	4442      	add	r2, r8
   82bc6:	68bb      	ldr	r3, [r7, #8]
   82bc8:	f042 0201 	orr.w	r2, r2, #1
   82bcc:	605a      	str	r2, [r3, #4]
   82bce:	e6fc      	b.n	829ca <_malloc_r+0x2b6>
   82bd0:	21fc      	movs	r1, #252	; 0xfc
   82bd2:	207e      	movs	r0, #126	; 0x7e
   82bd4:	e5de      	b.n	82794 <_malloc_r+0x80>
   82bd6:	2201      	movs	r2, #1
   82bd8:	f04f 0a00 	mov.w	sl, #0
   82bdc:	e6d3      	b.n	82986 <_malloc_r+0x272>
   82bde:	f104 0108 	add.w	r1, r4, #8
   82be2:	4630      	mov	r0, r6
   82be4:	f7ff fa84 	bl	820f0 <_free_r>
   82be8:	f8da 1000 	ldr.w	r1, [sl]
   82bec:	e6ed      	b.n	829ca <_malloc_r+0x2b6>
   82bee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82bf2:	d804      	bhi.n	82bfe <_malloc_r+0x4ea>
   82bf4:	0bda      	lsrs	r2, r3, #15
   82bf6:	3277      	adds	r2, #119	; 0x77
   82bf8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82bfc:	e72d      	b.n	82a5a <_malloc_r+0x346>
   82bfe:	f240 5154 	movw	r1, #1364	; 0x554
   82c02:	428a      	cmp	r2, r1
   82c04:	d804      	bhi.n	82c10 <_malloc_r+0x4fc>
   82c06:	0c9a      	lsrs	r2, r3, #18
   82c08:	327c      	adds	r2, #124	; 0x7c
   82c0a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82c0e:	e724      	b.n	82a5a <_malloc_r+0x346>
   82c10:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   82c14:	227e      	movs	r2, #126	; 0x7e
   82c16:	e720      	b.n	82a5a <_malloc_r+0x346>
   82c18:	687b      	ldr	r3, [r7, #4]
   82c1a:	e78b      	b.n	82b34 <_malloc_r+0x420>
   82c1c:	20070580 	.word	0x20070580

00082c20 <memchr>:
   82c20:	0783      	lsls	r3, r0, #30
   82c22:	b470      	push	{r4, r5, r6}
   82c24:	b2c9      	uxtb	r1, r1
   82c26:	d040      	beq.n	82caa <memchr+0x8a>
   82c28:	1e54      	subs	r4, r2, #1
   82c2a:	2a00      	cmp	r2, #0
   82c2c:	d03f      	beq.n	82cae <memchr+0x8e>
   82c2e:	7803      	ldrb	r3, [r0, #0]
   82c30:	428b      	cmp	r3, r1
   82c32:	bf18      	it	ne
   82c34:	1c43      	addne	r3, r0, #1
   82c36:	d105      	bne.n	82c44 <memchr+0x24>
   82c38:	e01c      	b.n	82c74 <memchr+0x54>
   82c3a:	b1ec      	cbz	r4, 82c78 <memchr+0x58>
   82c3c:	7802      	ldrb	r2, [r0, #0]
   82c3e:	3c01      	subs	r4, #1
   82c40:	428a      	cmp	r2, r1
   82c42:	d017      	beq.n	82c74 <memchr+0x54>
   82c44:	f013 0f03 	tst.w	r3, #3
   82c48:	4618      	mov	r0, r3
   82c4a:	f103 0301 	add.w	r3, r3, #1
   82c4e:	d1f4      	bne.n	82c3a <memchr+0x1a>
   82c50:	2c03      	cmp	r4, #3
   82c52:	d814      	bhi.n	82c7e <memchr+0x5e>
   82c54:	b184      	cbz	r4, 82c78 <memchr+0x58>
   82c56:	7803      	ldrb	r3, [r0, #0]
   82c58:	428b      	cmp	r3, r1
   82c5a:	d00b      	beq.n	82c74 <memchr+0x54>
   82c5c:	1905      	adds	r5, r0, r4
   82c5e:	1c43      	adds	r3, r0, #1
   82c60:	e002      	b.n	82c68 <memchr+0x48>
   82c62:	7802      	ldrb	r2, [r0, #0]
   82c64:	428a      	cmp	r2, r1
   82c66:	d005      	beq.n	82c74 <memchr+0x54>
   82c68:	42ab      	cmp	r3, r5
   82c6a:	4618      	mov	r0, r3
   82c6c:	f103 0301 	add.w	r3, r3, #1
   82c70:	d1f7      	bne.n	82c62 <memchr+0x42>
   82c72:	2000      	movs	r0, #0
   82c74:	bc70      	pop	{r4, r5, r6}
   82c76:	4770      	bx	lr
   82c78:	4620      	mov	r0, r4
   82c7a:	bc70      	pop	{r4, r5, r6}
   82c7c:	4770      	bx	lr
   82c7e:	4602      	mov	r2, r0
   82c80:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82c84:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82c88:	6813      	ldr	r3, [r2, #0]
   82c8a:	4610      	mov	r0, r2
   82c8c:	4073      	eors	r3, r6
   82c8e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   82c92:	ea25 0303 	bic.w	r3, r5, r3
   82c96:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   82c9a:	f102 0204 	add.w	r2, r2, #4
   82c9e:	d1d9      	bne.n	82c54 <memchr+0x34>
   82ca0:	3c04      	subs	r4, #4
   82ca2:	2c03      	cmp	r4, #3
   82ca4:	4610      	mov	r0, r2
   82ca6:	d8ef      	bhi.n	82c88 <memchr+0x68>
   82ca8:	e7d4      	b.n	82c54 <memchr+0x34>
   82caa:	4614      	mov	r4, r2
   82cac:	e7d0      	b.n	82c50 <memchr+0x30>
   82cae:	4610      	mov	r0, r2
   82cb0:	e7e0      	b.n	82c74 <memchr+0x54>
   82cb2:	bf00      	nop

00082cb4 <memcpy>:
   82cb4:	4684      	mov	ip, r0
   82cb6:	ea41 0300 	orr.w	r3, r1, r0
   82cba:	f013 0303 	ands.w	r3, r3, #3
   82cbe:	d149      	bne.n	82d54 <memcpy+0xa0>
   82cc0:	3a40      	subs	r2, #64	; 0x40
   82cc2:	d323      	bcc.n	82d0c <memcpy+0x58>
   82cc4:	680b      	ldr	r3, [r1, #0]
   82cc6:	6003      	str	r3, [r0, #0]
   82cc8:	684b      	ldr	r3, [r1, #4]
   82cca:	6043      	str	r3, [r0, #4]
   82ccc:	688b      	ldr	r3, [r1, #8]
   82cce:	6083      	str	r3, [r0, #8]
   82cd0:	68cb      	ldr	r3, [r1, #12]
   82cd2:	60c3      	str	r3, [r0, #12]
   82cd4:	690b      	ldr	r3, [r1, #16]
   82cd6:	6103      	str	r3, [r0, #16]
   82cd8:	694b      	ldr	r3, [r1, #20]
   82cda:	6143      	str	r3, [r0, #20]
   82cdc:	698b      	ldr	r3, [r1, #24]
   82cde:	6183      	str	r3, [r0, #24]
   82ce0:	69cb      	ldr	r3, [r1, #28]
   82ce2:	61c3      	str	r3, [r0, #28]
   82ce4:	6a0b      	ldr	r3, [r1, #32]
   82ce6:	6203      	str	r3, [r0, #32]
   82ce8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82cea:	6243      	str	r3, [r0, #36]	; 0x24
   82cec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82cee:	6283      	str	r3, [r0, #40]	; 0x28
   82cf0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82cf2:	62c3      	str	r3, [r0, #44]	; 0x2c
   82cf4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82cf6:	6303      	str	r3, [r0, #48]	; 0x30
   82cf8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82cfa:	6343      	str	r3, [r0, #52]	; 0x34
   82cfc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82cfe:	6383      	str	r3, [r0, #56]	; 0x38
   82d00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82d02:	63c3      	str	r3, [r0, #60]	; 0x3c
   82d04:	3040      	adds	r0, #64	; 0x40
   82d06:	3140      	adds	r1, #64	; 0x40
   82d08:	3a40      	subs	r2, #64	; 0x40
   82d0a:	d2db      	bcs.n	82cc4 <memcpy+0x10>
   82d0c:	3230      	adds	r2, #48	; 0x30
   82d0e:	d30b      	bcc.n	82d28 <memcpy+0x74>
   82d10:	680b      	ldr	r3, [r1, #0]
   82d12:	6003      	str	r3, [r0, #0]
   82d14:	684b      	ldr	r3, [r1, #4]
   82d16:	6043      	str	r3, [r0, #4]
   82d18:	688b      	ldr	r3, [r1, #8]
   82d1a:	6083      	str	r3, [r0, #8]
   82d1c:	68cb      	ldr	r3, [r1, #12]
   82d1e:	60c3      	str	r3, [r0, #12]
   82d20:	3010      	adds	r0, #16
   82d22:	3110      	adds	r1, #16
   82d24:	3a10      	subs	r2, #16
   82d26:	d2f3      	bcs.n	82d10 <memcpy+0x5c>
   82d28:	320c      	adds	r2, #12
   82d2a:	d305      	bcc.n	82d38 <memcpy+0x84>
   82d2c:	f851 3b04 	ldr.w	r3, [r1], #4
   82d30:	f840 3b04 	str.w	r3, [r0], #4
   82d34:	3a04      	subs	r2, #4
   82d36:	d2f9      	bcs.n	82d2c <memcpy+0x78>
   82d38:	3204      	adds	r2, #4
   82d3a:	d008      	beq.n	82d4e <memcpy+0x9a>
   82d3c:	07d2      	lsls	r2, r2, #31
   82d3e:	bf1c      	itt	ne
   82d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82d44:	f800 3b01 	strbne.w	r3, [r0], #1
   82d48:	d301      	bcc.n	82d4e <memcpy+0x9a>
   82d4a:	880b      	ldrh	r3, [r1, #0]
   82d4c:	8003      	strh	r3, [r0, #0]
   82d4e:	4660      	mov	r0, ip
   82d50:	4770      	bx	lr
   82d52:	bf00      	nop
   82d54:	2a08      	cmp	r2, #8
   82d56:	d313      	bcc.n	82d80 <memcpy+0xcc>
   82d58:	078b      	lsls	r3, r1, #30
   82d5a:	d0b1      	beq.n	82cc0 <memcpy+0xc>
   82d5c:	f010 0303 	ands.w	r3, r0, #3
   82d60:	d0ae      	beq.n	82cc0 <memcpy+0xc>
   82d62:	f1c3 0304 	rsb	r3, r3, #4
   82d66:	1ad2      	subs	r2, r2, r3
   82d68:	07db      	lsls	r3, r3, #31
   82d6a:	bf1c      	itt	ne
   82d6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82d70:	f800 3b01 	strbne.w	r3, [r0], #1
   82d74:	d3a4      	bcc.n	82cc0 <memcpy+0xc>
   82d76:	f831 3b02 	ldrh.w	r3, [r1], #2
   82d7a:	f820 3b02 	strh.w	r3, [r0], #2
   82d7e:	e79f      	b.n	82cc0 <memcpy+0xc>
   82d80:	3a04      	subs	r2, #4
   82d82:	d3d9      	bcc.n	82d38 <memcpy+0x84>
   82d84:	3a01      	subs	r2, #1
   82d86:	f811 3b01 	ldrb.w	r3, [r1], #1
   82d8a:	f800 3b01 	strb.w	r3, [r0], #1
   82d8e:	d2f9      	bcs.n	82d84 <memcpy+0xd0>
   82d90:	780b      	ldrb	r3, [r1, #0]
   82d92:	7003      	strb	r3, [r0, #0]
   82d94:	784b      	ldrb	r3, [r1, #1]
   82d96:	7043      	strb	r3, [r0, #1]
   82d98:	788b      	ldrb	r3, [r1, #2]
   82d9a:	7083      	strb	r3, [r0, #2]
   82d9c:	4660      	mov	r0, ip
   82d9e:	4770      	bx	lr

00082da0 <memmove>:
   82da0:	4288      	cmp	r0, r1
   82da2:	b5f0      	push	{r4, r5, r6, r7, lr}
   82da4:	d90d      	bls.n	82dc2 <memmove+0x22>
   82da6:	188b      	adds	r3, r1, r2
   82da8:	4298      	cmp	r0, r3
   82daa:	d20a      	bcs.n	82dc2 <memmove+0x22>
   82dac:	1881      	adds	r1, r0, r2
   82dae:	2a00      	cmp	r2, #0
   82db0:	d054      	beq.n	82e5c <memmove+0xbc>
   82db2:	1a9a      	subs	r2, r3, r2
   82db4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82db8:	4293      	cmp	r3, r2
   82dba:	f801 4d01 	strb.w	r4, [r1, #-1]!
   82dbe:	d1f9      	bne.n	82db4 <memmove+0x14>
   82dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82dc2:	2a0f      	cmp	r2, #15
   82dc4:	d948      	bls.n	82e58 <memmove+0xb8>
   82dc6:	ea40 0301 	orr.w	r3, r0, r1
   82dca:	079b      	lsls	r3, r3, #30
   82dcc:	d147      	bne.n	82e5e <memmove+0xbe>
   82dce:	4615      	mov	r5, r2
   82dd0:	f100 0410 	add.w	r4, r0, #16
   82dd4:	f101 0310 	add.w	r3, r1, #16
   82dd8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   82ddc:	3d10      	subs	r5, #16
   82dde:	f844 6c10 	str.w	r6, [r4, #-16]
   82de2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   82de6:	2d0f      	cmp	r5, #15
   82de8:	f844 6c0c 	str.w	r6, [r4, #-12]
   82dec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82df0:	f104 0410 	add.w	r4, r4, #16
   82df4:	f844 6c18 	str.w	r6, [r4, #-24]
   82df8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82dfc:	f103 0310 	add.w	r3, r3, #16
   82e00:	f844 6c14 	str.w	r6, [r4, #-20]
   82e04:	d8e8      	bhi.n	82dd8 <memmove+0x38>
   82e06:	f1a2 0310 	sub.w	r3, r2, #16
   82e0a:	f023 030f 	bic.w	r3, r3, #15
   82e0e:	f002 0e0f 	and.w	lr, r2, #15
   82e12:	3310      	adds	r3, #16
   82e14:	f1be 0f03 	cmp.w	lr, #3
   82e18:	4419      	add	r1, r3
   82e1a:	4403      	add	r3, r0
   82e1c:	d921      	bls.n	82e62 <memmove+0xc2>
   82e1e:	460e      	mov	r6, r1
   82e20:	4674      	mov	r4, lr
   82e22:	1f1d      	subs	r5, r3, #4
   82e24:	f856 7b04 	ldr.w	r7, [r6], #4
   82e28:	3c04      	subs	r4, #4
   82e2a:	2c03      	cmp	r4, #3
   82e2c:	f845 7f04 	str.w	r7, [r5, #4]!
   82e30:	d8f8      	bhi.n	82e24 <memmove+0x84>
   82e32:	f1ae 0404 	sub.w	r4, lr, #4
   82e36:	f024 0403 	bic.w	r4, r4, #3
   82e3a:	3404      	adds	r4, #4
   82e3c:	4423      	add	r3, r4
   82e3e:	4421      	add	r1, r4
   82e40:	f002 0203 	and.w	r2, r2, #3
   82e44:	b152      	cbz	r2, 82e5c <memmove+0xbc>
   82e46:	3b01      	subs	r3, #1
   82e48:	440a      	add	r2, r1
   82e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   82e4e:	4291      	cmp	r1, r2
   82e50:	f803 4f01 	strb.w	r4, [r3, #1]!
   82e54:	d1f9      	bne.n	82e4a <memmove+0xaa>
   82e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e58:	4603      	mov	r3, r0
   82e5a:	e7f3      	b.n	82e44 <memmove+0xa4>
   82e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e5e:	4603      	mov	r3, r0
   82e60:	e7f1      	b.n	82e46 <memmove+0xa6>
   82e62:	4672      	mov	r2, lr
   82e64:	e7ee      	b.n	82e44 <memmove+0xa4>
   82e66:	bf00      	nop

00082e68 <__malloc_lock>:
   82e68:	4770      	bx	lr
   82e6a:	bf00      	nop

00082e6c <__malloc_unlock>:
   82e6c:	4770      	bx	lr
   82e6e:	bf00      	nop

00082e70 <_realloc_r>:
   82e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e74:	4617      	mov	r7, r2
   82e76:	b083      	sub	sp, #12
   82e78:	460d      	mov	r5, r1
   82e7a:	2900      	cmp	r1, #0
   82e7c:	f000 80e2 	beq.w	83044 <_realloc_r+0x1d4>
   82e80:	4681      	mov	r9, r0
   82e82:	f107 040b 	add.w	r4, r7, #11
   82e86:	f7ff ffef 	bl	82e68 <__malloc_lock>
   82e8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82e8e:	2c16      	cmp	r4, #22
   82e90:	f023 0603 	bic.w	r6, r3, #3
   82e94:	f1a5 0808 	sub.w	r8, r5, #8
   82e98:	d84b      	bhi.n	82f32 <_realloc_r+0xc2>
   82e9a:	2210      	movs	r2, #16
   82e9c:	4614      	mov	r4, r2
   82e9e:	42a7      	cmp	r7, r4
   82ea0:	d84c      	bhi.n	82f3c <_realloc_r+0xcc>
   82ea2:	4296      	cmp	r6, r2
   82ea4:	da51      	bge.n	82f4a <_realloc_r+0xda>
   82ea6:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8324c <_realloc_r+0x3dc>
   82eaa:	eb08 0106 	add.w	r1, r8, r6
   82eae:	f8db 0008 	ldr.w	r0, [fp, #8]
   82eb2:	4288      	cmp	r0, r1
   82eb4:	f000 80d3 	beq.w	8305e <_realloc_r+0x1ee>
   82eb8:	6848      	ldr	r0, [r1, #4]
   82eba:	f020 0e01 	bic.w	lr, r0, #1
   82ebe:	448e      	add	lr, r1
   82ec0:	f8de e004 	ldr.w	lr, [lr, #4]
   82ec4:	f01e 0f01 	tst.w	lr, #1
   82ec8:	d154      	bne.n	82f74 <_realloc_r+0x104>
   82eca:	f020 0003 	bic.w	r0, r0, #3
   82ece:	4430      	add	r0, r6
   82ed0:	4290      	cmp	r0, r2
   82ed2:	f280 80bd 	bge.w	83050 <_realloc_r+0x1e0>
   82ed6:	07db      	lsls	r3, r3, #31
   82ed8:	f100 8090 	bmi.w	82ffc <_realloc_r+0x18c>
   82edc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82ee0:	ebc3 0a08 	rsb	sl, r3, r8
   82ee4:	f8da 3004 	ldr.w	r3, [sl, #4]
   82ee8:	f023 0303 	bic.w	r3, r3, #3
   82eec:	eb00 0e03 	add.w	lr, r0, r3
   82ef0:	4596      	cmp	lr, r2
   82ef2:	db49      	blt.n	82f88 <_realloc_r+0x118>
   82ef4:	4657      	mov	r7, sl
   82ef6:	68cb      	ldr	r3, [r1, #12]
   82ef8:	6889      	ldr	r1, [r1, #8]
   82efa:	1f32      	subs	r2, r6, #4
   82efc:	60cb      	str	r3, [r1, #12]
   82efe:	6099      	str	r1, [r3, #8]
   82f00:	f857 1f08 	ldr.w	r1, [r7, #8]!
   82f04:	f8da 300c 	ldr.w	r3, [sl, #12]
   82f08:	2a24      	cmp	r2, #36	; 0x24
   82f0a:	60cb      	str	r3, [r1, #12]
   82f0c:	6099      	str	r1, [r3, #8]
   82f0e:	f200 8133 	bhi.w	83178 <_realloc_r+0x308>
   82f12:	2a13      	cmp	r2, #19
   82f14:	f240 80fa 	bls.w	8310c <_realloc_r+0x29c>
   82f18:	682b      	ldr	r3, [r5, #0]
   82f1a:	2a1b      	cmp	r2, #27
   82f1c:	f8ca 3008 	str.w	r3, [sl, #8]
   82f20:	686b      	ldr	r3, [r5, #4]
   82f22:	f8ca 300c 	str.w	r3, [sl, #12]
   82f26:	f200 813b 	bhi.w	831a0 <_realloc_r+0x330>
   82f2a:	3508      	adds	r5, #8
   82f2c:	f10a 0310 	add.w	r3, sl, #16
   82f30:	e0ed      	b.n	8310e <_realloc_r+0x29e>
   82f32:	f024 0407 	bic.w	r4, r4, #7
   82f36:	2c00      	cmp	r4, #0
   82f38:	4622      	mov	r2, r4
   82f3a:	dab0      	bge.n	82e9e <_realloc_r+0x2e>
   82f3c:	230c      	movs	r3, #12
   82f3e:	2000      	movs	r0, #0
   82f40:	f8c9 3000 	str.w	r3, [r9]
   82f44:	b003      	add	sp, #12
   82f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f4a:	462f      	mov	r7, r5
   82f4c:	1b32      	subs	r2, r6, r4
   82f4e:	2a0f      	cmp	r2, #15
   82f50:	f003 0301 	and.w	r3, r3, #1
   82f54:	d840      	bhi.n	82fd8 <_realloc_r+0x168>
   82f56:	4333      	orrs	r3, r6
   82f58:	f8c8 3004 	str.w	r3, [r8, #4]
   82f5c:	4446      	add	r6, r8
   82f5e:	6873      	ldr	r3, [r6, #4]
   82f60:	f043 0301 	orr.w	r3, r3, #1
   82f64:	6073      	str	r3, [r6, #4]
   82f66:	4648      	mov	r0, r9
   82f68:	f7ff ff80 	bl	82e6c <__malloc_unlock>
   82f6c:	4638      	mov	r0, r7
   82f6e:	b003      	add	sp, #12
   82f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f74:	07d9      	lsls	r1, r3, #31
   82f76:	d441      	bmi.n	82ffc <_realloc_r+0x18c>
   82f78:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82f7c:	ebc3 0a08 	rsb	sl, r3, r8
   82f80:	f8da 3004 	ldr.w	r3, [sl, #4]
   82f84:	f023 0303 	bic.w	r3, r3, #3
   82f88:	4433      	add	r3, r6
   82f8a:	4293      	cmp	r3, r2
   82f8c:	db36      	blt.n	82ffc <_realloc_r+0x18c>
   82f8e:	4657      	mov	r7, sl
   82f90:	f8da 100c 	ldr.w	r1, [sl, #12]
   82f94:	f857 0f08 	ldr.w	r0, [r7, #8]!
   82f98:	1f32      	subs	r2, r6, #4
   82f9a:	2a24      	cmp	r2, #36	; 0x24
   82f9c:	60c1      	str	r1, [r0, #12]
   82f9e:	6088      	str	r0, [r1, #8]
   82fa0:	f200 80f5 	bhi.w	8318e <_realloc_r+0x31e>
   82fa4:	2a13      	cmp	r2, #19
   82fa6:	f240 80f0 	bls.w	8318a <_realloc_r+0x31a>
   82faa:	6829      	ldr	r1, [r5, #0]
   82fac:	2a1b      	cmp	r2, #27
   82fae:	f8ca 1008 	str.w	r1, [sl, #8]
   82fb2:	6869      	ldr	r1, [r5, #4]
   82fb4:	f8ca 100c 	str.w	r1, [sl, #12]
   82fb8:	f200 8107 	bhi.w	831ca <_realloc_r+0x35a>
   82fbc:	3508      	adds	r5, #8
   82fbe:	f10a 0210 	add.w	r2, sl, #16
   82fc2:	6829      	ldr	r1, [r5, #0]
   82fc4:	461e      	mov	r6, r3
   82fc6:	6011      	str	r1, [r2, #0]
   82fc8:	6869      	ldr	r1, [r5, #4]
   82fca:	46d0      	mov	r8, sl
   82fcc:	6051      	str	r1, [r2, #4]
   82fce:	68ab      	ldr	r3, [r5, #8]
   82fd0:	6093      	str	r3, [r2, #8]
   82fd2:	f8da 3004 	ldr.w	r3, [sl, #4]
   82fd6:	e7b9      	b.n	82f4c <_realloc_r+0xdc>
   82fd8:	eb08 0104 	add.w	r1, r8, r4
   82fdc:	4323      	orrs	r3, r4
   82fde:	f042 0001 	orr.w	r0, r2, #1
   82fe2:	f8c8 3004 	str.w	r3, [r8, #4]
   82fe6:	440a      	add	r2, r1
   82fe8:	6048      	str	r0, [r1, #4]
   82fea:	6853      	ldr	r3, [r2, #4]
   82fec:	3108      	adds	r1, #8
   82fee:	f043 0301 	orr.w	r3, r3, #1
   82ff2:	6053      	str	r3, [r2, #4]
   82ff4:	4648      	mov	r0, r9
   82ff6:	f7ff f87b 	bl	820f0 <_free_r>
   82ffa:	e7b4      	b.n	82f66 <_realloc_r+0xf6>
   82ffc:	4639      	mov	r1, r7
   82ffe:	4648      	mov	r0, r9
   83000:	f7ff fb88 	bl	82714 <_malloc_r>
   83004:	4607      	mov	r7, r0
   83006:	2800      	cmp	r0, #0
   83008:	d0ad      	beq.n	82f66 <_realloc_r+0xf6>
   8300a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8300e:	f1a0 0108 	sub.w	r1, r0, #8
   83012:	f023 0201 	bic.w	r2, r3, #1
   83016:	4442      	add	r2, r8
   83018:	4291      	cmp	r1, r2
   8301a:	f000 80a6 	beq.w	8316a <_realloc_r+0x2fa>
   8301e:	1f32      	subs	r2, r6, #4
   83020:	2a24      	cmp	r2, #36	; 0x24
   83022:	f200 8093 	bhi.w	8314c <_realloc_r+0x2dc>
   83026:	2a13      	cmp	r2, #19
   83028:	d865      	bhi.n	830f6 <_realloc_r+0x286>
   8302a:	4603      	mov	r3, r0
   8302c:	462a      	mov	r2, r5
   8302e:	6811      	ldr	r1, [r2, #0]
   83030:	6019      	str	r1, [r3, #0]
   83032:	6851      	ldr	r1, [r2, #4]
   83034:	6059      	str	r1, [r3, #4]
   83036:	6892      	ldr	r2, [r2, #8]
   83038:	609a      	str	r2, [r3, #8]
   8303a:	4629      	mov	r1, r5
   8303c:	4648      	mov	r0, r9
   8303e:	f7ff f857 	bl	820f0 <_free_r>
   83042:	e790      	b.n	82f66 <_realloc_r+0xf6>
   83044:	4611      	mov	r1, r2
   83046:	b003      	add	sp, #12
   83048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8304c:	f7ff bb62 	b.w	82714 <_malloc_r>
   83050:	68ca      	ldr	r2, [r1, #12]
   83052:	6889      	ldr	r1, [r1, #8]
   83054:	462f      	mov	r7, r5
   83056:	60ca      	str	r2, [r1, #12]
   83058:	4606      	mov	r6, r0
   8305a:	6091      	str	r1, [r2, #8]
   8305c:	e776      	b.n	82f4c <_realloc_r+0xdc>
   8305e:	6841      	ldr	r1, [r0, #4]
   83060:	f104 0010 	add.w	r0, r4, #16
   83064:	f021 0103 	bic.w	r1, r1, #3
   83068:	4431      	add	r1, r6
   8306a:	4281      	cmp	r1, r0
   8306c:	da5a      	bge.n	83124 <_realloc_r+0x2b4>
   8306e:	07db      	lsls	r3, r3, #31
   83070:	d4c4      	bmi.n	82ffc <_realloc_r+0x18c>
   83072:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83076:	ebc3 0a08 	rsb	sl, r3, r8
   8307a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8307e:	f023 0303 	bic.w	r3, r3, #3
   83082:	eb01 0c03 	add.w	ip, r1, r3
   83086:	4560      	cmp	r0, ip
   83088:	f73f af7e 	bgt.w	82f88 <_realloc_r+0x118>
   8308c:	4657      	mov	r7, sl
   8308e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83092:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83096:	1f32      	subs	r2, r6, #4
   83098:	2a24      	cmp	r2, #36	; 0x24
   8309a:	60cb      	str	r3, [r1, #12]
   8309c:	6099      	str	r1, [r3, #8]
   8309e:	f200 80b6 	bhi.w	8320e <_realloc_r+0x39e>
   830a2:	2a13      	cmp	r2, #19
   830a4:	f240 80a7 	bls.w	831f6 <_realloc_r+0x386>
   830a8:	682b      	ldr	r3, [r5, #0]
   830aa:	2a1b      	cmp	r2, #27
   830ac:	f8ca 3008 	str.w	r3, [sl, #8]
   830b0:	686b      	ldr	r3, [r5, #4]
   830b2:	f8ca 300c 	str.w	r3, [sl, #12]
   830b6:	f200 80b3 	bhi.w	83220 <_realloc_r+0x3b0>
   830ba:	3508      	adds	r5, #8
   830bc:	f10a 0310 	add.w	r3, sl, #16
   830c0:	682a      	ldr	r2, [r5, #0]
   830c2:	601a      	str	r2, [r3, #0]
   830c4:	686a      	ldr	r2, [r5, #4]
   830c6:	605a      	str	r2, [r3, #4]
   830c8:	68aa      	ldr	r2, [r5, #8]
   830ca:	609a      	str	r2, [r3, #8]
   830cc:	ebc4 030c 	rsb	r3, r4, ip
   830d0:	eb0a 0204 	add.w	r2, sl, r4
   830d4:	f043 0301 	orr.w	r3, r3, #1
   830d8:	f8cb 2008 	str.w	r2, [fp, #8]
   830dc:	6053      	str	r3, [r2, #4]
   830de:	f8da 3004 	ldr.w	r3, [sl, #4]
   830e2:	4648      	mov	r0, r9
   830e4:	f003 0301 	and.w	r3, r3, #1
   830e8:	431c      	orrs	r4, r3
   830ea:	f8ca 4004 	str.w	r4, [sl, #4]
   830ee:	f7ff febd 	bl	82e6c <__malloc_unlock>
   830f2:	4638      	mov	r0, r7
   830f4:	e73b      	b.n	82f6e <_realloc_r+0xfe>
   830f6:	682b      	ldr	r3, [r5, #0]
   830f8:	2a1b      	cmp	r2, #27
   830fa:	6003      	str	r3, [r0, #0]
   830fc:	686b      	ldr	r3, [r5, #4]
   830fe:	6043      	str	r3, [r0, #4]
   83100:	d828      	bhi.n	83154 <_realloc_r+0x2e4>
   83102:	f100 0308 	add.w	r3, r0, #8
   83106:	f105 0208 	add.w	r2, r5, #8
   8310a:	e790      	b.n	8302e <_realloc_r+0x1be>
   8310c:	463b      	mov	r3, r7
   8310e:	682a      	ldr	r2, [r5, #0]
   83110:	4676      	mov	r6, lr
   83112:	601a      	str	r2, [r3, #0]
   83114:	686a      	ldr	r2, [r5, #4]
   83116:	46d0      	mov	r8, sl
   83118:	605a      	str	r2, [r3, #4]
   8311a:	68aa      	ldr	r2, [r5, #8]
   8311c:	609a      	str	r2, [r3, #8]
   8311e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83122:	e713      	b.n	82f4c <_realloc_r+0xdc>
   83124:	1b0b      	subs	r3, r1, r4
   83126:	eb08 0204 	add.w	r2, r8, r4
   8312a:	f043 0301 	orr.w	r3, r3, #1
   8312e:	f8cb 2008 	str.w	r2, [fp, #8]
   83132:	6053      	str	r3, [r2, #4]
   83134:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83138:	4648      	mov	r0, r9
   8313a:	f003 0301 	and.w	r3, r3, #1
   8313e:	431c      	orrs	r4, r3
   83140:	f845 4c04 	str.w	r4, [r5, #-4]
   83144:	f7ff fe92 	bl	82e6c <__malloc_unlock>
   83148:	4628      	mov	r0, r5
   8314a:	e710      	b.n	82f6e <_realloc_r+0xfe>
   8314c:	4629      	mov	r1, r5
   8314e:	f7ff fe27 	bl	82da0 <memmove>
   83152:	e772      	b.n	8303a <_realloc_r+0x1ca>
   83154:	68ab      	ldr	r3, [r5, #8]
   83156:	2a24      	cmp	r2, #36	; 0x24
   83158:	6083      	str	r3, [r0, #8]
   8315a:	68eb      	ldr	r3, [r5, #12]
   8315c:	60c3      	str	r3, [r0, #12]
   8315e:	d02b      	beq.n	831b8 <_realloc_r+0x348>
   83160:	f100 0310 	add.w	r3, r0, #16
   83164:	f105 0210 	add.w	r2, r5, #16
   83168:	e761      	b.n	8302e <_realloc_r+0x1be>
   8316a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8316e:	462f      	mov	r7, r5
   83170:	f022 0203 	bic.w	r2, r2, #3
   83174:	4416      	add	r6, r2
   83176:	e6e9      	b.n	82f4c <_realloc_r+0xdc>
   83178:	4629      	mov	r1, r5
   8317a:	4638      	mov	r0, r7
   8317c:	4676      	mov	r6, lr
   8317e:	46d0      	mov	r8, sl
   83180:	f7ff fe0e 	bl	82da0 <memmove>
   83184:	f8da 3004 	ldr.w	r3, [sl, #4]
   83188:	e6e0      	b.n	82f4c <_realloc_r+0xdc>
   8318a:	463a      	mov	r2, r7
   8318c:	e719      	b.n	82fc2 <_realloc_r+0x152>
   8318e:	4629      	mov	r1, r5
   83190:	4638      	mov	r0, r7
   83192:	461e      	mov	r6, r3
   83194:	46d0      	mov	r8, sl
   83196:	f7ff fe03 	bl	82da0 <memmove>
   8319a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8319e:	e6d5      	b.n	82f4c <_realloc_r+0xdc>
   831a0:	68ab      	ldr	r3, [r5, #8]
   831a2:	2a24      	cmp	r2, #36	; 0x24
   831a4:	f8ca 3010 	str.w	r3, [sl, #16]
   831a8:	68eb      	ldr	r3, [r5, #12]
   831aa:	f8ca 3014 	str.w	r3, [sl, #20]
   831ae:	d018      	beq.n	831e2 <_realloc_r+0x372>
   831b0:	3510      	adds	r5, #16
   831b2:	f10a 0318 	add.w	r3, sl, #24
   831b6:	e7aa      	b.n	8310e <_realloc_r+0x29e>
   831b8:	692a      	ldr	r2, [r5, #16]
   831ba:	f100 0318 	add.w	r3, r0, #24
   831be:	6102      	str	r2, [r0, #16]
   831c0:	6969      	ldr	r1, [r5, #20]
   831c2:	f105 0218 	add.w	r2, r5, #24
   831c6:	6141      	str	r1, [r0, #20]
   831c8:	e731      	b.n	8302e <_realloc_r+0x1be>
   831ca:	68a9      	ldr	r1, [r5, #8]
   831cc:	2a24      	cmp	r2, #36	; 0x24
   831ce:	f8ca 1010 	str.w	r1, [sl, #16]
   831d2:	68e9      	ldr	r1, [r5, #12]
   831d4:	f8ca 1014 	str.w	r1, [sl, #20]
   831d8:	d00f      	beq.n	831fa <_realloc_r+0x38a>
   831da:	3510      	adds	r5, #16
   831dc:	f10a 0218 	add.w	r2, sl, #24
   831e0:	e6ef      	b.n	82fc2 <_realloc_r+0x152>
   831e2:	692a      	ldr	r2, [r5, #16]
   831e4:	f10a 0320 	add.w	r3, sl, #32
   831e8:	f8ca 2018 	str.w	r2, [sl, #24]
   831ec:	696a      	ldr	r2, [r5, #20]
   831ee:	3518      	adds	r5, #24
   831f0:	f8ca 201c 	str.w	r2, [sl, #28]
   831f4:	e78b      	b.n	8310e <_realloc_r+0x29e>
   831f6:	463b      	mov	r3, r7
   831f8:	e762      	b.n	830c0 <_realloc_r+0x250>
   831fa:	6929      	ldr	r1, [r5, #16]
   831fc:	f10a 0220 	add.w	r2, sl, #32
   83200:	f8ca 1018 	str.w	r1, [sl, #24]
   83204:	6969      	ldr	r1, [r5, #20]
   83206:	3518      	adds	r5, #24
   83208:	f8ca 101c 	str.w	r1, [sl, #28]
   8320c:	e6d9      	b.n	82fc2 <_realloc_r+0x152>
   8320e:	4629      	mov	r1, r5
   83210:	4638      	mov	r0, r7
   83212:	f8cd c004 	str.w	ip, [sp, #4]
   83216:	f7ff fdc3 	bl	82da0 <memmove>
   8321a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8321e:	e755      	b.n	830cc <_realloc_r+0x25c>
   83220:	68ab      	ldr	r3, [r5, #8]
   83222:	2a24      	cmp	r2, #36	; 0x24
   83224:	f8ca 3010 	str.w	r3, [sl, #16]
   83228:	68eb      	ldr	r3, [r5, #12]
   8322a:	f8ca 3014 	str.w	r3, [sl, #20]
   8322e:	d003      	beq.n	83238 <_realloc_r+0x3c8>
   83230:	3510      	adds	r5, #16
   83232:	f10a 0318 	add.w	r3, sl, #24
   83236:	e743      	b.n	830c0 <_realloc_r+0x250>
   83238:	692a      	ldr	r2, [r5, #16]
   8323a:	f10a 0320 	add.w	r3, sl, #32
   8323e:	f8ca 2018 	str.w	r2, [sl, #24]
   83242:	696a      	ldr	r2, [r5, #20]
   83244:	3518      	adds	r5, #24
   83246:	f8ca 201c 	str.w	r2, [sl, #28]
   8324a:	e739      	b.n	830c0 <_realloc_r+0x250>
   8324c:	20070580 	.word	0x20070580

00083250 <_sbrk_r>:
   83250:	b538      	push	{r3, r4, r5, lr}
   83252:	4c07      	ldr	r4, [pc, #28]	; (83270 <_sbrk_r+0x20>)
   83254:	2300      	movs	r3, #0
   83256:	4605      	mov	r5, r0
   83258:	4608      	mov	r0, r1
   8325a:	6023      	str	r3, [r4, #0]
   8325c:	f7fd fbe4 	bl	80a28 <_sbrk>
   83260:	1c43      	adds	r3, r0, #1
   83262:	d000      	beq.n	83266 <_sbrk_r+0x16>
   83264:	bd38      	pop	{r3, r4, r5, pc}
   83266:	6823      	ldr	r3, [r4, #0]
   83268:	2b00      	cmp	r3, #0
   8326a:	d0fb      	beq.n	83264 <_sbrk_r+0x14>
   8326c:	602b      	str	r3, [r5, #0]
   8326e:	bd38      	pop	{r3, r4, r5, pc}
   83270:	20070a6c 	.word	0x20070a6c

00083274 <__sread>:
   83274:	b510      	push	{r4, lr}
   83276:	460c      	mov	r4, r1
   83278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8327c:	f000 f9ea 	bl	83654 <_read_r>
   83280:	2800      	cmp	r0, #0
   83282:	db03      	blt.n	8328c <__sread+0x18>
   83284:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83286:	4403      	add	r3, r0
   83288:	6523      	str	r3, [r4, #80]	; 0x50
   8328a:	bd10      	pop	{r4, pc}
   8328c:	89a3      	ldrh	r3, [r4, #12]
   8328e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83292:	81a3      	strh	r3, [r4, #12]
   83294:	bd10      	pop	{r4, pc}
   83296:	bf00      	nop

00083298 <__swrite>:
   83298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8329c:	460c      	mov	r4, r1
   8329e:	8989      	ldrh	r1, [r1, #12]
   832a0:	461d      	mov	r5, r3
   832a2:	05cb      	lsls	r3, r1, #23
   832a4:	4616      	mov	r6, r2
   832a6:	4607      	mov	r7, r0
   832a8:	d506      	bpl.n	832b8 <__swrite+0x20>
   832aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   832ae:	2200      	movs	r2, #0
   832b0:	2302      	movs	r3, #2
   832b2:	f000 f9bb 	bl	8362c <_lseek_r>
   832b6:	89a1      	ldrh	r1, [r4, #12]
   832b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   832bc:	81a1      	strh	r1, [r4, #12]
   832be:	4638      	mov	r0, r7
   832c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   832c4:	4632      	mov	r2, r6
   832c6:	462b      	mov	r3, r5
   832c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   832cc:	f000 b8ce 	b.w	8346c <_write_r>

000832d0 <__sseek>:
   832d0:	b510      	push	{r4, lr}
   832d2:	460c      	mov	r4, r1
   832d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   832d8:	f000 f9a8 	bl	8362c <_lseek_r>
   832dc:	89a3      	ldrh	r3, [r4, #12]
   832de:	1c42      	adds	r2, r0, #1
   832e0:	bf0e      	itee	eq
   832e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   832e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   832ea:	6520      	strne	r0, [r4, #80]	; 0x50
   832ec:	81a3      	strh	r3, [r4, #12]
   832ee:	bd10      	pop	{r4, pc}

000832f0 <__sclose>:
   832f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   832f4:	f000 b920 	b.w	83538 <_close_r>

000832f8 <strlen>:
   832f8:	f020 0103 	bic.w	r1, r0, #3
   832fc:	f010 0003 	ands.w	r0, r0, #3
   83300:	f1c0 0000 	rsb	r0, r0, #0
   83304:	f851 3b04 	ldr.w	r3, [r1], #4
   83308:	f100 0c04 	add.w	ip, r0, #4
   8330c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83310:	f06f 0200 	mvn.w	r2, #0
   83314:	bf1c      	itt	ne
   83316:	fa22 f20c 	lsrne.w	r2, r2, ip
   8331a:	4313      	orrne	r3, r2
   8331c:	f04f 0c01 	mov.w	ip, #1
   83320:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83324:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83328:	eba3 020c 	sub.w	r2, r3, ip
   8332c:	ea22 0203 	bic.w	r2, r2, r3
   83330:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83334:	bf04      	itt	eq
   83336:	f851 3b04 	ldreq.w	r3, [r1], #4
   8333a:	3004      	addeq	r0, #4
   8333c:	d0f4      	beq.n	83328 <strlen+0x30>
   8333e:	f1c2 0100 	rsb	r1, r2, #0
   83342:	ea02 0201 	and.w	r2, r2, r1
   83346:	fab2 f282 	clz	r2, r2
   8334a:	f1c2 021f 	rsb	r2, r2, #31
   8334e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83352:	4770      	bx	lr

00083354 <__swbuf_r>:
   83354:	b570      	push	{r4, r5, r6, lr}
   83356:	460d      	mov	r5, r1
   83358:	4614      	mov	r4, r2
   8335a:	4606      	mov	r6, r0
   8335c:	b110      	cbz	r0, 83364 <__swbuf_r+0x10>
   8335e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83360:	2b00      	cmp	r3, #0
   83362:	d048      	beq.n	833f6 <__swbuf_r+0xa2>
   83364:	89a2      	ldrh	r2, [r4, #12]
   83366:	69a3      	ldr	r3, [r4, #24]
   83368:	b291      	uxth	r1, r2
   8336a:	0708      	lsls	r0, r1, #28
   8336c:	60a3      	str	r3, [r4, #8]
   8336e:	d538      	bpl.n	833e2 <__swbuf_r+0x8e>
   83370:	6923      	ldr	r3, [r4, #16]
   83372:	2b00      	cmp	r3, #0
   83374:	d035      	beq.n	833e2 <__swbuf_r+0x8e>
   83376:	0489      	lsls	r1, r1, #18
   83378:	b2ed      	uxtb	r5, r5
   8337a:	d515      	bpl.n	833a8 <__swbuf_r+0x54>
   8337c:	6822      	ldr	r2, [r4, #0]
   8337e:	6961      	ldr	r1, [r4, #20]
   83380:	1ad3      	subs	r3, r2, r3
   83382:	428b      	cmp	r3, r1
   83384:	da1c      	bge.n	833c0 <__swbuf_r+0x6c>
   83386:	3301      	adds	r3, #1
   83388:	68a1      	ldr	r1, [r4, #8]
   8338a:	1c50      	adds	r0, r2, #1
   8338c:	3901      	subs	r1, #1
   8338e:	60a1      	str	r1, [r4, #8]
   83390:	6020      	str	r0, [r4, #0]
   83392:	7015      	strb	r5, [r2, #0]
   83394:	6962      	ldr	r2, [r4, #20]
   83396:	429a      	cmp	r2, r3
   83398:	d01a      	beq.n	833d0 <__swbuf_r+0x7c>
   8339a:	89a3      	ldrh	r3, [r4, #12]
   8339c:	07db      	lsls	r3, r3, #31
   8339e:	d501      	bpl.n	833a4 <__swbuf_r+0x50>
   833a0:	2d0a      	cmp	r5, #10
   833a2:	d015      	beq.n	833d0 <__swbuf_r+0x7c>
   833a4:	4628      	mov	r0, r5
   833a6:	bd70      	pop	{r4, r5, r6, pc}
   833a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   833aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   833ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   833b2:	81a2      	strh	r2, [r4, #12]
   833b4:	6822      	ldr	r2, [r4, #0]
   833b6:	6661      	str	r1, [r4, #100]	; 0x64
   833b8:	6961      	ldr	r1, [r4, #20]
   833ba:	1ad3      	subs	r3, r2, r3
   833bc:	428b      	cmp	r3, r1
   833be:	dbe2      	blt.n	83386 <__swbuf_r+0x32>
   833c0:	4630      	mov	r0, r6
   833c2:	4621      	mov	r1, r4
   833c4:	f7fe fd28 	bl	81e18 <_fflush_r>
   833c8:	b940      	cbnz	r0, 833dc <__swbuf_r+0x88>
   833ca:	6822      	ldr	r2, [r4, #0]
   833cc:	2301      	movs	r3, #1
   833ce:	e7db      	b.n	83388 <__swbuf_r+0x34>
   833d0:	4630      	mov	r0, r6
   833d2:	4621      	mov	r1, r4
   833d4:	f7fe fd20 	bl	81e18 <_fflush_r>
   833d8:	2800      	cmp	r0, #0
   833da:	d0e3      	beq.n	833a4 <__swbuf_r+0x50>
   833dc:	f04f 30ff 	mov.w	r0, #4294967295
   833e0:	bd70      	pop	{r4, r5, r6, pc}
   833e2:	4630      	mov	r0, r6
   833e4:	4621      	mov	r1, r4
   833e6:	f7fe fc01 	bl	81bec <__swsetup_r>
   833ea:	2800      	cmp	r0, #0
   833ec:	d1f6      	bne.n	833dc <__swbuf_r+0x88>
   833ee:	89a2      	ldrh	r2, [r4, #12]
   833f0:	6923      	ldr	r3, [r4, #16]
   833f2:	b291      	uxth	r1, r2
   833f4:	e7bf      	b.n	83376 <__swbuf_r+0x22>
   833f6:	f7fe fda3 	bl	81f40 <__sinit>
   833fa:	e7b3      	b.n	83364 <__swbuf_r+0x10>

000833fc <_wcrtomb_r>:
   833fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83400:	4605      	mov	r5, r0
   83402:	b086      	sub	sp, #24
   83404:	461e      	mov	r6, r3
   83406:	460c      	mov	r4, r1
   83408:	b1a1      	cbz	r1, 83434 <_wcrtomb_r+0x38>
   8340a:	4b10      	ldr	r3, [pc, #64]	; (8344c <_wcrtomb_r+0x50>)
   8340c:	4617      	mov	r7, r2
   8340e:	f8d3 8000 	ldr.w	r8, [r3]
   83412:	f7ff f8fd 	bl	82610 <__locale_charset>
   83416:	9600      	str	r6, [sp, #0]
   83418:	4603      	mov	r3, r0
   8341a:	4621      	mov	r1, r4
   8341c:	463a      	mov	r2, r7
   8341e:	4628      	mov	r0, r5
   83420:	47c0      	blx	r8
   83422:	1c43      	adds	r3, r0, #1
   83424:	d103      	bne.n	8342e <_wcrtomb_r+0x32>
   83426:	2200      	movs	r2, #0
   83428:	238a      	movs	r3, #138	; 0x8a
   8342a:	6032      	str	r2, [r6, #0]
   8342c:	602b      	str	r3, [r5, #0]
   8342e:	b006      	add	sp, #24
   83430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83434:	4b05      	ldr	r3, [pc, #20]	; (8344c <_wcrtomb_r+0x50>)
   83436:	681f      	ldr	r7, [r3, #0]
   83438:	f7ff f8ea 	bl	82610 <__locale_charset>
   8343c:	9600      	str	r6, [sp, #0]
   8343e:	4603      	mov	r3, r0
   83440:	4622      	mov	r2, r4
   83442:	4628      	mov	r0, r5
   83444:	a903      	add	r1, sp, #12
   83446:	47b8      	blx	r7
   83448:	e7eb      	b.n	83422 <_wcrtomb_r+0x26>
   8344a:	bf00      	nop
   8344c:	20070990 	.word	0x20070990

00083450 <__ascii_wctomb>:
   83450:	b121      	cbz	r1, 8345c <__ascii_wctomb+0xc>
   83452:	2aff      	cmp	r2, #255	; 0xff
   83454:	d804      	bhi.n	83460 <__ascii_wctomb+0x10>
   83456:	700a      	strb	r2, [r1, #0]
   83458:	2001      	movs	r0, #1
   8345a:	4770      	bx	lr
   8345c:	4608      	mov	r0, r1
   8345e:	4770      	bx	lr
   83460:	238a      	movs	r3, #138	; 0x8a
   83462:	6003      	str	r3, [r0, #0]
   83464:	f04f 30ff 	mov.w	r0, #4294967295
   83468:	4770      	bx	lr
   8346a:	bf00      	nop

0008346c <_write_r>:
   8346c:	b570      	push	{r4, r5, r6, lr}
   8346e:	4c08      	ldr	r4, [pc, #32]	; (83490 <_write_r+0x24>)
   83470:	4606      	mov	r6, r0
   83472:	2500      	movs	r5, #0
   83474:	4608      	mov	r0, r1
   83476:	4611      	mov	r1, r2
   83478:	461a      	mov	r2, r3
   8347a:	6025      	str	r5, [r4, #0]
   8347c:	f7fc fe9c 	bl	801b8 <_write>
   83480:	1c43      	adds	r3, r0, #1
   83482:	d000      	beq.n	83486 <_write_r+0x1a>
   83484:	bd70      	pop	{r4, r5, r6, pc}
   83486:	6823      	ldr	r3, [r4, #0]
   83488:	2b00      	cmp	r3, #0
   8348a:	d0fb      	beq.n	83484 <_write_r+0x18>
   8348c:	6033      	str	r3, [r6, #0]
   8348e:	bd70      	pop	{r4, r5, r6, pc}
   83490:	20070a6c 	.word	0x20070a6c

00083494 <__register_exitproc>:
   83494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83498:	4c25      	ldr	r4, [pc, #148]	; (83530 <__register_exitproc+0x9c>)
   8349a:	4606      	mov	r6, r0
   8349c:	6825      	ldr	r5, [r4, #0]
   8349e:	4688      	mov	r8, r1
   834a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   834a4:	4692      	mov	sl, r2
   834a6:	4699      	mov	r9, r3
   834a8:	b3c4      	cbz	r4, 8351c <__register_exitproc+0x88>
   834aa:	6860      	ldr	r0, [r4, #4]
   834ac:	281f      	cmp	r0, #31
   834ae:	dc17      	bgt.n	834e0 <__register_exitproc+0x4c>
   834b0:	1c41      	adds	r1, r0, #1
   834b2:	b176      	cbz	r6, 834d2 <__register_exitproc+0x3e>
   834b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   834b8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   834bc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   834c0:	2201      	movs	r2, #1
   834c2:	4082      	lsls	r2, r0
   834c4:	4315      	orrs	r5, r2
   834c6:	2e02      	cmp	r6, #2
   834c8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   834cc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   834d0:	d01e      	beq.n	83510 <__register_exitproc+0x7c>
   834d2:	1c83      	adds	r3, r0, #2
   834d4:	6061      	str	r1, [r4, #4]
   834d6:	2000      	movs	r0, #0
   834d8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   834dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   834e0:	4b14      	ldr	r3, [pc, #80]	; (83534 <__register_exitproc+0xa0>)
   834e2:	b303      	cbz	r3, 83526 <__register_exitproc+0x92>
   834e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   834e8:	f7ff f90c 	bl	82704 <malloc>
   834ec:	4604      	mov	r4, r0
   834ee:	b1d0      	cbz	r0, 83526 <__register_exitproc+0x92>
   834f0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   834f4:	2700      	movs	r7, #0
   834f6:	e884 0088 	stmia.w	r4, {r3, r7}
   834fa:	4638      	mov	r0, r7
   834fc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83500:	2101      	movs	r1, #1
   83502:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83506:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8350a:	2e00      	cmp	r6, #0
   8350c:	d0e1      	beq.n	834d2 <__register_exitproc+0x3e>
   8350e:	e7d1      	b.n	834b4 <__register_exitproc+0x20>
   83510:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83514:	431a      	orrs	r2, r3
   83516:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8351a:	e7da      	b.n	834d2 <__register_exitproc+0x3e>
   8351c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83520:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83524:	e7c1      	b.n	834aa <__register_exitproc+0x16>
   83526:	f04f 30ff 	mov.w	r0, #4294967295
   8352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8352e:	bf00      	nop
   83530:	00083c40 	.word	0x00083c40
   83534:	00082705 	.word	0x00082705

00083538 <_close_r>:
   83538:	b538      	push	{r3, r4, r5, lr}
   8353a:	4c07      	ldr	r4, [pc, #28]	; (83558 <_close_r+0x20>)
   8353c:	2300      	movs	r3, #0
   8353e:	4605      	mov	r5, r0
   83540:	4608      	mov	r0, r1
   83542:	6023      	str	r3, [r4, #0]
   83544:	f7fd fa8a 	bl	80a5c <_close>
   83548:	1c43      	adds	r3, r0, #1
   8354a:	d000      	beq.n	8354e <_close_r+0x16>
   8354c:	bd38      	pop	{r3, r4, r5, pc}
   8354e:	6823      	ldr	r3, [r4, #0]
   83550:	2b00      	cmp	r3, #0
   83552:	d0fb      	beq.n	8354c <_close_r+0x14>
   83554:	602b      	str	r3, [r5, #0]
   83556:	bd38      	pop	{r3, r4, r5, pc}
   83558:	20070a6c 	.word	0x20070a6c

0008355c <_fclose_r>:
   8355c:	2900      	cmp	r1, #0
   8355e:	d03d      	beq.n	835dc <_fclose_r+0x80>
   83560:	b570      	push	{r4, r5, r6, lr}
   83562:	4605      	mov	r5, r0
   83564:	460c      	mov	r4, r1
   83566:	b108      	cbz	r0, 8356c <_fclose_r+0x10>
   83568:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8356a:	b37b      	cbz	r3, 835cc <_fclose_r+0x70>
   8356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83570:	b90b      	cbnz	r3, 83576 <_fclose_r+0x1a>
   83572:	2000      	movs	r0, #0
   83574:	bd70      	pop	{r4, r5, r6, pc}
   83576:	4628      	mov	r0, r5
   83578:	4621      	mov	r1, r4
   8357a:	f7fe fba9 	bl	81cd0 <__sflush_r>
   8357e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83580:	4606      	mov	r6, r0
   83582:	b133      	cbz	r3, 83592 <_fclose_r+0x36>
   83584:	4628      	mov	r0, r5
   83586:	69e1      	ldr	r1, [r4, #28]
   83588:	4798      	blx	r3
   8358a:	2800      	cmp	r0, #0
   8358c:	bfb8      	it	lt
   8358e:	f04f 36ff 	movlt.w	r6, #4294967295
   83592:	89a3      	ldrh	r3, [r4, #12]
   83594:	061b      	lsls	r3, r3, #24
   83596:	d41c      	bmi.n	835d2 <_fclose_r+0x76>
   83598:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8359a:	b141      	cbz	r1, 835ae <_fclose_r+0x52>
   8359c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   835a0:	4299      	cmp	r1, r3
   835a2:	d002      	beq.n	835aa <_fclose_r+0x4e>
   835a4:	4628      	mov	r0, r5
   835a6:	f7fe fda3 	bl	820f0 <_free_r>
   835aa:	2300      	movs	r3, #0
   835ac:	6323      	str	r3, [r4, #48]	; 0x30
   835ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
   835b0:	b121      	cbz	r1, 835bc <_fclose_r+0x60>
   835b2:	4628      	mov	r0, r5
   835b4:	f7fe fd9c 	bl	820f0 <_free_r>
   835b8:	2300      	movs	r3, #0
   835ba:	6463      	str	r3, [r4, #68]	; 0x44
   835bc:	f7fe fcc6 	bl	81f4c <__sfp_lock_acquire>
   835c0:	2300      	movs	r3, #0
   835c2:	81a3      	strh	r3, [r4, #12]
   835c4:	f7fe fcc4 	bl	81f50 <__sfp_lock_release>
   835c8:	4630      	mov	r0, r6
   835ca:	bd70      	pop	{r4, r5, r6, pc}
   835cc:	f7fe fcb8 	bl	81f40 <__sinit>
   835d0:	e7cc      	b.n	8356c <_fclose_r+0x10>
   835d2:	4628      	mov	r0, r5
   835d4:	6921      	ldr	r1, [r4, #16]
   835d6:	f7fe fd8b 	bl	820f0 <_free_r>
   835da:	e7dd      	b.n	83598 <_fclose_r+0x3c>
   835dc:	2000      	movs	r0, #0
   835de:	4770      	bx	lr

000835e0 <_fstat_r>:
   835e0:	b538      	push	{r3, r4, r5, lr}
   835e2:	4c08      	ldr	r4, [pc, #32]	; (83604 <_fstat_r+0x24>)
   835e4:	2300      	movs	r3, #0
   835e6:	4605      	mov	r5, r0
   835e8:	4608      	mov	r0, r1
   835ea:	4611      	mov	r1, r2
   835ec:	6023      	str	r3, [r4, #0]
   835ee:	f7fd fa39 	bl	80a64 <_fstat>
   835f2:	1c43      	adds	r3, r0, #1
   835f4:	d000      	beq.n	835f8 <_fstat_r+0x18>
   835f6:	bd38      	pop	{r3, r4, r5, pc}
   835f8:	6823      	ldr	r3, [r4, #0]
   835fa:	2b00      	cmp	r3, #0
   835fc:	d0fb      	beq.n	835f6 <_fstat_r+0x16>
   835fe:	602b      	str	r3, [r5, #0]
   83600:	bd38      	pop	{r3, r4, r5, pc}
   83602:	bf00      	nop
   83604:	20070a6c 	.word	0x20070a6c

00083608 <_isatty_r>:
   83608:	b538      	push	{r3, r4, r5, lr}
   8360a:	4c07      	ldr	r4, [pc, #28]	; (83628 <_isatty_r+0x20>)
   8360c:	2300      	movs	r3, #0
   8360e:	4605      	mov	r5, r0
   83610:	4608      	mov	r0, r1
   83612:	6023      	str	r3, [r4, #0]
   83614:	f7fd fa2c 	bl	80a70 <_isatty>
   83618:	1c43      	adds	r3, r0, #1
   8361a:	d000      	beq.n	8361e <_isatty_r+0x16>
   8361c:	bd38      	pop	{r3, r4, r5, pc}
   8361e:	6823      	ldr	r3, [r4, #0]
   83620:	2b00      	cmp	r3, #0
   83622:	d0fb      	beq.n	8361c <_isatty_r+0x14>
   83624:	602b      	str	r3, [r5, #0]
   83626:	bd38      	pop	{r3, r4, r5, pc}
   83628:	20070a6c 	.word	0x20070a6c

0008362c <_lseek_r>:
   8362c:	b570      	push	{r4, r5, r6, lr}
   8362e:	4c08      	ldr	r4, [pc, #32]	; (83650 <_lseek_r+0x24>)
   83630:	4606      	mov	r6, r0
   83632:	2500      	movs	r5, #0
   83634:	4608      	mov	r0, r1
   83636:	4611      	mov	r1, r2
   83638:	461a      	mov	r2, r3
   8363a:	6025      	str	r5, [r4, #0]
   8363c:	f7fd fa1a 	bl	80a74 <_lseek>
   83640:	1c43      	adds	r3, r0, #1
   83642:	d000      	beq.n	83646 <_lseek_r+0x1a>
   83644:	bd70      	pop	{r4, r5, r6, pc}
   83646:	6823      	ldr	r3, [r4, #0]
   83648:	2b00      	cmp	r3, #0
   8364a:	d0fb      	beq.n	83644 <_lseek_r+0x18>
   8364c:	6033      	str	r3, [r6, #0]
   8364e:	bd70      	pop	{r4, r5, r6, pc}
   83650:	20070a6c 	.word	0x20070a6c

00083654 <_read_r>:
   83654:	b570      	push	{r4, r5, r6, lr}
   83656:	4c08      	ldr	r4, [pc, #32]	; (83678 <_read_r+0x24>)
   83658:	4606      	mov	r6, r0
   8365a:	2500      	movs	r5, #0
   8365c:	4608      	mov	r0, r1
   8365e:	4611      	mov	r1, r2
   83660:	461a      	mov	r2, r3
   83662:	6025      	str	r5, [r4, #0]
   83664:	f7fc fd74 	bl	80150 <_read>
   83668:	1c43      	adds	r3, r0, #1
   8366a:	d000      	beq.n	8366e <_read_r+0x1a>
   8366c:	bd70      	pop	{r4, r5, r6, pc}
   8366e:	6823      	ldr	r3, [r4, #0]
   83670:	2b00      	cmp	r3, #0
   83672:	d0fb      	beq.n	8366c <_read_r+0x18>
   83674:	6033      	str	r3, [r6, #0]
   83676:	bd70      	pop	{r4, r5, r6, pc}
   83678:	20070a6c 	.word	0x20070a6c

0008367c <__aeabi_uldivmod>:
   8367c:	b953      	cbnz	r3, 83694 <__aeabi_uldivmod+0x18>
   8367e:	b94a      	cbnz	r2, 83694 <__aeabi_uldivmod+0x18>
   83680:	2900      	cmp	r1, #0
   83682:	bf08      	it	eq
   83684:	2800      	cmpeq	r0, #0
   83686:	bf1c      	itt	ne
   83688:	f04f 31ff 	movne.w	r1, #4294967295
   8368c:	f04f 30ff 	movne.w	r0, #4294967295
   83690:	f000 b83c 	b.w	8370c <__aeabi_idiv0>
   83694:	b082      	sub	sp, #8
   83696:	46ec      	mov	ip, sp
   83698:	e92d 5000 	stmdb	sp!, {ip, lr}
   8369c:	f000 f81e 	bl	836dc <__gnu_uldivmod_helper>
   836a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   836a4:	b002      	add	sp, #8
   836a6:	bc0c      	pop	{r2, r3}
   836a8:	4770      	bx	lr
   836aa:	bf00      	nop

000836ac <__gnu_ldivmod_helper>:
   836ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836b0:	9c06      	ldr	r4, [sp, #24]
   836b2:	4690      	mov	r8, r2
   836b4:	4606      	mov	r6, r0
   836b6:	460f      	mov	r7, r1
   836b8:	461d      	mov	r5, r3
   836ba:	f000 f829 	bl	83710 <__divdi3>
   836be:	fb08 fc01 	mul.w	ip, r8, r1
   836c2:	fba8 2300 	umull	r2, r3, r8, r0
   836c6:	fb00 c505 	mla	r5, r0, r5, ip
   836ca:	1ab2      	subs	r2, r6, r2
   836cc:	442b      	add	r3, r5
   836ce:	eb67 0303 	sbc.w	r3, r7, r3
   836d2:	4686      	mov	lr, r0
   836d4:	e9c4 2300 	strd	r2, r3, [r4]
   836d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000836dc <__gnu_uldivmod_helper>:
   836dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   836e0:	9e08      	ldr	r6, [sp, #32]
   836e2:	4617      	mov	r7, r2
   836e4:	4680      	mov	r8, r0
   836e6:	4689      	mov	r9, r1
   836e8:	461d      	mov	r5, r3
   836ea:	f000 f967 	bl	839bc <__udivdi3>
   836ee:	fb00 f305 	mul.w	r3, r0, r5
   836f2:	fba0 4507 	umull	r4, r5, r0, r7
   836f6:	fb07 3701 	mla	r7, r7, r1, r3
   836fa:	ebb8 0404 	subs.w	r4, r8, r4
   836fe:	443d      	add	r5, r7
   83700:	eb69 0505 	sbc.w	r5, r9, r5
   83704:	e9c6 4500 	strd	r4, r5, [r6]
   83708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008370c <__aeabi_idiv0>:
   8370c:	4770      	bx	lr
   8370e:	bf00      	nop

00083710 <__divdi3>:
   83710:	2900      	cmp	r1, #0
   83712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83716:	f2c0 80a8 	blt.w	8386a <__divdi3+0x15a>
   8371a:	2600      	movs	r6, #0
   8371c:	2b00      	cmp	r3, #0
   8371e:	f2c0 809e 	blt.w	8385e <__divdi3+0x14e>
   83722:	4681      	mov	r9, r0
   83724:	468e      	mov	lr, r1
   83726:	4690      	mov	r8, r2
   83728:	469c      	mov	ip, r3
   8372a:	4617      	mov	r7, r2
   8372c:	4604      	mov	r4, r0
   8372e:	460d      	mov	r5, r1
   83730:	2b00      	cmp	r3, #0
   83732:	d13d      	bne.n	837b0 <__divdi3+0xa0>
   83734:	428a      	cmp	r2, r1
   83736:	d959      	bls.n	837ec <__divdi3+0xdc>
   83738:	fab2 f382 	clz	r3, r2
   8373c:	b13b      	cbz	r3, 8374e <__divdi3+0x3e>
   8373e:	f1c3 0220 	rsb	r2, r3, #32
   83742:	409d      	lsls	r5, r3
   83744:	fa20 f202 	lsr.w	r2, r0, r2
   83748:	409f      	lsls	r7, r3
   8374a:	4315      	orrs	r5, r2
   8374c:	409c      	lsls	r4, r3
   8374e:	0c39      	lsrs	r1, r7, #16
   83750:	fbb5 f0f1 	udiv	r0, r5, r1
   83754:	fa1f fe87 	uxth.w	lr, r7
   83758:	fb01 5510 	mls	r5, r1, r0, r5
   8375c:	fb0e f300 	mul.w	r3, lr, r0
   83760:	0c22      	lsrs	r2, r4, #16
   83762:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   83766:	42ab      	cmp	r3, r5
   83768:	d909      	bls.n	8377e <__divdi3+0x6e>
   8376a:	19ed      	adds	r5, r5, r7
   8376c:	f100 32ff 	add.w	r2, r0, #4294967295
   83770:	f080 810b 	bcs.w	8398a <__divdi3+0x27a>
   83774:	42ab      	cmp	r3, r5
   83776:	f240 8108 	bls.w	8398a <__divdi3+0x27a>
   8377a:	3802      	subs	r0, #2
   8377c:	443d      	add	r5, r7
   8377e:	1aed      	subs	r5, r5, r3
   83780:	fbb5 f3f1 	udiv	r3, r5, r1
   83784:	fb01 5513 	mls	r5, r1, r3, r5
   83788:	fb0e fe03 	mul.w	lr, lr, r3
   8378c:	b2a4      	uxth	r4, r4
   8378e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83792:	45ae      	cmp	lr, r5
   83794:	d908      	bls.n	837a8 <__divdi3+0x98>
   83796:	19ed      	adds	r5, r5, r7
   83798:	f103 32ff 	add.w	r2, r3, #4294967295
   8379c:	f080 80f7 	bcs.w	8398e <__divdi3+0x27e>
   837a0:	45ae      	cmp	lr, r5
   837a2:	f240 80f4 	bls.w	8398e <__divdi3+0x27e>
   837a6:	3b02      	subs	r3, #2
   837a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   837ac:	2200      	movs	r2, #0
   837ae:	e003      	b.n	837b8 <__divdi3+0xa8>
   837b0:	428b      	cmp	r3, r1
   837b2:	d90f      	bls.n	837d4 <__divdi3+0xc4>
   837b4:	2200      	movs	r2, #0
   837b6:	4613      	mov	r3, r2
   837b8:	1c34      	adds	r4, r6, #0
   837ba:	bf18      	it	ne
   837bc:	2401      	movne	r4, #1
   837be:	4260      	negs	r0, r4
   837c0:	f04f 0500 	mov.w	r5, #0
   837c4:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   837c8:	4058      	eors	r0, r3
   837ca:	4051      	eors	r1, r2
   837cc:	1900      	adds	r0, r0, r4
   837ce:	4169      	adcs	r1, r5
   837d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   837d4:	fab3 f283 	clz	r2, r3
   837d8:	2a00      	cmp	r2, #0
   837da:	f040 8089 	bne.w	838f0 <__divdi3+0x1e0>
   837de:	428b      	cmp	r3, r1
   837e0:	d302      	bcc.n	837e8 <__divdi3+0xd8>
   837e2:	4580      	cmp	r8, r0
   837e4:	f200 80e2 	bhi.w	839ac <__divdi3+0x29c>
   837e8:	2301      	movs	r3, #1
   837ea:	e7e5      	b.n	837b8 <__divdi3+0xa8>
   837ec:	b912      	cbnz	r2, 837f4 <__divdi3+0xe4>
   837ee:	2301      	movs	r3, #1
   837f0:	fbb3 f7f2 	udiv	r7, r3, r2
   837f4:	fab7 f887 	clz	r8, r7
   837f8:	f1b8 0f00 	cmp.w	r8, #0
   837fc:	d13b      	bne.n	83876 <__divdi3+0x166>
   837fe:	1bed      	subs	r5, r5, r7
   83800:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83804:	fa1f fe87 	uxth.w	lr, r7
   83808:	2201      	movs	r2, #1
   8380a:	fbb5 f0fc 	udiv	r0, r5, ip
   8380e:	fb0c 5510 	mls	r5, ip, r0, r5
   83812:	fb0e f300 	mul.w	r3, lr, r0
   83816:	0c21      	lsrs	r1, r4, #16
   83818:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8381c:	42ab      	cmp	r3, r5
   8381e:	d907      	bls.n	83830 <__divdi3+0x120>
   83820:	19ed      	adds	r5, r5, r7
   83822:	f100 31ff 	add.w	r1, r0, #4294967295
   83826:	d202      	bcs.n	8382e <__divdi3+0x11e>
   83828:	42ab      	cmp	r3, r5
   8382a:	f200 80c3 	bhi.w	839b4 <__divdi3+0x2a4>
   8382e:	4608      	mov	r0, r1
   83830:	1aed      	subs	r5, r5, r3
   83832:	fbb5 f3fc 	udiv	r3, r5, ip
   83836:	fb0c 5513 	mls	r5, ip, r3, r5
   8383a:	fb0e fe03 	mul.w	lr, lr, r3
   8383e:	b2a4      	uxth	r4, r4
   83840:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83844:	45ae      	cmp	lr, r5
   83846:	d907      	bls.n	83858 <__divdi3+0x148>
   83848:	19ed      	adds	r5, r5, r7
   8384a:	f103 31ff 	add.w	r1, r3, #4294967295
   8384e:	d202      	bcs.n	83856 <__divdi3+0x146>
   83850:	45ae      	cmp	lr, r5
   83852:	f200 80ad 	bhi.w	839b0 <__divdi3+0x2a0>
   83856:	460b      	mov	r3, r1
   83858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   8385c:	e7ac      	b.n	837b8 <__divdi3+0xa8>
   8385e:	4252      	negs	r2, r2
   83860:	ea6f 0606 	mvn.w	r6, r6
   83864:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83868:	e75b      	b.n	83722 <__divdi3+0x12>
   8386a:	4240      	negs	r0, r0
   8386c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83870:	f04f 36ff 	mov.w	r6, #4294967295
   83874:	e752      	b.n	8371c <__divdi3+0xc>
   83876:	fa07 f708 	lsl.w	r7, r7, r8
   8387a:	f1c8 0220 	rsb	r2, r8, #32
   8387e:	fa25 f302 	lsr.w	r3, r5, r2
   83882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83886:	fbb3 f1fc 	udiv	r1, r3, ip
   8388a:	fa1f fe87 	uxth.w	lr, r7
   8388e:	fb0c 3311 	mls	r3, ip, r1, r3
   83892:	fa24 f202 	lsr.w	r2, r4, r2
   83896:	fa05 f508 	lsl.w	r5, r5, r8
   8389a:	fb0e f901 	mul.w	r9, lr, r1
   8389e:	432a      	orrs	r2, r5
   838a0:	0c10      	lsrs	r0, r2, #16
   838a2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   838a6:	4599      	cmp	r9, r3
   838a8:	fa04 f408 	lsl.w	r4, r4, r8
   838ac:	d907      	bls.n	838be <__divdi3+0x1ae>
   838ae:	19db      	adds	r3, r3, r7
   838b0:	f101 30ff 	add.w	r0, r1, #4294967295
   838b4:	d278      	bcs.n	839a8 <__divdi3+0x298>
   838b6:	4599      	cmp	r9, r3
   838b8:	d976      	bls.n	839a8 <__divdi3+0x298>
   838ba:	3902      	subs	r1, #2
   838bc:	443b      	add	r3, r7
   838be:	ebc9 0303 	rsb	r3, r9, r3
   838c2:	fbb3 f0fc 	udiv	r0, r3, ip
   838c6:	fb0c 3310 	mls	r3, ip, r0, r3
   838ca:	fb0e f500 	mul.w	r5, lr, r0
   838ce:	b292      	uxth	r2, r2
   838d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   838d4:	429d      	cmp	r5, r3
   838d6:	d907      	bls.n	838e8 <__divdi3+0x1d8>
   838d8:	19db      	adds	r3, r3, r7
   838da:	f100 32ff 	add.w	r2, r0, #4294967295
   838de:	d25f      	bcs.n	839a0 <__divdi3+0x290>
   838e0:	429d      	cmp	r5, r3
   838e2:	d95d      	bls.n	839a0 <__divdi3+0x290>
   838e4:	3802      	subs	r0, #2
   838e6:	443b      	add	r3, r7
   838e8:	1b5d      	subs	r5, r3, r5
   838ea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   838ee:	e78c      	b.n	8380a <__divdi3+0xfa>
   838f0:	f1c2 0320 	rsb	r3, r2, #32
   838f4:	fa28 f103 	lsr.w	r1, r8, r3
   838f8:	fa0c fc02 	lsl.w	ip, ip, r2
   838fc:	ea41 0c0c 	orr.w	ip, r1, ip
   83900:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83904:	fa2e f103 	lsr.w	r1, lr, r3
   83908:	fbb1 f5f0 	udiv	r5, r1, r0
   8390c:	fa1f f78c 	uxth.w	r7, ip
   83910:	fb00 1115 	mls	r1, r0, r5, r1
   83914:	fa29 f303 	lsr.w	r3, r9, r3
   83918:	fa0e fe02 	lsl.w	lr, lr, r2
   8391c:	fb07 f905 	mul.w	r9, r7, r5
   83920:	ea43 0e0e 	orr.w	lr, r3, lr
   83924:	ea4f 431e 	mov.w	r3, lr, lsr #16
   83928:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8392c:	4589      	cmp	r9, r1
   8392e:	fa08 f802 	lsl.w	r8, r8, r2
   83932:	d908      	bls.n	83946 <__divdi3+0x236>
   83934:	eb11 010c 	adds.w	r1, r1, ip
   83938:	f105 33ff 	add.w	r3, r5, #4294967295
   8393c:	d232      	bcs.n	839a4 <__divdi3+0x294>
   8393e:	4589      	cmp	r9, r1
   83940:	d930      	bls.n	839a4 <__divdi3+0x294>
   83942:	3d02      	subs	r5, #2
   83944:	4461      	add	r1, ip
   83946:	ebc9 0101 	rsb	r1, r9, r1
   8394a:	fbb1 f3f0 	udiv	r3, r1, r0
   8394e:	fb00 1113 	mls	r1, r0, r3, r1
   83952:	fb07 f703 	mul.w	r7, r7, r3
   83956:	fa1f fe8e 	uxth.w	lr, lr
   8395a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   8395e:	4577      	cmp	r7, lr
   83960:	d908      	bls.n	83974 <__divdi3+0x264>
   83962:	eb1e 0e0c 	adds.w	lr, lr, ip
   83966:	f103 31ff 	add.w	r1, r3, #4294967295
   8396a:	d217      	bcs.n	8399c <__divdi3+0x28c>
   8396c:	4577      	cmp	r7, lr
   8396e:	d915      	bls.n	8399c <__divdi3+0x28c>
   83970:	3b02      	subs	r3, #2
   83972:	44e6      	add	lr, ip
   83974:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   83978:	fba3 8908 	umull	r8, r9, r3, r8
   8397c:	ebc7 0e0e 	rsb	lr, r7, lr
   83980:	45ce      	cmp	lr, r9
   83982:	d309      	bcc.n	83998 <__divdi3+0x288>
   83984:	d005      	beq.n	83992 <__divdi3+0x282>
   83986:	2200      	movs	r2, #0
   83988:	e716      	b.n	837b8 <__divdi3+0xa8>
   8398a:	4610      	mov	r0, r2
   8398c:	e6f7      	b.n	8377e <__divdi3+0x6e>
   8398e:	4613      	mov	r3, r2
   83990:	e70a      	b.n	837a8 <__divdi3+0x98>
   83992:	4094      	lsls	r4, r2
   83994:	4544      	cmp	r4, r8
   83996:	d2f6      	bcs.n	83986 <__divdi3+0x276>
   83998:	3b01      	subs	r3, #1
   8399a:	e7f4      	b.n	83986 <__divdi3+0x276>
   8399c:	460b      	mov	r3, r1
   8399e:	e7e9      	b.n	83974 <__divdi3+0x264>
   839a0:	4610      	mov	r0, r2
   839a2:	e7a1      	b.n	838e8 <__divdi3+0x1d8>
   839a4:	461d      	mov	r5, r3
   839a6:	e7ce      	b.n	83946 <__divdi3+0x236>
   839a8:	4601      	mov	r1, r0
   839aa:	e788      	b.n	838be <__divdi3+0x1ae>
   839ac:	4613      	mov	r3, r2
   839ae:	e703      	b.n	837b8 <__divdi3+0xa8>
   839b0:	3b02      	subs	r3, #2
   839b2:	e751      	b.n	83858 <__divdi3+0x148>
   839b4:	3802      	subs	r0, #2
   839b6:	443d      	add	r5, r7
   839b8:	e73a      	b.n	83830 <__divdi3+0x120>
   839ba:	bf00      	nop

000839bc <__udivdi3>:
   839bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   839c0:	2b00      	cmp	r3, #0
   839c2:	d144      	bne.n	83a4e <__udivdi3+0x92>
   839c4:	428a      	cmp	r2, r1
   839c6:	4615      	mov	r5, r2
   839c8:	4604      	mov	r4, r0
   839ca:	d94f      	bls.n	83a6c <__udivdi3+0xb0>
   839cc:	fab2 f782 	clz	r7, r2
   839d0:	460e      	mov	r6, r1
   839d2:	b14f      	cbz	r7, 839e8 <__udivdi3+0x2c>
   839d4:	f1c7 0320 	rsb	r3, r7, #32
   839d8:	40b9      	lsls	r1, r7
   839da:	fa20 f603 	lsr.w	r6, r0, r3
   839de:	fa02 f507 	lsl.w	r5, r2, r7
   839e2:	430e      	orrs	r6, r1
   839e4:	fa00 f407 	lsl.w	r4, r0, r7
   839e8:	0c2f      	lsrs	r7, r5, #16
   839ea:	fbb6 f0f7 	udiv	r0, r6, r7
   839ee:	fa1f fe85 	uxth.w	lr, r5
   839f2:	fb07 6210 	mls	r2, r7, r0, r6
   839f6:	fb0e f100 	mul.w	r1, lr, r0
   839fa:	0c26      	lsrs	r6, r4, #16
   839fc:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   83a00:	4299      	cmp	r1, r3
   83a02:	d909      	bls.n	83a18 <__udivdi3+0x5c>
   83a04:	195b      	adds	r3, r3, r5
   83a06:	f100 32ff 	add.w	r2, r0, #4294967295
   83a0a:	f080 80ee 	bcs.w	83bea <__udivdi3+0x22e>
   83a0e:	4299      	cmp	r1, r3
   83a10:	f240 80eb 	bls.w	83bea <__udivdi3+0x22e>
   83a14:	3802      	subs	r0, #2
   83a16:	442b      	add	r3, r5
   83a18:	1a59      	subs	r1, r3, r1
   83a1a:	fbb1 f3f7 	udiv	r3, r1, r7
   83a1e:	fb07 1113 	mls	r1, r7, r3, r1
   83a22:	fb0e fe03 	mul.w	lr, lr, r3
   83a26:	b2a4      	uxth	r4, r4
   83a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   83a2c:	458e      	cmp	lr, r1
   83a2e:	d908      	bls.n	83a42 <__udivdi3+0x86>
   83a30:	1949      	adds	r1, r1, r5
   83a32:	f103 32ff 	add.w	r2, r3, #4294967295
   83a36:	f080 80da 	bcs.w	83bee <__udivdi3+0x232>
   83a3a:	458e      	cmp	lr, r1
   83a3c:	f240 80d7 	bls.w	83bee <__udivdi3+0x232>
   83a40:	3b02      	subs	r3, #2
   83a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83a46:	2600      	movs	r6, #0
   83a48:	4631      	mov	r1, r6
   83a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a4e:	428b      	cmp	r3, r1
   83a50:	d847      	bhi.n	83ae2 <__udivdi3+0x126>
   83a52:	fab3 f683 	clz	r6, r3
   83a56:	2e00      	cmp	r6, #0
   83a58:	d148      	bne.n	83aec <__udivdi3+0x130>
   83a5a:	428b      	cmp	r3, r1
   83a5c:	d302      	bcc.n	83a64 <__udivdi3+0xa8>
   83a5e:	4282      	cmp	r2, r0
   83a60:	f200 80cf 	bhi.w	83c02 <__udivdi3+0x246>
   83a64:	2001      	movs	r0, #1
   83a66:	4631      	mov	r1, r6
   83a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a6c:	b912      	cbnz	r2, 83a74 <__udivdi3+0xb8>
   83a6e:	2501      	movs	r5, #1
   83a70:	fbb5 f5f2 	udiv	r5, r5, r2
   83a74:	fab5 fc85 	clz	ip, r5
   83a78:	f1bc 0f00 	cmp.w	ip, #0
   83a7c:	d178      	bne.n	83b70 <__udivdi3+0x1b4>
   83a7e:	1b49      	subs	r1, r1, r5
   83a80:	0c2f      	lsrs	r7, r5, #16
   83a82:	fa1f fe85 	uxth.w	lr, r5
   83a86:	2601      	movs	r6, #1
   83a88:	fbb1 f0f7 	udiv	r0, r1, r7
   83a8c:	fb07 1110 	mls	r1, r7, r0, r1
   83a90:	fb0e f200 	mul.w	r2, lr, r0
   83a94:	0c23      	lsrs	r3, r4, #16
   83a96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83a9a:	428a      	cmp	r2, r1
   83a9c:	d907      	bls.n	83aae <__udivdi3+0xf2>
   83a9e:	1949      	adds	r1, r1, r5
   83aa0:	f100 33ff 	add.w	r3, r0, #4294967295
   83aa4:	d202      	bcs.n	83aac <__udivdi3+0xf0>
   83aa6:	428a      	cmp	r2, r1
   83aa8:	f200 80bc 	bhi.w	83c24 <__udivdi3+0x268>
   83aac:	4618      	mov	r0, r3
   83aae:	1a89      	subs	r1, r1, r2
   83ab0:	fbb1 f3f7 	udiv	r3, r1, r7
   83ab4:	fb07 1113 	mls	r1, r7, r3, r1
   83ab8:	fb0e fe03 	mul.w	lr, lr, r3
   83abc:	b2a4      	uxth	r4, r4
   83abe:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   83ac2:	4596      	cmp	lr, r2
   83ac4:	d908      	bls.n	83ad8 <__udivdi3+0x11c>
   83ac6:	1952      	adds	r2, r2, r5
   83ac8:	f103 31ff 	add.w	r1, r3, #4294967295
   83acc:	f080 8091 	bcs.w	83bf2 <__udivdi3+0x236>
   83ad0:	4596      	cmp	lr, r2
   83ad2:	f240 808e 	bls.w	83bf2 <__udivdi3+0x236>
   83ad6:	3b02      	subs	r3, #2
   83ad8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83adc:	4631      	mov	r1, r6
   83ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83ae2:	2600      	movs	r6, #0
   83ae4:	4630      	mov	r0, r6
   83ae6:	4631      	mov	r1, r6
   83ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83aec:	f1c6 0420 	rsb	r4, r6, #32
   83af0:	fa22 f504 	lsr.w	r5, r2, r4
   83af4:	40b3      	lsls	r3, r6
   83af6:	432b      	orrs	r3, r5
   83af8:	fa21 f704 	lsr.w	r7, r1, r4
   83afc:	ea4f 4813 	mov.w	r8, r3, lsr #16
   83b00:	fbb7 fcf8 	udiv	ip, r7, r8
   83b04:	fa1f f983 	uxth.w	r9, r3
   83b08:	fb08 771c 	mls	r7, r8, ip, r7
   83b0c:	fa20 fe04 	lsr.w	lr, r0, r4
   83b10:	fa01 f506 	lsl.w	r5, r1, r6
   83b14:	fb09 f40c 	mul.w	r4, r9, ip
   83b18:	ea4e 0505 	orr.w	r5, lr, r5
   83b1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   83b20:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   83b24:	42bc      	cmp	r4, r7
   83b26:	fa02 f206 	lsl.w	r2, r2, r6
   83b2a:	d904      	bls.n	83b36 <__udivdi3+0x17a>
   83b2c:	18ff      	adds	r7, r7, r3
   83b2e:	f10c 31ff 	add.w	r1, ip, #4294967295
   83b32:	d368      	bcc.n	83c06 <__udivdi3+0x24a>
   83b34:	468c      	mov	ip, r1
   83b36:	1b3f      	subs	r7, r7, r4
   83b38:	fbb7 f4f8 	udiv	r4, r7, r8
   83b3c:	fb08 7714 	mls	r7, r8, r4, r7
   83b40:	fb09 f904 	mul.w	r9, r9, r4
   83b44:	b2ad      	uxth	r5, r5
   83b46:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   83b4a:	4589      	cmp	r9, r1
   83b4c:	d904      	bls.n	83b58 <__udivdi3+0x19c>
   83b4e:	18c9      	adds	r1, r1, r3
   83b50:	f104 35ff 	add.w	r5, r4, #4294967295
   83b54:	d35d      	bcc.n	83c12 <__udivdi3+0x256>
   83b56:	462c      	mov	r4, r5
   83b58:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   83b5c:	fba4 2302 	umull	r2, r3, r4, r2
   83b60:	ebc9 0101 	rsb	r1, r9, r1
   83b64:	4299      	cmp	r1, r3
   83b66:	d349      	bcc.n	83bfc <__udivdi3+0x240>
   83b68:	d045      	beq.n	83bf6 <__udivdi3+0x23a>
   83b6a:	4620      	mov	r0, r4
   83b6c:	2600      	movs	r6, #0
   83b6e:	e76b      	b.n	83a48 <__udivdi3+0x8c>
   83b70:	f1cc 0420 	rsb	r4, ip, #32
   83b74:	fa05 f50c 	lsl.w	r5, r5, ip
   83b78:	fa21 f304 	lsr.w	r3, r1, r4
   83b7c:	0c2a      	lsrs	r2, r5, #16
   83b7e:	fbb3 f6f2 	udiv	r6, r3, r2
   83b82:	fa1f fe85 	uxth.w	lr, r5
   83b86:	fb02 3816 	mls	r8, r2, r6, r3
   83b8a:	fa20 f704 	lsr.w	r7, r0, r4
   83b8e:	fa01 f10c 	lsl.w	r1, r1, ip
   83b92:	fb0e f906 	mul.w	r9, lr, r6
   83b96:	430f      	orrs	r7, r1
   83b98:	0c3c      	lsrs	r4, r7, #16
   83b9a:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   83b9e:	4599      	cmp	r9, r3
   83ba0:	fa00 f40c 	lsl.w	r4, r0, ip
   83ba4:	d907      	bls.n	83bb6 <__udivdi3+0x1fa>
   83ba6:	195b      	adds	r3, r3, r5
   83ba8:	f106 31ff 	add.w	r1, r6, #4294967295
   83bac:	d238      	bcs.n	83c20 <__udivdi3+0x264>
   83bae:	4599      	cmp	r9, r3
   83bb0:	d936      	bls.n	83c20 <__udivdi3+0x264>
   83bb2:	3e02      	subs	r6, #2
   83bb4:	442b      	add	r3, r5
   83bb6:	ebc9 0303 	rsb	r3, r9, r3
   83bba:	fbb3 f0f2 	udiv	r0, r3, r2
   83bbe:	fb02 3310 	mls	r3, r2, r0, r3
   83bc2:	fb0e f100 	mul.w	r1, lr, r0
   83bc6:	b2bf      	uxth	r7, r7
   83bc8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   83bcc:	4299      	cmp	r1, r3
   83bce:	d907      	bls.n	83be0 <__udivdi3+0x224>
   83bd0:	195b      	adds	r3, r3, r5
   83bd2:	f100 37ff 	add.w	r7, r0, #4294967295
   83bd6:	d221      	bcs.n	83c1c <__udivdi3+0x260>
   83bd8:	4299      	cmp	r1, r3
   83bda:	d91f      	bls.n	83c1c <__udivdi3+0x260>
   83bdc:	3802      	subs	r0, #2
   83bde:	442b      	add	r3, r5
   83be0:	4617      	mov	r7, r2
   83be2:	1a59      	subs	r1, r3, r1
   83be4:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   83be8:	e74e      	b.n	83a88 <__udivdi3+0xcc>
   83bea:	4610      	mov	r0, r2
   83bec:	e714      	b.n	83a18 <__udivdi3+0x5c>
   83bee:	4613      	mov	r3, r2
   83bf0:	e727      	b.n	83a42 <__udivdi3+0x86>
   83bf2:	460b      	mov	r3, r1
   83bf4:	e770      	b.n	83ad8 <__udivdi3+0x11c>
   83bf6:	40b0      	lsls	r0, r6
   83bf8:	4290      	cmp	r0, r2
   83bfa:	d2b6      	bcs.n	83b6a <__udivdi3+0x1ae>
   83bfc:	1e60      	subs	r0, r4, #1
   83bfe:	2600      	movs	r6, #0
   83c00:	e722      	b.n	83a48 <__udivdi3+0x8c>
   83c02:	4630      	mov	r0, r6
   83c04:	e720      	b.n	83a48 <__udivdi3+0x8c>
   83c06:	42bc      	cmp	r4, r7
   83c08:	d994      	bls.n	83b34 <__udivdi3+0x178>
   83c0a:	f1ac 0c02 	sub.w	ip, ip, #2
   83c0e:	441f      	add	r7, r3
   83c10:	e791      	b.n	83b36 <__udivdi3+0x17a>
   83c12:	4589      	cmp	r9, r1
   83c14:	d99f      	bls.n	83b56 <__udivdi3+0x19a>
   83c16:	3c02      	subs	r4, #2
   83c18:	4419      	add	r1, r3
   83c1a:	e79d      	b.n	83b58 <__udivdi3+0x19c>
   83c1c:	4638      	mov	r0, r7
   83c1e:	e7df      	b.n	83be0 <__udivdi3+0x224>
   83c20:	460e      	mov	r6, r1
   83c22:	e7c8      	b.n	83bb6 <__udivdi3+0x1fa>
   83c24:	3802      	subs	r0, #2
   83c26:	4429      	add	r1, r5
   83c28:	e741      	b.n	83aae <__udivdi3+0xf2>
   83c2a:	bf00      	nop
   83c2c:	6e756f63 	.word	0x6e756f63
   83c30:	3d726574 	.word	0x3d726574
   83c34:	3a3a6925 	.word	0x3a3a6925
   83c38:	00000000 	.word	0x00000000
   83c3c:	00000043 	.word	0x00000043

00083c40 <_global_impure_ptr>:
   83c40:	20070130                                0.. 

00083c44 <zeroes.6869>:
   83c44:	30303030 30303030 30303030 30303030     0000000000000000
   83c54:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   83c64:	00000000 33323130 37363534 62613938     ....0123456789ab
   83c74:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00083c84 <blanks.6868>:
   83c84:	20202020 20202020 20202020 20202020                     

00083c94 <_init>:
   83c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c96:	bf00      	nop
   83c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c9a:	bc08      	pop	{r3}
   83c9c:	469e      	mov	lr, r3
   83c9e:	4770      	bx	lr

00083ca0 <__init_array_start>:
   83ca0:	00081cb1 	.word	0x00081cb1

00083ca4 <__frame_dummy_init_array_entry>:
   83ca4:	00080119                                ....

00083ca8 <_fini>:
   83ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83caa:	bf00      	nop
   83cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83cae:	bc08      	pop	{r3}
   83cb0:	469e      	mov	lr, r3
   83cb2:	4770      	bx	lr

00083cb4 <__fini_array_start>:
   83cb4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00083c3c 00000000 00000000 00000000     <<..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	00083451                                Q4..
