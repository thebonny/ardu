
DSM2_Funkstrecke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ef8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000096c  20070000  00081ef8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000f4  2007096c  00082864  0001096c  2**2
                  ALLOC
  3 .stack        00002000  20070a60  00082958  0001096c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001096c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010995  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b60d  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e36  00000000  00000000  0001bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004a7b  00000000  00000000  0001de33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b18  00000000  00000000  000228ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a18  00000000  00000000  000233c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000172f7  00000000  00000000  00023dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c547  00000000  00000000  0003b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063aec  00000000  00000000  0004761c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001db4  00000000  00000000  000ab108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a60 	.word	0x20072a60
   80004:	0008098d 	.word	0x0008098d
   80008:	00080989 	.word	0x00080989
   8000c:	00080989 	.word	0x00080989
   80010:	00080989 	.word	0x00080989
   80014:	00080989 	.word	0x00080989
   80018:	00080989 	.word	0x00080989
	...
   8002c:	00080989 	.word	0x00080989
   80030:	00080989 	.word	0x00080989
   80034:	00000000 	.word	0x00000000
   80038:	00080989 	.word	0x00080989
   8003c:	00080989 	.word	0x00080989
   80040:	00080989 	.word	0x00080989
   80044:	00080989 	.word	0x00080989
   80048:	00080989 	.word	0x00080989
   8004c:	00080989 	.word	0x00080989
   80050:	00080989 	.word	0x00080989
   80054:	00080989 	.word	0x00080989
   80058:	00080989 	.word	0x00080989
   8005c:	00080989 	.word	0x00080989
   80060:	00080989 	.word	0x00080989
   80064:	00080989 	.word	0x00080989
   80068:	00000000 	.word	0x00000000
   8006c:	000805c1 	.word	0x000805c1
   80070:	000805d5 	.word	0x000805d5
   80074:	000805e9 	.word	0x000805e9
   80078:	000805fd 	.word	0x000805fd
	...
   80084:	00080989 	.word	0x00080989
   80088:	00080989 	.word	0x00080989
   8008c:	00080989 	.word	0x00080989
   80090:	00080989 	.word	0x00080989
   80094:	00080989 	.word	0x00080989
   80098:	00080989 	.word	0x00080989
   8009c:	00080989 	.word	0x00080989
   800a0:	00080989 	.word	0x00080989
   800a4:	00000000 	.word	0x00000000
   800a8:	00080989 	.word	0x00080989
   800ac:	00080989 	.word	0x00080989
   800b0:	00080989 	.word	0x00080989
   800b4:	00080989 	.word	0x00080989
   800b8:	00080d0d 	.word	0x00080d0d
   800bc:	00080989 	.word	0x00080989
   800c0:	00080989 	.word	0x00080989
   800c4:	00080989 	.word	0x00080989
   800c8:	00080989 	.word	0x00080989
   800cc:	00080989 	.word	0x00080989
   800d0:	00080989 	.word	0x00080989
   800d4:	00080cdd 	.word	0x00080cdd
   800d8:	00080989 	.word	0x00080989
   800dc:	00080989 	.word	0x00080989
   800e0:	00080989 	.word	0x00080989
   800e4:	00080989 	.word	0x00080989
   800e8:	00080989 	.word	0x00080989
   800ec:	00080989 	.word	0x00080989
   800f0:	00080989 	.word	0x00080989

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007096c 	.word	0x2007096c
   80110:	00000000 	.word	0x00000000
   80114:	00081ef8 	.word	0x00081ef8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00081ef8 	.word	0x00081ef8
   80144:	20070970 	.word	0x20070970
   80148:	00081ef8 	.word	0x00081ef8
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	00080679 	.word	0x00080679
   80198:	000806cd 	.word	0x000806cd
   8019c:	000806dd 	.word	0x000806dd
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	000806ed 	.word	0x000806ed
   801ac:	00080611 	.word	0x00080611
   801b0:	00080a3d 	.word	0x00080a3d

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	20070a48 	.word	0x20070a48
   801ec:	20070a40 	.word	0x20070a40

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d818      	bhi.n	80228 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b182      	cbz	r2, 80222 <_write+0x32>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80222:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8022c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a44 	.word	0x20070a44
   8023c:	20070a48 	.word	0x20070a48

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b16      	ldr	r3, [pc, #88]	; (802a0 <board_init+0x60>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c15      	ldr	r4, [pc, #84]	; (802a4 <board_init+0x64>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c11      	ldr	r4, [pc, #68]	; (802a8 <board_init+0x68>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	490c      	ldr	r1, [pc, #48]	; (802ac <board_init+0x6c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	490c      	ldr	r1, [pc, #48]	; (802b0 <board_init+0x70>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	480c      	ldr	r0, [pc, #48]	; (802b4 <board_init+0x74>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a0b      	ldr	r2, [pc, #44]	; (802b8 <board_init+0x78>)
   8028a:	4b0c      	ldr	r3, [pc, #48]	; (802bc <board_init+0x7c>)
   8028c:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   8028e:	200a      	movs	r0, #10
   80290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80294:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80296:	200b      	movs	r0, #11
   80298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029c:	47a0      	blx	r4
   8029e:	bd10      	pop	{r4, pc}
   802a0:	400e1a50 	.word	0x400e1a50
   802a4:	000806fd 	.word	0x000806fd
   802a8:	000803fd 	.word	0x000803fd
   802ac:	28000079 	.word	0x28000079
   802b0:	28000001 	.word	0x28000001
   802b4:	400e0e00 	.word	0x400e0e00
   802b8:	08000001 	.word	0x08000001
   802bc:	000804d1 	.word	0x000804d1

000802c0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   802c0:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   802c2:	2401      	movs	r4, #1
   802c4:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   802c6:	2400      	movs	r4, #0
   802c8:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   802ca:	f240 2502 	movw	r5, #514	; 0x202
   802ce:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802d2:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802d6:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802da:	6845      	ldr	r5, [r0, #4]
   802dc:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   802de:	0052      	lsls	r2, r2, #1
   802e0:	fbb1 f1f2 	udiv	r1, r1, r2
   802e4:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802e6:	0212      	lsls	r2, r2, #8
   802e8:	b292      	uxth	r2, r2
   802ea:	4313      	orrs	r3, r2
   802ec:	6043      	str	r3, [r0, #4]
	return 0;
}
   802ee:	4620      	mov	r0, r4
   802f0:	bc30      	pop	{r4, r5}
   802f2:	4770      	bx	lr

000802f4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802f4:	6843      	ldr	r3, [r0, #4]
   802f6:	4319      	orrs	r1, r3
   802f8:	01d2      	lsls	r2, r2, #7
   802fa:	b2d2      	uxtb	r2, r2
   802fc:	4311      	orrs	r1, r2
   802fe:	6041      	str	r1, [r0, #4]
   80300:	4770      	bx	lr
   80302:	bf00      	nop

00080304 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80304:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80306:	6844      	ldr	r4, [r0, #4]
   80308:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8030a:	0609      	lsls	r1, r1, #24
   8030c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   80310:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80312:	071b      	lsls	r3, r3, #28
   80314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80318:	4313      	orrs	r3, r2
   8031a:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   8031c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80324:	2302      	movs	r3, #2
   80326:	6003      	str	r3, [r0, #0]
   80328:	4770      	bx	lr
   8032a:	bf00      	nop

0008032c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   8032c:	2301      	movs	r3, #1
   8032e:	408b      	lsls	r3, r1
   80330:	6103      	str	r3, [r0, #16]
   80332:	4770      	bx	lr

00080334 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   80334:	6a00      	ldr	r0, [r0, #32]
}
   80336:	4770      	bx	lr

00080338 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   80338:	6241      	str	r1, [r0, #36]	; 0x24
   8033a:	4770      	bx	lr

0008033c <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   8033c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8033e:	4770      	bx	lr

00080340 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80340:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80344:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80348:	bf0c      	ite	eq
   8034a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   8034c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8034e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80350:	bf14      	ite	ne
   80352:	2001      	movne	r0, #1
   80354:	2000      	moveq	r0, #0
   80356:	4770      	bx	lr

00080358 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80358:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8035a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8035e:	d016      	beq.n	8038e <pio_set_peripheral+0x36>
   80360:	d804      	bhi.n	8036c <pio_set_peripheral+0x14>
   80362:	b1c1      	cbz	r1, 80396 <pio_set_peripheral+0x3e>
   80364:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80368:	d00a      	beq.n	80380 <pio_set_peripheral+0x28>
   8036a:	e013      	b.n	80394 <pio_set_peripheral+0x3c>
   8036c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80370:	d011      	beq.n	80396 <pio_set_peripheral+0x3e>
   80372:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80376:	d00e      	beq.n	80396 <pio_set_peripheral+0x3e>
   80378:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8037c:	d10a      	bne.n	80394 <pio_set_peripheral+0x3c>
   8037e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80380:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80382:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80384:	400b      	ands	r3, r1
   80386:	ea23 0302 	bic.w	r3, r3, r2
   8038a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8038c:	e002      	b.n	80394 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8038e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80390:	4313      	orrs	r3, r2
   80392:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80394:	6042      	str	r2, [r0, #4]
   80396:	4770      	bx	lr

00080398 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80398:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8039a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8039e:	bf14      	ite	ne
   803a0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803a2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803a4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803a8:	bf14      	ite	ne
   803aa:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803ac:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803ae:	f012 0f02 	tst.w	r2, #2
   803b2:	d002      	beq.n	803ba <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803b4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803b8:	e004      	b.n	803c4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803ba:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803be:	bf18      	it	ne
   803c0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803c4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803c6:	6001      	str	r1, [r0, #0]
   803c8:	4770      	bx	lr
   803ca:	bf00      	nop

000803cc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803cc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803ce:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d0:	9c01      	ldr	r4, [sp, #4]
   803d2:	b10c      	cbz	r4, 803d8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803d4:	6641      	str	r1, [r0, #100]	; 0x64
   803d6:	e000      	b.n	803da <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803d8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803da:	b10b      	cbz	r3, 803e0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803dc:	6501      	str	r1, [r0, #80]	; 0x50
   803de:	e000      	b.n	803e2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803e0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803e2:	b10a      	cbz	r2, 803e8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803e4:	6301      	str	r1, [r0, #48]	; 0x30
   803e6:	e000      	b.n	803ea <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803e8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803ea:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803ec:	6001      	str	r1, [r0, #0]
}
   803ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   803f2:	4770      	bx	lr

000803f4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   803f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   803f6:	4770      	bx	lr

000803f8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   803f8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   803fa:	4770      	bx	lr

000803fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   803fc:	b570      	push	{r4, r5, r6, lr}
   803fe:	b082      	sub	sp, #8
   80400:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80402:	0943      	lsrs	r3, r0, #5
   80404:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80408:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8040c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8040e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80412:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80416:	d030      	beq.n	8047a <pio_configure_pin+0x7e>
   80418:	d806      	bhi.n	80428 <pio_configure_pin+0x2c>
   8041a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8041e:	d00a      	beq.n	80436 <pio_configure_pin+0x3a>
   80420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80424:	d018      	beq.n	80458 <pio_configure_pin+0x5c>
   80426:	e049      	b.n	804bc <pio_configure_pin+0xc0>
   80428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8042c:	d030      	beq.n	80490 <pio_configure_pin+0x94>
   8042e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80432:	d02d      	beq.n	80490 <pio_configure_pin+0x94>
   80434:	e042      	b.n	804bc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80436:	f000 001f 	and.w	r0, r0, #31
   8043a:	2601      	movs	r6, #1
   8043c:	4086      	lsls	r6, r0
   8043e:	4620      	mov	r0, r4
   80440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80444:	4632      	mov	r2, r6
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <pio_configure_pin+0xc8>)
   80448:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8044a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8044e:	bf14      	ite	ne
   80450:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80452:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80454:	2001      	movs	r0, #1
   80456:	e032      	b.n	804be <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80458:	f000 001f 	and.w	r0, r0, #31
   8045c:	2601      	movs	r6, #1
   8045e:	4086      	lsls	r6, r0
   80460:	4620      	mov	r0, r4
   80462:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80466:	4632      	mov	r2, r6
   80468:	4b16      	ldr	r3, [pc, #88]	; (804c4 <pio_configure_pin+0xc8>)
   8046a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8046c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80470:	bf14      	ite	ne
   80472:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80474:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80476:	2001      	movs	r0, #1
   80478:	e021      	b.n	804be <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8047a:	f000 031f 	and.w	r3, r0, #31
   8047e:	2601      	movs	r6, #1
   80480:	4620      	mov	r0, r4
   80482:	fa06 f103 	lsl.w	r1, r6, r3
   80486:	462a      	mov	r2, r5
   80488:	4b0f      	ldr	r3, [pc, #60]	; (804c8 <pio_configure_pin+0xcc>)
   8048a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8048c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8048e:	e016      	b.n	804be <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80490:	f000 031f 	and.w	r3, r0, #31
   80494:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80496:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8049a:	ea05 0106 	and.w	r1, r5, r6
   8049e:	9100      	str	r1, [sp, #0]
   804a0:	4620      	mov	r0, r4
   804a2:	fa06 f103 	lsl.w	r1, r6, r3
   804a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804aa:	bf14      	ite	ne
   804ac:	2200      	movne	r2, #0
   804ae:	2201      	moveq	r2, #1
   804b0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804b4:	4c05      	ldr	r4, [pc, #20]	; (804cc <pio_configure_pin+0xd0>)
   804b6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804b8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804ba:	e000      	b.n	804be <pio_configure_pin+0xc2>

	default:
		return 0;
   804bc:	2000      	movs	r0, #0
	}

	return 1;
}
   804be:	b002      	add	sp, #8
   804c0:	bd70      	pop	{r4, r5, r6, pc}
   804c2:	bf00      	nop
   804c4:	00080359 	.word	0x00080359
   804c8:	00080399 	.word	0x00080399
   804cc:	000803cd 	.word	0x000803cd

000804d0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   804d0:	b570      	push	{r4, r5, r6, lr}
   804d2:	b082      	sub	sp, #8
   804d4:	4606      	mov	r6, r0
   804d6:	460d      	mov	r5, r1
   804d8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804da:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   804de:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804e2:	d026      	beq.n	80532 <pio_configure_pin_group+0x62>
   804e4:	d806      	bhi.n	804f4 <pio_configure_pin_group+0x24>
   804e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804ea:	d00a      	beq.n	80502 <pio_configure_pin_group+0x32>
   804ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   804f0:	d013      	beq.n	8051a <pio_configure_pin_group+0x4a>
   804f2:	e034      	b.n	8055e <pio_configure_pin_group+0x8e>
   804f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   804f8:	d01f      	beq.n	8053a <pio_configure_pin_group+0x6a>
   804fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   804fe:	d01c      	beq.n	8053a <pio_configure_pin_group+0x6a>
   80500:	e02d      	b.n	8055e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80502:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80506:	462a      	mov	r2, r5
   80508:	4b16      	ldr	r3, [pc, #88]	; (80564 <pio_configure_pin_group+0x94>)
   8050a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8050c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80510:	bf14      	ite	ne
   80512:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80514:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80516:	2001      	movs	r0, #1
   80518:	e022      	b.n	80560 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8051a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8051e:	462a      	mov	r2, r5
   80520:	4b10      	ldr	r3, [pc, #64]	; (80564 <pio_configure_pin_group+0x94>)
   80522:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80524:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80528:	bf14      	ite	ne
   8052a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8052c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8052e:	2001      	movs	r0, #1
   80530:	e016      	b.n	80560 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80532:	4b0d      	ldr	r3, [pc, #52]	; (80568 <pio_configure_pin_group+0x98>)
   80534:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80536:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80538:	e012      	b.n	80560 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8053a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8053e:	f004 0301 	and.w	r3, r4, #1
   80542:	9300      	str	r3, [sp, #0]
   80544:	4630      	mov	r0, r6
   80546:	4629      	mov	r1, r5
   80548:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8054c:	bf14      	ite	ne
   8054e:	2200      	movne	r2, #0
   80550:	2201      	moveq	r2, #1
   80552:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80556:	4c05      	ldr	r4, [pc, #20]	; (8056c <pio_configure_pin_group+0x9c>)
   80558:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8055a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8055c:	e000      	b.n	80560 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8055e:	2000      	movs	r0, #0
	}

	return 1;
}
   80560:	b002      	add	sp, #8
   80562:	bd70      	pop	{r4, r5, r6, pc}
   80564:	00080359 	.word	0x00080359
   80568:	00080399 	.word	0x00080399
   8056c:	000803cd 	.word	0x000803cd

00080570 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80574:	4604      	mov	r4, r0
   80576:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80578:	4b0e      	ldr	r3, [pc, #56]	; (805b4 <pio_handler_process+0x44>)
   8057a:	4798      	blx	r3
   8057c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8057e:	4620      	mov	r0, r4
   80580:	4b0d      	ldr	r3, [pc, #52]	; (805b8 <pio_handler_process+0x48>)
   80582:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80584:	4005      	ands	r5, r0
   80586:	d013      	beq.n	805b0 <pio_handler_process+0x40>
   80588:	4c0c      	ldr	r4, [pc, #48]	; (805bc <pio_handler_process+0x4c>)
   8058a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8058e:	6823      	ldr	r3, [r4, #0]
   80590:	4543      	cmp	r3, r8
   80592:	d108      	bne.n	805a6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80594:	6861      	ldr	r1, [r4, #4]
   80596:	4229      	tst	r1, r5
   80598:	d005      	beq.n	805a6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8059a:	68e3      	ldr	r3, [r4, #12]
   8059c:	4640      	mov	r0, r8
   8059e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805a0:	6863      	ldr	r3, [r4, #4]
   805a2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805a6:	42b4      	cmp	r4, r6
   805a8:	d002      	beq.n	805b0 <pio_handler_process+0x40>
   805aa:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805ac:	2d00      	cmp	r5, #0
   805ae:	d1ee      	bne.n	8058e <pio_handler_process+0x1e>
   805b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805b4:	000803f5 	.word	0x000803f5
   805b8:	000803f9 	.word	0x000803f9
   805bc:	20070988 	.word	0x20070988

000805c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   805c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   805c2:	4802      	ldr	r0, [pc, #8]	; (805cc <PIOA_Handler+0xc>)
   805c4:	210b      	movs	r1, #11
   805c6:	4b02      	ldr	r3, [pc, #8]	; (805d0 <PIOA_Handler+0x10>)
   805c8:	4798      	blx	r3
   805ca:	bd08      	pop	{r3, pc}
   805cc:	400e0e00 	.word	0x400e0e00
   805d0:	00080571 	.word	0x00080571

000805d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   805d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   805d6:	4802      	ldr	r0, [pc, #8]	; (805e0 <PIOB_Handler+0xc>)
   805d8:	210c      	movs	r1, #12
   805da:	4b02      	ldr	r3, [pc, #8]	; (805e4 <PIOB_Handler+0x10>)
   805dc:	4798      	blx	r3
   805de:	bd08      	pop	{r3, pc}
   805e0:	400e1000 	.word	0x400e1000
   805e4:	00080571 	.word	0x00080571

000805e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   805e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   805ea:	4802      	ldr	r0, [pc, #8]	; (805f4 <PIOC_Handler+0xc>)
   805ec:	210d      	movs	r1, #13
   805ee:	4b02      	ldr	r3, [pc, #8]	; (805f8 <PIOC_Handler+0x10>)
   805f0:	4798      	blx	r3
   805f2:	bd08      	pop	{r3, pc}
   805f4:	400e1200 	.word	0x400e1200
   805f8:	00080571 	.word	0x00080571

000805fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   805fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   805fe:	4802      	ldr	r0, [pc, #8]	; (80608 <PIOD_Handler+0xc>)
   80600:	210e      	movs	r1, #14
   80602:	4b02      	ldr	r3, [pc, #8]	; (8060c <PIOD_Handler+0x10>)
   80604:	4798      	blx	r3
   80606:	bd08      	pop	{r3, pc}
   80608:	400e1400 	.word	0x400e1400
   8060c:	00080571 	.word	0x00080571

00080610 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80610:	4a18      	ldr	r2, [pc, #96]	; (80674 <pmc_switch_mck_to_pllack+0x64>)
   80612:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80618:	4318      	orrs	r0, r3
   8061a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8061c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8061e:	f013 0f08 	tst.w	r3, #8
   80622:	d003      	beq.n	8062c <pmc_switch_mck_to_pllack+0x1c>
   80624:	e009      	b.n	8063a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80626:	3b01      	subs	r3, #1
   80628:	d103      	bne.n	80632 <pmc_switch_mck_to_pllack+0x22>
   8062a:	e01e      	b.n	8066a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8062c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80630:	4910      	ldr	r1, [pc, #64]	; (80674 <pmc_switch_mck_to_pllack+0x64>)
   80632:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80634:	f012 0f08 	tst.w	r2, #8
   80638:	d0f5      	beq.n	80626 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8063a:	4a0e      	ldr	r2, [pc, #56]	; (80674 <pmc_switch_mck_to_pllack+0x64>)
   8063c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8063e:	f023 0303 	bic.w	r3, r3, #3
   80642:	f043 0302 	orr.w	r3, r3, #2
   80646:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80648:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8064a:	f010 0008 	ands.w	r0, r0, #8
   8064e:	d004      	beq.n	8065a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80650:	2000      	movs	r0, #0
   80652:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80654:	3b01      	subs	r3, #1
   80656:	d103      	bne.n	80660 <pmc_switch_mck_to_pllack+0x50>
   80658:	e009      	b.n	8066e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8065a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8065e:	4905      	ldr	r1, [pc, #20]	; (80674 <pmc_switch_mck_to_pllack+0x64>)
   80660:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80662:	f012 0f08 	tst.w	r2, #8
   80666:	d0f5      	beq.n	80654 <pmc_switch_mck_to_pllack+0x44>
   80668:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8066a:	2001      	movs	r0, #1
   8066c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8066e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80670:	4770      	bx	lr
   80672:	bf00      	nop
   80674:	400e0600 	.word	0x400e0600

00080678 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80678:	b138      	cbz	r0, 8068a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8067a:	4911      	ldr	r1, [pc, #68]	; (806c0 <pmc_switch_mainck_to_xtal+0x48>)
   8067c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8067e:	4a11      	ldr	r2, [pc, #68]	; (806c4 <pmc_switch_mainck_to_xtal+0x4c>)
   80680:	401a      	ands	r2, r3
   80682:	4b11      	ldr	r3, [pc, #68]	; (806c8 <pmc_switch_mainck_to_xtal+0x50>)
   80684:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80686:	620b      	str	r3, [r1, #32]
   80688:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8068a:	4a0d      	ldr	r2, [pc, #52]	; (806c0 <pmc_switch_mainck_to_xtal+0x48>)
   8068c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8068e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80692:	f023 0303 	bic.w	r3, r3, #3
   80696:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8069a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8069e:	0209      	lsls	r1, r1, #8
   806a0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806a2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806a4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   806a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806a8:	f013 0f01 	tst.w	r3, #1
   806ac:	d0fb      	beq.n	806a6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806ae:	4a04      	ldr	r2, [pc, #16]	; (806c0 <pmc_switch_mainck_to_xtal+0x48>)
   806b0:	6a13      	ldr	r3, [r2, #32]
   806b2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806ba:	6213      	str	r3, [r2, #32]
   806bc:	4770      	bx	lr
   806be:	bf00      	nop
   806c0:	400e0600 	.word	0x400e0600
   806c4:	fec8fffc 	.word	0xfec8fffc
   806c8:	01370002 	.word	0x01370002

000806cc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   806cc:	4b02      	ldr	r3, [pc, #8]	; (806d8 <pmc_osc_is_ready_mainck+0xc>)
   806ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806d0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   806d4:	4770      	bx	lr
   806d6:	bf00      	nop
   806d8:	400e0600 	.word	0x400e0600

000806dc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   806dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   806e0:	4b01      	ldr	r3, [pc, #4]	; (806e8 <pmc_disable_pllack+0xc>)
   806e2:	629a      	str	r2, [r3, #40]	; 0x28
   806e4:	4770      	bx	lr
   806e6:	bf00      	nop
   806e8:	400e0600 	.word	0x400e0600

000806ec <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   806ec:	4b02      	ldr	r3, [pc, #8]	; (806f8 <pmc_is_locked_pllack+0xc>)
   806ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806f0:	f000 0002 	and.w	r0, r0, #2
   806f4:	4770      	bx	lr
   806f6:	bf00      	nop
   806f8:	400e0600 	.word	0x400e0600

000806fc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   806fc:	282c      	cmp	r0, #44	; 0x2c
   806fe:	d81e      	bhi.n	8073e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80700:	281f      	cmp	r0, #31
   80702:	d80c      	bhi.n	8071e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80704:	4b11      	ldr	r3, [pc, #68]	; (8074c <pmc_enable_periph_clk+0x50>)
   80706:	699a      	ldr	r2, [r3, #24]
   80708:	2301      	movs	r3, #1
   8070a:	4083      	lsls	r3, r0
   8070c:	401a      	ands	r2, r3
   8070e:	4293      	cmp	r3, r2
   80710:	d017      	beq.n	80742 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80712:	2301      	movs	r3, #1
   80714:	4083      	lsls	r3, r0
   80716:	4a0d      	ldr	r2, [pc, #52]	; (8074c <pmc_enable_periph_clk+0x50>)
   80718:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8071a:	2000      	movs	r0, #0
   8071c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8071e:	4b0b      	ldr	r3, [pc, #44]	; (8074c <pmc_enable_periph_clk+0x50>)
   80720:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80724:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80726:	2301      	movs	r3, #1
   80728:	4083      	lsls	r3, r0
   8072a:	401a      	ands	r2, r3
   8072c:	4293      	cmp	r3, r2
   8072e:	d00a      	beq.n	80746 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80730:	2301      	movs	r3, #1
   80732:	4083      	lsls	r3, r0
   80734:	4a05      	ldr	r2, [pc, #20]	; (8074c <pmc_enable_periph_clk+0x50>)
   80736:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8073a:	2000      	movs	r0, #0
   8073c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8073e:	2001      	movs	r0, #1
   80740:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80742:	2000      	movs	r0, #0
   80744:	4770      	bx	lr
   80746:	2000      	movs	r0, #0
}
   80748:	4770      	bx	lr
   8074a:	bf00      	nop
   8074c:	400e0600 	.word	0x400e0600

00080750 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80750:	b410      	push	{r4}
   80752:	0189      	lsls	r1, r1, #6
   80754:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80756:	2402      	movs	r4, #2
   80758:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8075a:	f04f 31ff 	mov.w	r1, #4294967295
   8075e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80760:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80762:	605a      	str	r2, [r3, #4]
}
   80764:	f85d 4b04 	ldr.w	r4, [sp], #4
   80768:	4770      	bx	lr
   8076a:	bf00      	nop

0008076c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8076c:	0189      	lsls	r1, r1, #6
   8076e:	2305      	movs	r3, #5
   80770:	5043      	str	r3, [r0, r1]
   80772:	4770      	bx	lr

00080774 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80774:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80778:	61ca      	str	r2, [r1, #28]
   8077a:	4770      	bx	lr

0008077c <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
   8077c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80780:	624a      	str	r2, [r1, #36]	; 0x24
   80782:	4770      	bx	lr

00080784 <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
   80784:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80788:	6a08      	ldr	r0, [r1, #32]
}
   8078a:	4770      	bx	lr

0008078c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   8078c:	b4f0      	push	{r4, r5, r6, r7}
   8078e:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80790:	2402      	movs	r4, #2
   80792:	9401      	str	r4, [sp, #4]
   80794:	2408      	movs	r4, #8
   80796:	9402      	str	r4, [sp, #8]
   80798:	2420      	movs	r4, #32
   8079a:	9403      	str	r4, [sp, #12]
   8079c:	2480      	movs	r4, #128	; 0x80
   8079e:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   807a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   807a2:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   807a4:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   807a6:	0c4c      	lsrs	r4, r1, #17
		if (ul_freq > ul_high) {
   807a8:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   807ac:	d81b      	bhi.n	807e6 <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
   807ae:	42a0      	cmp	r0, r4
   807b0:	d21f      	bcs.n	807f2 <tc_find_mck_divisor+0x66>
   807b2:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   807b4:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
   807b6:	f856 4f04 	ldr.w	r4, [r6, #4]!
   807ba:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   807be:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
   807c0:	4284      	cmp	r4, r0
   807c2:	d312      	bcc.n	807ea <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
   807c4:	4287      	cmp	r7, r0
   807c6:	d915      	bls.n	807f4 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   807c8:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   807ca:	2d05      	cmp	r5, #5
   807cc:	d1f3      	bne.n	807b6 <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   807ce:	2000      	movs	r0, #0
   807d0:	e013      	b.n	807fa <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   807d2:	a906      	add	r1, sp, #24
   807d4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   807d8:	f851 1c14 	ldr.w	r1, [r1, #-20]
   807dc:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
   807de:	b133      	cbz	r3, 807ee <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
   807e0:	601d      	str	r5, [r3, #0]
	}

	return 1;
   807e2:	2001      	movs	r0, #1
   807e4:	e009      	b.n	807fa <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   807e6:	2000      	movs	r0, #0
   807e8:	e007      	b.n	807fa <tc_find_mck_divisor+0x6e>
   807ea:	2000      	movs	r0, #0
   807ec:	e005      	b.n	807fa <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   807ee:	2001      	movs	r0, #1
   807f0:	e003      	b.n	807fa <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   807f2:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   807f4:	2a00      	cmp	r2, #0
   807f6:	d1ec      	bne.n	807d2 <tc_find_mck_divisor+0x46>
   807f8:	e7f1      	b.n	807de <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   807fa:	b006      	add	sp, #24
   807fc:	bcf0      	pop	{r4, r5, r6, r7}
   807fe:	4770      	bx	lr

00080800 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80800:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80802:	23ac      	movs	r3, #172	; 0xac
   80804:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80806:	680b      	ldr	r3, [r1, #0]
   80808:	684a      	ldr	r2, [r1, #4]
   8080a:	fbb3 f3f2 	udiv	r3, r3, r2
   8080e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80810:	1e5c      	subs	r4, r3, #1
   80812:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80816:	4294      	cmp	r4, r2
   80818:	d80a      	bhi.n	80830 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8081a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8081c:	688b      	ldr	r3, [r1, #8]
   8081e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80820:	f240 2302 	movw	r3, #514	; 0x202
   80824:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80828:	2350      	movs	r3, #80	; 0x50
   8082a:	6003      	str	r3, [r0, #0]

	return 0;
   8082c:	2000      	movs	r0, #0
   8082e:	e000      	b.n	80832 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80830:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80832:	f85d 4b04 	ldr.w	r4, [sp], #4
   80836:	4770      	bx	lr

00080838 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80838:	6943      	ldr	r3, [r0, #20]
   8083a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8083e:	bf1a      	itte	ne
   80840:	61c1      	strne	r1, [r0, #28]
	return 0;
   80842:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80844:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80846:	4770      	bx	lr

00080848 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80848:	6943      	ldr	r3, [r0, #20]
   8084a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8084e:	bf1d      	ittte	ne
   80850:	6983      	ldrne	r3, [r0, #24]
   80852:	700b      	strbne	r3, [r1, #0]
	return 0;
   80854:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80856:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80858:	4770      	bx	lr
   8085a:	bf00      	nop

0008085c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8085c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8085e:	010b      	lsls	r3, r1, #4
   80860:	4293      	cmp	r3, r2
   80862:	d90f      	bls.n	80884 <usart_set_async_baudrate+0x28>
   80864:	e01c      	b.n	808a0 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   80866:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8086a:	6841      	ldr	r1, [r0, #4]
   8086c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80870:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80872:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   80876:	6202      	str	r2, [r0, #32]

	return 0;
   80878:	2000      	movs	r0, #0
   8087a:	e01e      	b.n	808ba <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   8087c:	2001      	movs	r0, #1
   8087e:	e01c      	b.n	808ba <usart_set_async_baudrate+0x5e>
   80880:	2001      	movs	r0, #1
   80882:	e01a      	b.n	808ba <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80884:	00d2      	lsls	r2, r2, #3
   80886:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   8088a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   8088e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80890:	1e5c      	subs	r4, r3, #1
   80892:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80896:	428c      	cmp	r4, r1
   80898:	d8f0      	bhi.n	8087c <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   8089a:	f002 0207 	and.w	r2, r2, #7
   8089e:	e7e8      	b.n	80872 <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   808a0:	00c9      	lsls	r1, r1, #3
   808a2:	00d2      	lsls	r2, r2, #3
   808a4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   808a8:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   808ac:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   808ae:	1e5c      	subs	r4, r3, #1
   808b0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   808b4:	428c      	cmp	r4, r1
   808b6:	d9d6      	bls.n	80866 <usart_set_async_baudrate+0xa>
   808b8:	e7e2      	b.n	80880 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   808ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   808be:	4770      	bx	lr

000808c0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   808c0:	4b08      	ldr	r3, [pc, #32]	; (808e4 <usart_reset+0x24>)
   808c2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   808c6:	2300      	movs	r3, #0
   808c8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   808ca:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   808cc:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   808ce:	2388      	movs	r3, #136	; 0x88
   808d0:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   808d2:	2324      	movs	r3, #36	; 0x24
   808d4:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   808d6:	f44f 7380 	mov.w	r3, #256	; 0x100
   808da:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   808dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   808e0:	6003      	str	r3, [r0, #0]
   808e2:	4770      	bx	lr
   808e4:	55534100 	.word	0x55534100

000808e8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   808e8:	b570      	push	{r4, r5, r6, lr}
   808ea:	4605      	mov	r5, r0
   808ec:	460c      	mov	r4, r1
   808ee:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   808f0:	4b0f      	ldr	r3, [pc, #60]	; (80930 <usart_init_rs232+0x48>)
   808f2:	4798      	blx	r3

	ul_reg_val = 0;
   808f4:	2200      	movs	r2, #0
   808f6:	4b0f      	ldr	r3, [pc, #60]	; (80934 <usart_init_rs232+0x4c>)
   808f8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   808fa:	b19c      	cbz	r4, 80924 <usart_init_rs232+0x3c>
   808fc:	4628      	mov	r0, r5
   808fe:	6821      	ldr	r1, [r4, #0]
   80900:	4632      	mov	r2, r6
   80902:	4b0d      	ldr	r3, [pc, #52]	; (80938 <usart_init_rs232+0x50>)
   80904:	4798      	blx	r3
   80906:	4602      	mov	r2, r0
   80908:	b970      	cbnz	r0, 80928 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8090a:	68a1      	ldr	r1, [r4, #8]
   8090c:	6863      	ldr	r3, [r4, #4]
   8090e:	4319      	orrs	r1, r3
   80910:	6923      	ldr	r3, [r4, #16]
   80912:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80914:	68e3      	ldr	r3, [r4, #12]
   80916:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80918:	4906      	ldr	r1, [pc, #24]	; (80934 <usart_init_rs232+0x4c>)
   8091a:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   8091c:	6869      	ldr	r1, [r5, #4]
   8091e:	430b      	orrs	r3, r1
   80920:	606b      	str	r3, [r5, #4]

	return 0;
   80922:	e002      	b.n	8092a <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   80924:	2201      	movs	r2, #1
   80926:	e000      	b.n	8092a <usart_init_rs232+0x42>
   80928:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   8092a:	4610      	mov	r0, r2
   8092c:	bd70      	pop	{r4, r5, r6, pc}
   8092e:	bf00      	nop
   80930:	000808c1 	.word	0x000808c1
   80934:	200709f8 	.word	0x200709f8
   80938:	0008085d 	.word	0x0008085d

0008093c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   8093c:	2340      	movs	r3, #64	; 0x40
   8093e:	6003      	str	r3, [r0, #0]
   80940:	4770      	bx	lr
   80942:	bf00      	nop

00080944 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
   80944:	60c1      	str	r1, [r0, #12]
   80946:	4770      	bx	lr

00080948 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80948:	6943      	ldr	r3, [r0, #20]
   8094a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8094e:	bf1d      	ittte	ne
   80950:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80954:	61c1      	strne	r1, [r0, #28]
	return 0;
   80956:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80958:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8095a:	4770      	bx	lr

0008095c <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8095c:	6943      	ldr	r3, [r0, #20]
   8095e:	f013 0f02 	tst.w	r3, #2
   80962:	d0fb      	beq.n	8095c <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80964:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80968:	61c1      	str	r1, [r0, #28]

	return 0;

}
   8096a:	2000      	movs	r0, #0
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop

00080970 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80970:	6943      	ldr	r3, [r0, #20]
   80972:	f013 0f01 	tst.w	r3, #1
   80976:	d005      	beq.n	80984 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80978:	6983      	ldr	r3, [r0, #24]
   8097a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8097e:	600b      	str	r3, [r1, #0]

	return 0;
   80980:	2000      	movs	r0, #0
   80982:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80984:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80986:	4770      	bx	lr

00080988 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80988:	e7fe      	b.n	80988 <Dummy_Handler>
   8098a:	bf00      	nop

0008098c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8098c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8098e:	4b1f      	ldr	r3, [pc, #124]	; (80a0c <Reset_Handler+0x80>)
   80990:	4a1f      	ldr	r2, [pc, #124]	; (80a10 <Reset_Handler+0x84>)
   80992:	429a      	cmp	r2, r3
   80994:	d003      	beq.n	8099e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80996:	4b1f      	ldr	r3, [pc, #124]	; (80a14 <Reset_Handler+0x88>)
   80998:	4a1c      	ldr	r2, [pc, #112]	; (80a0c <Reset_Handler+0x80>)
   8099a:	429a      	cmp	r2, r3
   8099c:	d304      	bcc.n	809a8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8099e:	4b1e      	ldr	r3, [pc, #120]	; (80a18 <Reset_Handler+0x8c>)
   809a0:	4a1e      	ldr	r2, [pc, #120]	; (80a1c <Reset_Handler+0x90>)
   809a2:	429a      	cmp	r2, r3
   809a4:	d310      	bcc.n	809c8 <Reset_Handler+0x3c>
   809a6:	e01b      	b.n	809e0 <Reset_Handler+0x54>
   809a8:	4918      	ldr	r1, [pc, #96]	; (80a0c <Reset_Handler+0x80>)
   809aa:	1d0a      	adds	r2, r1, #4
   809ac:	4b1c      	ldr	r3, [pc, #112]	; (80a20 <Reset_Handler+0x94>)
   809ae:	1a9b      	subs	r3, r3, r2
   809b0:	f023 0303 	bic.w	r3, r3, #3
   809b4:	3304      	adds	r3, #4
   809b6:	4a16      	ldr	r2, [pc, #88]	; (80a10 <Reset_Handler+0x84>)
   809b8:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   809ba:	f852 0b04 	ldr.w	r0, [r2], #4
   809be:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   809c2:	429a      	cmp	r2, r3
   809c4:	d1f9      	bne.n	809ba <Reset_Handler+0x2e>
   809c6:	e7ea      	b.n	8099e <Reset_Handler+0x12>
   809c8:	4b16      	ldr	r3, [pc, #88]	; (80a24 <Reset_Handler+0x98>)
   809ca:	4a17      	ldr	r2, [pc, #92]	; (80a28 <Reset_Handler+0x9c>)
   809cc:	1ad2      	subs	r2, r2, r3
   809ce:	f022 0203 	bic.w	r2, r2, #3
   809d2:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   809d4:	3b04      	subs	r3, #4
		*pDest++ = 0;
   809d6:	2100      	movs	r1, #0
   809d8:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   809dc:	4293      	cmp	r3, r2
   809de:	d1fb      	bne.n	809d8 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   809e0:	4b12      	ldr	r3, [pc, #72]	; (80a2c <Reset_Handler+0xa0>)
   809e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   809e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   809ea:	4911      	ldr	r1, [pc, #68]	; (80a30 <Reset_Handler+0xa4>)
   809ec:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   809f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   809f6:	d203      	bcs.n	80a00 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809f8:	688b      	ldr	r3, [r1, #8]
   809fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   809fe:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a00:	4b0c      	ldr	r3, [pc, #48]	; (80a34 <Reset_Handler+0xa8>)
   80a02:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a04:	4b0c      	ldr	r3, [pc, #48]	; (80a38 <Reset_Handler+0xac>)
   80a06:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80a08:	e7fe      	b.n	80a08 <Reset_Handler+0x7c>
   80a0a:	bf00      	nop
   80a0c:	20070000 	.word	0x20070000
   80a10:	00081ef8 	.word	0x00081ef8
   80a14:	2007096c 	.word	0x2007096c
   80a18:	20070a60 	.word	0x20070a60
   80a1c:	2007096c 	.word	0x2007096c
   80a20:	2007096f 	.word	0x2007096f
   80a24:	20070970 	.word	0x20070970
   80a28:	20070a63 	.word	0x20070a63
   80a2c:	00080000 	.word	0x00080000
   80a30:	e000ed00 	.word	0xe000ed00
   80a34:	00080fb5 	.word	0x00080fb5
   80a38:	00080de1 	.word	0x00080de1

00080a3c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80a3c:	4b3e      	ldr	r3, [pc, #248]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a40:	f003 0303 	and.w	r3, r3, #3
   80a44:	2b03      	cmp	r3, #3
   80a46:	d85f      	bhi.n	80b08 <SystemCoreClockUpdate+0xcc>
   80a48:	e8df f003 	tbb	[pc, r3]
   80a4c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a50:	4b3a      	ldr	r3, [pc, #232]	; (80b3c <SystemCoreClockUpdate+0x100>)
   80a52:	695b      	ldr	r3, [r3, #20]
   80a54:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a58:	bf14      	ite	ne
   80a5a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a5e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a62:	4b37      	ldr	r3, [pc, #220]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80a64:	601a      	str	r2, [r3, #0]
   80a66:	e04f      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a68:	4b33      	ldr	r3, [pc, #204]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80a6a:	6a1b      	ldr	r3, [r3, #32]
   80a6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a70:	d003      	beq.n	80a7a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a72:	4a34      	ldr	r2, [pc, #208]	; (80b44 <SystemCoreClockUpdate+0x108>)
   80a74:	4b32      	ldr	r3, [pc, #200]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80a76:	601a      	str	r2, [r3, #0]
   80a78:	e046      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a7a:	4a33      	ldr	r2, [pc, #204]	; (80b48 <SystemCoreClockUpdate+0x10c>)
   80a7c:	4b30      	ldr	r3, [pc, #192]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80a7e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a80:	4b2d      	ldr	r3, [pc, #180]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80a82:	6a1b      	ldr	r3, [r3, #32]
   80a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a88:	2b10      	cmp	r3, #16
   80a8a:	d002      	beq.n	80a92 <SystemCoreClockUpdate+0x56>
   80a8c:	2b20      	cmp	r3, #32
   80a8e:	d004      	beq.n	80a9a <SystemCoreClockUpdate+0x5e>
   80a90:	e03a      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a92:	4a2e      	ldr	r2, [pc, #184]	; (80b4c <SystemCoreClockUpdate+0x110>)
   80a94:	4b2a      	ldr	r3, [pc, #168]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80a96:	601a      	str	r2, [r3, #0]
				break;
   80a98:	e036      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a9a:	4a2a      	ldr	r2, [pc, #168]	; (80b44 <SystemCoreClockUpdate+0x108>)
   80a9c:	4b28      	ldr	r3, [pc, #160]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80a9e:	601a      	str	r2, [r3, #0]
				break;
   80aa0:	e032      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80aa2:	4b25      	ldr	r3, [pc, #148]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80aa4:	6a1b      	ldr	r3, [r3, #32]
   80aa6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80aaa:	d003      	beq.n	80ab4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80aac:	4a25      	ldr	r2, [pc, #148]	; (80b44 <SystemCoreClockUpdate+0x108>)
   80aae:	4b24      	ldr	r3, [pc, #144]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80ab0:	601a      	str	r2, [r3, #0]
   80ab2:	e012      	b.n	80ada <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ab4:	4a24      	ldr	r2, [pc, #144]	; (80b48 <SystemCoreClockUpdate+0x10c>)
   80ab6:	4b22      	ldr	r3, [pc, #136]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80ab8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80aba:	4b1f      	ldr	r3, [pc, #124]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80abc:	6a1b      	ldr	r3, [r3, #32]
   80abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ac2:	2b10      	cmp	r3, #16
   80ac4:	d002      	beq.n	80acc <SystemCoreClockUpdate+0x90>
   80ac6:	2b20      	cmp	r3, #32
   80ac8:	d004      	beq.n	80ad4 <SystemCoreClockUpdate+0x98>
   80aca:	e006      	b.n	80ada <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80acc:	4a1f      	ldr	r2, [pc, #124]	; (80b4c <SystemCoreClockUpdate+0x110>)
   80ace:	4b1c      	ldr	r3, [pc, #112]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80ad0:	601a      	str	r2, [r3, #0]
				break;
   80ad2:	e002      	b.n	80ada <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ad4:	4a1b      	ldr	r2, [pc, #108]	; (80b44 <SystemCoreClockUpdate+0x108>)
   80ad6:	4b1a      	ldr	r3, [pc, #104]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80ad8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80ada:	4b17      	ldr	r3, [pc, #92]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ade:	f003 0303 	and.w	r3, r3, #3
   80ae2:	2b02      	cmp	r3, #2
   80ae4:	d10d      	bne.n	80b02 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ae6:	4a14      	ldr	r2, [pc, #80]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80ae8:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80aea:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80aec:	4814      	ldr	r0, [pc, #80]	; (80b40 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80aee:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80af2:	6803      	ldr	r3, [r0, #0]
   80af4:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80af8:	b2d2      	uxtb	r2, r2
   80afa:	fbb3 f3f2 	udiv	r3, r3, r2
   80afe:	6003      	str	r3, [r0, #0]
   80b00:	e002      	b.n	80b08 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b02:	4a13      	ldr	r2, [pc, #76]	; (80b50 <SystemCoreClockUpdate+0x114>)
   80b04:	4b0e      	ldr	r3, [pc, #56]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80b06:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b08:	4b0b      	ldr	r3, [pc, #44]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b10:	2b70      	cmp	r3, #112	; 0x70
   80b12:	d107      	bne.n	80b24 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80b14:	4a0a      	ldr	r2, [pc, #40]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80b16:	6813      	ldr	r3, [r2, #0]
   80b18:	490e      	ldr	r1, [pc, #56]	; (80b54 <SystemCoreClockUpdate+0x118>)
   80b1a:	fba1 1303 	umull	r1, r3, r1, r3
   80b1e:	085b      	lsrs	r3, r3, #1
   80b20:	6013      	str	r3, [r2, #0]
   80b22:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80b24:	4b04      	ldr	r3, [pc, #16]	; (80b38 <SystemCoreClockUpdate+0xfc>)
   80b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b28:	4905      	ldr	r1, [pc, #20]	; (80b40 <SystemCoreClockUpdate+0x104>)
   80b2a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80b2e:	680b      	ldr	r3, [r1, #0]
   80b30:	40d3      	lsrs	r3, r2
   80b32:	600b      	str	r3, [r1, #0]
   80b34:	4770      	bx	lr
   80b36:	bf00      	nop
   80b38:	400e0600 	.word	0x400e0600
   80b3c:	400e1a10 	.word	0x400e1a10
   80b40:	2007012c 	.word	0x2007012c
   80b44:	00b71b00 	.word	0x00b71b00
   80b48:	003d0900 	.word	0x003d0900
   80b4c:	007a1200 	.word	0x007a1200
   80b50:	0e4e1c00 	.word	0x0e4e1c00
   80b54:	aaaaaaab 	.word	0xaaaaaaab

00080b58 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b58:	4b09      	ldr	r3, [pc, #36]	; (80b80 <_sbrk+0x28>)
   80b5a:	681b      	ldr	r3, [r3, #0]
   80b5c:	b913      	cbnz	r3, 80b64 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80b5e:	4a09      	ldr	r2, [pc, #36]	; (80b84 <_sbrk+0x2c>)
   80b60:	4b07      	ldr	r3, [pc, #28]	; (80b80 <_sbrk+0x28>)
   80b62:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80b64:	4b06      	ldr	r3, [pc, #24]	; (80b80 <_sbrk+0x28>)
   80b66:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80b68:	181a      	adds	r2, r3, r0
   80b6a:	4907      	ldr	r1, [pc, #28]	; (80b88 <_sbrk+0x30>)
   80b6c:	4291      	cmp	r1, r2
   80b6e:	db04      	blt.n	80b7a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80b70:	4610      	mov	r0, r2
   80b72:	4a03      	ldr	r2, [pc, #12]	; (80b80 <_sbrk+0x28>)
   80b74:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80b76:	4618      	mov	r0, r3
   80b78:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80b7a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80b7e:	4770      	bx	lr
   80b80:	200709fc 	.word	0x200709fc
   80b84:	20072a60 	.word	0x20072a60
   80b88:	20087ffc 	.word	0x20087ffc

00080b8c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80b8c:	f04f 30ff 	mov.w	r0, #4294967295
   80b90:	4770      	bx	lr
   80b92:	bf00      	nop

00080b94 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b94:	2000      	movs	r0, #0
   80b96:	4770      	bx	lr

00080b98 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b9a:	b083      	sub	sp, #12
   80b9c:	4604      	mov	r4, r0
   80b9e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80ba0:	2300      	movs	r3, #0
   80ba2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80ba4:	4b1f      	ldr	r3, [pc, #124]	; (80c24 <usart_serial_getchar+0x8c>)
   80ba6:	4298      	cmp	r0, r3
   80ba8:	d107      	bne.n	80bba <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80baa:	461f      	mov	r7, r3
   80bac:	4e1e      	ldr	r6, [pc, #120]	; (80c28 <usart_serial_getchar+0x90>)
   80bae:	4638      	mov	r0, r7
   80bb0:	4629      	mov	r1, r5
   80bb2:	47b0      	blx	r6
   80bb4:	2800      	cmp	r0, #0
   80bb6:	d1fa      	bne.n	80bae <usart_serial_getchar+0x16>
   80bb8:	e019      	b.n	80bee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bba:	4b1c      	ldr	r3, [pc, #112]	; (80c2c <usart_serial_getchar+0x94>)
   80bbc:	4298      	cmp	r0, r3
   80bbe:	d109      	bne.n	80bd4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80bc0:	461f      	mov	r7, r3
   80bc2:	4e1b      	ldr	r6, [pc, #108]	; (80c30 <usart_serial_getchar+0x98>)
   80bc4:	4638      	mov	r0, r7
   80bc6:	a901      	add	r1, sp, #4
   80bc8:	47b0      	blx	r6
   80bca:	2800      	cmp	r0, #0
   80bcc:	d1fa      	bne.n	80bc4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80bce:	9b01      	ldr	r3, [sp, #4]
   80bd0:	702b      	strb	r3, [r5, #0]
   80bd2:	e019      	b.n	80c08 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80bd4:	4b17      	ldr	r3, [pc, #92]	; (80c34 <usart_serial_getchar+0x9c>)
   80bd6:	4298      	cmp	r0, r3
   80bd8:	d109      	bne.n	80bee <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80bda:	461e      	mov	r6, r3
   80bdc:	4c14      	ldr	r4, [pc, #80]	; (80c30 <usart_serial_getchar+0x98>)
   80bde:	4630      	mov	r0, r6
   80be0:	a901      	add	r1, sp, #4
   80be2:	47a0      	blx	r4
   80be4:	2800      	cmp	r0, #0
   80be6:	d1fa      	bne.n	80bde <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80be8:	9b01      	ldr	r3, [sp, #4]
   80bea:	702b      	strb	r3, [r5, #0]
   80bec:	e018      	b.n	80c20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bee:	4b12      	ldr	r3, [pc, #72]	; (80c38 <usart_serial_getchar+0xa0>)
   80bf0:	429c      	cmp	r4, r3
   80bf2:	d109      	bne.n	80c08 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80bf4:	461e      	mov	r6, r3
   80bf6:	4c0e      	ldr	r4, [pc, #56]	; (80c30 <usart_serial_getchar+0x98>)
   80bf8:	4630      	mov	r0, r6
   80bfa:	a901      	add	r1, sp, #4
   80bfc:	47a0      	blx	r4
   80bfe:	2800      	cmp	r0, #0
   80c00:	d1fa      	bne.n	80bf8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80c02:	9b01      	ldr	r3, [sp, #4]
   80c04:	702b      	strb	r3, [r5, #0]
   80c06:	e00b      	b.n	80c20 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c08:	4b0c      	ldr	r3, [pc, #48]	; (80c3c <usart_serial_getchar+0xa4>)
   80c0a:	429c      	cmp	r4, r3
   80c0c:	d108      	bne.n	80c20 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80c0e:	461e      	mov	r6, r3
   80c10:	4c07      	ldr	r4, [pc, #28]	; (80c30 <usart_serial_getchar+0x98>)
   80c12:	4630      	mov	r0, r6
   80c14:	a901      	add	r1, sp, #4
   80c16:	47a0      	blx	r4
   80c18:	2800      	cmp	r0, #0
   80c1a:	d1fa      	bne.n	80c12 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80c1c:	9b01      	ldr	r3, [sp, #4]
   80c1e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80c20:	b003      	add	sp, #12
   80c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c24:	400e0800 	.word	0x400e0800
   80c28:	00080849 	.word	0x00080849
   80c2c:	40098000 	.word	0x40098000
   80c30:	00080971 	.word	0x00080971
   80c34:	4009c000 	.word	0x4009c000
   80c38:	400a0000 	.word	0x400a0000
   80c3c:	400a4000 	.word	0x400a4000

00080c40 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80c40:	b570      	push	{r4, r5, r6, lr}
   80c42:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c44:	4b1e      	ldr	r3, [pc, #120]	; (80cc0 <usart_serial_putchar+0x80>)
   80c46:	4298      	cmp	r0, r3
   80c48:	d108      	bne.n	80c5c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80c4a:	461e      	mov	r6, r3
   80c4c:	4d1d      	ldr	r5, [pc, #116]	; (80cc4 <usart_serial_putchar+0x84>)
   80c4e:	4630      	mov	r0, r6
   80c50:	4621      	mov	r1, r4
   80c52:	47a8      	blx	r5
   80c54:	2800      	cmp	r0, #0
   80c56:	d1fa      	bne.n	80c4e <usart_serial_putchar+0xe>
		return 1;
   80c58:	2001      	movs	r0, #1
   80c5a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c5c:	4b1a      	ldr	r3, [pc, #104]	; (80cc8 <usart_serial_putchar+0x88>)
   80c5e:	4298      	cmp	r0, r3
   80c60:	d108      	bne.n	80c74 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80c62:	461e      	mov	r6, r3
   80c64:	4d19      	ldr	r5, [pc, #100]	; (80ccc <usart_serial_putchar+0x8c>)
   80c66:	4630      	mov	r0, r6
   80c68:	4621      	mov	r1, r4
   80c6a:	47a8      	blx	r5
   80c6c:	2800      	cmp	r0, #0
   80c6e:	d1fa      	bne.n	80c66 <usart_serial_putchar+0x26>
		return 1;
   80c70:	2001      	movs	r0, #1
   80c72:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c74:	4b16      	ldr	r3, [pc, #88]	; (80cd0 <usart_serial_putchar+0x90>)
   80c76:	4298      	cmp	r0, r3
   80c78:	d108      	bne.n	80c8c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80c7a:	461e      	mov	r6, r3
   80c7c:	4d13      	ldr	r5, [pc, #76]	; (80ccc <usart_serial_putchar+0x8c>)
   80c7e:	4630      	mov	r0, r6
   80c80:	4621      	mov	r1, r4
   80c82:	47a8      	blx	r5
   80c84:	2800      	cmp	r0, #0
   80c86:	d1fa      	bne.n	80c7e <usart_serial_putchar+0x3e>
		return 1;
   80c88:	2001      	movs	r0, #1
   80c8a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c8c:	4b11      	ldr	r3, [pc, #68]	; (80cd4 <usart_serial_putchar+0x94>)
   80c8e:	4298      	cmp	r0, r3
   80c90:	d108      	bne.n	80ca4 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80c92:	461e      	mov	r6, r3
   80c94:	4d0d      	ldr	r5, [pc, #52]	; (80ccc <usart_serial_putchar+0x8c>)
   80c96:	4630      	mov	r0, r6
   80c98:	4621      	mov	r1, r4
   80c9a:	47a8      	blx	r5
   80c9c:	2800      	cmp	r0, #0
   80c9e:	d1fa      	bne.n	80c96 <usart_serial_putchar+0x56>
		return 1;
   80ca0:	2001      	movs	r0, #1
   80ca2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ca4:	4b0c      	ldr	r3, [pc, #48]	; (80cd8 <usart_serial_putchar+0x98>)
   80ca6:	4298      	cmp	r0, r3
   80ca8:	d108      	bne.n	80cbc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80caa:	461e      	mov	r6, r3
   80cac:	4d07      	ldr	r5, [pc, #28]	; (80ccc <usart_serial_putchar+0x8c>)
   80cae:	4630      	mov	r0, r6
   80cb0:	4621      	mov	r1, r4
   80cb2:	47a8      	blx	r5
   80cb4:	2800      	cmp	r0, #0
   80cb6:	d1fa      	bne.n	80cae <usart_serial_putchar+0x6e>
		return 1;
   80cb8:	2001      	movs	r0, #1
   80cba:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80cbc:	2000      	movs	r0, #0
}
   80cbe:	bd70      	pop	{r4, r5, r6, pc}
   80cc0:	400e0800 	.word	0x400e0800
   80cc4:	00080839 	.word	0x00080839
   80cc8:	40098000 	.word	0x40098000
   80ccc:	00080949 	.word	0x00080949
   80cd0:	4009c000 	.word	0x4009c000
   80cd4:	400a0000 	.word	0x400a0000
   80cd8:	400a4000 	.word	0x400a4000

00080cdc <ADC_Handler>:
	
}


void ADC_Handler(void)
{
   80cdc:	b508      	push	{r3, lr}
	uint32_t i;
	uint32_t ul_temp;
	uint8_t uc_ch_num;

	/* Without PDC transfer */
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==
   80cde:	4807      	ldr	r0, [pc, #28]	; (80cfc <ADC_Handler+0x20>)
   80ce0:	4b07      	ldr	r3, [pc, #28]	; (80d00 <ADC_Handler+0x24>)
   80ce2:	4798      	blx	r3
   80ce4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80ce8:	d006      	beq.n	80cf8 <ADC_Handler+0x1c>
			ADC_ISR_DRDY) {
		ul_temp = adc_get_latest_value(ADC);
   80cea:	4804      	ldr	r0, [pc, #16]	; (80cfc <ADC_Handler+0x20>)
   80cec:	4b05      	ldr	r3, [pc, #20]	; (80d04 <ADC_Handler+0x28>)
   80cee:	4798      	blx	r3
	//	printf("%04d mv.    ",(int)(ul_temp));
				adc_value =
						ul_temp &
   80cf0:	f3c0 000b 	ubfx	r0, r0, #0, #12
	/* Without PDC transfer */
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==
			ADC_ISR_DRDY) {
		ul_temp = adc_get_latest_value(ADC);
	//	printf("%04d mv.    ",(int)(ul_temp));
				adc_value =
   80cf4:	4b04      	ldr	r3, [pc, #16]	; (80d08 <ADC_Handler+0x2c>)
   80cf6:	6018      	str	r0, [r3, #0]
   80cf8:	bd08      	pop	{r3, pc}
   80cfa:	bf00      	nop
   80cfc:	400c0000 	.word	0x400c0000
   80d00:	0008033d 	.word	0x0008033d
   80d04:	00080335 	.word	0x00080335
   80d08:	20070a08 	.word	0x20070a08

00080d0c <TC3_Handler>:
		}
	}
}

void TC3_Handler(void)
{
   80d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ul_status;
	uint32_t ul_byte_total = 0;

	/* Read TC0 Status. */
	ul_status = tc_get_status(TC1, 0);
   80d0e:	4829      	ldr	r0, [pc, #164]	; (80db4 <TC3_Handler+0xa8>)
   80d10:	2100      	movs	r1, #0
   80d12:	4b29      	ldr	r3, [pc, #164]	; (80db8 <TC3_Handler+0xac>)
   80d14:	4798      	blx	r3

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS)  {
   80d16:	f010 0f10 	tst.w	r0, #16
   80d1a:	d046      	beq.n	80daa <TC3_Handler+0x9e>
}

static void sendDSM2() {

	
	if (Mode == SEND_DSM2) {
   80d1c:	4b27      	ldr	r3, [pc, #156]	; (80dbc <TC3_Handler+0xb0>)
   80d1e:	781d      	ldrb	r5, [r3, #0]
   80d20:	b91d      	cbnz	r5, 80d2a <TC3_Handler+0x1e>
		DSM2_Data.Header[0] = CODE_NORMAL_SENDING;
   80d22:	2218      	movs	r2, #24
   80d24:	4b26      	ldr	r3, [pc, #152]	; (80dc0 <TC3_Handler+0xb4>)
   80d26:	701a      	strb	r2, [r3, #0]
   80d28:	e005      	b.n	80d36 <TC3_Handler+0x2a>
	}
	else if (Mode == BINDING) {
   80d2a:	b26b      	sxtb	r3, r5
   80d2c:	2b01      	cmp	r3, #1
   80d2e:	d102      	bne.n	80d36 <TC3_Handler+0x2a>
		DSM2_Data.Header[0] = CODE_BINDING;	
   80d30:	2298      	movs	r2, #152	; 0x98
   80d32:	4b23      	ldr	r3, [pc, #140]	; (80dc0 <TC3_Handler+0xb4>)
   80d34:	701a      	strb	r2, [r3, #0]
	}
	DSM2_Data.Header[1] = 0x00;              		// second header byte
   80d36:	4822      	ldr	r0, [pc, #136]	; (80dc0 <TC3_Handler+0xb4>)
   80d38:	2100      	movs	r1, #0
   80d3a:	7041      	strb	r1, [r0, #1]
	// alle 6 Channel Werte holen
	for (uint8_t i = 0; i < DSM2_CHANNELS; i++) {	// get receiver data
		uint16_t temp = (adc_value * CENTER_DSM2 * 2) / 0xFFF;
   80d3c:	4e21      	ldr	r6, [pc, #132]	; (80dc4 <TC3_Handler+0xb8>)
   80d3e:	4c22      	ldr	r4, [pc, #136]	; (80dc8 <TC3_Handler+0xbc>)
   80d40:	6833      	ldr	r3, [r6, #0]
   80d42:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
   80d46:	005b      	lsls	r3, r3, #1
   80d48:	fba4 7203 	umull	r7, r2, r4, r3
   80d4c:	1a9b      	subs	r3, r3, r2
   80d4e:	eb02 0353 	add.w	r3, r2, r3, lsr #1
   80d52:	0adb      	lsrs	r3, r3, #11
		DSM2_Data.Channel[i * 2]   = (uint8_t)(i << 2) | (temp >> 8);
   80d54:	f3c3 2207 	ubfx	r2, r3, #8, #8
   80d58:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
   80d5c:	7082      	strb	r2, [r0, #2]
		DSM2_Data.Channel[i * 2 + 1] = temp;
   80d5e:	70c3      	strb	r3, [r0, #3]
   80d60:	3101      	adds	r1, #1
   80d62:	3002      	adds	r0, #2
	else if (Mode == BINDING) {
		DSM2_Data.Header[0] = CODE_BINDING;	
	}
	DSM2_Data.Header[1] = 0x00;              		// second header byte
	// alle 6 Channel Werte holen
	for (uint8_t i = 0; i < DSM2_CHANNELS; i++) {	// get receiver data
   80d64:	2906      	cmp	r1, #6
   80d66:	d1eb      	bne.n	80d40 <TC3_Handler+0x34>
		uint16_t temp = (adc_value * CENTER_DSM2 * 2) / 0xFFF;
		DSM2_Data.Channel[i * 2]   = (uint8_t)(i << 2) | (temp >> 8);
		DSM2_Data.Channel[i * 2 + 1] = temp;
	}
	
	if (Mode == BINDING) {
   80d68:	b26d      	sxtb	r5, r5
   80d6a:	2d01      	cmp	r5, #1
   80d6c:	d10b      	bne.n	80d86 <TC3_Handler+0x7a>
   80d6e:	4d17      	ldr	r5, [pc, #92]	; (80dcc <TC3_Handler+0xc0>)
   80d70:	1e6c      	subs	r4, r5, #1
   80d72:	350d      	adds	r5, #13
		for (int i = 0; i < 14; i++) {
			usart_putchar(BOARD_USART, DX5eBindData[i]);
   80d74:	4f16      	ldr	r7, [pc, #88]	; (80dd0 <TC3_Handler+0xc4>)
   80d76:	4e17      	ldr	r6, [pc, #92]	; (80dd4 <TC3_Handler+0xc8>)
   80d78:	4638      	mov	r0, r7
   80d7a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d7e:	47b0      	blx	r6
		DSM2_Data.Channel[i * 2]   = (uint8_t)(i << 2) | (temp >> 8);
		DSM2_Data.Channel[i * 2 + 1] = temp;
	}
	
	if (Mode == BINDING) {
		for (int i = 0; i < 14; i++) {
   80d80:	42ac      	cmp	r4, r5
   80d82:	d1f9      	bne.n	80d78 <TC3_Handler+0x6c>
   80d84:	e011      	b.n	80daa <TC3_Handler+0x9e>
			usart_putchar(BOARD_USART, DX5eBindData[i]);
		}
	} else {
		// die 2 HeaderBytes und die Channel-Werte senden
		usart_putchar(BOARD_USART, DSM2_Data.Header[0]);
   80d86:	4f12      	ldr	r7, [pc, #72]	; (80dd0 <TC3_Handler+0xc4>)
   80d88:	4d0d      	ldr	r5, [pc, #52]	; (80dc0 <TC3_Handler+0xb4>)
   80d8a:	4638      	mov	r0, r7
   80d8c:	7829      	ldrb	r1, [r5, #0]
   80d8e:	4e11      	ldr	r6, [pc, #68]	; (80dd4 <TC3_Handler+0xc8>)
   80d90:	47b0      	blx	r6
		usart_putchar(BOARD_USART, DSM2_Data.Header[1]);
   80d92:	462c      	mov	r4, r5
   80d94:	4638      	mov	r0, r7
   80d96:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d9a:	47b0      	blx	r6
   80d9c:	350d      	adds	r5, #13
		for (int i = 0; i < (DSM2_CHANNELS*2); i++) {
			usart_putchar(BOARD_USART, DSM2_Data.Channel[i]);
   80d9e:	4638      	mov	r0, r7
   80da0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80da4:	47b0      	blx	r6
		}
	} else {
		// die 2 HeaderBytes und die Channel-Werte senden
		usart_putchar(BOARD_USART, DSM2_Data.Header[0]);
		usart_putchar(BOARD_USART, DSM2_Data.Header[1]);
		for (int i = 0; i < (DSM2_CHANNELS*2); i++) {
   80da6:	42ac      	cmp	r4, r5
   80da8:	d1f9      	bne.n	80d9e <TC3_Handler+0x92>
	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS)  {
		sendDSM2();
	}
	// after sending the DSM packet there is enough time to start AD Conversion
	adc_start(ADC);
   80daa:	480b      	ldr	r0, [pc, #44]	; (80dd8 <TC3_Handler+0xcc>)
   80dac:	4b0b      	ldr	r3, [pc, #44]	; (80ddc <TC3_Handler+0xd0>)
   80dae:	4798      	blx	r3
   80db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80db2:	bf00      	nop
   80db4:	40084000 	.word	0x40084000
   80db8:	00080785 	.word	0x00080785
   80dbc:	20070a04 	.word	0x20070a04
   80dc0:	20070a4c 	.word	0x20070a4c
   80dc4:	20070a08 	.word	0x20070a08
   80dc8:	00100101 	.word	0x00100101
   80dcc:	00081ebc 	.word	0x00081ebc
   80dd0:	40098000 	.word	0x40098000
   80dd4:	0008095d 	.word	0x0008095d
   80dd8:	400c0000 	.word	0x400c0000
   80ddc:	00080325 	.word	0x00080325

00080de0 <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80de0:	b580      	push	{r7, lr}
   80de2:	b08a      	sub	sp, #40	; 0x28

	/* Initialize the SAM system. */
	sysclk_init();
   80de4:	4b4f      	ldr	r3, [pc, #316]	; (80f24 <main+0x144>)
   80de6:	4798      	blx	r3
	board_init();
   80de8:	4b4f      	ldr	r3, [pc, #316]	; (80f28 <main+0x148>)
   80dea:	4798      	blx	r3
   80dec:	2008      	movs	r0, #8
   80dee:	4e4f      	ldr	r6, [pc, #316]	; (80f2c <main+0x14c>)
   80df0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80df2:	4c4f      	ldr	r4, [pc, #316]	; (80f30 <main+0x150>)
   80df4:	4b4f      	ldr	r3, [pc, #316]	; (80f34 <main+0x154>)
   80df6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80df8:	4a4f      	ldr	r2, [pc, #316]	; (80f38 <main+0x158>)
   80dfa:	4b50      	ldr	r3, [pc, #320]	; (80f3c <main+0x15c>)
   80dfc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80dfe:	4a50      	ldr	r2, [pc, #320]	; (80f40 <main+0x160>)
   80e00:	4b50      	ldr	r3, [pc, #320]	; (80f44 <main+0x164>)
   80e02:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80e04:	4f50      	ldr	r7, [pc, #320]	; (80f48 <main+0x168>)
   80e06:	9704      	str	r7, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
   80e08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80e0c:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
   80e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80e12:	9306      	str	r3, [sp, #24]
   80e14:	2008      	movs	r0, #8
   80e16:	47b0      	blx	r6
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80e18:	4620      	mov	r0, r4
   80e1a:	a904      	add	r1, sp, #16
   80e1c:	4b4b      	ldr	r3, [pc, #300]	; (80f4c <main+0x16c>)
   80e1e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80e20:	4d4b      	ldr	r5, [pc, #300]	; (80f50 <main+0x170>)
   80e22:	682b      	ldr	r3, [r5, #0]
   80e24:	6898      	ldr	r0, [r3, #8]
   80e26:	2100      	movs	r1, #0
   80e28:	4c4a      	ldr	r4, [pc, #296]	; (80f54 <main+0x174>)
   80e2a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80e2c:	682b      	ldr	r3, [r5, #0]
   80e2e:	6858      	ldr	r0, [r3, #4]
   80e30:	2100      	movs	r1, #0
   80e32:	47a0      	blx	r4
	adc_start(ADC);
}

static void configure_usart(void)
{
	const sam_usart_opt_t usart_console_settings = {
   80e34:	ac04      	add	r4, sp, #16
   80e36:	4d48      	ldr	r5, [pc, #288]	; (80f58 <main+0x178>)
   80e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e3c:	e895 0003 	ldmia.w	r5, {r0, r1}
   80e40:	e884 0003 	stmia.w	r4, {r0, r1}
   80e44:	2011      	movs	r0, #17
   80e46:	47b0      	blx	r6

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   80e48:	4c44      	ldr	r4, [pc, #272]	; (80f5c <main+0x17c>)
   80e4a:	4620      	mov	r0, r4
   80e4c:	a904      	add	r1, sp, #16
   80e4e:	463a      	mov	r2, r7
   80e50:	4b43      	ldr	r3, [pc, #268]	; (80f60 <main+0x180>)
   80e52:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   80e54:	4620      	mov	r0, r4
   80e56:	f04f 31ff 	mov.w	r1, #4294967295
   80e5a:	4b42      	ldr	r3, [pc, #264]	; (80f64 <main+0x184>)
   80e5c:	4798      	blx	r3

	usart_enable_tx(BOARD_USART);
   80e5e:	4620      	mov	r0, r4
   80e60:	4b41      	ldr	r3, [pc, #260]	; (80f68 <main+0x188>)
   80e62:	4798      	blx	r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	static uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
   80e64:	4c41      	ldr	r4, [pc, #260]	; (80f6c <main+0x18c>)
   80e66:	6027      	str	r7, [r4, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC3);
   80e68:	201e      	movs	r0, #30
   80e6a:	47b0      	blx	r6

	/* Configure TC for a 22ms frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   80e6c:	6821      	ldr	r1, [r4, #0]
   80e6e:	9100      	str	r1, [sp, #0]
   80e70:	202d      	movs	r0, #45	; 0x2d
   80e72:	aa03      	add	r2, sp, #12
   80e74:	ab04      	add	r3, sp, #16
   80e76:	4c3e      	ldr	r4, [pc, #248]	; (80f70 <main+0x190>)
   80e78:	47a0      	blx	r4
	tc_init(TC1, 0, ul_tcclks | TC_CMR_CPCTRG);
   80e7a:	4c3e      	ldr	r4, [pc, #248]	; (80f74 <main+0x194>)
   80e7c:	4620      	mov	r0, r4
   80e7e:	2100      	movs	r1, #0
   80e80:	9a04      	ldr	r2, [sp, #16]
   80e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80e86:	4b3c      	ldr	r3, [pc, #240]	; (80f78 <main+0x198>)
   80e88:	4798      	blx	r3
	tc_write_rc(TC1, 0, 57750);
   80e8a:	4620      	mov	r0, r4
   80e8c:	2100      	movs	r1, #0
   80e8e:	f24e 1296 	movw	r2, #57750	; 0xe196
   80e92:	4b3a      	ldr	r3, [pc, #232]	; (80f7c <main+0x19c>)
   80e94:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80e96:	4d3a      	ldr	r5, [pc, #232]	; (80f80 <main+0x1a0>)
   80e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   80e9c:	602b      	str	r3, [r5, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC3);
	tc_enable_interrupt(TC1, 0, TC_IER_CPCS);
   80e9e:	4620      	mov	r0, r4
   80ea0:	2100      	movs	r1, #0
   80ea2:	2210      	movs	r2, #16
   80ea4:	4b37      	ldr	r3, [pc, #220]	; (80f84 <main+0x1a4>)
   80ea6:	4798      	blx	r3
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

static void configure_binding_pin(void) {
	pmc_enable_periph_clk(ID_PIOA);
   80ea8:	200b      	movs	r0, #11
   80eaa:	47b0      	blx	r6
	pio_set_input(PIOA, PIO_PA16, PIO_PULLUP);
   80eac:	4836      	ldr	r0, [pc, #216]	; (80f88 <main+0x1a8>)
   80eae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80eb2:	2201      	movs	r2, #1
   80eb4:	4b35      	ldr	r3, [pc, #212]	; (80f8c <main+0x1ac>)
   80eb6:	4798      	blx	r3

	configure_tc();
	
	configure_binding_pin();
	
	tc_start(TC1, 0);
   80eb8:	4620      	mov	r0, r4
   80eba:	2100      	movs	r1, #0
   80ebc:	4b34      	ldr	r3, [pc, #208]	; (80f90 <main+0x1b0>)
   80ebe:	4798      	blx	r3
 * \brief Start ADC sample.
 * Initialize ADC, set clock and timing, and set ADC to given mode.
 */
static void start_adc(void)
{
	pmc_enable_periph_clk(ID_ADC);
   80ec0:	2025      	movs	r0, #37	; 0x25
   80ec2:	47b0      	blx	r6
	 */
	/* Formula:
	 *     Startup  Time = startup value / ADCClock
	 *     Startup time = 64 / 6.4MHz = 10 us
	 */
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   80ec4:	f504 3470 	add.w	r4, r4, #245760	; 0x3c000
   80ec8:	4620      	mov	r0, r4
   80eca:	4639      	mov	r1, r7
   80ecc:	4a31      	ldr	r2, [pc, #196]	; (80f94 <main+0x1b4>)
   80ece:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   80ed2:	4e31      	ldr	r6, [pc, #196]	; (80f98 <main+0x1b8>)
   80ed4:	47b0      	blx	r6
	 *
	 *     Transfer Time = (1 * 2 + 3) / 6.4MHz = 781 ns
	 *     Tracking Time = (1 + 1) / 6.4MHz = 312 ns
	 *     Settling Time = 3 / 6.4MHz = 469 ns
	 */
	adc_configure_timing(ADC, TRACKING_TIME, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
   80ed6:	4620      	mov	r0, r4
   80ed8:	2101      	movs	r1, #1
   80eda:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80ede:	460b      	mov	r3, r1
   80ee0:	4e2e      	ldr	r6, [pc, #184]	; (80f9c <main+0x1bc>)
   80ee2:	47b0      	blx	r6
	/* Enable channels. */
	adc_enable_channel(ADC, ADC_CHANNEL_POTENTIOMETER);
   80ee4:	4620      	mov	r0, r4
   80ee6:	2101      	movs	r1, #1
   80ee8:	4b2d      	ldr	r3, [pc, #180]	; (80fa0 <main+0x1c0>)
   80eea:	4798      	blx	r3
	/* Enable Data ready interrupt. */
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
   80eec:	4620      	mov	r0, r4
   80eee:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80ef2:	4b2c      	ldr	r3, [pc, #176]	; (80fa4 <main+0x1c4>)
   80ef4:	4798      	blx	r3
   80ef6:	2320      	movs	r3, #32
   80ef8:	606b      	str	r3, [r5, #4]
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);	/* Disable hardware trigger. */	
   80efa:	4620      	mov	r0, r4
   80efc:	2100      	movs	r1, #0
   80efe:	460a      	mov	r2, r1
   80f00:	4b29      	ldr	r3, [pc, #164]	; (80fa8 <main+0x1c8>)
   80f02:	4798      	blx	r3
	start_adc();
	
	
	
	while (1) {
		if (pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA16)) {
   80f04:	4e20      	ldr	r6, [pc, #128]	; (80f88 <main+0x1a8>)
   80f06:	4d29      	ldr	r5, [pc, #164]	; (80fac <main+0x1cc>)
		// if binding pin high, then normal sending
		Mode = SEND_DSM2;

	} else {
		// if low then binding
		Mode = BINDING;
   80f08:	4c29      	ldr	r4, [pc, #164]	; (80fb0 <main+0x1d0>)
	start_adc();
	
	
	
	while (1) {
		if (pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA16)) {
   80f0a:	4630      	mov	r0, r6
   80f0c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80f10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80f14:	47a8      	blx	r5
   80f16:	b110      	cbz	r0, 80f1e <main+0x13e>
		// if binding pin high, then normal sending
		Mode = SEND_DSM2;
   80f18:	2300      	movs	r3, #0
   80f1a:	7023      	strb	r3, [r4, #0]
   80f1c:	e7f5      	b.n	80f0a <main+0x12a>

	} else {
		// if low then binding
		Mode = BINDING;
   80f1e:	2301      	movs	r3, #1
   80f20:	7023      	strb	r3, [r4, #0]
   80f22:	e7f2      	b.n	80f0a <main+0x12a>
   80f24:	00080151 	.word	0x00080151
   80f28:	00080241 	.word	0x00080241
   80f2c:	000806fd 	.word	0x000806fd
   80f30:	400e0800 	.word	0x400e0800
   80f34:	20070a48 	.word	0x20070a48
   80f38:	00080c41 	.word	0x00080c41
   80f3c:	20070a44 	.word	0x20070a44
   80f40:	00080b99 	.word	0x00080b99
   80f44:	20070a40 	.word	0x20070a40
   80f48:	0501bd00 	.word	0x0501bd00
   80f4c:	00080801 	.word	0x00080801
   80f50:	20070558 	.word	0x20070558
   80f54:	000810a1 	.word	0x000810a1
   80f58:	00081ea4 	.word	0x00081ea4
   80f5c:	40098000 	.word	0x40098000
   80f60:	000808e9 	.word	0x000808e9
   80f64:	00080945 	.word	0x00080945
   80f68:	0008093d 	.word	0x0008093d
   80f6c:	20070a00 	.word	0x20070a00
   80f70:	0008078d 	.word	0x0008078d
   80f74:	40084000 	.word	0x40084000
   80f78:	00080751 	.word	0x00080751
   80f7c:	00080775 	.word	0x00080775
   80f80:	e000e100 	.word	0xe000e100
   80f84:	0008077d 	.word	0x0008077d
   80f88:	400e0e00 	.word	0x400e0e00
   80f8c:	00080399 	.word	0x00080399
   80f90:	0008076d 	.word	0x0008076d
   80f94:	0061a800 	.word	0x0061a800
   80f98:	000802c1 	.word	0x000802c1
   80f9c:	00080305 	.word	0x00080305
   80fa0:	0008032d 	.word	0x0008032d
   80fa4:	00080339 	.word	0x00080339
   80fa8:	000802f5 	.word	0x000802f5
   80fac:	00080341 	.word	0x00080341
   80fb0:	20070a04 	.word	0x20070a04

00080fb4 <__libc_init_array>:
   80fb4:	b570      	push	{r4, r5, r6, lr}
   80fb6:	4e0f      	ldr	r6, [pc, #60]	; (80ff4 <__libc_init_array+0x40>)
   80fb8:	4d0f      	ldr	r5, [pc, #60]	; (80ff8 <__libc_init_array+0x44>)
   80fba:	1b76      	subs	r6, r6, r5
   80fbc:	10b6      	asrs	r6, r6, #2
   80fbe:	bf18      	it	ne
   80fc0:	2400      	movne	r4, #0
   80fc2:	d005      	beq.n	80fd0 <__libc_init_array+0x1c>
   80fc4:	3401      	adds	r4, #1
   80fc6:	f855 3b04 	ldr.w	r3, [r5], #4
   80fca:	4798      	blx	r3
   80fcc:	42a6      	cmp	r6, r4
   80fce:	d1f9      	bne.n	80fc4 <__libc_init_array+0x10>
   80fd0:	4e0a      	ldr	r6, [pc, #40]	; (80ffc <__libc_init_array+0x48>)
   80fd2:	4d0b      	ldr	r5, [pc, #44]	; (81000 <__libc_init_array+0x4c>)
   80fd4:	f000 ff7e 	bl	81ed4 <_init>
   80fd8:	1b76      	subs	r6, r6, r5
   80fda:	10b6      	asrs	r6, r6, #2
   80fdc:	bf18      	it	ne
   80fde:	2400      	movne	r4, #0
   80fe0:	d006      	beq.n	80ff0 <__libc_init_array+0x3c>
   80fe2:	3401      	adds	r4, #1
   80fe4:	f855 3b04 	ldr.w	r3, [r5], #4
   80fe8:	4798      	blx	r3
   80fea:	42a6      	cmp	r6, r4
   80fec:	d1f9      	bne.n	80fe2 <__libc_init_array+0x2e>
   80fee:	bd70      	pop	{r4, r5, r6, pc}
   80ff0:	bd70      	pop	{r4, r5, r6, pc}
   80ff2:	bf00      	nop
   80ff4:	00081ee0 	.word	0x00081ee0
   80ff8:	00081ee0 	.word	0x00081ee0
   80ffc:	00081ee8 	.word	0x00081ee8
   81000:	00081ee0 	.word	0x00081ee0

00081004 <memset>:
   81004:	b470      	push	{r4, r5, r6}
   81006:	0784      	lsls	r4, r0, #30
   81008:	d046      	beq.n	81098 <memset+0x94>
   8100a:	1e54      	subs	r4, r2, #1
   8100c:	2a00      	cmp	r2, #0
   8100e:	d041      	beq.n	81094 <memset+0x90>
   81010:	b2cd      	uxtb	r5, r1
   81012:	4603      	mov	r3, r0
   81014:	e002      	b.n	8101c <memset+0x18>
   81016:	1e62      	subs	r2, r4, #1
   81018:	b3e4      	cbz	r4, 81094 <memset+0x90>
   8101a:	4614      	mov	r4, r2
   8101c:	f803 5b01 	strb.w	r5, [r3], #1
   81020:	079a      	lsls	r2, r3, #30
   81022:	d1f8      	bne.n	81016 <memset+0x12>
   81024:	2c03      	cmp	r4, #3
   81026:	d92e      	bls.n	81086 <memset+0x82>
   81028:	b2cd      	uxtb	r5, r1
   8102a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8102e:	2c0f      	cmp	r4, #15
   81030:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81034:	d919      	bls.n	8106a <memset+0x66>
   81036:	4626      	mov	r6, r4
   81038:	f103 0210 	add.w	r2, r3, #16
   8103c:	3e10      	subs	r6, #16
   8103e:	2e0f      	cmp	r6, #15
   81040:	f842 5c10 	str.w	r5, [r2, #-16]
   81044:	f842 5c0c 	str.w	r5, [r2, #-12]
   81048:	f842 5c08 	str.w	r5, [r2, #-8]
   8104c:	f842 5c04 	str.w	r5, [r2, #-4]
   81050:	f102 0210 	add.w	r2, r2, #16
   81054:	d8f2      	bhi.n	8103c <memset+0x38>
   81056:	f1a4 0210 	sub.w	r2, r4, #16
   8105a:	f022 020f 	bic.w	r2, r2, #15
   8105e:	f004 040f 	and.w	r4, r4, #15
   81062:	3210      	adds	r2, #16
   81064:	2c03      	cmp	r4, #3
   81066:	4413      	add	r3, r2
   81068:	d90d      	bls.n	81086 <memset+0x82>
   8106a:	461e      	mov	r6, r3
   8106c:	4622      	mov	r2, r4
   8106e:	3a04      	subs	r2, #4
   81070:	2a03      	cmp	r2, #3
   81072:	f846 5b04 	str.w	r5, [r6], #4
   81076:	d8fa      	bhi.n	8106e <memset+0x6a>
   81078:	1f22      	subs	r2, r4, #4
   8107a:	f022 0203 	bic.w	r2, r2, #3
   8107e:	3204      	adds	r2, #4
   81080:	4413      	add	r3, r2
   81082:	f004 0403 	and.w	r4, r4, #3
   81086:	b12c      	cbz	r4, 81094 <memset+0x90>
   81088:	b2c9      	uxtb	r1, r1
   8108a:	441c      	add	r4, r3
   8108c:	f803 1b01 	strb.w	r1, [r3], #1
   81090:	42a3      	cmp	r3, r4
   81092:	d1fb      	bne.n	8108c <memset+0x88>
   81094:	bc70      	pop	{r4, r5, r6}
   81096:	4770      	bx	lr
   81098:	4614      	mov	r4, r2
   8109a:	4603      	mov	r3, r0
   8109c:	e7c2      	b.n	81024 <memset+0x20>
   8109e:	bf00      	nop

000810a0 <setbuf>:
   810a0:	2900      	cmp	r1, #0
   810a2:	bf0c      	ite	eq
   810a4:	2202      	moveq	r2, #2
   810a6:	2200      	movne	r2, #0
   810a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810ac:	f000 b800 	b.w	810b0 <setvbuf>

000810b0 <setvbuf>:
   810b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810b4:	4d3a      	ldr	r5, [pc, #232]	; (811a0 <setvbuf+0xf0>)
   810b6:	4604      	mov	r4, r0
   810b8:	682e      	ldr	r6, [r5, #0]
   810ba:	4690      	mov	r8, r2
   810bc:	460d      	mov	r5, r1
   810be:	461f      	mov	r7, r3
   810c0:	b116      	cbz	r6, 810c8 <setvbuf+0x18>
   810c2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   810c4:	2b00      	cmp	r3, #0
   810c6:	d03c      	beq.n	81142 <setvbuf+0x92>
   810c8:	f1b8 0f02 	cmp.w	r8, #2
   810cc:	d82f      	bhi.n	8112e <setvbuf+0x7e>
   810ce:	2f00      	cmp	r7, #0
   810d0:	db2d      	blt.n	8112e <setvbuf+0x7e>
   810d2:	4621      	mov	r1, r4
   810d4:	4630      	mov	r0, r6
   810d6:	f000 f91b 	bl	81310 <_fflush_r>
   810da:	89a1      	ldrh	r1, [r4, #12]
   810dc:	2300      	movs	r3, #0
   810de:	6063      	str	r3, [r4, #4]
   810e0:	61a3      	str	r3, [r4, #24]
   810e2:	060b      	lsls	r3, r1, #24
   810e4:	d427      	bmi.n	81136 <setvbuf+0x86>
   810e6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   810ea:	b289      	uxth	r1, r1
   810ec:	f1b8 0f02 	cmp.w	r8, #2
   810f0:	81a1      	strh	r1, [r4, #12]
   810f2:	d02a      	beq.n	8114a <setvbuf+0x9a>
   810f4:	2d00      	cmp	r5, #0
   810f6:	d036      	beq.n	81166 <setvbuf+0xb6>
   810f8:	f1b8 0f01 	cmp.w	r8, #1
   810fc:	d011      	beq.n	81122 <setvbuf+0x72>
   810fe:	b289      	uxth	r1, r1
   81100:	f001 0008 	and.w	r0, r1, #8
   81104:	4b27      	ldr	r3, [pc, #156]	; (811a4 <setvbuf+0xf4>)
   81106:	b280      	uxth	r0, r0
   81108:	63f3      	str	r3, [r6, #60]	; 0x3c
   8110a:	6025      	str	r5, [r4, #0]
   8110c:	6125      	str	r5, [r4, #16]
   8110e:	6167      	str	r7, [r4, #20]
   81110:	b178      	cbz	r0, 81132 <setvbuf+0x82>
   81112:	f011 0f03 	tst.w	r1, #3
   81116:	bf18      	it	ne
   81118:	2700      	movne	r7, #0
   8111a:	2000      	movs	r0, #0
   8111c:	60a7      	str	r7, [r4, #8]
   8111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81122:	f041 0101 	orr.w	r1, r1, #1
   81126:	427b      	negs	r3, r7
   81128:	81a1      	strh	r1, [r4, #12]
   8112a:	61a3      	str	r3, [r4, #24]
   8112c:	e7e7      	b.n	810fe <setvbuf+0x4e>
   8112e:	f04f 30ff 	mov.w	r0, #4294967295
   81132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81136:	6921      	ldr	r1, [r4, #16]
   81138:	4630      	mov	r0, r6
   8113a:	f000 f9eb 	bl	81514 <_free_r>
   8113e:	89a1      	ldrh	r1, [r4, #12]
   81140:	e7d1      	b.n	810e6 <setvbuf+0x36>
   81142:	4630      	mov	r0, r6
   81144:	f000 f978 	bl	81438 <__sinit>
   81148:	e7be      	b.n	810c8 <setvbuf+0x18>
   8114a:	2000      	movs	r0, #0
   8114c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81150:	f041 0102 	orr.w	r1, r1, #2
   81154:	2500      	movs	r5, #0
   81156:	2201      	movs	r2, #1
   81158:	81a1      	strh	r1, [r4, #12]
   8115a:	60a5      	str	r5, [r4, #8]
   8115c:	6023      	str	r3, [r4, #0]
   8115e:	6123      	str	r3, [r4, #16]
   81160:	6162      	str	r2, [r4, #20]
   81162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81166:	2f00      	cmp	r7, #0
   81168:	bf08      	it	eq
   8116a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8116e:	4638      	mov	r0, r7
   81170:	f000 fad0 	bl	81714 <malloc>
   81174:	4605      	mov	r5, r0
   81176:	b128      	cbz	r0, 81184 <setvbuf+0xd4>
   81178:	89a1      	ldrh	r1, [r4, #12]
   8117a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   8117e:	b289      	uxth	r1, r1
   81180:	81a1      	strh	r1, [r4, #12]
   81182:	e7b9      	b.n	810f8 <setvbuf+0x48>
   81184:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81188:	f000 fac4 	bl	81714 <malloc>
   8118c:	4605      	mov	r5, r0
   8118e:	b918      	cbnz	r0, 81198 <setvbuf+0xe8>
   81190:	89a1      	ldrh	r1, [r4, #12]
   81192:	f04f 30ff 	mov.w	r0, #4294967295
   81196:	e7d9      	b.n	8114c <setvbuf+0x9c>
   81198:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8119c:	e7ec      	b.n	81178 <setvbuf+0xc8>
   8119e:	bf00      	nop
   811a0:	20070558 	.word	0x20070558
   811a4:	0008133d 	.word	0x0008133d

000811a8 <register_fini>:
   811a8:	4b02      	ldr	r3, [pc, #8]	; (811b4 <register_fini+0xc>)
   811aa:	b113      	cbz	r3, 811b2 <register_fini+0xa>
   811ac:	4802      	ldr	r0, [pc, #8]	; (811b8 <register_fini+0x10>)
   811ae:	f000 b805 	b.w	811bc <atexit>
   811b2:	4770      	bx	lr
   811b4:	00000000 	.word	0x00000000
   811b8:	0008144d 	.word	0x0008144d

000811bc <atexit>:
   811bc:	4601      	mov	r1, r0
   811be:	2000      	movs	r0, #0
   811c0:	4602      	mov	r2, r0
   811c2:	4603      	mov	r3, r0
   811c4:	f000 bda0 	b.w	81d08 <__register_exitproc>

000811c8 <__sflush_r>:
   811c8:	898b      	ldrh	r3, [r1, #12]
   811ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811ce:	b29a      	uxth	r2, r3
   811d0:	460d      	mov	r5, r1
   811d2:	0711      	lsls	r1, r2, #28
   811d4:	4680      	mov	r8, r0
   811d6:	d43c      	bmi.n	81252 <__sflush_r+0x8a>
   811d8:	686a      	ldr	r2, [r5, #4]
   811da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   811de:	2a00      	cmp	r2, #0
   811e0:	81ab      	strh	r3, [r5, #12]
   811e2:	dd65      	ble.n	812b0 <__sflush_r+0xe8>
   811e4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   811e6:	2e00      	cmp	r6, #0
   811e8:	d04b      	beq.n	81282 <__sflush_r+0xba>
   811ea:	b29b      	uxth	r3, r3
   811ec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   811f0:	2100      	movs	r1, #0
   811f2:	b292      	uxth	r2, r2
   811f4:	f8d8 4000 	ldr.w	r4, [r8]
   811f8:	f8c8 1000 	str.w	r1, [r8]
   811fc:	2a00      	cmp	r2, #0
   811fe:	d05b      	beq.n	812b8 <__sflush_r+0xf0>
   81200:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81202:	075f      	lsls	r7, r3, #29
   81204:	d505      	bpl.n	81212 <__sflush_r+0x4a>
   81206:	6869      	ldr	r1, [r5, #4]
   81208:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8120a:	1a52      	subs	r2, r2, r1
   8120c:	b10b      	cbz	r3, 81212 <__sflush_r+0x4a>
   8120e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81210:	1ad2      	subs	r2, r2, r3
   81212:	4640      	mov	r0, r8
   81214:	69e9      	ldr	r1, [r5, #28]
   81216:	2300      	movs	r3, #0
   81218:	47b0      	blx	r6
   8121a:	1c46      	adds	r6, r0, #1
   8121c:	d056      	beq.n	812cc <__sflush_r+0x104>
   8121e:	89ab      	ldrh	r3, [r5, #12]
   81220:	692a      	ldr	r2, [r5, #16]
   81222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81226:	b29b      	uxth	r3, r3
   81228:	2100      	movs	r1, #0
   8122a:	602a      	str	r2, [r5, #0]
   8122c:	04da      	lsls	r2, r3, #19
   8122e:	81ab      	strh	r3, [r5, #12]
   81230:	6069      	str	r1, [r5, #4]
   81232:	d43b      	bmi.n	812ac <__sflush_r+0xe4>
   81234:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81236:	f8c8 4000 	str.w	r4, [r8]
   8123a:	b311      	cbz	r1, 81282 <__sflush_r+0xba>
   8123c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81240:	4299      	cmp	r1, r3
   81242:	d002      	beq.n	8124a <__sflush_r+0x82>
   81244:	4640      	mov	r0, r8
   81246:	f000 f965 	bl	81514 <_free_r>
   8124a:	2000      	movs	r0, #0
   8124c:	6328      	str	r0, [r5, #48]	; 0x30
   8124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81252:	692e      	ldr	r6, [r5, #16]
   81254:	b1ae      	cbz	r6, 81282 <__sflush_r+0xba>
   81256:	0791      	lsls	r1, r2, #30
   81258:	682c      	ldr	r4, [r5, #0]
   8125a:	bf0c      	ite	eq
   8125c:	696b      	ldreq	r3, [r5, #20]
   8125e:	2300      	movne	r3, #0
   81260:	602e      	str	r6, [r5, #0]
   81262:	1ba4      	subs	r4, r4, r6
   81264:	60ab      	str	r3, [r5, #8]
   81266:	e00a      	b.n	8127e <__sflush_r+0xb6>
   81268:	4632      	mov	r2, r6
   8126a:	4623      	mov	r3, r4
   8126c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8126e:	4640      	mov	r0, r8
   81270:	69e9      	ldr	r1, [r5, #28]
   81272:	47b8      	blx	r7
   81274:	2800      	cmp	r0, #0
   81276:	eba4 0400 	sub.w	r4, r4, r0
   8127a:	4406      	add	r6, r0
   8127c:	dd04      	ble.n	81288 <__sflush_r+0xc0>
   8127e:	2c00      	cmp	r4, #0
   81280:	dcf2      	bgt.n	81268 <__sflush_r+0xa0>
   81282:	2000      	movs	r0, #0
   81284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81288:	89ab      	ldrh	r3, [r5, #12]
   8128a:	f04f 30ff 	mov.w	r0, #4294967295
   8128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81292:	81ab      	strh	r3, [r5, #12]
   81294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81298:	89ab      	ldrh	r3, [r5, #12]
   8129a:	692a      	ldr	r2, [r5, #16]
   8129c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   812a0:	b29b      	uxth	r3, r3
   812a2:	81ab      	strh	r3, [r5, #12]
   812a4:	04db      	lsls	r3, r3, #19
   812a6:	6069      	str	r1, [r5, #4]
   812a8:	602a      	str	r2, [r5, #0]
   812aa:	d5c3      	bpl.n	81234 <__sflush_r+0x6c>
   812ac:	6528      	str	r0, [r5, #80]	; 0x50
   812ae:	e7c1      	b.n	81234 <__sflush_r+0x6c>
   812b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   812b2:	2a00      	cmp	r2, #0
   812b4:	dc96      	bgt.n	811e4 <__sflush_r+0x1c>
   812b6:	e7e4      	b.n	81282 <__sflush_r+0xba>
   812b8:	2301      	movs	r3, #1
   812ba:	4640      	mov	r0, r8
   812bc:	69e9      	ldr	r1, [r5, #28]
   812be:	47b0      	blx	r6
   812c0:	1c43      	adds	r3, r0, #1
   812c2:	4602      	mov	r2, r0
   812c4:	d019      	beq.n	812fa <__sflush_r+0x132>
   812c6:	89ab      	ldrh	r3, [r5, #12]
   812c8:	6aae      	ldr	r6, [r5, #40]	; 0x28
   812ca:	e79a      	b.n	81202 <__sflush_r+0x3a>
   812cc:	f8d8 1000 	ldr.w	r1, [r8]
   812d0:	2900      	cmp	r1, #0
   812d2:	d0e1      	beq.n	81298 <__sflush_r+0xd0>
   812d4:	291d      	cmp	r1, #29
   812d6:	d007      	beq.n	812e8 <__sflush_r+0x120>
   812d8:	2916      	cmp	r1, #22
   812da:	d005      	beq.n	812e8 <__sflush_r+0x120>
   812dc:	89ab      	ldrh	r3, [r5, #12]
   812de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   812e2:	81ab      	strh	r3, [r5, #12]
   812e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812e8:	89ab      	ldrh	r3, [r5, #12]
   812ea:	6929      	ldr	r1, [r5, #16]
   812ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   812f0:	2200      	movs	r2, #0
   812f2:	81ab      	strh	r3, [r5, #12]
   812f4:	e885 0006 	stmia.w	r5, {r1, r2}
   812f8:	e79c      	b.n	81234 <__sflush_r+0x6c>
   812fa:	f8d8 3000 	ldr.w	r3, [r8]
   812fe:	2b00      	cmp	r3, #0
   81300:	d0e1      	beq.n	812c6 <__sflush_r+0xfe>
   81302:	2b1d      	cmp	r3, #29
   81304:	d001      	beq.n	8130a <__sflush_r+0x142>
   81306:	2b16      	cmp	r3, #22
   81308:	d1be      	bne.n	81288 <__sflush_r+0xc0>
   8130a:	f8c8 4000 	str.w	r4, [r8]
   8130e:	e7b8      	b.n	81282 <__sflush_r+0xba>

00081310 <_fflush_r>:
   81310:	b510      	push	{r4, lr}
   81312:	4604      	mov	r4, r0
   81314:	b082      	sub	sp, #8
   81316:	b108      	cbz	r0, 8131c <_fflush_r+0xc>
   81318:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8131a:	b153      	cbz	r3, 81332 <_fflush_r+0x22>
   8131c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81320:	b908      	cbnz	r0, 81326 <_fflush_r+0x16>
   81322:	b002      	add	sp, #8
   81324:	bd10      	pop	{r4, pc}
   81326:	4620      	mov	r0, r4
   81328:	b002      	add	sp, #8
   8132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8132e:	f7ff bf4b 	b.w	811c8 <__sflush_r>
   81332:	9101      	str	r1, [sp, #4]
   81334:	f000 f880 	bl	81438 <__sinit>
   81338:	9901      	ldr	r1, [sp, #4]
   8133a:	e7ef      	b.n	8131c <_fflush_r+0xc>

0008133c <_cleanup_r>:
   8133c:	4901      	ldr	r1, [pc, #4]	; (81344 <_cleanup_r+0x8>)
   8133e:	f000 b9c1 	b.w	816c4 <_fwalk_reent>
   81342:	bf00      	nop
   81344:	00081dd1 	.word	0x00081dd1

00081348 <__sinit.part.1>:
   81348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8134c:	4607      	mov	r7, r0
   8134e:	4835      	ldr	r0, [pc, #212]	; (81424 <__sinit.part.1+0xdc>)
   81350:	687d      	ldr	r5, [r7, #4]
   81352:	2400      	movs	r4, #0
   81354:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81358:	2304      	movs	r3, #4
   8135a:	2103      	movs	r1, #3
   8135c:	63f8      	str	r0, [r7, #60]	; 0x3c
   8135e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81362:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81366:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8136a:	b083      	sub	sp, #12
   8136c:	602c      	str	r4, [r5, #0]
   8136e:	606c      	str	r4, [r5, #4]
   81370:	60ac      	str	r4, [r5, #8]
   81372:	666c      	str	r4, [r5, #100]	; 0x64
   81374:	81ec      	strh	r4, [r5, #14]
   81376:	612c      	str	r4, [r5, #16]
   81378:	616c      	str	r4, [r5, #20]
   8137a:	61ac      	str	r4, [r5, #24]
   8137c:	81ab      	strh	r3, [r5, #12]
   8137e:	4621      	mov	r1, r4
   81380:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81384:	2208      	movs	r2, #8
   81386:	f7ff fe3d 	bl	81004 <memset>
   8138a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81428 <__sinit.part.1+0xe0>
   8138e:	68be      	ldr	r6, [r7, #8]
   81390:	f8df a098 	ldr.w	sl, [pc, #152]	; 8142c <__sinit.part.1+0xe4>
   81394:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81430 <__sinit.part.1+0xe8>
   81398:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81434 <__sinit.part.1+0xec>
   8139c:	2301      	movs	r3, #1
   8139e:	2209      	movs	r2, #9
   813a0:	f8c5 b020 	str.w	fp, [r5, #32]
   813a4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   813a8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   813ac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   813b0:	61ed      	str	r5, [r5, #28]
   813b2:	4621      	mov	r1, r4
   813b4:	81f3      	strh	r3, [r6, #14]
   813b6:	81b2      	strh	r2, [r6, #12]
   813b8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   813bc:	6034      	str	r4, [r6, #0]
   813be:	6074      	str	r4, [r6, #4]
   813c0:	60b4      	str	r4, [r6, #8]
   813c2:	6674      	str	r4, [r6, #100]	; 0x64
   813c4:	6134      	str	r4, [r6, #16]
   813c6:	6174      	str	r4, [r6, #20]
   813c8:	61b4      	str	r4, [r6, #24]
   813ca:	2208      	movs	r2, #8
   813cc:	9301      	str	r3, [sp, #4]
   813ce:	f7ff fe19 	bl	81004 <memset>
   813d2:	68fd      	ldr	r5, [r7, #12]
   813d4:	2012      	movs	r0, #18
   813d6:	2202      	movs	r2, #2
   813d8:	61f6      	str	r6, [r6, #28]
   813da:	f8c6 b020 	str.w	fp, [r6, #32]
   813de:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   813e2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   813e6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   813ea:	4621      	mov	r1, r4
   813ec:	81a8      	strh	r0, [r5, #12]
   813ee:	81ea      	strh	r2, [r5, #14]
   813f0:	602c      	str	r4, [r5, #0]
   813f2:	606c      	str	r4, [r5, #4]
   813f4:	60ac      	str	r4, [r5, #8]
   813f6:	666c      	str	r4, [r5, #100]	; 0x64
   813f8:	612c      	str	r4, [r5, #16]
   813fa:	616c      	str	r4, [r5, #20]
   813fc:	61ac      	str	r4, [r5, #24]
   813fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81402:	2208      	movs	r2, #8
   81404:	f7ff fdfe 	bl	81004 <memset>
   81408:	9b01      	ldr	r3, [sp, #4]
   8140a:	61ed      	str	r5, [r5, #28]
   8140c:	f8c5 b020 	str.w	fp, [r5, #32]
   81410:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81414:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81418:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8141c:	63bb      	str	r3, [r7, #56]	; 0x38
   8141e:	b003      	add	sp, #12
   81420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81424:	0008133d 	.word	0x0008133d
   81428:	00081c5d 	.word	0x00081c5d
   8142c:	00081c81 	.word	0x00081c81
   81430:	00081cb9 	.word	0x00081cb9
   81434:	00081cd9 	.word	0x00081cd9

00081438 <__sinit>:
   81438:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8143a:	b103      	cbz	r3, 8143e <__sinit+0x6>
   8143c:	4770      	bx	lr
   8143e:	f7ff bf83 	b.w	81348 <__sinit.part.1>
   81442:	bf00      	nop

00081444 <__sfp_lock_acquire>:
   81444:	4770      	bx	lr
   81446:	bf00      	nop

00081448 <__sfp_lock_release>:
   81448:	4770      	bx	lr
   8144a:	bf00      	nop

0008144c <__libc_fini_array>:
   8144c:	b538      	push	{r3, r4, r5, lr}
   8144e:	4b08      	ldr	r3, [pc, #32]	; (81470 <__libc_fini_array+0x24>)
   81450:	4d08      	ldr	r5, [pc, #32]	; (81474 <__libc_fini_array+0x28>)
   81452:	1aed      	subs	r5, r5, r3
   81454:	10ac      	asrs	r4, r5, #2
   81456:	bf18      	it	ne
   81458:	18ed      	addne	r5, r5, r3
   8145a:	d005      	beq.n	81468 <__libc_fini_array+0x1c>
   8145c:	3c01      	subs	r4, #1
   8145e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81462:	4798      	blx	r3
   81464:	2c00      	cmp	r4, #0
   81466:	d1f9      	bne.n	8145c <__libc_fini_array+0x10>
   81468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8146c:	f000 bd3c 	b.w	81ee8 <_fini>
   81470:	00081ef4 	.word	0x00081ef4
   81474:	00081ef8 	.word	0x00081ef8

00081478 <_malloc_trim_r>:
   81478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8147a:	460c      	mov	r4, r1
   8147c:	4f22      	ldr	r7, [pc, #136]	; (81508 <_malloc_trim_r+0x90>)
   8147e:	4606      	mov	r6, r0
   81480:	f000 fbd6 	bl	81c30 <__malloc_lock>
   81484:	68bb      	ldr	r3, [r7, #8]
   81486:	685d      	ldr	r5, [r3, #4]
   81488:	f025 0503 	bic.w	r5, r5, #3
   8148c:	1b29      	subs	r1, r5, r4
   8148e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   81492:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81496:	f021 010f 	bic.w	r1, r1, #15
   8149a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8149e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   814a2:	db07      	blt.n	814b4 <_malloc_trim_r+0x3c>
   814a4:	4630      	mov	r0, r6
   814a6:	2100      	movs	r1, #0
   814a8:	f000 fbc6 	bl	81c38 <_sbrk_r>
   814ac:	68bb      	ldr	r3, [r7, #8]
   814ae:	442b      	add	r3, r5
   814b0:	4298      	cmp	r0, r3
   814b2:	d004      	beq.n	814be <_malloc_trim_r+0x46>
   814b4:	4630      	mov	r0, r6
   814b6:	f000 fbbd 	bl	81c34 <__malloc_unlock>
   814ba:	2000      	movs	r0, #0
   814bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   814be:	4630      	mov	r0, r6
   814c0:	4261      	negs	r1, r4
   814c2:	f000 fbb9 	bl	81c38 <_sbrk_r>
   814c6:	3001      	adds	r0, #1
   814c8:	d00d      	beq.n	814e6 <_malloc_trim_r+0x6e>
   814ca:	4b10      	ldr	r3, [pc, #64]	; (8150c <_malloc_trim_r+0x94>)
   814cc:	68ba      	ldr	r2, [r7, #8]
   814ce:	6819      	ldr	r1, [r3, #0]
   814d0:	1b2d      	subs	r5, r5, r4
   814d2:	f045 0501 	orr.w	r5, r5, #1
   814d6:	4630      	mov	r0, r6
   814d8:	1b09      	subs	r1, r1, r4
   814da:	6055      	str	r5, [r2, #4]
   814dc:	6019      	str	r1, [r3, #0]
   814de:	f000 fba9 	bl	81c34 <__malloc_unlock>
   814e2:	2001      	movs	r0, #1
   814e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   814e6:	4630      	mov	r0, r6
   814e8:	2100      	movs	r1, #0
   814ea:	f000 fba5 	bl	81c38 <_sbrk_r>
   814ee:	68ba      	ldr	r2, [r7, #8]
   814f0:	1a83      	subs	r3, r0, r2
   814f2:	2b0f      	cmp	r3, #15
   814f4:	ddde      	ble.n	814b4 <_malloc_trim_r+0x3c>
   814f6:	4c06      	ldr	r4, [pc, #24]	; (81510 <_malloc_trim_r+0x98>)
   814f8:	4904      	ldr	r1, [pc, #16]	; (8150c <_malloc_trim_r+0x94>)
   814fa:	6824      	ldr	r4, [r4, #0]
   814fc:	f043 0301 	orr.w	r3, r3, #1
   81500:	1b00      	subs	r0, r0, r4
   81502:	6053      	str	r3, [r2, #4]
   81504:	6008      	str	r0, [r1, #0]
   81506:	e7d5      	b.n	814b4 <_malloc_trim_r+0x3c>
   81508:	2007055c 	.word	0x2007055c
   8150c:	20070a18 	.word	0x20070a18
   81510:	20070968 	.word	0x20070968

00081514 <_free_r>:
   81514:	2900      	cmp	r1, #0
   81516:	d04e      	beq.n	815b6 <_free_r+0xa2>
   81518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8151c:	460c      	mov	r4, r1
   8151e:	4680      	mov	r8, r0
   81520:	f000 fb86 	bl	81c30 <__malloc_lock>
   81524:	f854 7c04 	ldr.w	r7, [r4, #-4]
   81528:	4962      	ldr	r1, [pc, #392]	; (816b4 <_free_r+0x1a0>)
   8152a:	f1a4 0508 	sub.w	r5, r4, #8
   8152e:	f027 0201 	bic.w	r2, r7, #1
   81532:	18ab      	adds	r3, r5, r2
   81534:	688e      	ldr	r6, [r1, #8]
   81536:	6858      	ldr	r0, [r3, #4]
   81538:	429e      	cmp	r6, r3
   8153a:	f020 0003 	bic.w	r0, r0, #3
   8153e:	d05a      	beq.n	815f6 <_free_r+0xe2>
   81540:	07fe      	lsls	r6, r7, #31
   81542:	6058      	str	r0, [r3, #4]
   81544:	d40b      	bmi.n	8155e <_free_r+0x4a>
   81546:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8154a:	f101 0e08 	add.w	lr, r1, #8
   8154e:	1bed      	subs	r5, r5, r7
   81550:	68ac      	ldr	r4, [r5, #8]
   81552:	443a      	add	r2, r7
   81554:	4574      	cmp	r4, lr
   81556:	d067      	beq.n	81628 <_free_r+0x114>
   81558:	68ef      	ldr	r7, [r5, #12]
   8155a:	60e7      	str	r7, [r4, #12]
   8155c:	60bc      	str	r4, [r7, #8]
   8155e:	181c      	adds	r4, r3, r0
   81560:	6864      	ldr	r4, [r4, #4]
   81562:	07e4      	lsls	r4, r4, #31
   81564:	d40c      	bmi.n	81580 <_free_r+0x6c>
   81566:	4f54      	ldr	r7, [pc, #336]	; (816b8 <_free_r+0x1a4>)
   81568:	689c      	ldr	r4, [r3, #8]
   8156a:	4402      	add	r2, r0
   8156c:	42bc      	cmp	r4, r7
   8156e:	d07c      	beq.n	8166a <_free_r+0x156>
   81570:	68d8      	ldr	r0, [r3, #12]
   81572:	f042 0301 	orr.w	r3, r2, #1
   81576:	60e0      	str	r0, [r4, #12]
   81578:	6084      	str	r4, [r0, #8]
   8157a:	606b      	str	r3, [r5, #4]
   8157c:	50aa      	str	r2, [r5, r2]
   8157e:	e003      	b.n	81588 <_free_r+0x74>
   81580:	f042 0301 	orr.w	r3, r2, #1
   81584:	606b      	str	r3, [r5, #4]
   81586:	50aa      	str	r2, [r5, r2]
   81588:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8158c:	d214      	bcs.n	815b8 <_free_r+0xa4>
   8158e:	08d2      	lsrs	r2, r2, #3
   81590:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   81594:	2401      	movs	r4, #1
   81596:	6848      	ldr	r0, [r1, #4]
   81598:	1092      	asrs	r2, r2, #2
   8159a:	fa04 f202 	lsl.w	r2, r4, r2
   8159e:	689c      	ldr	r4, [r3, #8]
   815a0:	4310      	orrs	r0, r2
   815a2:	60ac      	str	r4, [r5, #8]
   815a4:	60eb      	str	r3, [r5, #12]
   815a6:	6048      	str	r0, [r1, #4]
   815a8:	609d      	str	r5, [r3, #8]
   815aa:	60e5      	str	r5, [r4, #12]
   815ac:	4640      	mov	r0, r8
   815ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   815b2:	f000 bb3f 	b.w	81c34 <__malloc_unlock>
   815b6:	4770      	bx	lr
   815b8:	0a53      	lsrs	r3, r2, #9
   815ba:	2b04      	cmp	r3, #4
   815bc:	d847      	bhi.n	8164e <_free_r+0x13a>
   815be:	0993      	lsrs	r3, r2, #6
   815c0:	f103 0438 	add.w	r4, r3, #56	; 0x38
   815c4:	0060      	lsls	r0, r4, #1
   815c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   815ca:	6883      	ldr	r3, [r0, #8]
   815cc:	4939      	ldr	r1, [pc, #228]	; (816b4 <_free_r+0x1a0>)
   815ce:	4283      	cmp	r3, r0
   815d0:	d043      	beq.n	8165a <_free_r+0x146>
   815d2:	6859      	ldr	r1, [r3, #4]
   815d4:	f021 0103 	bic.w	r1, r1, #3
   815d8:	4291      	cmp	r1, r2
   815da:	d902      	bls.n	815e2 <_free_r+0xce>
   815dc:	689b      	ldr	r3, [r3, #8]
   815de:	4298      	cmp	r0, r3
   815e0:	d1f7      	bne.n	815d2 <_free_r+0xbe>
   815e2:	68da      	ldr	r2, [r3, #12]
   815e4:	60ea      	str	r2, [r5, #12]
   815e6:	60ab      	str	r3, [r5, #8]
   815e8:	4640      	mov	r0, r8
   815ea:	6095      	str	r5, [r2, #8]
   815ec:	60dd      	str	r5, [r3, #12]
   815ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   815f2:	f000 bb1f 	b.w	81c34 <__malloc_unlock>
   815f6:	07ff      	lsls	r7, r7, #31
   815f8:	4402      	add	r2, r0
   815fa:	d407      	bmi.n	8160c <_free_r+0xf8>
   815fc:	f854 4c08 	ldr.w	r4, [r4, #-8]
   81600:	1b2d      	subs	r5, r5, r4
   81602:	68eb      	ldr	r3, [r5, #12]
   81604:	68a8      	ldr	r0, [r5, #8]
   81606:	4422      	add	r2, r4
   81608:	60c3      	str	r3, [r0, #12]
   8160a:	6098      	str	r0, [r3, #8]
   8160c:	4b2b      	ldr	r3, [pc, #172]	; (816bc <_free_r+0x1a8>)
   8160e:	f042 0001 	orr.w	r0, r2, #1
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	6068      	str	r0, [r5, #4]
   81616:	429a      	cmp	r2, r3
   81618:	608d      	str	r5, [r1, #8]
   8161a:	d3c7      	bcc.n	815ac <_free_r+0x98>
   8161c:	4b28      	ldr	r3, [pc, #160]	; (816c0 <_free_r+0x1ac>)
   8161e:	4640      	mov	r0, r8
   81620:	6819      	ldr	r1, [r3, #0]
   81622:	f7ff ff29 	bl	81478 <_malloc_trim_r>
   81626:	e7c1      	b.n	815ac <_free_r+0x98>
   81628:	1819      	adds	r1, r3, r0
   8162a:	6849      	ldr	r1, [r1, #4]
   8162c:	07c9      	lsls	r1, r1, #31
   8162e:	d409      	bmi.n	81644 <_free_r+0x130>
   81630:	68d9      	ldr	r1, [r3, #12]
   81632:	4402      	add	r2, r0
   81634:	689b      	ldr	r3, [r3, #8]
   81636:	f042 0001 	orr.w	r0, r2, #1
   8163a:	60d9      	str	r1, [r3, #12]
   8163c:	608b      	str	r3, [r1, #8]
   8163e:	6068      	str	r0, [r5, #4]
   81640:	50aa      	str	r2, [r5, r2]
   81642:	e7b3      	b.n	815ac <_free_r+0x98>
   81644:	f042 0301 	orr.w	r3, r2, #1
   81648:	606b      	str	r3, [r5, #4]
   8164a:	50aa      	str	r2, [r5, r2]
   8164c:	e7ae      	b.n	815ac <_free_r+0x98>
   8164e:	2b14      	cmp	r3, #20
   81650:	d814      	bhi.n	8167c <_free_r+0x168>
   81652:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   81656:	0060      	lsls	r0, r4, #1
   81658:	e7b5      	b.n	815c6 <_free_r+0xb2>
   8165a:	684a      	ldr	r2, [r1, #4]
   8165c:	10a4      	asrs	r4, r4, #2
   8165e:	2001      	movs	r0, #1
   81660:	40a0      	lsls	r0, r4
   81662:	4302      	orrs	r2, r0
   81664:	604a      	str	r2, [r1, #4]
   81666:	461a      	mov	r2, r3
   81668:	e7bc      	b.n	815e4 <_free_r+0xd0>
   8166a:	f042 0301 	orr.w	r3, r2, #1
   8166e:	614d      	str	r5, [r1, #20]
   81670:	610d      	str	r5, [r1, #16]
   81672:	60ec      	str	r4, [r5, #12]
   81674:	60ac      	str	r4, [r5, #8]
   81676:	606b      	str	r3, [r5, #4]
   81678:	50aa      	str	r2, [r5, r2]
   8167a:	e797      	b.n	815ac <_free_r+0x98>
   8167c:	2b54      	cmp	r3, #84	; 0x54
   8167e:	d804      	bhi.n	8168a <_free_r+0x176>
   81680:	0b13      	lsrs	r3, r2, #12
   81682:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   81686:	0060      	lsls	r0, r4, #1
   81688:	e79d      	b.n	815c6 <_free_r+0xb2>
   8168a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8168e:	d804      	bhi.n	8169a <_free_r+0x186>
   81690:	0bd3      	lsrs	r3, r2, #15
   81692:	f103 0477 	add.w	r4, r3, #119	; 0x77
   81696:	0060      	lsls	r0, r4, #1
   81698:	e795      	b.n	815c6 <_free_r+0xb2>
   8169a:	f240 5054 	movw	r0, #1364	; 0x554
   8169e:	4283      	cmp	r3, r0
   816a0:	d804      	bhi.n	816ac <_free_r+0x198>
   816a2:	0c93      	lsrs	r3, r2, #18
   816a4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   816a8:	0060      	lsls	r0, r4, #1
   816aa:	e78c      	b.n	815c6 <_free_r+0xb2>
   816ac:	20fc      	movs	r0, #252	; 0xfc
   816ae:	247e      	movs	r4, #126	; 0x7e
   816b0:	e789      	b.n	815c6 <_free_r+0xb2>
   816b2:	bf00      	nop
   816b4:	2007055c 	.word	0x2007055c
   816b8:	20070564 	.word	0x20070564
   816bc:	20070964 	.word	0x20070964
   816c0:	20070a14 	.word	0x20070a14

000816c4 <_fwalk_reent>:
   816c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   816c8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   816cc:	d01e      	beq.n	8170c <_fwalk_reent+0x48>
   816ce:	4688      	mov	r8, r1
   816d0:	4607      	mov	r7, r0
   816d2:	f04f 0900 	mov.w	r9, #0
   816d6:	6875      	ldr	r5, [r6, #4]
   816d8:	68b4      	ldr	r4, [r6, #8]
   816da:	3d01      	subs	r5, #1
   816dc:	d410      	bmi.n	81700 <_fwalk_reent+0x3c>
   816de:	89a3      	ldrh	r3, [r4, #12]
   816e0:	3d01      	subs	r5, #1
   816e2:	2b01      	cmp	r3, #1
   816e4:	d908      	bls.n	816f8 <_fwalk_reent+0x34>
   816e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   816ea:	3301      	adds	r3, #1
   816ec:	d004      	beq.n	816f8 <_fwalk_reent+0x34>
   816ee:	4638      	mov	r0, r7
   816f0:	4621      	mov	r1, r4
   816f2:	47c0      	blx	r8
   816f4:	ea49 0900 	orr.w	r9, r9, r0
   816f8:	1c6b      	adds	r3, r5, #1
   816fa:	f104 0468 	add.w	r4, r4, #104	; 0x68
   816fe:	d1ee      	bne.n	816de <_fwalk_reent+0x1a>
   81700:	6836      	ldr	r6, [r6, #0]
   81702:	2e00      	cmp	r6, #0
   81704:	d1e7      	bne.n	816d6 <_fwalk_reent+0x12>
   81706:	4648      	mov	r0, r9
   81708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8170c:	46b1      	mov	r9, r6
   8170e:	4648      	mov	r0, r9
   81710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081714 <malloc>:
   81714:	4b02      	ldr	r3, [pc, #8]	; (81720 <malloc+0xc>)
   81716:	4601      	mov	r1, r0
   81718:	6818      	ldr	r0, [r3, #0]
   8171a:	f000 b803 	b.w	81724 <_malloc_r>
   8171e:	bf00      	nop
   81720:	20070558 	.word	0x20070558

00081724 <_malloc_r>:
   81724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81728:	f101 050b 	add.w	r5, r1, #11
   8172c:	2d16      	cmp	r5, #22
   8172e:	b083      	sub	sp, #12
   81730:	4606      	mov	r6, r0
   81732:	d927      	bls.n	81784 <_malloc_r+0x60>
   81734:	f035 0507 	bics.w	r5, r5, #7
   81738:	f100 80b6 	bmi.w	818a8 <_malloc_r+0x184>
   8173c:	42a9      	cmp	r1, r5
   8173e:	f200 80b3 	bhi.w	818a8 <_malloc_r+0x184>
   81742:	f000 fa75 	bl	81c30 <__malloc_lock>
   81746:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8174a:	d222      	bcs.n	81792 <_malloc_r+0x6e>
   8174c:	4fbc      	ldr	r7, [pc, #752]	; (81a40 <_malloc_r+0x31c>)
   8174e:	08e8      	lsrs	r0, r5, #3
   81750:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   81754:	68dc      	ldr	r4, [r3, #12]
   81756:	429c      	cmp	r4, r3
   81758:	f000 81bc 	beq.w	81ad4 <_malloc_r+0x3b0>
   8175c:	6863      	ldr	r3, [r4, #4]
   8175e:	68e1      	ldr	r1, [r4, #12]
   81760:	f023 0303 	bic.w	r3, r3, #3
   81764:	4423      	add	r3, r4
   81766:	685a      	ldr	r2, [r3, #4]
   81768:	68a5      	ldr	r5, [r4, #8]
   8176a:	f042 0201 	orr.w	r2, r2, #1
   8176e:	60e9      	str	r1, [r5, #12]
   81770:	4630      	mov	r0, r6
   81772:	608d      	str	r5, [r1, #8]
   81774:	605a      	str	r2, [r3, #4]
   81776:	f000 fa5d 	bl	81c34 <__malloc_unlock>
   8177a:	3408      	adds	r4, #8
   8177c:	4620      	mov	r0, r4
   8177e:	b003      	add	sp, #12
   81780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81784:	2910      	cmp	r1, #16
   81786:	f200 808f 	bhi.w	818a8 <_malloc_r+0x184>
   8178a:	f000 fa51 	bl	81c30 <__malloc_lock>
   8178e:	2510      	movs	r5, #16
   81790:	e7dc      	b.n	8174c <_malloc_r+0x28>
   81792:	0a68      	lsrs	r0, r5, #9
   81794:	f000 808f 	beq.w	818b6 <_malloc_r+0x192>
   81798:	2804      	cmp	r0, #4
   8179a:	f200 8147 	bhi.w	81a2c <_malloc_r+0x308>
   8179e:	09a8      	lsrs	r0, r5, #6
   817a0:	3038      	adds	r0, #56	; 0x38
   817a2:	0041      	lsls	r1, r0, #1
   817a4:	4fa6      	ldr	r7, [pc, #664]	; (81a40 <_malloc_r+0x31c>)
   817a6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   817aa:	68cc      	ldr	r4, [r1, #12]
   817ac:	42a1      	cmp	r1, r4
   817ae:	d106      	bne.n	817be <_malloc_r+0x9a>
   817b0:	e00c      	b.n	817cc <_malloc_r+0xa8>
   817b2:	2a00      	cmp	r2, #0
   817b4:	f280 8082 	bge.w	818bc <_malloc_r+0x198>
   817b8:	68e4      	ldr	r4, [r4, #12]
   817ba:	42a1      	cmp	r1, r4
   817bc:	d006      	beq.n	817cc <_malloc_r+0xa8>
   817be:	6863      	ldr	r3, [r4, #4]
   817c0:	f023 0303 	bic.w	r3, r3, #3
   817c4:	1b5a      	subs	r2, r3, r5
   817c6:	2a0f      	cmp	r2, #15
   817c8:	ddf3      	ble.n	817b2 <_malloc_r+0x8e>
   817ca:	3801      	subs	r0, #1
   817cc:	3001      	adds	r0, #1
   817ce:	499c      	ldr	r1, [pc, #624]	; (81a40 <_malloc_r+0x31c>)
   817d0:	693c      	ldr	r4, [r7, #16]
   817d2:	f101 0e08 	add.w	lr, r1, #8
   817d6:	4574      	cmp	r4, lr
   817d8:	f000 8171 	beq.w	81abe <_malloc_r+0x39a>
   817dc:	6863      	ldr	r3, [r4, #4]
   817de:	f023 0303 	bic.w	r3, r3, #3
   817e2:	1b5a      	subs	r2, r3, r5
   817e4:	2a0f      	cmp	r2, #15
   817e6:	f300 8157 	bgt.w	81a98 <_malloc_r+0x374>
   817ea:	2a00      	cmp	r2, #0
   817ec:	f8c1 e014 	str.w	lr, [r1, #20]
   817f0:	f8c1 e010 	str.w	lr, [r1, #16]
   817f4:	da66      	bge.n	818c4 <_malloc_r+0x1a0>
   817f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   817fa:	f080 812d 	bcs.w	81a58 <_malloc_r+0x334>
   817fe:	08db      	lsrs	r3, r3, #3
   81800:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   81804:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81808:	684a      	ldr	r2, [r1, #4]
   8180a:	2301      	movs	r3, #1
   8180c:	fa03 f30c 	lsl.w	r3, r3, ip
   81810:	f8d8 c008 	ldr.w	ip, [r8, #8]
   81814:	4313      	orrs	r3, r2
   81816:	f8c4 c008 	str.w	ip, [r4, #8]
   8181a:	f8c4 800c 	str.w	r8, [r4, #12]
   8181e:	604b      	str	r3, [r1, #4]
   81820:	f8c8 4008 	str.w	r4, [r8, #8]
   81824:	f8cc 400c 	str.w	r4, [ip, #12]
   81828:	1082      	asrs	r2, r0, #2
   8182a:	2401      	movs	r4, #1
   8182c:	4094      	lsls	r4, r2
   8182e:	429c      	cmp	r4, r3
   81830:	d855      	bhi.n	818de <_malloc_r+0x1ba>
   81832:	4223      	tst	r3, r4
   81834:	d106      	bne.n	81844 <_malloc_r+0x120>
   81836:	f020 0003 	bic.w	r0, r0, #3
   8183a:	0064      	lsls	r4, r4, #1
   8183c:	4223      	tst	r3, r4
   8183e:	f100 0004 	add.w	r0, r0, #4
   81842:	d0fa      	beq.n	8183a <_malloc_r+0x116>
   81844:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   81848:	46c4      	mov	ip, r8
   8184a:	4681      	mov	r9, r0
   8184c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81850:	459c      	cmp	ip, r3
   81852:	d107      	bne.n	81864 <_malloc_r+0x140>
   81854:	e135      	b.n	81ac2 <_malloc_r+0x39e>
   81856:	2900      	cmp	r1, #0
   81858:	f280 8145 	bge.w	81ae6 <_malloc_r+0x3c2>
   8185c:	68db      	ldr	r3, [r3, #12]
   8185e:	459c      	cmp	ip, r3
   81860:	f000 812f 	beq.w	81ac2 <_malloc_r+0x39e>
   81864:	685a      	ldr	r2, [r3, #4]
   81866:	f022 0203 	bic.w	r2, r2, #3
   8186a:	1b51      	subs	r1, r2, r5
   8186c:	290f      	cmp	r1, #15
   8186e:	ddf2      	ble.n	81856 <_malloc_r+0x132>
   81870:	461c      	mov	r4, r3
   81872:	68da      	ldr	r2, [r3, #12]
   81874:	f854 cf08 	ldr.w	ip, [r4, #8]!
   81878:	f045 0901 	orr.w	r9, r5, #1
   8187c:	f041 0801 	orr.w	r8, r1, #1
   81880:	441d      	add	r5, r3
   81882:	f8c3 9004 	str.w	r9, [r3, #4]
   81886:	4630      	mov	r0, r6
   81888:	f8cc 200c 	str.w	r2, [ip, #12]
   8188c:	f8c2 c008 	str.w	ip, [r2, #8]
   81890:	617d      	str	r5, [r7, #20]
   81892:	613d      	str	r5, [r7, #16]
   81894:	f8c5 e00c 	str.w	lr, [r5, #12]
   81898:	f8c5 e008 	str.w	lr, [r5, #8]
   8189c:	f8c5 8004 	str.w	r8, [r5, #4]
   818a0:	5069      	str	r1, [r5, r1]
   818a2:	f000 f9c7 	bl	81c34 <__malloc_unlock>
   818a6:	e769      	b.n	8177c <_malloc_r+0x58>
   818a8:	2400      	movs	r4, #0
   818aa:	4620      	mov	r0, r4
   818ac:	230c      	movs	r3, #12
   818ae:	6033      	str	r3, [r6, #0]
   818b0:	b003      	add	sp, #12
   818b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818b6:	217e      	movs	r1, #126	; 0x7e
   818b8:	203f      	movs	r0, #63	; 0x3f
   818ba:	e773      	b.n	817a4 <_malloc_r+0x80>
   818bc:	4423      	add	r3, r4
   818be:	685a      	ldr	r2, [r3, #4]
   818c0:	68e1      	ldr	r1, [r4, #12]
   818c2:	e751      	b.n	81768 <_malloc_r+0x44>
   818c4:	4423      	add	r3, r4
   818c6:	685a      	ldr	r2, [r3, #4]
   818c8:	4630      	mov	r0, r6
   818ca:	f042 0201 	orr.w	r2, r2, #1
   818ce:	605a      	str	r2, [r3, #4]
   818d0:	3408      	adds	r4, #8
   818d2:	f000 f9af 	bl	81c34 <__malloc_unlock>
   818d6:	4620      	mov	r0, r4
   818d8:	b003      	add	sp, #12
   818da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818de:	68bc      	ldr	r4, [r7, #8]
   818e0:	6863      	ldr	r3, [r4, #4]
   818e2:	f023 0803 	bic.w	r8, r3, #3
   818e6:	4545      	cmp	r5, r8
   818e8:	d804      	bhi.n	818f4 <_malloc_r+0x1d0>
   818ea:	ebc5 0308 	rsb	r3, r5, r8
   818ee:	2b0f      	cmp	r3, #15
   818f0:	f300 808c 	bgt.w	81a0c <_malloc_r+0x2e8>
   818f4:	4b53      	ldr	r3, [pc, #332]	; (81a44 <_malloc_r+0x320>)
   818f6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 81a54 <_malloc_r+0x330>
   818fa:	681a      	ldr	r2, [r3, #0]
   818fc:	f8da 3000 	ldr.w	r3, [sl]
   81900:	442a      	add	r2, r5
   81902:	3301      	adds	r3, #1
   81904:	eb04 0b08 	add.w	fp, r4, r8
   81908:	f000 8151 	beq.w	81bae <_malloc_r+0x48a>
   8190c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   81910:	320f      	adds	r2, #15
   81912:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   81916:	f022 020f 	bic.w	r2, r2, #15
   8191a:	4611      	mov	r1, r2
   8191c:	4630      	mov	r0, r6
   8191e:	9201      	str	r2, [sp, #4]
   81920:	f000 f98a 	bl	81c38 <_sbrk_r>
   81924:	f1b0 3fff 	cmp.w	r0, #4294967295
   81928:	4681      	mov	r9, r0
   8192a:	9a01      	ldr	r2, [sp, #4]
   8192c:	f000 8148 	beq.w	81bc0 <_malloc_r+0x49c>
   81930:	4583      	cmp	fp, r0
   81932:	f200 80ef 	bhi.w	81b14 <_malloc_r+0x3f0>
   81936:	4b44      	ldr	r3, [pc, #272]	; (81a48 <_malloc_r+0x324>)
   81938:	45cb      	cmp	fp, r9
   8193a:	6819      	ldr	r1, [r3, #0]
   8193c:	4411      	add	r1, r2
   8193e:	6019      	str	r1, [r3, #0]
   81940:	f000 8143 	beq.w	81bca <_malloc_r+0x4a6>
   81944:	f8da 0000 	ldr.w	r0, [sl]
   81948:	f8df e108 	ldr.w	lr, [pc, #264]	; 81a54 <_malloc_r+0x330>
   8194c:	3001      	adds	r0, #1
   8194e:	bf1b      	ittet	ne
   81950:	ebcb 0b09 	rsbne	fp, fp, r9
   81954:	4459      	addne	r1, fp
   81956:	f8ce 9000 	streq.w	r9, [lr]
   8195a:	6019      	strne	r1, [r3, #0]
   8195c:	f019 0107 	ands.w	r1, r9, #7
   81960:	f000 8108 	beq.w	81b74 <_malloc_r+0x450>
   81964:	f1c1 0008 	rsb	r0, r1, #8
   81968:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8196c:	4481      	add	r9, r0
   8196e:	3108      	adds	r1, #8
   81970:	444a      	add	r2, r9
   81972:	f3c2 020b 	ubfx	r2, r2, #0, #12
   81976:	ebc2 0a01 	rsb	sl, r2, r1
   8197a:	4651      	mov	r1, sl
   8197c:	4630      	mov	r0, r6
   8197e:	9301      	str	r3, [sp, #4]
   81980:	f000 f95a 	bl	81c38 <_sbrk_r>
   81984:	1c43      	adds	r3, r0, #1
   81986:	9b01      	ldr	r3, [sp, #4]
   81988:	f000 812d 	beq.w	81be6 <_malloc_r+0x4c2>
   8198c:	ebc9 0200 	rsb	r2, r9, r0
   81990:	4452      	add	r2, sl
   81992:	f042 0201 	orr.w	r2, r2, #1
   81996:	6819      	ldr	r1, [r3, #0]
   81998:	42bc      	cmp	r4, r7
   8199a:	4451      	add	r1, sl
   8199c:	f8c7 9008 	str.w	r9, [r7, #8]
   819a0:	6019      	str	r1, [r3, #0]
   819a2:	f8c9 2004 	str.w	r2, [r9, #4]
   819a6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 81a48 <_malloc_r+0x324>
   819aa:	d016      	beq.n	819da <_malloc_r+0x2b6>
   819ac:	f1b8 0f0f 	cmp.w	r8, #15
   819b0:	f240 80ef 	bls.w	81b92 <_malloc_r+0x46e>
   819b4:	6862      	ldr	r2, [r4, #4]
   819b6:	f1a8 030c 	sub.w	r3, r8, #12
   819ba:	f023 0307 	bic.w	r3, r3, #7
   819be:	f002 0201 	and.w	r2, r2, #1
   819c2:	18e0      	adds	r0, r4, r3
   819c4:	f04f 0e05 	mov.w	lr, #5
   819c8:	431a      	orrs	r2, r3
   819ca:	2b0f      	cmp	r3, #15
   819cc:	6062      	str	r2, [r4, #4]
   819ce:	f8c0 e004 	str.w	lr, [r0, #4]
   819d2:	f8c0 e008 	str.w	lr, [r0, #8]
   819d6:	f200 810a 	bhi.w	81bee <_malloc_r+0x4ca>
   819da:	4b1c      	ldr	r3, [pc, #112]	; (81a4c <_malloc_r+0x328>)
   819dc:	68bc      	ldr	r4, [r7, #8]
   819de:	681a      	ldr	r2, [r3, #0]
   819e0:	4291      	cmp	r1, r2
   819e2:	bf88      	it	hi
   819e4:	6019      	strhi	r1, [r3, #0]
   819e6:	4b1a      	ldr	r3, [pc, #104]	; (81a50 <_malloc_r+0x32c>)
   819e8:	681a      	ldr	r2, [r3, #0]
   819ea:	4291      	cmp	r1, r2
   819ec:	6862      	ldr	r2, [r4, #4]
   819ee:	bf88      	it	hi
   819f0:	6019      	strhi	r1, [r3, #0]
   819f2:	f022 0203 	bic.w	r2, r2, #3
   819f6:	4295      	cmp	r5, r2
   819f8:	eba2 0305 	sub.w	r3, r2, r5
   819fc:	d801      	bhi.n	81a02 <_malloc_r+0x2de>
   819fe:	2b0f      	cmp	r3, #15
   81a00:	dc04      	bgt.n	81a0c <_malloc_r+0x2e8>
   81a02:	4630      	mov	r0, r6
   81a04:	f000 f916 	bl	81c34 <__malloc_unlock>
   81a08:	2400      	movs	r4, #0
   81a0a:	e6b7      	b.n	8177c <_malloc_r+0x58>
   81a0c:	f045 0201 	orr.w	r2, r5, #1
   81a10:	f043 0301 	orr.w	r3, r3, #1
   81a14:	4425      	add	r5, r4
   81a16:	6062      	str	r2, [r4, #4]
   81a18:	4630      	mov	r0, r6
   81a1a:	60bd      	str	r5, [r7, #8]
   81a1c:	3408      	adds	r4, #8
   81a1e:	606b      	str	r3, [r5, #4]
   81a20:	f000 f908 	bl	81c34 <__malloc_unlock>
   81a24:	4620      	mov	r0, r4
   81a26:	b003      	add	sp, #12
   81a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a2c:	2814      	cmp	r0, #20
   81a2e:	d969      	bls.n	81b04 <_malloc_r+0x3e0>
   81a30:	2854      	cmp	r0, #84	; 0x54
   81a32:	f200 8098 	bhi.w	81b66 <_malloc_r+0x442>
   81a36:	0b28      	lsrs	r0, r5, #12
   81a38:	306e      	adds	r0, #110	; 0x6e
   81a3a:	0041      	lsls	r1, r0, #1
   81a3c:	e6b2      	b.n	817a4 <_malloc_r+0x80>
   81a3e:	bf00      	nop
   81a40:	2007055c 	.word	0x2007055c
   81a44:	20070a14 	.word	0x20070a14
   81a48:	20070a18 	.word	0x20070a18
   81a4c:	20070a10 	.word	0x20070a10
   81a50:	20070a0c 	.word	0x20070a0c
   81a54:	20070968 	.word	0x20070968
   81a58:	0a5a      	lsrs	r2, r3, #9
   81a5a:	2a04      	cmp	r2, #4
   81a5c:	d955      	bls.n	81b0a <_malloc_r+0x3e6>
   81a5e:	2a14      	cmp	r2, #20
   81a60:	f200 80a7 	bhi.w	81bb2 <_malloc_r+0x48e>
   81a64:	325b      	adds	r2, #91	; 0x5b
   81a66:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81a6a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   81a6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
   81a72:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 81c2c <_malloc_r+0x508>
   81a76:	4561      	cmp	r1, ip
   81a78:	d07f      	beq.n	81b7a <_malloc_r+0x456>
   81a7a:	684a      	ldr	r2, [r1, #4]
   81a7c:	f022 0203 	bic.w	r2, r2, #3
   81a80:	4293      	cmp	r3, r2
   81a82:	d202      	bcs.n	81a8a <_malloc_r+0x366>
   81a84:	6889      	ldr	r1, [r1, #8]
   81a86:	458c      	cmp	ip, r1
   81a88:	d1f7      	bne.n	81a7a <_malloc_r+0x356>
   81a8a:	68ca      	ldr	r2, [r1, #12]
   81a8c:	687b      	ldr	r3, [r7, #4]
   81a8e:	60e2      	str	r2, [r4, #12]
   81a90:	60a1      	str	r1, [r4, #8]
   81a92:	6094      	str	r4, [r2, #8]
   81a94:	60cc      	str	r4, [r1, #12]
   81a96:	e6c7      	b.n	81828 <_malloc_r+0x104>
   81a98:	f045 0701 	orr.w	r7, r5, #1
   81a9c:	f042 0301 	orr.w	r3, r2, #1
   81aa0:	4425      	add	r5, r4
   81aa2:	6067      	str	r7, [r4, #4]
   81aa4:	4630      	mov	r0, r6
   81aa6:	614d      	str	r5, [r1, #20]
   81aa8:	610d      	str	r5, [r1, #16]
   81aaa:	f8c5 e00c 	str.w	lr, [r5, #12]
   81aae:	f8c5 e008 	str.w	lr, [r5, #8]
   81ab2:	606b      	str	r3, [r5, #4]
   81ab4:	50aa      	str	r2, [r5, r2]
   81ab6:	3408      	adds	r4, #8
   81ab8:	f000 f8bc 	bl	81c34 <__malloc_unlock>
   81abc:	e65e      	b.n	8177c <_malloc_r+0x58>
   81abe:	684b      	ldr	r3, [r1, #4]
   81ac0:	e6b2      	b.n	81828 <_malloc_r+0x104>
   81ac2:	f109 0901 	add.w	r9, r9, #1
   81ac6:	f019 0f03 	tst.w	r9, #3
   81aca:	f10c 0c08 	add.w	ip, ip, #8
   81ace:	f47f aebd 	bne.w	8184c <_malloc_r+0x128>
   81ad2:	e02c      	b.n	81b2e <_malloc_r+0x40a>
   81ad4:	f104 0308 	add.w	r3, r4, #8
   81ad8:	6964      	ldr	r4, [r4, #20]
   81ada:	42a3      	cmp	r3, r4
   81adc:	bf08      	it	eq
   81ade:	3002      	addeq	r0, #2
   81ae0:	f43f ae75 	beq.w	817ce <_malloc_r+0xaa>
   81ae4:	e63a      	b.n	8175c <_malloc_r+0x38>
   81ae6:	461c      	mov	r4, r3
   81ae8:	441a      	add	r2, r3
   81aea:	6851      	ldr	r1, [r2, #4]
   81aec:	68db      	ldr	r3, [r3, #12]
   81aee:	f854 5f08 	ldr.w	r5, [r4, #8]!
   81af2:	f041 0101 	orr.w	r1, r1, #1
   81af6:	6051      	str	r1, [r2, #4]
   81af8:	4630      	mov	r0, r6
   81afa:	60eb      	str	r3, [r5, #12]
   81afc:	609d      	str	r5, [r3, #8]
   81afe:	f000 f899 	bl	81c34 <__malloc_unlock>
   81b02:	e63b      	b.n	8177c <_malloc_r+0x58>
   81b04:	305b      	adds	r0, #91	; 0x5b
   81b06:	0041      	lsls	r1, r0, #1
   81b08:	e64c      	b.n	817a4 <_malloc_r+0x80>
   81b0a:	099a      	lsrs	r2, r3, #6
   81b0c:	3238      	adds	r2, #56	; 0x38
   81b0e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81b12:	e7aa      	b.n	81a6a <_malloc_r+0x346>
   81b14:	42bc      	cmp	r4, r7
   81b16:	4b45      	ldr	r3, [pc, #276]	; (81c2c <_malloc_r+0x508>)
   81b18:	f43f af0d 	beq.w	81936 <_malloc_r+0x212>
   81b1c:	689c      	ldr	r4, [r3, #8]
   81b1e:	6862      	ldr	r2, [r4, #4]
   81b20:	f022 0203 	bic.w	r2, r2, #3
   81b24:	e767      	b.n	819f6 <_malloc_r+0x2d2>
   81b26:	f8d8 8000 	ldr.w	r8, [r8]
   81b2a:	4598      	cmp	r8, r3
   81b2c:	d17c      	bne.n	81c28 <_malloc_r+0x504>
   81b2e:	f010 0f03 	tst.w	r0, #3
   81b32:	f1a8 0308 	sub.w	r3, r8, #8
   81b36:	f100 30ff 	add.w	r0, r0, #4294967295
   81b3a:	d1f4      	bne.n	81b26 <_malloc_r+0x402>
   81b3c:	687b      	ldr	r3, [r7, #4]
   81b3e:	ea23 0304 	bic.w	r3, r3, r4
   81b42:	607b      	str	r3, [r7, #4]
   81b44:	0064      	lsls	r4, r4, #1
   81b46:	429c      	cmp	r4, r3
   81b48:	f63f aec9 	bhi.w	818de <_malloc_r+0x1ba>
   81b4c:	2c00      	cmp	r4, #0
   81b4e:	f43f aec6 	beq.w	818de <_malloc_r+0x1ba>
   81b52:	4223      	tst	r3, r4
   81b54:	4648      	mov	r0, r9
   81b56:	f47f ae75 	bne.w	81844 <_malloc_r+0x120>
   81b5a:	0064      	lsls	r4, r4, #1
   81b5c:	4223      	tst	r3, r4
   81b5e:	f100 0004 	add.w	r0, r0, #4
   81b62:	d0fa      	beq.n	81b5a <_malloc_r+0x436>
   81b64:	e66e      	b.n	81844 <_malloc_r+0x120>
   81b66:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   81b6a:	d818      	bhi.n	81b9e <_malloc_r+0x47a>
   81b6c:	0be8      	lsrs	r0, r5, #15
   81b6e:	3077      	adds	r0, #119	; 0x77
   81b70:	0041      	lsls	r1, r0, #1
   81b72:	e617      	b.n	817a4 <_malloc_r+0x80>
   81b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81b78:	e6fa      	b.n	81970 <_malloc_r+0x24c>
   81b7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81b7e:	1092      	asrs	r2, r2, #2
   81b80:	f04f 0c01 	mov.w	ip, #1
   81b84:	fa0c f202 	lsl.w	r2, ip, r2
   81b88:	4313      	orrs	r3, r2
   81b8a:	f8c8 3004 	str.w	r3, [r8, #4]
   81b8e:	460a      	mov	r2, r1
   81b90:	e77d      	b.n	81a8e <_malloc_r+0x36a>
   81b92:	2301      	movs	r3, #1
   81b94:	f8c9 3004 	str.w	r3, [r9, #4]
   81b98:	464c      	mov	r4, r9
   81b9a:	2200      	movs	r2, #0
   81b9c:	e72b      	b.n	819f6 <_malloc_r+0x2d2>
   81b9e:	f240 5354 	movw	r3, #1364	; 0x554
   81ba2:	4298      	cmp	r0, r3
   81ba4:	d81c      	bhi.n	81be0 <_malloc_r+0x4bc>
   81ba6:	0ca8      	lsrs	r0, r5, #18
   81ba8:	307c      	adds	r0, #124	; 0x7c
   81baa:	0041      	lsls	r1, r0, #1
   81bac:	e5fa      	b.n	817a4 <_malloc_r+0x80>
   81bae:	3210      	adds	r2, #16
   81bb0:	e6b3      	b.n	8191a <_malloc_r+0x1f6>
   81bb2:	2a54      	cmp	r2, #84	; 0x54
   81bb4:	d823      	bhi.n	81bfe <_malloc_r+0x4da>
   81bb6:	0b1a      	lsrs	r2, r3, #12
   81bb8:	326e      	adds	r2, #110	; 0x6e
   81bba:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81bbe:	e754      	b.n	81a6a <_malloc_r+0x346>
   81bc0:	68bc      	ldr	r4, [r7, #8]
   81bc2:	6862      	ldr	r2, [r4, #4]
   81bc4:	f022 0203 	bic.w	r2, r2, #3
   81bc8:	e715      	b.n	819f6 <_malloc_r+0x2d2>
   81bca:	f3cb 000b 	ubfx	r0, fp, #0, #12
   81bce:	2800      	cmp	r0, #0
   81bd0:	f47f aeb8 	bne.w	81944 <_malloc_r+0x220>
   81bd4:	4442      	add	r2, r8
   81bd6:	68bb      	ldr	r3, [r7, #8]
   81bd8:	f042 0201 	orr.w	r2, r2, #1
   81bdc:	605a      	str	r2, [r3, #4]
   81bde:	e6fc      	b.n	819da <_malloc_r+0x2b6>
   81be0:	21fc      	movs	r1, #252	; 0xfc
   81be2:	207e      	movs	r0, #126	; 0x7e
   81be4:	e5de      	b.n	817a4 <_malloc_r+0x80>
   81be6:	2201      	movs	r2, #1
   81be8:	f04f 0a00 	mov.w	sl, #0
   81bec:	e6d3      	b.n	81996 <_malloc_r+0x272>
   81bee:	f104 0108 	add.w	r1, r4, #8
   81bf2:	4630      	mov	r0, r6
   81bf4:	f7ff fc8e 	bl	81514 <_free_r>
   81bf8:	f8da 1000 	ldr.w	r1, [sl]
   81bfc:	e6ed      	b.n	819da <_malloc_r+0x2b6>
   81bfe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81c02:	d804      	bhi.n	81c0e <_malloc_r+0x4ea>
   81c04:	0bda      	lsrs	r2, r3, #15
   81c06:	3277      	adds	r2, #119	; 0x77
   81c08:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81c0c:	e72d      	b.n	81a6a <_malloc_r+0x346>
   81c0e:	f240 5154 	movw	r1, #1364	; 0x554
   81c12:	428a      	cmp	r2, r1
   81c14:	d804      	bhi.n	81c20 <_malloc_r+0x4fc>
   81c16:	0c9a      	lsrs	r2, r3, #18
   81c18:	327c      	adds	r2, #124	; 0x7c
   81c1a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81c1e:	e724      	b.n	81a6a <_malloc_r+0x346>
   81c20:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   81c24:	227e      	movs	r2, #126	; 0x7e
   81c26:	e720      	b.n	81a6a <_malloc_r+0x346>
   81c28:	687b      	ldr	r3, [r7, #4]
   81c2a:	e78b      	b.n	81b44 <_malloc_r+0x420>
   81c2c:	2007055c 	.word	0x2007055c

00081c30 <__malloc_lock>:
   81c30:	4770      	bx	lr
   81c32:	bf00      	nop

00081c34 <__malloc_unlock>:
   81c34:	4770      	bx	lr
   81c36:	bf00      	nop

00081c38 <_sbrk_r>:
   81c38:	b538      	push	{r3, r4, r5, lr}
   81c3a:	4c07      	ldr	r4, [pc, #28]	; (81c58 <_sbrk_r+0x20>)
   81c3c:	2300      	movs	r3, #0
   81c3e:	4605      	mov	r5, r0
   81c40:	4608      	mov	r0, r1
   81c42:	6023      	str	r3, [r4, #0]
   81c44:	f7fe ff88 	bl	80b58 <_sbrk>
   81c48:	1c43      	adds	r3, r0, #1
   81c4a:	d000      	beq.n	81c4e <_sbrk_r+0x16>
   81c4c:	bd38      	pop	{r3, r4, r5, pc}
   81c4e:	6823      	ldr	r3, [r4, #0]
   81c50:	2b00      	cmp	r3, #0
   81c52:	d0fb      	beq.n	81c4c <_sbrk_r+0x14>
   81c54:	602b      	str	r3, [r5, #0]
   81c56:	bd38      	pop	{r3, r4, r5, pc}
   81c58:	20070a5c 	.word	0x20070a5c

00081c5c <__sread>:
   81c5c:	b510      	push	{r4, lr}
   81c5e:	460c      	mov	r4, r1
   81c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81c64:	f000 f90a 	bl	81e7c <_read_r>
   81c68:	2800      	cmp	r0, #0
   81c6a:	db03      	blt.n	81c74 <__sread+0x18>
   81c6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   81c6e:	4403      	add	r3, r0
   81c70:	6523      	str	r3, [r4, #80]	; 0x50
   81c72:	bd10      	pop	{r4, pc}
   81c74:	89a3      	ldrh	r3, [r4, #12]
   81c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81c7a:	81a3      	strh	r3, [r4, #12]
   81c7c:	bd10      	pop	{r4, pc}
   81c7e:	bf00      	nop

00081c80 <__swrite>:
   81c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c84:	460c      	mov	r4, r1
   81c86:	8989      	ldrh	r1, [r1, #12]
   81c88:	461d      	mov	r5, r3
   81c8a:	05cb      	lsls	r3, r1, #23
   81c8c:	4616      	mov	r6, r2
   81c8e:	4607      	mov	r7, r0
   81c90:	d506      	bpl.n	81ca0 <__swrite+0x20>
   81c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81c96:	2200      	movs	r2, #0
   81c98:	2302      	movs	r3, #2
   81c9a:	f000 f8db 	bl	81e54 <_lseek_r>
   81c9e:	89a1      	ldrh	r1, [r4, #12]
   81ca0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   81ca4:	81a1      	strh	r1, [r4, #12]
   81ca6:	4638      	mov	r0, r7
   81ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81cac:	4632      	mov	r2, r6
   81cae:	462b      	mov	r3, r5
   81cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81cb4:	f000 b814 	b.w	81ce0 <_write_r>

00081cb8 <__sseek>:
   81cb8:	b510      	push	{r4, lr}
   81cba:	460c      	mov	r4, r1
   81cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81cc0:	f000 f8c8 	bl	81e54 <_lseek_r>
   81cc4:	89a3      	ldrh	r3, [r4, #12]
   81cc6:	1c42      	adds	r2, r0, #1
   81cc8:	bf0e      	itee	eq
   81cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   81cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   81cd2:	6520      	strne	r0, [r4, #80]	; 0x50
   81cd4:	81a3      	strh	r3, [r4, #12]
   81cd6:	bd10      	pop	{r4, pc}

00081cd8 <__sclose>:
   81cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81cdc:	f000 b866 	b.w	81dac <_close_r>

00081ce0 <_write_r>:
   81ce0:	b570      	push	{r4, r5, r6, lr}
   81ce2:	4c08      	ldr	r4, [pc, #32]	; (81d04 <_write_r+0x24>)
   81ce4:	4606      	mov	r6, r0
   81ce6:	2500      	movs	r5, #0
   81ce8:	4608      	mov	r0, r1
   81cea:	4611      	mov	r1, r2
   81cec:	461a      	mov	r2, r3
   81cee:	6025      	str	r5, [r4, #0]
   81cf0:	f7fe fa7e 	bl	801f0 <_write>
   81cf4:	1c43      	adds	r3, r0, #1
   81cf6:	d000      	beq.n	81cfa <_write_r+0x1a>
   81cf8:	bd70      	pop	{r4, r5, r6, pc}
   81cfa:	6823      	ldr	r3, [r4, #0]
   81cfc:	2b00      	cmp	r3, #0
   81cfe:	d0fb      	beq.n	81cf8 <_write_r+0x18>
   81d00:	6033      	str	r3, [r6, #0]
   81d02:	bd70      	pop	{r4, r5, r6, pc}
   81d04:	20070a5c 	.word	0x20070a5c

00081d08 <__register_exitproc>:
   81d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81d0c:	4c25      	ldr	r4, [pc, #148]	; (81da4 <__register_exitproc+0x9c>)
   81d0e:	4606      	mov	r6, r0
   81d10:	6825      	ldr	r5, [r4, #0]
   81d12:	4688      	mov	r8, r1
   81d14:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   81d18:	4692      	mov	sl, r2
   81d1a:	4699      	mov	r9, r3
   81d1c:	b3c4      	cbz	r4, 81d90 <__register_exitproc+0x88>
   81d1e:	6860      	ldr	r0, [r4, #4]
   81d20:	281f      	cmp	r0, #31
   81d22:	dc17      	bgt.n	81d54 <__register_exitproc+0x4c>
   81d24:	1c41      	adds	r1, r0, #1
   81d26:	b176      	cbz	r6, 81d46 <__register_exitproc+0x3e>
   81d28:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   81d2c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   81d30:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   81d34:	2201      	movs	r2, #1
   81d36:	4082      	lsls	r2, r0
   81d38:	4315      	orrs	r5, r2
   81d3a:	2e02      	cmp	r6, #2
   81d3c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   81d40:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   81d44:	d01e      	beq.n	81d84 <__register_exitproc+0x7c>
   81d46:	1c83      	adds	r3, r0, #2
   81d48:	6061      	str	r1, [r4, #4]
   81d4a:	2000      	movs	r0, #0
   81d4c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   81d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d54:	4b14      	ldr	r3, [pc, #80]	; (81da8 <__register_exitproc+0xa0>)
   81d56:	b303      	cbz	r3, 81d9a <__register_exitproc+0x92>
   81d58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81d5c:	f7ff fcda 	bl	81714 <malloc>
   81d60:	4604      	mov	r4, r0
   81d62:	b1d0      	cbz	r0, 81d9a <__register_exitproc+0x92>
   81d64:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   81d68:	2700      	movs	r7, #0
   81d6a:	e884 0088 	stmia.w	r4, {r3, r7}
   81d6e:	4638      	mov	r0, r7
   81d70:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81d74:	2101      	movs	r1, #1
   81d76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   81d7a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   81d7e:	2e00      	cmp	r6, #0
   81d80:	d0e1      	beq.n	81d46 <__register_exitproc+0x3e>
   81d82:	e7d1      	b.n	81d28 <__register_exitproc+0x20>
   81d84:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81d88:	431a      	orrs	r2, r3
   81d8a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   81d8e:	e7da      	b.n	81d46 <__register_exitproc+0x3e>
   81d90:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   81d94:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81d98:	e7c1      	b.n	81d1e <__register_exitproc+0x16>
   81d9a:	f04f 30ff 	mov.w	r0, #4294967295
   81d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81da2:	bf00      	nop
   81da4:	00081ed0 	.word	0x00081ed0
   81da8:	00081715 	.word	0x00081715

00081dac <_close_r>:
   81dac:	b538      	push	{r3, r4, r5, lr}
   81dae:	4c07      	ldr	r4, [pc, #28]	; (81dcc <_close_r+0x20>)
   81db0:	2300      	movs	r3, #0
   81db2:	4605      	mov	r5, r0
   81db4:	4608      	mov	r0, r1
   81db6:	6023      	str	r3, [r4, #0]
   81db8:	f7fe fee8 	bl	80b8c <_close>
   81dbc:	1c43      	adds	r3, r0, #1
   81dbe:	d000      	beq.n	81dc2 <_close_r+0x16>
   81dc0:	bd38      	pop	{r3, r4, r5, pc}
   81dc2:	6823      	ldr	r3, [r4, #0]
   81dc4:	2b00      	cmp	r3, #0
   81dc6:	d0fb      	beq.n	81dc0 <_close_r+0x14>
   81dc8:	602b      	str	r3, [r5, #0]
   81dca:	bd38      	pop	{r3, r4, r5, pc}
   81dcc:	20070a5c 	.word	0x20070a5c

00081dd0 <_fclose_r>:
   81dd0:	2900      	cmp	r1, #0
   81dd2:	d03d      	beq.n	81e50 <_fclose_r+0x80>
   81dd4:	b570      	push	{r4, r5, r6, lr}
   81dd6:	4605      	mov	r5, r0
   81dd8:	460c      	mov	r4, r1
   81dda:	b108      	cbz	r0, 81de0 <_fclose_r+0x10>
   81ddc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81dde:	b37b      	cbz	r3, 81e40 <_fclose_r+0x70>
   81de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81de4:	b90b      	cbnz	r3, 81dea <_fclose_r+0x1a>
   81de6:	2000      	movs	r0, #0
   81de8:	bd70      	pop	{r4, r5, r6, pc}
   81dea:	4628      	mov	r0, r5
   81dec:	4621      	mov	r1, r4
   81dee:	f7ff f9eb 	bl	811c8 <__sflush_r>
   81df2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81df4:	4606      	mov	r6, r0
   81df6:	b133      	cbz	r3, 81e06 <_fclose_r+0x36>
   81df8:	4628      	mov	r0, r5
   81dfa:	69e1      	ldr	r1, [r4, #28]
   81dfc:	4798      	blx	r3
   81dfe:	2800      	cmp	r0, #0
   81e00:	bfb8      	it	lt
   81e02:	f04f 36ff 	movlt.w	r6, #4294967295
   81e06:	89a3      	ldrh	r3, [r4, #12]
   81e08:	061b      	lsls	r3, r3, #24
   81e0a:	d41c      	bmi.n	81e46 <_fclose_r+0x76>
   81e0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e0e:	b141      	cbz	r1, 81e22 <_fclose_r+0x52>
   81e10:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e14:	4299      	cmp	r1, r3
   81e16:	d002      	beq.n	81e1e <_fclose_r+0x4e>
   81e18:	4628      	mov	r0, r5
   81e1a:	f7ff fb7b 	bl	81514 <_free_r>
   81e1e:	2300      	movs	r3, #0
   81e20:	6323      	str	r3, [r4, #48]	; 0x30
   81e22:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81e24:	b121      	cbz	r1, 81e30 <_fclose_r+0x60>
   81e26:	4628      	mov	r0, r5
   81e28:	f7ff fb74 	bl	81514 <_free_r>
   81e2c:	2300      	movs	r3, #0
   81e2e:	6463      	str	r3, [r4, #68]	; 0x44
   81e30:	f7ff fb08 	bl	81444 <__sfp_lock_acquire>
   81e34:	2300      	movs	r3, #0
   81e36:	81a3      	strh	r3, [r4, #12]
   81e38:	f7ff fb06 	bl	81448 <__sfp_lock_release>
   81e3c:	4630      	mov	r0, r6
   81e3e:	bd70      	pop	{r4, r5, r6, pc}
   81e40:	f7ff fafa 	bl	81438 <__sinit>
   81e44:	e7cc      	b.n	81de0 <_fclose_r+0x10>
   81e46:	4628      	mov	r0, r5
   81e48:	6921      	ldr	r1, [r4, #16]
   81e4a:	f7ff fb63 	bl	81514 <_free_r>
   81e4e:	e7dd      	b.n	81e0c <_fclose_r+0x3c>
   81e50:	2000      	movs	r0, #0
   81e52:	4770      	bx	lr

00081e54 <_lseek_r>:
   81e54:	b570      	push	{r4, r5, r6, lr}
   81e56:	4c08      	ldr	r4, [pc, #32]	; (81e78 <_lseek_r+0x24>)
   81e58:	4606      	mov	r6, r0
   81e5a:	2500      	movs	r5, #0
   81e5c:	4608      	mov	r0, r1
   81e5e:	4611      	mov	r1, r2
   81e60:	461a      	mov	r2, r3
   81e62:	6025      	str	r5, [r4, #0]
   81e64:	f7fe fe96 	bl	80b94 <_lseek>
   81e68:	1c43      	adds	r3, r0, #1
   81e6a:	d000      	beq.n	81e6e <_lseek_r+0x1a>
   81e6c:	bd70      	pop	{r4, r5, r6, pc}
   81e6e:	6823      	ldr	r3, [r4, #0]
   81e70:	2b00      	cmp	r3, #0
   81e72:	d0fb      	beq.n	81e6c <_lseek_r+0x18>
   81e74:	6033      	str	r3, [r6, #0]
   81e76:	bd70      	pop	{r4, r5, r6, pc}
   81e78:	20070a5c 	.word	0x20070a5c

00081e7c <_read_r>:
   81e7c:	b570      	push	{r4, r5, r6, lr}
   81e7e:	4c08      	ldr	r4, [pc, #32]	; (81ea0 <_read_r+0x24>)
   81e80:	4606      	mov	r6, r0
   81e82:	2500      	movs	r5, #0
   81e84:	4608      	mov	r0, r1
   81e86:	4611      	mov	r1, r2
   81e88:	461a      	mov	r2, r3
   81e8a:	6025      	str	r5, [r4, #0]
   81e8c:	f7fe f992 	bl	801b4 <_read>
   81e90:	1c43      	adds	r3, r0, #1
   81e92:	d000      	beq.n	81e96 <_read_r+0x1a>
   81e94:	bd70      	pop	{r4, r5, r6, pc}
   81e96:	6823      	ldr	r3, [r4, #0]
   81e98:	2b00      	cmp	r3, #0
   81e9a:	d0fb      	beq.n	81e94 <_read_r+0x18>
   81e9c:	6033      	str	r3, [r6, #0]
   81e9e:	bd70      	pop	{r4, r5, r6, pc}
   81ea0:	20070a5c 	.word	0x20070a5c
   81ea4:	0001e848 	.word	0x0001e848
   81ea8:	000000c0 	.word	0x000000c0
   81eac:	00000800 	.word	0x00000800
	...

00081ebc <DX5eBindData>:
   81ebc:	00000098 ff09ff05 aa10ff0d 0000aa14     ................
   81ecc:	00000043                                C...

00081ed0 <_global_impure_ptr>:
   81ed0:	20070130                                0.. 

00081ed4 <_init>:
   81ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ed6:	bf00      	nop
   81ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eda:	bc08      	pop	{r3}
   81edc:	469e      	mov	lr, r3
   81ede:	4770      	bx	lr

00081ee0 <__init_array_start>:
   81ee0:	000811a9 	.word	0x000811a9

00081ee4 <__frame_dummy_init_array_entry>:
   81ee4:	00080119                                ....

00081ee8 <_fini>:
   81ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81eea:	bf00      	nop
   81eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eee:	bc08      	pop	{r3}
   81ef0:	469e      	mov	lr, r3
   81ef2:	4770      	bx	lr

00081ef4 <__fini_array_start>:
   81ef4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00081ecc 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <__malloc_av_>:
	...
20070564:	2007055c 2007055c 20070564 20070564     \.. \.. d.. d.. 
20070574:	2007056c 2007056c 20070574 20070574     l.. l.. t.. t.. 
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 

20070964 <__malloc_trim_threshold>:
20070964:	00020000                                ....

20070968 <__malloc_sbrk_base>:
20070968:	ffffffff                                ....
