
USART_USART_SERIAL_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d2c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000096c  20070000  00081d2c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000ec  2007096c  00082698  0001096c  2**2
                  ALLOC
  3 .stack        00002000  20070a58  00082784  0001096c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001096c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010995  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009b20  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bf0  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004099  00000000  00000000  0001c100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000998  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008a8  00000000  00000000  00020b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016dc5  00000000  00000000  000213d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b6a6  00000000  00000000  0003819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000630e9  00000000  00000000  00043844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a7c  00000000  00000000  000a6930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a58 	.word	0x20072a58
   80004:	000808f5 	.word	0x000808f5
   80008:	000808f1 	.word	0x000808f1
   8000c:	000808f1 	.word	0x000808f1
   80010:	000808f1 	.word	0x000808f1
   80014:	000808f1 	.word	0x000808f1
   80018:	000808f1 	.word	0x000808f1
	...
   8002c:	000808f1 	.word	0x000808f1
   80030:	000808f1 	.word	0x000808f1
   80034:	00000000 	.word	0x00000000
   80038:	000808f1 	.word	0x000808f1
   8003c:	000808f1 	.word	0x000808f1
   80040:	000808f1 	.word	0x000808f1
   80044:	000808f1 	.word	0x000808f1
   80048:	000808f1 	.word	0x000808f1
   8004c:	000808f1 	.word	0x000808f1
   80050:	000808f1 	.word	0x000808f1
   80054:	000808f1 	.word	0x000808f1
   80058:	000808f1 	.word	0x000808f1
   8005c:	000808f1 	.word	0x000808f1
   80060:	000808f1 	.word	0x000808f1
   80064:	000808f1 	.word	0x000808f1
   80068:	00000000 	.word	0x00000000
   8006c:	00080529 	.word	0x00080529
   80070:	0008053d 	.word	0x0008053d
   80074:	00080551 	.word	0x00080551
   80078:	00080565 	.word	0x00080565
	...
   80084:	000808f1 	.word	0x000808f1
   80088:	000808f1 	.word	0x000808f1
   8008c:	000808f1 	.word	0x000808f1
   80090:	000808f1 	.word	0x000808f1
   80094:	000808f1 	.word	0x000808f1
   80098:	000808f1 	.word	0x000808f1
   8009c:	000808f1 	.word	0x000808f1
   800a0:	000808f1 	.word	0x000808f1
   800a4:	00000000 	.word	0x00000000
   800a8:	000808f1 	.word	0x000808f1
   800ac:	000808f1 	.word	0x000808f1
   800b0:	000808f1 	.word	0x000808f1
   800b4:	000808f1 	.word	0x000808f1
   800b8:	00080c45 	.word	0x00080c45
   800bc:	000808f1 	.word	0x000808f1
   800c0:	000808f1 	.word	0x000808f1
   800c4:	000808f1 	.word	0x000808f1
   800c8:	000808f1 	.word	0x000808f1
   800cc:	000808f1 	.word	0x000808f1
   800d0:	000808f1 	.word	0x000808f1
   800d4:	000808f1 	.word	0x000808f1
   800d8:	000808f1 	.word	0x000808f1
   800dc:	000808f1 	.word	0x000808f1
   800e0:	000808f1 	.word	0x000808f1
   800e4:	000808f1 	.word	0x000808f1
   800e8:	000808f1 	.word	0x000808f1
   800ec:	000808f1 	.word	0x000808f1
   800f0:	000808f1 	.word	0x000808f1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007096c 	.word	0x2007096c
   80110:	00000000 	.word	0x00000000
   80114:	00081d2c 	.word	0x00081d2c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00081d2c 	.word	0x00081d2c
   80144:	20070970 	.word	0x20070970
   80148:	00081d2c 	.word	0x00081d2c
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000805e1 	.word	0x000805e1
   80198:	00080635 	.word	0x00080635
   8019c:	00080645 	.word	0x00080645
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080655 	.word	0x00080655
   801ac:	00080579 	.word	0x00080579
   801b0:	000809a5 	.word	0x000809a5

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	20070a40 	.word	0x20070a40
   801ec:	20070a38 	.word	0x20070a38

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d818      	bhi.n	80228 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b182      	cbz	r2, 80222 <_write+0x32>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80222:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8022c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a3c 	.word	0x20070a3c
   8023c:	20070a40 	.word	0x20070a40

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b16      	ldr	r3, [pc, #88]	; (802a0 <board_init+0x60>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c15      	ldr	r4, [pc, #84]	; (802a4 <board_init+0x64>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c11      	ldr	r4, [pc, #68]	; (802a8 <board_init+0x68>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	490c      	ldr	r1, [pc, #48]	; (802ac <board_init+0x6c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	490c      	ldr	r1, [pc, #48]	; (802b0 <board_init+0x70>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	480c      	ldr	r0, [pc, #48]	; (802b4 <board_init+0x74>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a0b      	ldr	r2, [pc, #44]	; (802b8 <board_init+0x78>)
   8028a:	4b0c      	ldr	r3, [pc, #48]	; (802bc <board_init+0x7c>)
   8028c:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   8028e:	200a      	movs	r0, #10
   80290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80294:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80296:	200b      	movs	r0, #11
   80298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029c:	47a0      	blx	r4
   8029e:	bd10      	pop	{r4, pc}
   802a0:	400e1a50 	.word	0x400e1a50
   802a4:	00080665 	.word	0x00080665
   802a8:	00080365 	.word	0x00080365
   802ac:	28000079 	.word	0x28000079
   802b0:	28000001 	.word	0x28000001
   802b4:	400e0e00 	.word	0x400e0e00
   802b8:	08000001 	.word	0x08000001
   802bc:	00080439 	.word	0x00080439

000802c0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802c0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802c2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802c6:	d016      	beq.n	802f6 <pio_set_peripheral+0x36>
   802c8:	d804      	bhi.n	802d4 <pio_set_peripheral+0x14>
   802ca:	b1c1      	cbz	r1, 802fe <pio_set_peripheral+0x3e>
   802cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802d0:	d00a      	beq.n	802e8 <pio_set_peripheral+0x28>
   802d2:	e013      	b.n	802fc <pio_set_peripheral+0x3c>
   802d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802d8:	d011      	beq.n	802fe <pio_set_peripheral+0x3e>
   802da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802de:	d00e      	beq.n	802fe <pio_set_peripheral+0x3e>
   802e0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802e4:	d10a      	bne.n	802fc <pio_set_peripheral+0x3c>
   802e6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802ec:	400b      	ands	r3, r1
   802ee:	ea23 0302 	bic.w	r3, r3, r2
   802f2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802f4:	e002      	b.n	802fc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802f8:	4313      	orrs	r3, r2
   802fa:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802fc:	6042      	str	r2, [r0, #4]
   802fe:	4770      	bx	lr

00080300 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80300:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80302:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80306:	bf14      	ite	ne
   80308:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8030a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8030c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80310:	bf14      	ite	ne
   80312:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80314:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80316:	f012 0f02 	tst.w	r2, #2
   8031a:	d002      	beq.n	80322 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8031c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80320:	e004      	b.n	8032c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80322:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80326:	bf18      	it	ne
   80328:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8032c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8032e:	6001      	str	r1, [r0, #0]
   80330:	4770      	bx	lr
   80332:	bf00      	nop

00080334 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80334:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80336:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80338:	9c01      	ldr	r4, [sp, #4]
   8033a:	b10c      	cbz	r4, 80340 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8033c:	6641      	str	r1, [r0, #100]	; 0x64
   8033e:	e000      	b.n	80342 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80340:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80342:	b10b      	cbz	r3, 80348 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80344:	6501      	str	r1, [r0, #80]	; 0x50
   80346:	e000      	b.n	8034a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80348:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8034a:	b10a      	cbz	r2, 80350 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8034c:	6301      	str	r1, [r0, #48]	; 0x30
   8034e:	e000      	b.n	80352 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80350:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80352:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80354:	6001      	str	r1, [r0, #0]
}
   80356:	f85d 4b04 	ldr.w	r4, [sp], #4
   8035a:	4770      	bx	lr

0008035c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8035c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8035e:	4770      	bx	lr

00080360 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80360:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80362:	4770      	bx	lr

00080364 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80364:	b570      	push	{r4, r5, r6, lr}
   80366:	b082      	sub	sp, #8
   80368:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8036a:	0943      	lsrs	r3, r0, #5
   8036c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80370:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80374:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80376:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8037a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8037e:	d030      	beq.n	803e2 <pio_configure_pin+0x7e>
   80380:	d806      	bhi.n	80390 <pio_configure_pin+0x2c>
   80382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80386:	d00a      	beq.n	8039e <pio_configure_pin+0x3a>
   80388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8038c:	d018      	beq.n	803c0 <pio_configure_pin+0x5c>
   8038e:	e049      	b.n	80424 <pio_configure_pin+0xc0>
   80390:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80394:	d030      	beq.n	803f8 <pio_configure_pin+0x94>
   80396:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8039a:	d02d      	beq.n	803f8 <pio_configure_pin+0x94>
   8039c:	e042      	b.n	80424 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8039e:	f000 001f 	and.w	r0, r0, #31
   803a2:	2601      	movs	r6, #1
   803a4:	4086      	lsls	r6, r0
   803a6:	4620      	mov	r0, r4
   803a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ac:	4632      	mov	r2, r6
   803ae:	4b1f      	ldr	r3, [pc, #124]	; (8042c <pio_configure_pin+0xc8>)
   803b0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803b6:	bf14      	ite	ne
   803b8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803ba:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803bc:	2001      	movs	r0, #1
   803be:	e032      	b.n	80426 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803c0:	f000 001f 	and.w	r0, r0, #31
   803c4:	2601      	movs	r6, #1
   803c6:	4086      	lsls	r6, r0
   803c8:	4620      	mov	r0, r4
   803ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803ce:	4632      	mov	r2, r6
   803d0:	4b16      	ldr	r3, [pc, #88]	; (8042c <pio_configure_pin+0xc8>)
   803d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803d8:	bf14      	ite	ne
   803da:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803dc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803de:	2001      	movs	r0, #1
   803e0:	e021      	b.n	80426 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803e2:	f000 031f 	and.w	r3, r0, #31
   803e6:	2601      	movs	r6, #1
   803e8:	4620      	mov	r0, r4
   803ea:	fa06 f103 	lsl.w	r1, r6, r3
   803ee:	462a      	mov	r2, r5
   803f0:	4b0f      	ldr	r3, [pc, #60]	; (80430 <pio_configure_pin+0xcc>)
   803f2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803f4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803f6:	e016      	b.n	80426 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803f8:	f000 031f 	and.w	r3, r0, #31
   803fc:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80402:	ea05 0106 	and.w	r1, r5, r6
   80406:	9100      	str	r1, [sp, #0]
   80408:	4620      	mov	r0, r4
   8040a:	fa06 f103 	lsl.w	r1, r6, r3
   8040e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80412:	bf14      	ite	ne
   80414:	2200      	movne	r2, #0
   80416:	2201      	moveq	r2, #1
   80418:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8041c:	4c05      	ldr	r4, [pc, #20]	; (80434 <pio_configure_pin+0xd0>)
   8041e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80420:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80422:	e000      	b.n	80426 <pio_configure_pin+0xc2>

	default:
		return 0;
   80424:	2000      	movs	r0, #0
	}

	return 1;
}
   80426:	b002      	add	sp, #8
   80428:	bd70      	pop	{r4, r5, r6, pc}
   8042a:	bf00      	nop
   8042c:	000802c1 	.word	0x000802c1
   80430:	00080301 	.word	0x00080301
   80434:	00080335 	.word	0x00080335

00080438 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80438:	b570      	push	{r4, r5, r6, lr}
   8043a:	b082      	sub	sp, #8
   8043c:	4606      	mov	r6, r0
   8043e:	460d      	mov	r5, r1
   80440:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80442:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80446:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8044a:	d026      	beq.n	8049a <pio_configure_pin_group+0x62>
   8044c:	d806      	bhi.n	8045c <pio_configure_pin_group+0x24>
   8044e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80452:	d00a      	beq.n	8046a <pio_configure_pin_group+0x32>
   80454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80458:	d013      	beq.n	80482 <pio_configure_pin_group+0x4a>
   8045a:	e034      	b.n	804c6 <pio_configure_pin_group+0x8e>
   8045c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80460:	d01f      	beq.n	804a2 <pio_configure_pin_group+0x6a>
   80462:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80466:	d01c      	beq.n	804a2 <pio_configure_pin_group+0x6a>
   80468:	e02d      	b.n	804c6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8046a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8046e:	462a      	mov	r2, r5
   80470:	4b16      	ldr	r3, [pc, #88]	; (804cc <pio_configure_pin_group+0x94>)
   80472:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80474:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80478:	bf14      	ite	ne
   8047a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8047c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8047e:	2001      	movs	r0, #1
   80480:	e022      	b.n	804c8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80482:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80486:	462a      	mov	r2, r5
   80488:	4b10      	ldr	r3, [pc, #64]	; (804cc <pio_configure_pin_group+0x94>)
   8048a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8048c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80490:	bf14      	ite	ne
   80492:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80494:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80496:	2001      	movs	r0, #1
   80498:	e016      	b.n	804c8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8049a:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <pio_configure_pin_group+0x98>)
   8049c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8049e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   804a0:	e012      	b.n	804c8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804a2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   804a6:	f004 0301 	and.w	r3, r4, #1
   804aa:	9300      	str	r3, [sp, #0]
   804ac:	4630      	mov	r0, r6
   804ae:	4629      	mov	r1, r5
   804b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804b4:	bf14      	ite	ne
   804b6:	2200      	movne	r2, #0
   804b8:	2201      	moveq	r2, #1
   804ba:	f3c4 0380 	ubfx	r3, r4, #2, #1
   804be:	4c05      	ldr	r4, [pc, #20]	; (804d4 <pio_configure_pin_group+0x9c>)
   804c0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804c2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804c4:	e000      	b.n	804c8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   804c6:	2000      	movs	r0, #0
	}

	return 1;
}
   804c8:	b002      	add	sp, #8
   804ca:	bd70      	pop	{r4, r5, r6, pc}
   804cc:	000802c1 	.word	0x000802c1
   804d0:	00080301 	.word	0x00080301
   804d4:	00080335 	.word	0x00080335

000804d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804dc:	4604      	mov	r4, r0
   804de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804e0:	4b0e      	ldr	r3, [pc, #56]	; (8051c <pio_handler_process+0x44>)
   804e2:	4798      	blx	r3
   804e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804e6:	4620      	mov	r0, r4
   804e8:	4b0d      	ldr	r3, [pc, #52]	; (80520 <pio_handler_process+0x48>)
   804ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804ec:	4005      	ands	r5, r0
   804ee:	d013      	beq.n	80518 <pio_handler_process+0x40>
   804f0:	4c0c      	ldr	r4, [pc, #48]	; (80524 <pio_handler_process+0x4c>)
   804f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804f6:	6823      	ldr	r3, [r4, #0]
   804f8:	4543      	cmp	r3, r8
   804fa:	d108      	bne.n	8050e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804fc:	6861      	ldr	r1, [r4, #4]
   804fe:	4229      	tst	r1, r5
   80500:	d005      	beq.n	8050e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80502:	68e3      	ldr	r3, [r4, #12]
   80504:	4640      	mov	r0, r8
   80506:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80508:	6863      	ldr	r3, [r4, #4]
   8050a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8050e:	42b4      	cmp	r4, r6
   80510:	d002      	beq.n	80518 <pio_handler_process+0x40>
   80512:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80514:	2d00      	cmp	r5, #0
   80516:	d1ee      	bne.n	804f6 <pio_handler_process+0x1e>
   80518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8051c:	0008035d 	.word	0x0008035d
   80520:	00080361 	.word	0x00080361
   80524:	20070988 	.word	0x20070988

00080528 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80528:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8052a:	4802      	ldr	r0, [pc, #8]	; (80534 <PIOA_Handler+0xc>)
   8052c:	210b      	movs	r1, #11
   8052e:	4b02      	ldr	r3, [pc, #8]	; (80538 <PIOA_Handler+0x10>)
   80530:	4798      	blx	r3
   80532:	bd08      	pop	{r3, pc}
   80534:	400e0e00 	.word	0x400e0e00
   80538:	000804d9 	.word	0x000804d9

0008053c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8053c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8053e:	4802      	ldr	r0, [pc, #8]	; (80548 <PIOB_Handler+0xc>)
   80540:	210c      	movs	r1, #12
   80542:	4b02      	ldr	r3, [pc, #8]	; (8054c <PIOB_Handler+0x10>)
   80544:	4798      	blx	r3
   80546:	bd08      	pop	{r3, pc}
   80548:	400e1000 	.word	0x400e1000
   8054c:	000804d9 	.word	0x000804d9

00080550 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80550:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80552:	4802      	ldr	r0, [pc, #8]	; (8055c <PIOC_Handler+0xc>)
   80554:	210d      	movs	r1, #13
   80556:	4b02      	ldr	r3, [pc, #8]	; (80560 <PIOC_Handler+0x10>)
   80558:	4798      	blx	r3
   8055a:	bd08      	pop	{r3, pc}
   8055c:	400e1200 	.word	0x400e1200
   80560:	000804d9 	.word	0x000804d9

00080564 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80564:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80566:	4802      	ldr	r0, [pc, #8]	; (80570 <PIOD_Handler+0xc>)
   80568:	210e      	movs	r1, #14
   8056a:	4b02      	ldr	r3, [pc, #8]	; (80574 <PIOD_Handler+0x10>)
   8056c:	4798      	blx	r3
   8056e:	bd08      	pop	{r3, pc}
   80570:	400e1400 	.word	0x400e1400
   80574:	000804d9 	.word	0x000804d9

00080578 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80578:	4a18      	ldr	r2, [pc, #96]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   8057a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8057c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80580:	4318      	orrs	r0, r3
   80582:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80584:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80586:	f013 0f08 	tst.w	r3, #8
   8058a:	d003      	beq.n	80594 <pmc_switch_mck_to_pllack+0x1c>
   8058c:	e009      	b.n	805a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8058e:	3b01      	subs	r3, #1
   80590:	d103      	bne.n	8059a <pmc_switch_mck_to_pllack+0x22>
   80592:	e01e      	b.n	805d2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80594:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80598:	4910      	ldr	r1, [pc, #64]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   8059a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8059c:	f012 0f08 	tst.w	r2, #8
   805a0:	d0f5      	beq.n	8058e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   805a2:	4a0e      	ldr	r2, [pc, #56]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   805a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805a6:	f023 0303 	bic.w	r3, r3, #3
   805aa:	f043 0302 	orr.w	r3, r3, #2
   805ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   805b2:	f010 0008 	ands.w	r0, r0, #8
   805b6:	d004      	beq.n	805c2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   805b8:	2000      	movs	r0, #0
   805ba:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   805bc:	3b01      	subs	r3, #1
   805be:	d103      	bne.n	805c8 <pmc_switch_mck_to_pllack+0x50>
   805c0:	e009      	b.n	805d6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805c6:	4905      	ldr	r1, [pc, #20]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   805c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805ca:	f012 0f08 	tst.w	r2, #8
   805ce:	d0f5      	beq.n	805bc <pmc_switch_mck_to_pllack+0x44>
   805d0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805d2:	2001      	movs	r0, #1
   805d4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805d6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805d8:	4770      	bx	lr
   805da:	bf00      	nop
   805dc:	400e0600 	.word	0x400e0600

000805e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   805e0:	b138      	cbz	r0, 805f2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805e2:	4911      	ldr	r1, [pc, #68]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   805e4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   805e6:	4a11      	ldr	r2, [pc, #68]	; (8062c <pmc_switch_mainck_to_xtal+0x4c>)
   805e8:	401a      	ands	r2, r3
   805ea:	4b11      	ldr	r3, [pc, #68]	; (80630 <pmc_switch_mainck_to_xtal+0x50>)
   805ec:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805ee:	620b      	str	r3, [r1, #32]
   805f0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805f2:	4a0d      	ldr	r2, [pc, #52]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   805f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805f6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   805fa:	f023 0303 	bic.w	r3, r3, #3
   805fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80602:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80606:	0209      	lsls	r1, r1, #8
   80608:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8060a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8060c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8060e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80610:	f013 0f01 	tst.w	r3, #1
   80614:	d0fb      	beq.n	8060e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80616:	4a04      	ldr	r2, [pc, #16]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   80618:	6a13      	ldr	r3, [r2, #32]
   8061a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8061e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80622:	6213      	str	r3, [r2, #32]
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400e0600 	.word	0x400e0600
   8062c:	fec8fffc 	.word	0xfec8fffc
   80630:	01370002 	.word	0x01370002

00080634 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80634:	4b02      	ldr	r3, [pc, #8]	; (80640 <pmc_osc_is_ready_mainck+0xc>)
   80636:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80638:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8063c:	4770      	bx	lr
   8063e:	bf00      	nop
   80640:	400e0600 	.word	0x400e0600

00080644 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80644:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80648:	4b01      	ldr	r3, [pc, #4]	; (80650 <pmc_disable_pllack+0xc>)
   8064a:	629a      	str	r2, [r3, #40]	; 0x28
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	400e0600 	.word	0x400e0600

00080654 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80654:	4b02      	ldr	r3, [pc, #8]	; (80660 <pmc_is_locked_pllack+0xc>)
   80656:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80658:	f000 0002 	and.w	r0, r0, #2
   8065c:	4770      	bx	lr
   8065e:	bf00      	nop
   80660:	400e0600 	.word	0x400e0600

00080664 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80664:	282c      	cmp	r0, #44	; 0x2c
   80666:	d81e      	bhi.n	806a6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80668:	281f      	cmp	r0, #31
   8066a:	d80c      	bhi.n	80686 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8066c:	4b11      	ldr	r3, [pc, #68]	; (806b4 <pmc_enable_periph_clk+0x50>)
   8066e:	699a      	ldr	r2, [r3, #24]
   80670:	2301      	movs	r3, #1
   80672:	4083      	lsls	r3, r0
   80674:	401a      	ands	r2, r3
   80676:	4293      	cmp	r3, r2
   80678:	d017      	beq.n	806aa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8067a:	2301      	movs	r3, #1
   8067c:	4083      	lsls	r3, r0
   8067e:	4a0d      	ldr	r2, [pc, #52]	; (806b4 <pmc_enable_periph_clk+0x50>)
   80680:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80682:	2000      	movs	r0, #0
   80684:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80686:	4b0b      	ldr	r3, [pc, #44]	; (806b4 <pmc_enable_periph_clk+0x50>)
   80688:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8068c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8068e:	2301      	movs	r3, #1
   80690:	4083      	lsls	r3, r0
   80692:	401a      	ands	r2, r3
   80694:	4293      	cmp	r3, r2
   80696:	d00a      	beq.n	806ae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80698:	2301      	movs	r3, #1
   8069a:	4083      	lsls	r3, r0
   8069c:	4a05      	ldr	r2, [pc, #20]	; (806b4 <pmc_enable_periph_clk+0x50>)
   8069e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   806a2:	2000      	movs	r0, #0
   806a4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   806a6:	2001      	movs	r0, #1
   806a8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806aa:	2000      	movs	r0, #0
   806ac:	4770      	bx	lr
   806ae:	2000      	movs	r0, #0
}
   806b0:	4770      	bx	lr
   806b2:	bf00      	nop
   806b4:	400e0600 	.word	0x400e0600

000806b8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   806b8:	b410      	push	{r4}
   806ba:	0189      	lsls	r1, r1, #6
   806bc:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   806be:	2402      	movs	r4, #2
   806c0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   806c2:	f04f 31ff 	mov.w	r1, #4294967295
   806c6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   806c8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   806ca:	605a      	str	r2, [r3, #4]
}
   806cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   806d0:	4770      	bx	lr
   806d2:	bf00      	nop

000806d4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   806d4:	0189      	lsls	r1, r1, #6
   806d6:	2305      	movs	r3, #5
   806d8:	5043      	str	r3, [r0, r1]
   806da:	4770      	bx	lr

000806dc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   806dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806e0:	61ca      	str	r2, [r1, #28]
   806e2:	4770      	bx	lr

000806e4 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
   806e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806e8:	624a      	str	r2, [r1, #36]	; 0x24
   806ea:	4770      	bx	lr

000806ec <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
   806ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806f0:	6a08      	ldr	r0, [r1, #32]
}
   806f2:	4770      	bx	lr

000806f4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   806f4:	b4f0      	push	{r4, r5, r6, r7}
   806f6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   806f8:	2402      	movs	r4, #2
   806fa:	9401      	str	r4, [sp, #4]
   806fc:	2408      	movs	r4, #8
   806fe:	9402      	str	r4, [sp, #8]
   80700:	2420      	movs	r4, #32
   80702:	9403      	str	r4, [sp, #12]
   80704:	2480      	movs	r4, #128	; 0x80
   80706:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   80708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8070a:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   8070c:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   8070e:	0c4c      	lsrs	r4, r1, #17
		if (ul_freq > ul_high) {
   80710:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   80714:	d81b      	bhi.n	8074e <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
   80716:	42a0      	cmp	r0, r4
   80718:	d21f      	bcs.n	8075a <tc_find_mck_divisor+0x66>
   8071a:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   8071c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
   8071e:	f856 4f04 	ldr.w	r4, [r6, #4]!
   80722:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   80726:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
   80728:	4284      	cmp	r4, r0
   8072a:	d312      	bcc.n	80752 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
   8072c:	4287      	cmp	r7, r0
   8072e:	d915      	bls.n	8075c <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   80730:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   80732:	2d05      	cmp	r5, #5
   80734:	d1f3      	bne.n	8071e <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   80736:	2000      	movs	r0, #0
   80738:	e013      	b.n	80762 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   8073a:	a906      	add	r1, sp, #24
   8073c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   80740:	f851 1c14 	ldr.w	r1, [r1, #-20]
   80744:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
   80746:	b133      	cbz	r3, 80756 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
   80748:	601d      	str	r5, [r3, #0]
	}

	return 1;
   8074a:	2001      	movs	r0, #1
   8074c:	e009      	b.n	80762 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   8074e:	2000      	movs	r0, #0
   80750:	e007      	b.n	80762 <tc_find_mck_divisor+0x6e>
   80752:	2000      	movs	r0, #0
   80754:	e005      	b.n	80762 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   80756:	2001      	movs	r0, #1
   80758:	e003      	b.n	80762 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   8075a:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   8075c:	2a00      	cmp	r2, #0
   8075e:	d1ec      	bne.n	8073a <tc_find_mck_divisor+0x46>
   80760:	e7f1      	b.n	80746 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   80762:	b006      	add	sp, #24
   80764:	bcf0      	pop	{r4, r5, r6, r7}
   80766:	4770      	bx	lr

00080768 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80768:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8076a:	23ac      	movs	r3, #172	; 0xac
   8076c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8076e:	680b      	ldr	r3, [r1, #0]
   80770:	684a      	ldr	r2, [r1, #4]
   80772:	fbb3 f3f2 	udiv	r3, r3, r2
   80776:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80778:	1e5c      	subs	r4, r3, #1
   8077a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8077e:	4294      	cmp	r4, r2
   80780:	d80a      	bhi.n	80798 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80782:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80784:	688b      	ldr	r3, [r1, #8]
   80786:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80788:	f240 2302 	movw	r3, #514	; 0x202
   8078c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80790:	2350      	movs	r3, #80	; 0x50
   80792:	6003      	str	r3, [r0, #0]

	return 0;
   80794:	2000      	movs	r0, #0
   80796:	e000      	b.n	8079a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80798:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8079a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8079e:	4770      	bx	lr

000807a0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   807a0:	6943      	ldr	r3, [r0, #20]
   807a2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   807a6:	bf1a      	itte	ne
   807a8:	61c1      	strne	r1, [r0, #28]
	return 0;
   807aa:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   807ac:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   807ae:	4770      	bx	lr

000807b0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   807b0:	6943      	ldr	r3, [r0, #20]
   807b2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   807b6:	bf1d      	ittte	ne
   807b8:	6983      	ldrne	r3, [r0, #24]
   807ba:	700b      	strbne	r3, [r1, #0]
	return 0;
   807bc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   807be:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   807c0:	4770      	bx	lr
   807c2:	bf00      	nop

000807c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   807c4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   807c6:	010b      	lsls	r3, r1, #4
   807c8:	4293      	cmp	r3, r2
   807ca:	d90f      	bls.n	807ec <usart_set_async_baudrate+0x28>
   807cc:	e01c      	b.n	80808 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   807ce:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   807d2:	6841      	ldr	r1, [r0, #4]
   807d4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   807d8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   807da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   807de:	6202      	str	r2, [r0, #32]

	return 0;
   807e0:	2000      	movs	r0, #0
   807e2:	e01e      	b.n	80822 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   807e4:	2001      	movs	r0, #1
   807e6:	e01c      	b.n	80822 <usart_set_async_baudrate+0x5e>
   807e8:	2001      	movs	r0, #1
   807ea:	e01a      	b.n	80822 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   807ec:	00d2      	lsls	r2, r2, #3
   807ee:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   807f2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   807f6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   807f8:	1e5c      	subs	r4, r3, #1
   807fa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   807fe:	428c      	cmp	r4, r1
   80800:	d8f0      	bhi.n	807e4 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   80802:	f002 0207 	and.w	r2, r2, #7
   80806:	e7e8      	b.n	807da <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80808:	00c9      	lsls	r1, r1, #3
   8080a:	00d2      	lsls	r2, r2, #3
   8080c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   80810:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80814:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80816:	1e5c      	subs	r4, r3, #1
   80818:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8081c:	428c      	cmp	r4, r1
   8081e:	d9d6      	bls.n	807ce <usart_set_async_baudrate+0xa>
   80820:	e7e2      	b.n	807e8 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   80822:	f85d 4b04 	ldr.w	r4, [sp], #4
   80826:	4770      	bx	lr

00080828 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80828:	4b08      	ldr	r3, [pc, #32]	; (8084c <usart_reset+0x24>)
   8082a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8082e:	2300      	movs	r3, #0
   80830:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80832:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80834:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80836:	2388      	movs	r3, #136	; 0x88
   80838:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8083a:	2324      	movs	r3, #36	; 0x24
   8083c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   8083e:	f44f 7380 	mov.w	r3, #256	; 0x100
   80842:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   80844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80848:	6003      	str	r3, [r0, #0]
   8084a:	4770      	bx	lr
   8084c:	55534100 	.word	0x55534100

00080850 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80850:	b570      	push	{r4, r5, r6, lr}
   80852:	4605      	mov	r5, r0
   80854:	460c      	mov	r4, r1
   80856:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   80858:	4b0f      	ldr	r3, [pc, #60]	; (80898 <usart_init_rs232+0x48>)
   8085a:	4798      	blx	r3

	ul_reg_val = 0;
   8085c:	2200      	movs	r2, #0
   8085e:	4b0f      	ldr	r3, [pc, #60]	; (8089c <usart_init_rs232+0x4c>)
   80860:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   80862:	b19c      	cbz	r4, 8088c <usart_init_rs232+0x3c>
   80864:	4628      	mov	r0, r5
   80866:	6821      	ldr	r1, [r4, #0]
   80868:	4632      	mov	r2, r6
   8086a:	4b0d      	ldr	r3, [pc, #52]	; (808a0 <usart_init_rs232+0x50>)
   8086c:	4798      	blx	r3
   8086e:	4602      	mov	r2, r0
   80870:	b970      	cbnz	r0, 80890 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80872:	68a1      	ldr	r1, [r4, #8]
   80874:	6863      	ldr	r3, [r4, #4]
   80876:	4319      	orrs	r1, r3
   80878:	6923      	ldr	r3, [r4, #16]
   8087a:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8087c:	68e3      	ldr	r3, [r4, #12]
   8087e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80880:	4906      	ldr	r1, [pc, #24]	; (8089c <usart_init_rs232+0x4c>)
   80882:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   80884:	6869      	ldr	r1, [r5, #4]
   80886:	430b      	orrs	r3, r1
   80888:	606b      	str	r3, [r5, #4]

	return 0;
   8088a:	e002      	b.n	80892 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8088c:	2201      	movs	r2, #1
   8088e:	e000      	b.n	80892 <usart_init_rs232+0x42>
   80890:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   80892:	4610      	mov	r0, r2
   80894:	bd70      	pop	{r4, r5, r6, pc}
   80896:	bf00      	nop
   80898:	00080829 	.word	0x00080829
   8089c:	200709f8 	.word	0x200709f8
   808a0:	000807c5 	.word	0x000807c5

000808a4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   808a4:	2340      	movs	r3, #64	; 0x40
   808a6:	6003      	str	r3, [r0, #0]
   808a8:	4770      	bx	lr
   808aa:	bf00      	nop

000808ac <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
   808ac:	60c1      	str	r1, [r0, #12]
   808ae:	4770      	bx	lr

000808b0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   808b0:	6943      	ldr	r3, [r0, #20]
   808b2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   808b6:	bf1d      	ittte	ne
   808b8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   808bc:	61c1      	strne	r1, [r0, #28]
	return 0;
   808be:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   808c0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   808c2:	4770      	bx	lr

000808c4 <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   808c4:	6943      	ldr	r3, [r0, #20]
   808c6:	f013 0f02 	tst.w	r3, #2
   808ca:	d0fb      	beq.n	808c4 <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   808cc:	f3c1 0108 	ubfx	r1, r1, #0, #9
   808d0:	61c1      	str	r1, [r0, #28]

	return 0;

}
   808d2:	2000      	movs	r0, #0
   808d4:	4770      	bx	lr
   808d6:	bf00      	nop

000808d8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   808d8:	6943      	ldr	r3, [r0, #20]
   808da:	f013 0f01 	tst.w	r3, #1
   808de:	d005      	beq.n	808ec <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   808e0:	6983      	ldr	r3, [r0, #24]
   808e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   808e6:	600b      	str	r3, [r1, #0]

	return 0;
   808e8:	2000      	movs	r0, #0
   808ea:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   808ec:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   808ee:	4770      	bx	lr

000808f0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   808f0:	e7fe      	b.n	808f0 <Dummy_Handler>
   808f2:	bf00      	nop

000808f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   808f4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   808f6:	4b1f      	ldr	r3, [pc, #124]	; (80974 <Reset_Handler+0x80>)
   808f8:	4a1f      	ldr	r2, [pc, #124]	; (80978 <Reset_Handler+0x84>)
   808fa:	429a      	cmp	r2, r3
   808fc:	d003      	beq.n	80906 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   808fe:	4b1f      	ldr	r3, [pc, #124]	; (8097c <Reset_Handler+0x88>)
   80900:	4a1c      	ldr	r2, [pc, #112]	; (80974 <Reset_Handler+0x80>)
   80902:	429a      	cmp	r2, r3
   80904:	d304      	bcc.n	80910 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80906:	4b1e      	ldr	r3, [pc, #120]	; (80980 <Reset_Handler+0x8c>)
   80908:	4a1e      	ldr	r2, [pc, #120]	; (80984 <Reset_Handler+0x90>)
   8090a:	429a      	cmp	r2, r3
   8090c:	d310      	bcc.n	80930 <Reset_Handler+0x3c>
   8090e:	e01b      	b.n	80948 <Reset_Handler+0x54>
   80910:	4918      	ldr	r1, [pc, #96]	; (80974 <Reset_Handler+0x80>)
   80912:	1d0a      	adds	r2, r1, #4
   80914:	4b1c      	ldr	r3, [pc, #112]	; (80988 <Reset_Handler+0x94>)
   80916:	1a9b      	subs	r3, r3, r2
   80918:	f023 0303 	bic.w	r3, r3, #3
   8091c:	3304      	adds	r3, #4
   8091e:	4a16      	ldr	r2, [pc, #88]	; (80978 <Reset_Handler+0x84>)
   80920:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80922:	f852 0b04 	ldr.w	r0, [r2], #4
   80926:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8092a:	429a      	cmp	r2, r3
   8092c:	d1f9      	bne.n	80922 <Reset_Handler+0x2e>
   8092e:	e7ea      	b.n	80906 <Reset_Handler+0x12>
   80930:	4b16      	ldr	r3, [pc, #88]	; (8098c <Reset_Handler+0x98>)
   80932:	4a17      	ldr	r2, [pc, #92]	; (80990 <Reset_Handler+0x9c>)
   80934:	1ad2      	subs	r2, r2, r3
   80936:	f022 0203 	bic.w	r2, r2, #3
   8093a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8093c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8093e:	2100      	movs	r1, #0
   80940:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80944:	4293      	cmp	r3, r2
   80946:	d1fb      	bne.n	80940 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80948:	4b12      	ldr	r3, [pc, #72]	; (80994 <Reset_Handler+0xa0>)
   8094a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8094e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80952:	4911      	ldr	r1, [pc, #68]	; (80998 <Reset_Handler+0xa4>)
   80954:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80956:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8095a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8095e:	d203      	bcs.n	80968 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80960:	688b      	ldr	r3, [r1, #8]
   80962:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80966:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80968:	4b0c      	ldr	r3, [pc, #48]	; (8099c <Reset_Handler+0xa8>)
   8096a:	4798      	blx	r3

	/* Branch to main function */
	main();
   8096c:	4b0c      	ldr	r3, [pc, #48]	; (809a0 <Reset_Handler+0xac>)
   8096e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80970:	e7fe      	b.n	80970 <Reset_Handler+0x7c>
   80972:	bf00      	nop
   80974:	20070000 	.word	0x20070000
   80978:	00081d2c 	.word	0x00081d2c
   8097c:	2007096c 	.word	0x2007096c
   80980:	20070a58 	.word	0x20070a58
   80984:	2007096c 	.word	0x2007096c
   80988:	2007096f 	.word	0x2007096f
   8098c:	20070970 	.word	0x20070970
   80990:	20070a5b 	.word	0x20070a5b
   80994:	00080000 	.word	0x00080000
   80998:	e000ed00 	.word	0xe000ed00
   8099c:	00080df9 	.word	0x00080df9
   809a0:	00080cad 	.word	0x00080cad

000809a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809a4:	4b3e      	ldr	r3, [pc, #248]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   809a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809a8:	f003 0303 	and.w	r3, r3, #3
   809ac:	2b03      	cmp	r3, #3
   809ae:	d85f      	bhi.n	80a70 <SystemCoreClockUpdate+0xcc>
   809b0:	e8df f003 	tbb	[pc, r3]
   809b4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   809b8:	4b3a      	ldr	r3, [pc, #232]	; (80aa4 <SystemCoreClockUpdate+0x100>)
   809ba:	695b      	ldr	r3, [r3, #20]
   809bc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   809c0:	bf14      	ite	ne
   809c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   809c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   809ca:	4b37      	ldr	r3, [pc, #220]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   809cc:	601a      	str	r2, [r3, #0]
   809ce:	e04f      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809d0:	4b33      	ldr	r3, [pc, #204]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   809d2:	6a1b      	ldr	r3, [r3, #32]
   809d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   809d8:	d003      	beq.n	809e2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809da:	4a34      	ldr	r2, [pc, #208]	; (80aac <SystemCoreClockUpdate+0x108>)
   809dc:	4b32      	ldr	r3, [pc, #200]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   809de:	601a      	str	r2, [r3, #0]
   809e0:	e046      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809e2:	4a33      	ldr	r2, [pc, #204]	; (80ab0 <SystemCoreClockUpdate+0x10c>)
   809e4:	4b30      	ldr	r3, [pc, #192]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   809e6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809e8:	4b2d      	ldr	r3, [pc, #180]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   809ea:	6a1b      	ldr	r3, [r3, #32]
   809ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809f0:	2b10      	cmp	r3, #16
   809f2:	d002      	beq.n	809fa <SystemCoreClockUpdate+0x56>
   809f4:	2b20      	cmp	r3, #32
   809f6:	d004      	beq.n	80a02 <SystemCoreClockUpdate+0x5e>
   809f8:	e03a      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809fa:	4a2e      	ldr	r2, [pc, #184]	; (80ab4 <SystemCoreClockUpdate+0x110>)
   809fc:	4b2a      	ldr	r3, [pc, #168]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   809fe:	601a      	str	r2, [r3, #0]
				break;
   80a00:	e036      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a02:	4a2a      	ldr	r2, [pc, #168]	; (80aac <SystemCoreClockUpdate+0x108>)
   80a04:	4b28      	ldr	r3, [pc, #160]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a06:	601a      	str	r2, [r3, #0]
				break;
   80a08:	e032      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a0a:	4b25      	ldr	r3, [pc, #148]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a0c:	6a1b      	ldr	r3, [r3, #32]
   80a0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a12:	d003      	beq.n	80a1c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a14:	4a25      	ldr	r2, [pc, #148]	; (80aac <SystemCoreClockUpdate+0x108>)
   80a16:	4b24      	ldr	r3, [pc, #144]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a18:	601a      	str	r2, [r3, #0]
   80a1a:	e012      	b.n	80a42 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a1c:	4a24      	ldr	r2, [pc, #144]	; (80ab0 <SystemCoreClockUpdate+0x10c>)
   80a1e:	4b22      	ldr	r3, [pc, #136]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a20:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a22:	4b1f      	ldr	r3, [pc, #124]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a24:	6a1b      	ldr	r3, [r3, #32]
   80a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a2a:	2b10      	cmp	r3, #16
   80a2c:	d002      	beq.n	80a34 <SystemCoreClockUpdate+0x90>
   80a2e:	2b20      	cmp	r3, #32
   80a30:	d004      	beq.n	80a3c <SystemCoreClockUpdate+0x98>
   80a32:	e006      	b.n	80a42 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a34:	4a1f      	ldr	r2, [pc, #124]	; (80ab4 <SystemCoreClockUpdate+0x110>)
   80a36:	4b1c      	ldr	r3, [pc, #112]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a38:	601a      	str	r2, [r3, #0]
				break;
   80a3a:	e002      	b.n	80a42 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a3c:	4a1b      	ldr	r2, [pc, #108]	; (80aac <SystemCoreClockUpdate+0x108>)
   80a3e:	4b1a      	ldr	r3, [pc, #104]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a40:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a42:	4b17      	ldr	r3, [pc, #92]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a46:	f003 0303 	and.w	r3, r3, #3
   80a4a:	2b02      	cmp	r3, #2
   80a4c:	d10d      	bne.n	80a6a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a4e:	4a14      	ldr	r2, [pc, #80]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a50:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a52:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80a54:	4814      	ldr	r0, [pc, #80]	; (80aa8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a56:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80a5a:	6803      	ldr	r3, [r0, #0]
   80a5c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a60:	b2d2      	uxtb	r2, r2
   80a62:	fbb3 f3f2 	udiv	r3, r3, r2
   80a66:	6003      	str	r3, [r0, #0]
   80a68:	e002      	b.n	80a70 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a6a:	4a13      	ldr	r2, [pc, #76]	; (80ab8 <SystemCoreClockUpdate+0x114>)
   80a6c:	4b0e      	ldr	r3, [pc, #56]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a6e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a70:	4b0b      	ldr	r3, [pc, #44]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a78:	2b70      	cmp	r3, #112	; 0x70
   80a7a:	d107      	bne.n	80a8c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80a7c:	4a0a      	ldr	r2, [pc, #40]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a7e:	6813      	ldr	r3, [r2, #0]
   80a80:	490e      	ldr	r1, [pc, #56]	; (80abc <SystemCoreClockUpdate+0x118>)
   80a82:	fba1 1303 	umull	r1, r3, r1, r3
   80a86:	085b      	lsrs	r3, r3, #1
   80a88:	6013      	str	r3, [r2, #0]
   80a8a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a8c:	4b04      	ldr	r3, [pc, #16]	; (80aa0 <SystemCoreClockUpdate+0xfc>)
   80a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a90:	4905      	ldr	r1, [pc, #20]	; (80aa8 <SystemCoreClockUpdate+0x104>)
   80a92:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80a96:	680b      	ldr	r3, [r1, #0]
   80a98:	40d3      	lsrs	r3, r2
   80a9a:	600b      	str	r3, [r1, #0]
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	400e0600 	.word	0x400e0600
   80aa4:	400e1a10 	.word	0x400e1a10
   80aa8:	2007012c 	.word	0x2007012c
   80aac:	00b71b00 	.word	0x00b71b00
   80ab0:	003d0900 	.word	0x003d0900
   80ab4:	007a1200 	.word	0x007a1200
   80ab8:	0e4e1c00 	.word	0x0e4e1c00
   80abc:	aaaaaaab 	.word	0xaaaaaaab

00080ac0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ac0:	4b09      	ldr	r3, [pc, #36]	; (80ae8 <_sbrk+0x28>)
   80ac2:	681b      	ldr	r3, [r3, #0]
   80ac4:	b913      	cbnz	r3, 80acc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ac6:	4a09      	ldr	r2, [pc, #36]	; (80aec <_sbrk+0x2c>)
   80ac8:	4b07      	ldr	r3, [pc, #28]	; (80ae8 <_sbrk+0x28>)
   80aca:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80acc:	4b06      	ldr	r3, [pc, #24]	; (80ae8 <_sbrk+0x28>)
   80ace:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ad0:	181a      	adds	r2, r3, r0
   80ad2:	4907      	ldr	r1, [pc, #28]	; (80af0 <_sbrk+0x30>)
   80ad4:	4291      	cmp	r1, r2
   80ad6:	db04      	blt.n	80ae2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ad8:	4610      	mov	r0, r2
   80ada:	4a03      	ldr	r2, [pc, #12]	; (80ae8 <_sbrk+0x28>)
   80adc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ade:	4618      	mov	r0, r3
   80ae0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80ae2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80ae6:	4770      	bx	lr
   80ae8:	200709fc 	.word	0x200709fc
   80aec:	20072a58 	.word	0x20072a58
   80af0:	20087ffc 	.word	0x20087ffc

00080af4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80af4:	f04f 30ff 	mov.w	r0, #4294967295
   80af8:	4770      	bx	lr
   80afa:	bf00      	nop

00080afc <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80afc:	2000      	movs	r0, #0
   80afe:	4770      	bx	lr

00080b00 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b02:	b083      	sub	sp, #12
   80b04:	4604      	mov	r4, r0
   80b06:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b08:	2300      	movs	r3, #0
   80b0a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b0c:	4b1f      	ldr	r3, [pc, #124]	; (80b8c <usart_serial_getchar+0x8c>)
   80b0e:	4298      	cmp	r0, r3
   80b10:	d107      	bne.n	80b22 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b12:	461f      	mov	r7, r3
   80b14:	4e1e      	ldr	r6, [pc, #120]	; (80b90 <usart_serial_getchar+0x90>)
   80b16:	4638      	mov	r0, r7
   80b18:	4629      	mov	r1, r5
   80b1a:	47b0      	blx	r6
   80b1c:	2800      	cmp	r0, #0
   80b1e:	d1fa      	bne.n	80b16 <usart_serial_getchar+0x16>
   80b20:	e019      	b.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b22:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <usart_serial_getchar+0x94>)
   80b24:	4298      	cmp	r0, r3
   80b26:	d109      	bne.n	80b3c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b28:	461f      	mov	r7, r3
   80b2a:	4e1b      	ldr	r6, [pc, #108]	; (80b98 <usart_serial_getchar+0x98>)
   80b2c:	4638      	mov	r0, r7
   80b2e:	a901      	add	r1, sp, #4
   80b30:	47b0      	blx	r6
   80b32:	2800      	cmp	r0, #0
   80b34:	d1fa      	bne.n	80b2c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b36:	9b01      	ldr	r3, [sp, #4]
   80b38:	702b      	strb	r3, [r5, #0]
   80b3a:	e019      	b.n	80b70 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b3c:	4b17      	ldr	r3, [pc, #92]	; (80b9c <usart_serial_getchar+0x9c>)
   80b3e:	4298      	cmp	r0, r3
   80b40:	d109      	bne.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80b42:	461e      	mov	r6, r3
   80b44:	4c14      	ldr	r4, [pc, #80]	; (80b98 <usart_serial_getchar+0x98>)
   80b46:	4630      	mov	r0, r6
   80b48:	a901      	add	r1, sp, #4
   80b4a:	47a0      	blx	r4
   80b4c:	2800      	cmp	r0, #0
   80b4e:	d1fa      	bne.n	80b46 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80b50:	9b01      	ldr	r3, [sp, #4]
   80b52:	702b      	strb	r3, [r5, #0]
   80b54:	e018      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b56:	4b12      	ldr	r3, [pc, #72]	; (80ba0 <usart_serial_getchar+0xa0>)
   80b58:	429c      	cmp	r4, r3
   80b5a:	d109      	bne.n	80b70 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80b5c:	461e      	mov	r6, r3
   80b5e:	4c0e      	ldr	r4, [pc, #56]	; (80b98 <usart_serial_getchar+0x98>)
   80b60:	4630      	mov	r0, r6
   80b62:	a901      	add	r1, sp, #4
   80b64:	47a0      	blx	r4
   80b66:	2800      	cmp	r0, #0
   80b68:	d1fa      	bne.n	80b60 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80b6a:	9b01      	ldr	r3, [sp, #4]
   80b6c:	702b      	strb	r3, [r5, #0]
   80b6e:	e00b      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b70:	4b0c      	ldr	r3, [pc, #48]	; (80ba4 <usart_serial_getchar+0xa4>)
   80b72:	429c      	cmp	r4, r3
   80b74:	d108      	bne.n	80b88 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80b76:	461e      	mov	r6, r3
   80b78:	4c07      	ldr	r4, [pc, #28]	; (80b98 <usart_serial_getchar+0x98>)
   80b7a:	4630      	mov	r0, r6
   80b7c:	a901      	add	r1, sp, #4
   80b7e:	47a0      	blx	r4
   80b80:	2800      	cmp	r0, #0
   80b82:	d1fa      	bne.n	80b7a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80b84:	9b01      	ldr	r3, [sp, #4]
   80b86:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80b88:	b003      	add	sp, #12
   80b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b8c:	400e0800 	.word	0x400e0800
   80b90:	000807b1 	.word	0x000807b1
   80b94:	40098000 	.word	0x40098000
   80b98:	000808d9 	.word	0x000808d9
   80b9c:	4009c000 	.word	0x4009c000
   80ba0:	400a0000 	.word	0x400a0000
   80ba4:	400a4000 	.word	0x400a4000

00080ba8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80ba8:	b570      	push	{r4, r5, r6, lr}
   80baa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bac:	4b1e      	ldr	r3, [pc, #120]	; (80c28 <usart_serial_putchar+0x80>)
   80bae:	4298      	cmp	r0, r3
   80bb0:	d108      	bne.n	80bc4 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80bb2:	461e      	mov	r6, r3
   80bb4:	4d1d      	ldr	r5, [pc, #116]	; (80c2c <usart_serial_putchar+0x84>)
   80bb6:	4630      	mov	r0, r6
   80bb8:	4621      	mov	r1, r4
   80bba:	47a8      	blx	r5
   80bbc:	2800      	cmp	r0, #0
   80bbe:	d1fa      	bne.n	80bb6 <usart_serial_putchar+0xe>
		return 1;
   80bc0:	2001      	movs	r0, #1
   80bc2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bc4:	4b1a      	ldr	r3, [pc, #104]	; (80c30 <usart_serial_putchar+0x88>)
   80bc6:	4298      	cmp	r0, r3
   80bc8:	d108      	bne.n	80bdc <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80bca:	461e      	mov	r6, r3
   80bcc:	4d19      	ldr	r5, [pc, #100]	; (80c34 <usart_serial_putchar+0x8c>)
   80bce:	4630      	mov	r0, r6
   80bd0:	4621      	mov	r1, r4
   80bd2:	47a8      	blx	r5
   80bd4:	2800      	cmp	r0, #0
   80bd6:	d1fa      	bne.n	80bce <usart_serial_putchar+0x26>
		return 1;
   80bd8:	2001      	movs	r0, #1
   80bda:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80bdc:	4b16      	ldr	r3, [pc, #88]	; (80c38 <usart_serial_putchar+0x90>)
   80bde:	4298      	cmp	r0, r3
   80be0:	d108      	bne.n	80bf4 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80be2:	461e      	mov	r6, r3
   80be4:	4d13      	ldr	r5, [pc, #76]	; (80c34 <usart_serial_putchar+0x8c>)
   80be6:	4630      	mov	r0, r6
   80be8:	4621      	mov	r1, r4
   80bea:	47a8      	blx	r5
   80bec:	2800      	cmp	r0, #0
   80bee:	d1fa      	bne.n	80be6 <usart_serial_putchar+0x3e>
		return 1;
   80bf0:	2001      	movs	r0, #1
   80bf2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bf4:	4b11      	ldr	r3, [pc, #68]	; (80c3c <usart_serial_putchar+0x94>)
   80bf6:	4298      	cmp	r0, r3
   80bf8:	d108      	bne.n	80c0c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80bfa:	461e      	mov	r6, r3
   80bfc:	4d0d      	ldr	r5, [pc, #52]	; (80c34 <usart_serial_putchar+0x8c>)
   80bfe:	4630      	mov	r0, r6
   80c00:	4621      	mov	r1, r4
   80c02:	47a8      	blx	r5
   80c04:	2800      	cmp	r0, #0
   80c06:	d1fa      	bne.n	80bfe <usart_serial_putchar+0x56>
		return 1;
   80c08:	2001      	movs	r0, #1
   80c0a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c0c:	4b0c      	ldr	r3, [pc, #48]	; (80c40 <usart_serial_putchar+0x98>)
   80c0e:	4298      	cmp	r0, r3
   80c10:	d108      	bne.n	80c24 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80c12:	461e      	mov	r6, r3
   80c14:	4d07      	ldr	r5, [pc, #28]	; (80c34 <usart_serial_putchar+0x8c>)
   80c16:	4630      	mov	r0, r6
   80c18:	4621      	mov	r1, r4
   80c1a:	47a8      	blx	r5
   80c1c:	2800      	cmp	r0, #0
   80c1e:	d1fa      	bne.n	80c16 <usart_serial_putchar+0x6e>
		return 1;
   80c20:	2001      	movs	r0, #1
   80c22:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c24:	2000      	movs	r0, #0
}
   80c26:	bd70      	pop	{r4, r5, r6, pc}
   80c28:	400e0800 	.word	0x400e0800
   80c2c:	000807a1 	.word	0x000807a1
   80c30:	40098000 	.word	0x40098000
   80c34:	000808b1 	.word	0x000808b1
   80c38:	4009c000 	.word	0x4009c000
   80c3c:	400a0000 	.word	0x400a0000
   80c40:	400a4000 	.word	0x400a4000

00080c44 <TC3_Handler>:


}

void TC3_Handler(void)
{
   80c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ul_status;
	uint32_t ul_byte_total = 0;

	/* Read TC0 Status. */
	ul_status = tc_get_status(TC1, 0);
   80c46:	4814      	ldr	r0, [pc, #80]	; (80c98 <TC3_Handler+0x54>)
   80c48:	2100      	movs	r1, #0
   80c4a:	4b14      	ldr	r3, [pc, #80]	; (80c9c <TC3_Handler+0x58>)
   80c4c:	4798      	blx	r3

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS)  {
   80c4e:	f010 0f10 	tst.w	r0, #16
   80c52:	d020      	beq.n	80c96 <TC3_Handler+0x52>

static void sendDSM2() {

	
	if (Mode == SEND_DSM2) {
		DSM2_Data.Header[0] = CODE_NORMAL_SENDING;
   80c54:	4b12      	ldr	r3, [pc, #72]	; (80ca0 <TC3_Handler+0x5c>)
   80c56:	2218      	movs	r2, #24
   80c58:	701a      	strb	r2, [r3, #0]
	else {
		DSM2_Data.Header[0] = CODE_LOW_POWER;
		
	}

	DSM2_Data.Header[1] = 0x00;              		// second header byte
   80c5a:	2200      	movs	r2, #0
   80c5c:	705a      	strb	r2, [r3, #1]

	// alle 6 Channel Werte holen
	for (uint8_t i = 0; i < DSM2_CHANNELS; i++) {	// get receiver data
		uint16_t temp = 511;
		DSM2_Data.Channel[i * 2]   = (uint8_t)(i << 2) | (temp >> 8);
		DSM2_Data.Channel[i * 2 + 1] = temp;
   80c5e:	20ff      	movs	r0, #255	; 0xff
	

	// alle 6 Channel Werte holen
	for (uint8_t i = 0; i < DSM2_CHANNELS; i++) {	// get receiver data
		uint16_t temp = 511;
		DSM2_Data.Channel[i * 2]   = (uint8_t)(i << 2) | (temp >> 8);
   80c60:	0091      	lsls	r1, r2, #2
   80c62:	f041 0101 	orr.w	r1, r1, #1
   80c66:	7099      	strb	r1, [r3, #2]
		DSM2_Data.Channel[i * 2 + 1] = temp;
   80c68:	70d8      	strb	r0, [r3, #3]
   80c6a:	3201      	adds	r2, #1
   80c6c:	3302      	adds	r3, #2

	DSM2_Data.Header[1] = 0x00;              		// second header byte
	

	// alle 6 Channel Werte holen
	for (uint8_t i = 0; i < DSM2_CHANNELS; i++) {	// get receiver data
   80c6e:	2a06      	cmp	r2, #6
   80c70:	d1f6      	bne.n	80c60 <TC3_Handler+0x1c>
	if (Mode == BINDING) {
		// die 2 HeaderBytes und die Channel-Werte senden
		//   Serial1.write(DX5eBindData, sizeof(DX5eBindData));
		} else {
		// die 2 HeaderBytes und die Channel-Werte senden
		usart_putchar(BOARD_USART, DSM2_Data.Header[0]);
   80c72:	4f0c      	ldr	r7, [pc, #48]	; (80ca4 <TC3_Handler+0x60>)
   80c74:	4638      	mov	r0, r7
   80c76:	2118      	movs	r1, #24
   80c78:	4e0b      	ldr	r6, [pc, #44]	; (80ca8 <TC3_Handler+0x64>)
   80c7a:	47b0      	blx	r6
		usart_putchar(BOARD_USART, DSM2_Data.Header[1]);
   80c7c:	4d08      	ldr	r5, [pc, #32]	; (80ca0 <TC3_Handler+0x5c>)
   80c7e:	462c      	mov	r4, r5
   80c80:	4638      	mov	r0, r7
   80c82:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80c86:	47b0      	blx	r6
   80c88:	350d      	adds	r5, #13
		for (int i = 0; i < 12; i++) {
			usart_putchar(BOARD_USART, DSM2_Data.Channel[i]);
   80c8a:	4638      	mov	r0, r7
   80c8c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80c90:	47b0      	blx	r6
		//   Serial1.write(DX5eBindData, sizeof(DX5eBindData));
		} else {
		// die 2 HeaderBytes und die Channel-Werte senden
		usart_putchar(BOARD_USART, DSM2_Data.Header[0]);
		usart_putchar(BOARD_USART, DSM2_Data.Header[1]);
		for (int i = 0; i < 12; i++) {
   80c92:	42ac      	cmp	r4, r5
   80c94:	d1f9      	bne.n	80c8a <TC3_Handler+0x46>
   80c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c98:	40084000 	.word	0x40084000
   80c9c:	000806ed 	.word	0x000806ed
   80ca0:	20070a44 	.word	0x20070a44
   80ca4:	40098000 	.word	0x40098000
   80ca8:	000808c5 	.word	0x000808c5

00080cac <main>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80cac:	b580      	push	{r7, lr}
   80cae:	b08a      	sub	sp, #40	; 0x28

	/* Initialize the SAM system. */
	sysclk_init();
   80cb0:	4b36      	ldr	r3, [pc, #216]	; (80d8c <main+0xe0>)
   80cb2:	4798      	blx	r3
	board_init();
   80cb4:	4b36      	ldr	r3, [pc, #216]	; (80d90 <main+0xe4>)
   80cb6:	4798      	blx	r3
   80cb8:	2008      	movs	r0, #8
   80cba:	4e36      	ldr	r6, [pc, #216]	; (80d94 <main+0xe8>)
   80cbc:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80cbe:	4c36      	ldr	r4, [pc, #216]	; (80d98 <main+0xec>)
   80cc0:	4b36      	ldr	r3, [pc, #216]	; (80d9c <main+0xf0>)
   80cc2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80cc4:	4a36      	ldr	r2, [pc, #216]	; (80da0 <main+0xf4>)
   80cc6:	4b37      	ldr	r3, [pc, #220]	; (80da4 <main+0xf8>)
   80cc8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80cca:	4a37      	ldr	r2, [pc, #220]	; (80da8 <main+0xfc>)
   80ccc:	4b37      	ldr	r3, [pc, #220]	; (80dac <main+0x100>)
   80cce:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80cd0:	4f37      	ldr	r7, [pc, #220]	; (80db0 <main+0x104>)
   80cd2:	9704      	str	r7, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
   80cd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80cd8:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
   80cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cde:	9306      	str	r3, [sp, #24]
   80ce0:	2008      	movs	r0, #8
   80ce2:	47b0      	blx	r6
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80ce4:	4620      	mov	r0, r4
   80ce6:	a904      	add	r1, sp, #16
   80ce8:	4b32      	ldr	r3, [pc, #200]	; (80db4 <main+0x108>)
   80cea:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80cec:	4d32      	ldr	r5, [pc, #200]	; (80db8 <main+0x10c>)
   80cee:	682b      	ldr	r3, [r5, #0]
   80cf0:	6898      	ldr	r0, [r3, #8]
   80cf2:	2100      	movs	r1, #0
   80cf4:	4c31      	ldr	r4, [pc, #196]	; (80dbc <main+0x110>)
   80cf6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80cf8:	682b      	ldr	r3, [r5, #0]
   80cfa:	6858      	ldr	r0, [r3, #4]
   80cfc:	2100      	movs	r1, #0
   80cfe:	47a0      	blx	r4
	}
}

static void configure_usart(void)
{
	const sam_usart_opt_t usart_console_settings = {
   80d00:	ac04      	add	r4, sp, #16
   80d02:	4d2f      	ldr	r5, [pc, #188]	; (80dc0 <main+0x114>)
   80d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80d08:	e895 0003 	ldmia.w	r5, {r0, r1}
   80d0c:	e884 0003 	stmia.w	r4, {r0, r1}
   80d10:	2011      	movs	r0, #17
   80d12:	47b0      	blx	r6

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   80d14:	4c2b      	ldr	r4, [pc, #172]	; (80dc4 <main+0x118>)
   80d16:	4620      	mov	r0, r4
   80d18:	a904      	add	r1, sp, #16
   80d1a:	463a      	mov	r2, r7
   80d1c:	4b2a      	ldr	r3, [pc, #168]	; (80dc8 <main+0x11c>)
   80d1e:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   80d20:	4620      	mov	r0, r4
   80d22:	f04f 31ff 	mov.w	r1, #4294967295
   80d26:	4b29      	ldr	r3, [pc, #164]	; (80dcc <main+0x120>)
   80d28:	4798      	blx	r3

	usart_enable_tx(BOARD_USART);
   80d2a:	4620      	mov	r0, r4
   80d2c:	4b28      	ldr	r3, [pc, #160]	; (80dd0 <main+0x124>)
   80d2e:	4798      	blx	r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	static uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
   80d30:	4d28      	ldr	r5, [pc, #160]	; (80dd4 <main+0x128>)
   80d32:	602f      	str	r7, [r5, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC3);
   80d34:	201e      	movs	r0, #30
   80d36:	47b0      	blx	r6

	/* Configure TC for a 50Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   80d38:	6829      	ldr	r1, [r5, #0]
   80d3a:	9100      	str	r1, [sp, #0]
   80d3c:	2032      	movs	r0, #50	; 0x32
   80d3e:	aa03      	add	r2, sp, #12
   80d40:	ab04      	add	r3, sp, #16
   80d42:	4c25      	ldr	r4, [pc, #148]	; (80dd8 <main+0x12c>)
   80d44:	47a0      	blx	r4
	tc_init(TC1, 0, ul_tcclks | TC_CMR_CPCTRG);
   80d46:	4c25      	ldr	r4, [pc, #148]	; (80ddc <main+0x130>)
   80d48:	4620      	mov	r0, r4
   80d4a:	2100      	movs	r1, #0
   80d4c:	9a04      	ldr	r2, [sp, #16]
   80d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80d52:	4b23      	ldr	r3, [pc, #140]	; (80de0 <main+0x134>)
   80d54:	4798      	blx	r3
	tc_write_rc(TC1, 0, (ul_sysclk / ul_div) / TC_FREQ);
   80d56:	682b      	ldr	r3, [r5, #0]
   80d58:	9a03      	ldr	r2, [sp, #12]
   80d5a:	fbb3 f3f2 	udiv	r3, r3, r2
   80d5e:	4a21      	ldr	r2, [pc, #132]	; (80de4 <main+0x138>)
   80d60:	fba2 3203 	umull	r3, r2, r2, r3
   80d64:	4620      	mov	r0, r4
   80d66:	2100      	movs	r1, #0
   80d68:	0912      	lsrs	r2, r2, #4
   80d6a:	4b1f      	ldr	r3, [pc, #124]	; (80de8 <main+0x13c>)
   80d6c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   80d72:	4b1e      	ldr	r3, [pc, #120]	; (80dec <main+0x140>)
   80d74:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC3);
	tc_enable_interrupt(TC1, 0, TC_IER_CPCS);
   80d76:	4620      	mov	r0, r4
   80d78:	2100      	movs	r1, #0
   80d7a:	2210      	movs	r2, #16
   80d7c:	4b1c      	ldr	r3, [pc, #112]	; (80df0 <main+0x144>)
   80d7e:	4798      	blx	r3
	/* Configure USART. */
	configure_usart();

	configure_tc();
	
	tc_start(TC1, 0);
   80d80:	4620      	mov	r0, r4
   80d82:	2100      	movs	r1, #0
   80d84:	4b1b      	ldr	r3, [pc, #108]	; (80df4 <main+0x148>)
   80d86:	4798      	blx	r3
	while (1) {
	
	}
   80d88:	e7fe      	b.n	80d88 <main+0xdc>
   80d8a:	bf00      	nop
   80d8c:	00080151 	.word	0x00080151
   80d90:	00080241 	.word	0x00080241
   80d94:	00080665 	.word	0x00080665
   80d98:	400e0800 	.word	0x400e0800
   80d9c:	20070a40 	.word	0x20070a40
   80da0:	00080ba9 	.word	0x00080ba9
   80da4:	20070a3c 	.word	0x20070a3c
   80da8:	00080b01 	.word	0x00080b01
   80dac:	20070a38 	.word	0x20070a38
   80db0:	0501bd00 	.word	0x0501bd00
   80db4:	00080769 	.word	0x00080769
   80db8:	20070558 	.word	0x20070558
   80dbc:	00080ee5 	.word	0x00080ee5
   80dc0:	00081ce8 	.word	0x00081ce8
   80dc4:	40098000 	.word	0x40098000
   80dc8:	00080851 	.word	0x00080851
   80dcc:	000808ad 	.word	0x000808ad
   80dd0:	000808a5 	.word	0x000808a5
   80dd4:	20070a00 	.word	0x20070a00
   80dd8:	000806f5 	.word	0x000806f5
   80ddc:	40084000 	.word	0x40084000
   80de0:	000806b9 	.word	0x000806b9
   80de4:	51eb851f 	.word	0x51eb851f
   80de8:	000806dd 	.word	0x000806dd
   80dec:	e000e100 	.word	0xe000e100
   80df0:	000806e5 	.word	0x000806e5
   80df4:	000806d5 	.word	0x000806d5

00080df8 <__libc_init_array>:
   80df8:	b570      	push	{r4, r5, r6, lr}
   80dfa:	4e0f      	ldr	r6, [pc, #60]	; (80e38 <__libc_init_array+0x40>)
   80dfc:	4d0f      	ldr	r5, [pc, #60]	; (80e3c <__libc_init_array+0x44>)
   80dfe:	1b76      	subs	r6, r6, r5
   80e00:	10b6      	asrs	r6, r6, #2
   80e02:	bf18      	it	ne
   80e04:	2400      	movne	r4, #0
   80e06:	d005      	beq.n	80e14 <__libc_init_array+0x1c>
   80e08:	3401      	adds	r4, #1
   80e0a:	f855 3b04 	ldr.w	r3, [r5], #4
   80e0e:	4798      	blx	r3
   80e10:	42a6      	cmp	r6, r4
   80e12:	d1f9      	bne.n	80e08 <__libc_init_array+0x10>
   80e14:	4e0a      	ldr	r6, [pc, #40]	; (80e40 <__libc_init_array+0x48>)
   80e16:	4d0b      	ldr	r5, [pc, #44]	; (80e44 <__libc_init_array+0x4c>)
   80e18:	f000 ff76 	bl	81d08 <_init>
   80e1c:	1b76      	subs	r6, r6, r5
   80e1e:	10b6      	asrs	r6, r6, #2
   80e20:	bf18      	it	ne
   80e22:	2400      	movne	r4, #0
   80e24:	d006      	beq.n	80e34 <__libc_init_array+0x3c>
   80e26:	3401      	adds	r4, #1
   80e28:	f855 3b04 	ldr.w	r3, [r5], #4
   80e2c:	4798      	blx	r3
   80e2e:	42a6      	cmp	r6, r4
   80e30:	d1f9      	bne.n	80e26 <__libc_init_array+0x2e>
   80e32:	bd70      	pop	{r4, r5, r6, pc}
   80e34:	bd70      	pop	{r4, r5, r6, pc}
   80e36:	bf00      	nop
   80e38:	00081d14 	.word	0x00081d14
   80e3c:	00081d14 	.word	0x00081d14
   80e40:	00081d1c 	.word	0x00081d1c
   80e44:	00081d14 	.word	0x00081d14

00080e48 <memset>:
   80e48:	b470      	push	{r4, r5, r6}
   80e4a:	0784      	lsls	r4, r0, #30
   80e4c:	d046      	beq.n	80edc <memset+0x94>
   80e4e:	1e54      	subs	r4, r2, #1
   80e50:	2a00      	cmp	r2, #0
   80e52:	d041      	beq.n	80ed8 <memset+0x90>
   80e54:	b2cd      	uxtb	r5, r1
   80e56:	4603      	mov	r3, r0
   80e58:	e002      	b.n	80e60 <memset+0x18>
   80e5a:	1e62      	subs	r2, r4, #1
   80e5c:	b3e4      	cbz	r4, 80ed8 <memset+0x90>
   80e5e:	4614      	mov	r4, r2
   80e60:	f803 5b01 	strb.w	r5, [r3], #1
   80e64:	079a      	lsls	r2, r3, #30
   80e66:	d1f8      	bne.n	80e5a <memset+0x12>
   80e68:	2c03      	cmp	r4, #3
   80e6a:	d92e      	bls.n	80eca <memset+0x82>
   80e6c:	b2cd      	uxtb	r5, r1
   80e6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80e72:	2c0f      	cmp	r4, #15
   80e74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80e78:	d919      	bls.n	80eae <memset+0x66>
   80e7a:	4626      	mov	r6, r4
   80e7c:	f103 0210 	add.w	r2, r3, #16
   80e80:	3e10      	subs	r6, #16
   80e82:	2e0f      	cmp	r6, #15
   80e84:	f842 5c10 	str.w	r5, [r2, #-16]
   80e88:	f842 5c0c 	str.w	r5, [r2, #-12]
   80e8c:	f842 5c08 	str.w	r5, [r2, #-8]
   80e90:	f842 5c04 	str.w	r5, [r2, #-4]
   80e94:	f102 0210 	add.w	r2, r2, #16
   80e98:	d8f2      	bhi.n	80e80 <memset+0x38>
   80e9a:	f1a4 0210 	sub.w	r2, r4, #16
   80e9e:	f022 020f 	bic.w	r2, r2, #15
   80ea2:	f004 040f 	and.w	r4, r4, #15
   80ea6:	3210      	adds	r2, #16
   80ea8:	2c03      	cmp	r4, #3
   80eaa:	4413      	add	r3, r2
   80eac:	d90d      	bls.n	80eca <memset+0x82>
   80eae:	461e      	mov	r6, r3
   80eb0:	4622      	mov	r2, r4
   80eb2:	3a04      	subs	r2, #4
   80eb4:	2a03      	cmp	r2, #3
   80eb6:	f846 5b04 	str.w	r5, [r6], #4
   80eba:	d8fa      	bhi.n	80eb2 <memset+0x6a>
   80ebc:	1f22      	subs	r2, r4, #4
   80ebe:	f022 0203 	bic.w	r2, r2, #3
   80ec2:	3204      	adds	r2, #4
   80ec4:	4413      	add	r3, r2
   80ec6:	f004 0403 	and.w	r4, r4, #3
   80eca:	b12c      	cbz	r4, 80ed8 <memset+0x90>
   80ecc:	b2c9      	uxtb	r1, r1
   80ece:	441c      	add	r4, r3
   80ed0:	f803 1b01 	strb.w	r1, [r3], #1
   80ed4:	42a3      	cmp	r3, r4
   80ed6:	d1fb      	bne.n	80ed0 <memset+0x88>
   80ed8:	bc70      	pop	{r4, r5, r6}
   80eda:	4770      	bx	lr
   80edc:	4614      	mov	r4, r2
   80ede:	4603      	mov	r3, r0
   80ee0:	e7c2      	b.n	80e68 <memset+0x20>
   80ee2:	bf00      	nop

00080ee4 <setbuf>:
   80ee4:	2900      	cmp	r1, #0
   80ee6:	bf0c      	ite	eq
   80ee8:	2202      	moveq	r2, #2
   80eea:	2200      	movne	r2, #0
   80eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80ef0:	f000 b800 	b.w	80ef4 <setvbuf>

00080ef4 <setvbuf>:
   80ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ef8:	4d3a      	ldr	r5, [pc, #232]	; (80fe4 <setvbuf+0xf0>)
   80efa:	4604      	mov	r4, r0
   80efc:	682e      	ldr	r6, [r5, #0]
   80efe:	4690      	mov	r8, r2
   80f00:	460d      	mov	r5, r1
   80f02:	461f      	mov	r7, r3
   80f04:	b116      	cbz	r6, 80f0c <setvbuf+0x18>
   80f06:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   80f08:	2b00      	cmp	r3, #0
   80f0a:	d03c      	beq.n	80f86 <setvbuf+0x92>
   80f0c:	f1b8 0f02 	cmp.w	r8, #2
   80f10:	d82f      	bhi.n	80f72 <setvbuf+0x7e>
   80f12:	2f00      	cmp	r7, #0
   80f14:	db2d      	blt.n	80f72 <setvbuf+0x7e>
   80f16:	4621      	mov	r1, r4
   80f18:	4630      	mov	r0, r6
   80f1a:	f000 f91b 	bl	81154 <_fflush_r>
   80f1e:	89a1      	ldrh	r1, [r4, #12]
   80f20:	2300      	movs	r3, #0
   80f22:	6063      	str	r3, [r4, #4]
   80f24:	61a3      	str	r3, [r4, #24]
   80f26:	060b      	lsls	r3, r1, #24
   80f28:	d427      	bmi.n	80f7a <setvbuf+0x86>
   80f2a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   80f2e:	b289      	uxth	r1, r1
   80f30:	f1b8 0f02 	cmp.w	r8, #2
   80f34:	81a1      	strh	r1, [r4, #12]
   80f36:	d02a      	beq.n	80f8e <setvbuf+0x9a>
   80f38:	2d00      	cmp	r5, #0
   80f3a:	d036      	beq.n	80faa <setvbuf+0xb6>
   80f3c:	f1b8 0f01 	cmp.w	r8, #1
   80f40:	d011      	beq.n	80f66 <setvbuf+0x72>
   80f42:	b289      	uxth	r1, r1
   80f44:	f001 0008 	and.w	r0, r1, #8
   80f48:	4b27      	ldr	r3, [pc, #156]	; (80fe8 <setvbuf+0xf4>)
   80f4a:	b280      	uxth	r0, r0
   80f4c:	63f3      	str	r3, [r6, #60]	; 0x3c
   80f4e:	6025      	str	r5, [r4, #0]
   80f50:	6125      	str	r5, [r4, #16]
   80f52:	6167      	str	r7, [r4, #20]
   80f54:	b178      	cbz	r0, 80f76 <setvbuf+0x82>
   80f56:	f011 0f03 	tst.w	r1, #3
   80f5a:	bf18      	it	ne
   80f5c:	2700      	movne	r7, #0
   80f5e:	2000      	movs	r0, #0
   80f60:	60a7      	str	r7, [r4, #8]
   80f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f66:	f041 0101 	orr.w	r1, r1, #1
   80f6a:	427b      	negs	r3, r7
   80f6c:	81a1      	strh	r1, [r4, #12]
   80f6e:	61a3      	str	r3, [r4, #24]
   80f70:	e7e7      	b.n	80f42 <setvbuf+0x4e>
   80f72:	f04f 30ff 	mov.w	r0, #4294967295
   80f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f7a:	6921      	ldr	r1, [r4, #16]
   80f7c:	4630      	mov	r0, r6
   80f7e:	f000 f9eb 	bl	81358 <_free_r>
   80f82:	89a1      	ldrh	r1, [r4, #12]
   80f84:	e7d1      	b.n	80f2a <setvbuf+0x36>
   80f86:	4630      	mov	r0, r6
   80f88:	f000 f978 	bl	8127c <__sinit>
   80f8c:	e7be      	b.n	80f0c <setvbuf+0x18>
   80f8e:	2000      	movs	r0, #0
   80f90:	f104 0343 	add.w	r3, r4, #67	; 0x43
   80f94:	f041 0102 	orr.w	r1, r1, #2
   80f98:	2500      	movs	r5, #0
   80f9a:	2201      	movs	r2, #1
   80f9c:	81a1      	strh	r1, [r4, #12]
   80f9e:	60a5      	str	r5, [r4, #8]
   80fa0:	6023      	str	r3, [r4, #0]
   80fa2:	6123      	str	r3, [r4, #16]
   80fa4:	6162      	str	r2, [r4, #20]
   80fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80faa:	2f00      	cmp	r7, #0
   80fac:	bf08      	it	eq
   80fae:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80fb2:	4638      	mov	r0, r7
   80fb4:	f000 fad0 	bl	81558 <malloc>
   80fb8:	4605      	mov	r5, r0
   80fba:	b128      	cbz	r0, 80fc8 <setvbuf+0xd4>
   80fbc:	89a1      	ldrh	r1, [r4, #12]
   80fbe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80fc2:	b289      	uxth	r1, r1
   80fc4:	81a1      	strh	r1, [r4, #12]
   80fc6:	e7b9      	b.n	80f3c <setvbuf+0x48>
   80fc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80fcc:	f000 fac4 	bl	81558 <malloc>
   80fd0:	4605      	mov	r5, r0
   80fd2:	b918      	cbnz	r0, 80fdc <setvbuf+0xe8>
   80fd4:	89a1      	ldrh	r1, [r4, #12]
   80fd6:	f04f 30ff 	mov.w	r0, #4294967295
   80fda:	e7d9      	b.n	80f90 <setvbuf+0x9c>
   80fdc:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80fe0:	e7ec      	b.n	80fbc <setvbuf+0xc8>
   80fe2:	bf00      	nop
   80fe4:	20070558 	.word	0x20070558
   80fe8:	00081181 	.word	0x00081181

00080fec <register_fini>:
   80fec:	4b02      	ldr	r3, [pc, #8]	; (80ff8 <register_fini+0xc>)
   80fee:	b113      	cbz	r3, 80ff6 <register_fini+0xa>
   80ff0:	4802      	ldr	r0, [pc, #8]	; (80ffc <register_fini+0x10>)
   80ff2:	f000 b805 	b.w	81000 <atexit>
   80ff6:	4770      	bx	lr
   80ff8:	00000000 	.word	0x00000000
   80ffc:	00081291 	.word	0x00081291

00081000 <atexit>:
   81000:	4601      	mov	r1, r0
   81002:	2000      	movs	r0, #0
   81004:	4602      	mov	r2, r0
   81006:	4603      	mov	r3, r0
   81008:	f000 bda0 	b.w	81b4c <__register_exitproc>

0008100c <__sflush_r>:
   8100c:	898b      	ldrh	r3, [r1, #12]
   8100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81012:	b29a      	uxth	r2, r3
   81014:	460d      	mov	r5, r1
   81016:	0711      	lsls	r1, r2, #28
   81018:	4680      	mov	r8, r0
   8101a:	d43c      	bmi.n	81096 <__sflush_r+0x8a>
   8101c:	686a      	ldr	r2, [r5, #4]
   8101e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81022:	2a00      	cmp	r2, #0
   81024:	81ab      	strh	r3, [r5, #12]
   81026:	dd65      	ble.n	810f4 <__sflush_r+0xe8>
   81028:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8102a:	2e00      	cmp	r6, #0
   8102c:	d04b      	beq.n	810c6 <__sflush_r+0xba>
   8102e:	b29b      	uxth	r3, r3
   81030:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81034:	2100      	movs	r1, #0
   81036:	b292      	uxth	r2, r2
   81038:	f8d8 4000 	ldr.w	r4, [r8]
   8103c:	f8c8 1000 	str.w	r1, [r8]
   81040:	2a00      	cmp	r2, #0
   81042:	d05b      	beq.n	810fc <__sflush_r+0xf0>
   81044:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81046:	075f      	lsls	r7, r3, #29
   81048:	d505      	bpl.n	81056 <__sflush_r+0x4a>
   8104a:	6869      	ldr	r1, [r5, #4]
   8104c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8104e:	1a52      	subs	r2, r2, r1
   81050:	b10b      	cbz	r3, 81056 <__sflush_r+0x4a>
   81052:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81054:	1ad2      	subs	r2, r2, r3
   81056:	4640      	mov	r0, r8
   81058:	69e9      	ldr	r1, [r5, #28]
   8105a:	2300      	movs	r3, #0
   8105c:	47b0      	blx	r6
   8105e:	1c46      	adds	r6, r0, #1
   81060:	d056      	beq.n	81110 <__sflush_r+0x104>
   81062:	89ab      	ldrh	r3, [r5, #12]
   81064:	692a      	ldr	r2, [r5, #16]
   81066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8106a:	b29b      	uxth	r3, r3
   8106c:	2100      	movs	r1, #0
   8106e:	602a      	str	r2, [r5, #0]
   81070:	04da      	lsls	r2, r3, #19
   81072:	81ab      	strh	r3, [r5, #12]
   81074:	6069      	str	r1, [r5, #4]
   81076:	d43b      	bmi.n	810f0 <__sflush_r+0xe4>
   81078:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8107a:	f8c8 4000 	str.w	r4, [r8]
   8107e:	b311      	cbz	r1, 810c6 <__sflush_r+0xba>
   81080:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81084:	4299      	cmp	r1, r3
   81086:	d002      	beq.n	8108e <__sflush_r+0x82>
   81088:	4640      	mov	r0, r8
   8108a:	f000 f965 	bl	81358 <_free_r>
   8108e:	2000      	movs	r0, #0
   81090:	6328      	str	r0, [r5, #48]	; 0x30
   81092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81096:	692e      	ldr	r6, [r5, #16]
   81098:	b1ae      	cbz	r6, 810c6 <__sflush_r+0xba>
   8109a:	0791      	lsls	r1, r2, #30
   8109c:	682c      	ldr	r4, [r5, #0]
   8109e:	bf0c      	ite	eq
   810a0:	696b      	ldreq	r3, [r5, #20]
   810a2:	2300      	movne	r3, #0
   810a4:	602e      	str	r6, [r5, #0]
   810a6:	1ba4      	subs	r4, r4, r6
   810a8:	60ab      	str	r3, [r5, #8]
   810aa:	e00a      	b.n	810c2 <__sflush_r+0xb6>
   810ac:	4632      	mov	r2, r6
   810ae:	4623      	mov	r3, r4
   810b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   810b2:	4640      	mov	r0, r8
   810b4:	69e9      	ldr	r1, [r5, #28]
   810b6:	47b8      	blx	r7
   810b8:	2800      	cmp	r0, #0
   810ba:	eba4 0400 	sub.w	r4, r4, r0
   810be:	4406      	add	r6, r0
   810c0:	dd04      	ble.n	810cc <__sflush_r+0xc0>
   810c2:	2c00      	cmp	r4, #0
   810c4:	dcf2      	bgt.n	810ac <__sflush_r+0xa0>
   810c6:	2000      	movs	r0, #0
   810c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810cc:	89ab      	ldrh	r3, [r5, #12]
   810ce:	f04f 30ff 	mov.w	r0, #4294967295
   810d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   810d6:	81ab      	strh	r3, [r5, #12]
   810d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810dc:	89ab      	ldrh	r3, [r5, #12]
   810de:	692a      	ldr	r2, [r5, #16]
   810e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   810e4:	b29b      	uxth	r3, r3
   810e6:	81ab      	strh	r3, [r5, #12]
   810e8:	04db      	lsls	r3, r3, #19
   810ea:	6069      	str	r1, [r5, #4]
   810ec:	602a      	str	r2, [r5, #0]
   810ee:	d5c3      	bpl.n	81078 <__sflush_r+0x6c>
   810f0:	6528      	str	r0, [r5, #80]	; 0x50
   810f2:	e7c1      	b.n	81078 <__sflush_r+0x6c>
   810f4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   810f6:	2a00      	cmp	r2, #0
   810f8:	dc96      	bgt.n	81028 <__sflush_r+0x1c>
   810fa:	e7e4      	b.n	810c6 <__sflush_r+0xba>
   810fc:	2301      	movs	r3, #1
   810fe:	4640      	mov	r0, r8
   81100:	69e9      	ldr	r1, [r5, #28]
   81102:	47b0      	blx	r6
   81104:	1c43      	adds	r3, r0, #1
   81106:	4602      	mov	r2, r0
   81108:	d019      	beq.n	8113e <__sflush_r+0x132>
   8110a:	89ab      	ldrh	r3, [r5, #12]
   8110c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8110e:	e79a      	b.n	81046 <__sflush_r+0x3a>
   81110:	f8d8 1000 	ldr.w	r1, [r8]
   81114:	2900      	cmp	r1, #0
   81116:	d0e1      	beq.n	810dc <__sflush_r+0xd0>
   81118:	291d      	cmp	r1, #29
   8111a:	d007      	beq.n	8112c <__sflush_r+0x120>
   8111c:	2916      	cmp	r1, #22
   8111e:	d005      	beq.n	8112c <__sflush_r+0x120>
   81120:	89ab      	ldrh	r3, [r5, #12]
   81122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81126:	81ab      	strh	r3, [r5, #12]
   81128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8112c:	89ab      	ldrh	r3, [r5, #12]
   8112e:	6929      	ldr	r1, [r5, #16]
   81130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81134:	2200      	movs	r2, #0
   81136:	81ab      	strh	r3, [r5, #12]
   81138:	e885 0006 	stmia.w	r5, {r1, r2}
   8113c:	e79c      	b.n	81078 <__sflush_r+0x6c>
   8113e:	f8d8 3000 	ldr.w	r3, [r8]
   81142:	2b00      	cmp	r3, #0
   81144:	d0e1      	beq.n	8110a <__sflush_r+0xfe>
   81146:	2b1d      	cmp	r3, #29
   81148:	d001      	beq.n	8114e <__sflush_r+0x142>
   8114a:	2b16      	cmp	r3, #22
   8114c:	d1be      	bne.n	810cc <__sflush_r+0xc0>
   8114e:	f8c8 4000 	str.w	r4, [r8]
   81152:	e7b8      	b.n	810c6 <__sflush_r+0xba>

00081154 <_fflush_r>:
   81154:	b510      	push	{r4, lr}
   81156:	4604      	mov	r4, r0
   81158:	b082      	sub	sp, #8
   8115a:	b108      	cbz	r0, 81160 <_fflush_r+0xc>
   8115c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8115e:	b153      	cbz	r3, 81176 <_fflush_r+0x22>
   81160:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81164:	b908      	cbnz	r0, 8116a <_fflush_r+0x16>
   81166:	b002      	add	sp, #8
   81168:	bd10      	pop	{r4, pc}
   8116a:	4620      	mov	r0, r4
   8116c:	b002      	add	sp, #8
   8116e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81172:	f7ff bf4b 	b.w	8100c <__sflush_r>
   81176:	9101      	str	r1, [sp, #4]
   81178:	f000 f880 	bl	8127c <__sinit>
   8117c:	9901      	ldr	r1, [sp, #4]
   8117e:	e7ef      	b.n	81160 <_fflush_r+0xc>

00081180 <_cleanup_r>:
   81180:	4901      	ldr	r1, [pc, #4]	; (81188 <_cleanup_r+0x8>)
   81182:	f000 b9c1 	b.w	81508 <_fwalk_reent>
   81186:	bf00      	nop
   81188:	00081c15 	.word	0x00081c15

0008118c <__sinit.part.1>:
   8118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81190:	4607      	mov	r7, r0
   81192:	4835      	ldr	r0, [pc, #212]	; (81268 <__sinit.part.1+0xdc>)
   81194:	687d      	ldr	r5, [r7, #4]
   81196:	2400      	movs	r4, #0
   81198:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8119c:	2304      	movs	r3, #4
   8119e:	2103      	movs	r1, #3
   811a0:	63f8      	str	r0, [r7, #60]	; 0x3c
   811a2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   811a6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   811aa:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   811ae:	b083      	sub	sp, #12
   811b0:	602c      	str	r4, [r5, #0]
   811b2:	606c      	str	r4, [r5, #4]
   811b4:	60ac      	str	r4, [r5, #8]
   811b6:	666c      	str	r4, [r5, #100]	; 0x64
   811b8:	81ec      	strh	r4, [r5, #14]
   811ba:	612c      	str	r4, [r5, #16]
   811bc:	616c      	str	r4, [r5, #20]
   811be:	61ac      	str	r4, [r5, #24]
   811c0:	81ab      	strh	r3, [r5, #12]
   811c2:	4621      	mov	r1, r4
   811c4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   811c8:	2208      	movs	r2, #8
   811ca:	f7ff fe3d 	bl	80e48 <memset>
   811ce:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8126c <__sinit.part.1+0xe0>
   811d2:	68be      	ldr	r6, [r7, #8]
   811d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 81270 <__sinit.part.1+0xe4>
   811d8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81274 <__sinit.part.1+0xe8>
   811dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81278 <__sinit.part.1+0xec>
   811e0:	2301      	movs	r3, #1
   811e2:	2209      	movs	r2, #9
   811e4:	f8c5 b020 	str.w	fp, [r5, #32]
   811e8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   811ec:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   811f0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   811f4:	61ed      	str	r5, [r5, #28]
   811f6:	4621      	mov	r1, r4
   811f8:	81f3      	strh	r3, [r6, #14]
   811fa:	81b2      	strh	r2, [r6, #12]
   811fc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81200:	6034      	str	r4, [r6, #0]
   81202:	6074      	str	r4, [r6, #4]
   81204:	60b4      	str	r4, [r6, #8]
   81206:	6674      	str	r4, [r6, #100]	; 0x64
   81208:	6134      	str	r4, [r6, #16]
   8120a:	6174      	str	r4, [r6, #20]
   8120c:	61b4      	str	r4, [r6, #24]
   8120e:	2208      	movs	r2, #8
   81210:	9301      	str	r3, [sp, #4]
   81212:	f7ff fe19 	bl	80e48 <memset>
   81216:	68fd      	ldr	r5, [r7, #12]
   81218:	2012      	movs	r0, #18
   8121a:	2202      	movs	r2, #2
   8121c:	61f6      	str	r6, [r6, #28]
   8121e:	f8c6 b020 	str.w	fp, [r6, #32]
   81222:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81226:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8122a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8122e:	4621      	mov	r1, r4
   81230:	81a8      	strh	r0, [r5, #12]
   81232:	81ea      	strh	r2, [r5, #14]
   81234:	602c      	str	r4, [r5, #0]
   81236:	606c      	str	r4, [r5, #4]
   81238:	60ac      	str	r4, [r5, #8]
   8123a:	666c      	str	r4, [r5, #100]	; 0x64
   8123c:	612c      	str	r4, [r5, #16]
   8123e:	616c      	str	r4, [r5, #20]
   81240:	61ac      	str	r4, [r5, #24]
   81242:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81246:	2208      	movs	r2, #8
   81248:	f7ff fdfe 	bl	80e48 <memset>
   8124c:	9b01      	ldr	r3, [sp, #4]
   8124e:	61ed      	str	r5, [r5, #28]
   81250:	f8c5 b020 	str.w	fp, [r5, #32]
   81254:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81258:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8125c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81260:	63bb      	str	r3, [r7, #56]	; 0x38
   81262:	b003      	add	sp, #12
   81264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81268:	00081181 	.word	0x00081181
   8126c:	00081aa1 	.word	0x00081aa1
   81270:	00081ac5 	.word	0x00081ac5
   81274:	00081afd 	.word	0x00081afd
   81278:	00081b1d 	.word	0x00081b1d

0008127c <__sinit>:
   8127c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8127e:	b103      	cbz	r3, 81282 <__sinit+0x6>
   81280:	4770      	bx	lr
   81282:	f7ff bf83 	b.w	8118c <__sinit.part.1>
   81286:	bf00      	nop

00081288 <__sfp_lock_acquire>:
   81288:	4770      	bx	lr
   8128a:	bf00      	nop

0008128c <__sfp_lock_release>:
   8128c:	4770      	bx	lr
   8128e:	bf00      	nop

00081290 <__libc_fini_array>:
   81290:	b538      	push	{r3, r4, r5, lr}
   81292:	4b08      	ldr	r3, [pc, #32]	; (812b4 <__libc_fini_array+0x24>)
   81294:	4d08      	ldr	r5, [pc, #32]	; (812b8 <__libc_fini_array+0x28>)
   81296:	1aed      	subs	r5, r5, r3
   81298:	10ac      	asrs	r4, r5, #2
   8129a:	bf18      	it	ne
   8129c:	18ed      	addne	r5, r5, r3
   8129e:	d005      	beq.n	812ac <__libc_fini_array+0x1c>
   812a0:	3c01      	subs	r4, #1
   812a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   812a6:	4798      	blx	r3
   812a8:	2c00      	cmp	r4, #0
   812aa:	d1f9      	bne.n	812a0 <__libc_fini_array+0x10>
   812ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   812b0:	f000 bd34 	b.w	81d1c <_fini>
   812b4:	00081d28 	.word	0x00081d28
   812b8:	00081d2c 	.word	0x00081d2c

000812bc <_malloc_trim_r>:
   812bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812be:	460c      	mov	r4, r1
   812c0:	4f22      	ldr	r7, [pc, #136]	; (8134c <_malloc_trim_r+0x90>)
   812c2:	4606      	mov	r6, r0
   812c4:	f000 fbd6 	bl	81a74 <__malloc_lock>
   812c8:	68bb      	ldr	r3, [r7, #8]
   812ca:	685d      	ldr	r5, [r3, #4]
   812cc:	f025 0503 	bic.w	r5, r5, #3
   812d0:	1b29      	subs	r1, r5, r4
   812d2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   812d6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   812da:	f021 010f 	bic.w	r1, r1, #15
   812de:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   812e2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   812e6:	db07      	blt.n	812f8 <_malloc_trim_r+0x3c>
   812e8:	4630      	mov	r0, r6
   812ea:	2100      	movs	r1, #0
   812ec:	f000 fbc6 	bl	81a7c <_sbrk_r>
   812f0:	68bb      	ldr	r3, [r7, #8]
   812f2:	442b      	add	r3, r5
   812f4:	4298      	cmp	r0, r3
   812f6:	d004      	beq.n	81302 <_malloc_trim_r+0x46>
   812f8:	4630      	mov	r0, r6
   812fa:	f000 fbbd 	bl	81a78 <__malloc_unlock>
   812fe:	2000      	movs	r0, #0
   81300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81302:	4630      	mov	r0, r6
   81304:	4261      	negs	r1, r4
   81306:	f000 fbb9 	bl	81a7c <_sbrk_r>
   8130a:	3001      	adds	r0, #1
   8130c:	d00d      	beq.n	8132a <_malloc_trim_r+0x6e>
   8130e:	4b10      	ldr	r3, [pc, #64]	; (81350 <_malloc_trim_r+0x94>)
   81310:	68ba      	ldr	r2, [r7, #8]
   81312:	6819      	ldr	r1, [r3, #0]
   81314:	1b2d      	subs	r5, r5, r4
   81316:	f045 0501 	orr.w	r5, r5, #1
   8131a:	4630      	mov	r0, r6
   8131c:	1b09      	subs	r1, r1, r4
   8131e:	6055      	str	r5, [r2, #4]
   81320:	6019      	str	r1, [r3, #0]
   81322:	f000 fba9 	bl	81a78 <__malloc_unlock>
   81326:	2001      	movs	r0, #1
   81328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8132a:	4630      	mov	r0, r6
   8132c:	2100      	movs	r1, #0
   8132e:	f000 fba5 	bl	81a7c <_sbrk_r>
   81332:	68ba      	ldr	r2, [r7, #8]
   81334:	1a83      	subs	r3, r0, r2
   81336:	2b0f      	cmp	r3, #15
   81338:	ddde      	ble.n	812f8 <_malloc_trim_r+0x3c>
   8133a:	4c06      	ldr	r4, [pc, #24]	; (81354 <_malloc_trim_r+0x98>)
   8133c:	4904      	ldr	r1, [pc, #16]	; (81350 <_malloc_trim_r+0x94>)
   8133e:	6824      	ldr	r4, [r4, #0]
   81340:	f043 0301 	orr.w	r3, r3, #1
   81344:	1b00      	subs	r0, r0, r4
   81346:	6053      	str	r3, [r2, #4]
   81348:	6008      	str	r0, [r1, #0]
   8134a:	e7d5      	b.n	812f8 <_malloc_trim_r+0x3c>
   8134c:	2007055c 	.word	0x2007055c
   81350:	20070a10 	.word	0x20070a10
   81354:	20070968 	.word	0x20070968

00081358 <_free_r>:
   81358:	2900      	cmp	r1, #0
   8135a:	d04e      	beq.n	813fa <_free_r+0xa2>
   8135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81360:	460c      	mov	r4, r1
   81362:	4680      	mov	r8, r0
   81364:	f000 fb86 	bl	81a74 <__malloc_lock>
   81368:	f854 7c04 	ldr.w	r7, [r4, #-4]
   8136c:	4962      	ldr	r1, [pc, #392]	; (814f8 <_free_r+0x1a0>)
   8136e:	f1a4 0508 	sub.w	r5, r4, #8
   81372:	f027 0201 	bic.w	r2, r7, #1
   81376:	18ab      	adds	r3, r5, r2
   81378:	688e      	ldr	r6, [r1, #8]
   8137a:	6858      	ldr	r0, [r3, #4]
   8137c:	429e      	cmp	r6, r3
   8137e:	f020 0003 	bic.w	r0, r0, #3
   81382:	d05a      	beq.n	8143a <_free_r+0xe2>
   81384:	07fe      	lsls	r6, r7, #31
   81386:	6058      	str	r0, [r3, #4]
   81388:	d40b      	bmi.n	813a2 <_free_r+0x4a>
   8138a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8138e:	f101 0e08 	add.w	lr, r1, #8
   81392:	1bed      	subs	r5, r5, r7
   81394:	68ac      	ldr	r4, [r5, #8]
   81396:	443a      	add	r2, r7
   81398:	4574      	cmp	r4, lr
   8139a:	d067      	beq.n	8146c <_free_r+0x114>
   8139c:	68ef      	ldr	r7, [r5, #12]
   8139e:	60e7      	str	r7, [r4, #12]
   813a0:	60bc      	str	r4, [r7, #8]
   813a2:	181c      	adds	r4, r3, r0
   813a4:	6864      	ldr	r4, [r4, #4]
   813a6:	07e4      	lsls	r4, r4, #31
   813a8:	d40c      	bmi.n	813c4 <_free_r+0x6c>
   813aa:	4f54      	ldr	r7, [pc, #336]	; (814fc <_free_r+0x1a4>)
   813ac:	689c      	ldr	r4, [r3, #8]
   813ae:	4402      	add	r2, r0
   813b0:	42bc      	cmp	r4, r7
   813b2:	d07c      	beq.n	814ae <_free_r+0x156>
   813b4:	68d8      	ldr	r0, [r3, #12]
   813b6:	f042 0301 	orr.w	r3, r2, #1
   813ba:	60e0      	str	r0, [r4, #12]
   813bc:	6084      	str	r4, [r0, #8]
   813be:	606b      	str	r3, [r5, #4]
   813c0:	50aa      	str	r2, [r5, r2]
   813c2:	e003      	b.n	813cc <_free_r+0x74>
   813c4:	f042 0301 	orr.w	r3, r2, #1
   813c8:	606b      	str	r3, [r5, #4]
   813ca:	50aa      	str	r2, [r5, r2]
   813cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   813d0:	d214      	bcs.n	813fc <_free_r+0xa4>
   813d2:	08d2      	lsrs	r2, r2, #3
   813d4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   813d8:	2401      	movs	r4, #1
   813da:	6848      	ldr	r0, [r1, #4]
   813dc:	1092      	asrs	r2, r2, #2
   813de:	fa04 f202 	lsl.w	r2, r4, r2
   813e2:	689c      	ldr	r4, [r3, #8]
   813e4:	4310      	orrs	r0, r2
   813e6:	60ac      	str	r4, [r5, #8]
   813e8:	60eb      	str	r3, [r5, #12]
   813ea:	6048      	str	r0, [r1, #4]
   813ec:	609d      	str	r5, [r3, #8]
   813ee:	60e5      	str	r5, [r4, #12]
   813f0:	4640      	mov	r0, r8
   813f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   813f6:	f000 bb3f 	b.w	81a78 <__malloc_unlock>
   813fa:	4770      	bx	lr
   813fc:	0a53      	lsrs	r3, r2, #9
   813fe:	2b04      	cmp	r3, #4
   81400:	d847      	bhi.n	81492 <_free_r+0x13a>
   81402:	0993      	lsrs	r3, r2, #6
   81404:	f103 0438 	add.w	r4, r3, #56	; 0x38
   81408:	0060      	lsls	r0, r4, #1
   8140a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   8140e:	6883      	ldr	r3, [r0, #8]
   81410:	4939      	ldr	r1, [pc, #228]	; (814f8 <_free_r+0x1a0>)
   81412:	4283      	cmp	r3, r0
   81414:	d043      	beq.n	8149e <_free_r+0x146>
   81416:	6859      	ldr	r1, [r3, #4]
   81418:	f021 0103 	bic.w	r1, r1, #3
   8141c:	4291      	cmp	r1, r2
   8141e:	d902      	bls.n	81426 <_free_r+0xce>
   81420:	689b      	ldr	r3, [r3, #8]
   81422:	4298      	cmp	r0, r3
   81424:	d1f7      	bne.n	81416 <_free_r+0xbe>
   81426:	68da      	ldr	r2, [r3, #12]
   81428:	60ea      	str	r2, [r5, #12]
   8142a:	60ab      	str	r3, [r5, #8]
   8142c:	4640      	mov	r0, r8
   8142e:	6095      	str	r5, [r2, #8]
   81430:	60dd      	str	r5, [r3, #12]
   81432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81436:	f000 bb1f 	b.w	81a78 <__malloc_unlock>
   8143a:	07ff      	lsls	r7, r7, #31
   8143c:	4402      	add	r2, r0
   8143e:	d407      	bmi.n	81450 <_free_r+0xf8>
   81440:	f854 4c08 	ldr.w	r4, [r4, #-8]
   81444:	1b2d      	subs	r5, r5, r4
   81446:	68eb      	ldr	r3, [r5, #12]
   81448:	68a8      	ldr	r0, [r5, #8]
   8144a:	4422      	add	r2, r4
   8144c:	60c3      	str	r3, [r0, #12]
   8144e:	6098      	str	r0, [r3, #8]
   81450:	4b2b      	ldr	r3, [pc, #172]	; (81500 <_free_r+0x1a8>)
   81452:	f042 0001 	orr.w	r0, r2, #1
   81456:	681b      	ldr	r3, [r3, #0]
   81458:	6068      	str	r0, [r5, #4]
   8145a:	429a      	cmp	r2, r3
   8145c:	608d      	str	r5, [r1, #8]
   8145e:	d3c7      	bcc.n	813f0 <_free_r+0x98>
   81460:	4b28      	ldr	r3, [pc, #160]	; (81504 <_free_r+0x1ac>)
   81462:	4640      	mov	r0, r8
   81464:	6819      	ldr	r1, [r3, #0]
   81466:	f7ff ff29 	bl	812bc <_malloc_trim_r>
   8146a:	e7c1      	b.n	813f0 <_free_r+0x98>
   8146c:	1819      	adds	r1, r3, r0
   8146e:	6849      	ldr	r1, [r1, #4]
   81470:	07c9      	lsls	r1, r1, #31
   81472:	d409      	bmi.n	81488 <_free_r+0x130>
   81474:	68d9      	ldr	r1, [r3, #12]
   81476:	4402      	add	r2, r0
   81478:	689b      	ldr	r3, [r3, #8]
   8147a:	f042 0001 	orr.w	r0, r2, #1
   8147e:	60d9      	str	r1, [r3, #12]
   81480:	608b      	str	r3, [r1, #8]
   81482:	6068      	str	r0, [r5, #4]
   81484:	50aa      	str	r2, [r5, r2]
   81486:	e7b3      	b.n	813f0 <_free_r+0x98>
   81488:	f042 0301 	orr.w	r3, r2, #1
   8148c:	606b      	str	r3, [r5, #4]
   8148e:	50aa      	str	r2, [r5, r2]
   81490:	e7ae      	b.n	813f0 <_free_r+0x98>
   81492:	2b14      	cmp	r3, #20
   81494:	d814      	bhi.n	814c0 <_free_r+0x168>
   81496:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8149a:	0060      	lsls	r0, r4, #1
   8149c:	e7b5      	b.n	8140a <_free_r+0xb2>
   8149e:	684a      	ldr	r2, [r1, #4]
   814a0:	10a4      	asrs	r4, r4, #2
   814a2:	2001      	movs	r0, #1
   814a4:	40a0      	lsls	r0, r4
   814a6:	4302      	orrs	r2, r0
   814a8:	604a      	str	r2, [r1, #4]
   814aa:	461a      	mov	r2, r3
   814ac:	e7bc      	b.n	81428 <_free_r+0xd0>
   814ae:	f042 0301 	orr.w	r3, r2, #1
   814b2:	614d      	str	r5, [r1, #20]
   814b4:	610d      	str	r5, [r1, #16]
   814b6:	60ec      	str	r4, [r5, #12]
   814b8:	60ac      	str	r4, [r5, #8]
   814ba:	606b      	str	r3, [r5, #4]
   814bc:	50aa      	str	r2, [r5, r2]
   814be:	e797      	b.n	813f0 <_free_r+0x98>
   814c0:	2b54      	cmp	r3, #84	; 0x54
   814c2:	d804      	bhi.n	814ce <_free_r+0x176>
   814c4:	0b13      	lsrs	r3, r2, #12
   814c6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   814ca:	0060      	lsls	r0, r4, #1
   814cc:	e79d      	b.n	8140a <_free_r+0xb2>
   814ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   814d2:	d804      	bhi.n	814de <_free_r+0x186>
   814d4:	0bd3      	lsrs	r3, r2, #15
   814d6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   814da:	0060      	lsls	r0, r4, #1
   814dc:	e795      	b.n	8140a <_free_r+0xb2>
   814de:	f240 5054 	movw	r0, #1364	; 0x554
   814e2:	4283      	cmp	r3, r0
   814e4:	d804      	bhi.n	814f0 <_free_r+0x198>
   814e6:	0c93      	lsrs	r3, r2, #18
   814e8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   814ec:	0060      	lsls	r0, r4, #1
   814ee:	e78c      	b.n	8140a <_free_r+0xb2>
   814f0:	20fc      	movs	r0, #252	; 0xfc
   814f2:	247e      	movs	r4, #126	; 0x7e
   814f4:	e789      	b.n	8140a <_free_r+0xb2>
   814f6:	bf00      	nop
   814f8:	2007055c 	.word	0x2007055c
   814fc:	20070564 	.word	0x20070564
   81500:	20070964 	.word	0x20070964
   81504:	20070a0c 	.word	0x20070a0c

00081508 <_fwalk_reent>:
   81508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8150c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   81510:	d01e      	beq.n	81550 <_fwalk_reent+0x48>
   81512:	4688      	mov	r8, r1
   81514:	4607      	mov	r7, r0
   81516:	f04f 0900 	mov.w	r9, #0
   8151a:	6875      	ldr	r5, [r6, #4]
   8151c:	68b4      	ldr	r4, [r6, #8]
   8151e:	3d01      	subs	r5, #1
   81520:	d410      	bmi.n	81544 <_fwalk_reent+0x3c>
   81522:	89a3      	ldrh	r3, [r4, #12]
   81524:	3d01      	subs	r5, #1
   81526:	2b01      	cmp	r3, #1
   81528:	d908      	bls.n	8153c <_fwalk_reent+0x34>
   8152a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8152e:	3301      	adds	r3, #1
   81530:	d004      	beq.n	8153c <_fwalk_reent+0x34>
   81532:	4638      	mov	r0, r7
   81534:	4621      	mov	r1, r4
   81536:	47c0      	blx	r8
   81538:	ea49 0900 	orr.w	r9, r9, r0
   8153c:	1c6b      	adds	r3, r5, #1
   8153e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   81542:	d1ee      	bne.n	81522 <_fwalk_reent+0x1a>
   81544:	6836      	ldr	r6, [r6, #0]
   81546:	2e00      	cmp	r6, #0
   81548:	d1e7      	bne.n	8151a <_fwalk_reent+0x12>
   8154a:	4648      	mov	r0, r9
   8154c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81550:	46b1      	mov	r9, r6
   81552:	4648      	mov	r0, r9
   81554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081558 <malloc>:
   81558:	4b02      	ldr	r3, [pc, #8]	; (81564 <malloc+0xc>)
   8155a:	4601      	mov	r1, r0
   8155c:	6818      	ldr	r0, [r3, #0]
   8155e:	f000 b803 	b.w	81568 <_malloc_r>
   81562:	bf00      	nop
   81564:	20070558 	.word	0x20070558

00081568 <_malloc_r>:
   81568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8156c:	f101 050b 	add.w	r5, r1, #11
   81570:	2d16      	cmp	r5, #22
   81572:	b083      	sub	sp, #12
   81574:	4606      	mov	r6, r0
   81576:	d927      	bls.n	815c8 <_malloc_r+0x60>
   81578:	f035 0507 	bics.w	r5, r5, #7
   8157c:	f100 80b6 	bmi.w	816ec <_malloc_r+0x184>
   81580:	42a9      	cmp	r1, r5
   81582:	f200 80b3 	bhi.w	816ec <_malloc_r+0x184>
   81586:	f000 fa75 	bl	81a74 <__malloc_lock>
   8158a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8158e:	d222      	bcs.n	815d6 <_malloc_r+0x6e>
   81590:	4fbc      	ldr	r7, [pc, #752]	; (81884 <_malloc_r+0x31c>)
   81592:	08e8      	lsrs	r0, r5, #3
   81594:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   81598:	68dc      	ldr	r4, [r3, #12]
   8159a:	429c      	cmp	r4, r3
   8159c:	f000 81bc 	beq.w	81918 <_malloc_r+0x3b0>
   815a0:	6863      	ldr	r3, [r4, #4]
   815a2:	68e1      	ldr	r1, [r4, #12]
   815a4:	f023 0303 	bic.w	r3, r3, #3
   815a8:	4423      	add	r3, r4
   815aa:	685a      	ldr	r2, [r3, #4]
   815ac:	68a5      	ldr	r5, [r4, #8]
   815ae:	f042 0201 	orr.w	r2, r2, #1
   815b2:	60e9      	str	r1, [r5, #12]
   815b4:	4630      	mov	r0, r6
   815b6:	608d      	str	r5, [r1, #8]
   815b8:	605a      	str	r2, [r3, #4]
   815ba:	f000 fa5d 	bl	81a78 <__malloc_unlock>
   815be:	3408      	adds	r4, #8
   815c0:	4620      	mov	r0, r4
   815c2:	b003      	add	sp, #12
   815c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815c8:	2910      	cmp	r1, #16
   815ca:	f200 808f 	bhi.w	816ec <_malloc_r+0x184>
   815ce:	f000 fa51 	bl	81a74 <__malloc_lock>
   815d2:	2510      	movs	r5, #16
   815d4:	e7dc      	b.n	81590 <_malloc_r+0x28>
   815d6:	0a68      	lsrs	r0, r5, #9
   815d8:	f000 808f 	beq.w	816fa <_malloc_r+0x192>
   815dc:	2804      	cmp	r0, #4
   815de:	f200 8147 	bhi.w	81870 <_malloc_r+0x308>
   815e2:	09a8      	lsrs	r0, r5, #6
   815e4:	3038      	adds	r0, #56	; 0x38
   815e6:	0041      	lsls	r1, r0, #1
   815e8:	4fa6      	ldr	r7, [pc, #664]	; (81884 <_malloc_r+0x31c>)
   815ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   815ee:	68cc      	ldr	r4, [r1, #12]
   815f0:	42a1      	cmp	r1, r4
   815f2:	d106      	bne.n	81602 <_malloc_r+0x9a>
   815f4:	e00c      	b.n	81610 <_malloc_r+0xa8>
   815f6:	2a00      	cmp	r2, #0
   815f8:	f280 8082 	bge.w	81700 <_malloc_r+0x198>
   815fc:	68e4      	ldr	r4, [r4, #12]
   815fe:	42a1      	cmp	r1, r4
   81600:	d006      	beq.n	81610 <_malloc_r+0xa8>
   81602:	6863      	ldr	r3, [r4, #4]
   81604:	f023 0303 	bic.w	r3, r3, #3
   81608:	1b5a      	subs	r2, r3, r5
   8160a:	2a0f      	cmp	r2, #15
   8160c:	ddf3      	ble.n	815f6 <_malloc_r+0x8e>
   8160e:	3801      	subs	r0, #1
   81610:	3001      	adds	r0, #1
   81612:	499c      	ldr	r1, [pc, #624]	; (81884 <_malloc_r+0x31c>)
   81614:	693c      	ldr	r4, [r7, #16]
   81616:	f101 0e08 	add.w	lr, r1, #8
   8161a:	4574      	cmp	r4, lr
   8161c:	f000 8171 	beq.w	81902 <_malloc_r+0x39a>
   81620:	6863      	ldr	r3, [r4, #4]
   81622:	f023 0303 	bic.w	r3, r3, #3
   81626:	1b5a      	subs	r2, r3, r5
   81628:	2a0f      	cmp	r2, #15
   8162a:	f300 8157 	bgt.w	818dc <_malloc_r+0x374>
   8162e:	2a00      	cmp	r2, #0
   81630:	f8c1 e014 	str.w	lr, [r1, #20]
   81634:	f8c1 e010 	str.w	lr, [r1, #16]
   81638:	da66      	bge.n	81708 <_malloc_r+0x1a0>
   8163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8163e:	f080 812d 	bcs.w	8189c <_malloc_r+0x334>
   81642:	08db      	lsrs	r3, r3, #3
   81644:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   81648:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8164c:	684a      	ldr	r2, [r1, #4]
   8164e:	2301      	movs	r3, #1
   81650:	fa03 f30c 	lsl.w	r3, r3, ip
   81654:	f8d8 c008 	ldr.w	ip, [r8, #8]
   81658:	4313      	orrs	r3, r2
   8165a:	f8c4 c008 	str.w	ip, [r4, #8]
   8165e:	f8c4 800c 	str.w	r8, [r4, #12]
   81662:	604b      	str	r3, [r1, #4]
   81664:	f8c8 4008 	str.w	r4, [r8, #8]
   81668:	f8cc 400c 	str.w	r4, [ip, #12]
   8166c:	1082      	asrs	r2, r0, #2
   8166e:	2401      	movs	r4, #1
   81670:	4094      	lsls	r4, r2
   81672:	429c      	cmp	r4, r3
   81674:	d855      	bhi.n	81722 <_malloc_r+0x1ba>
   81676:	4223      	tst	r3, r4
   81678:	d106      	bne.n	81688 <_malloc_r+0x120>
   8167a:	f020 0003 	bic.w	r0, r0, #3
   8167e:	0064      	lsls	r4, r4, #1
   81680:	4223      	tst	r3, r4
   81682:	f100 0004 	add.w	r0, r0, #4
   81686:	d0fa      	beq.n	8167e <_malloc_r+0x116>
   81688:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   8168c:	46c4      	mov	ip, r8
   8168e:	4681      	mov	r9, r0
   81690:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81694:	459c      	cmp	ip, r3
   81696:	d107      	bne.n	816a8 <_malloc_r+0x140>
   81698:	e135      	b.n	81906 <_malloc_r+0x39e>
   8169a:	2900      	cmp	r1, #0
   8169c:	f280 8145 	bge.w	8192a <_malloc_r+0x3c2>
   816a0:	68db      	ldr	r3, [r3, #12]
   816a2:	459c      	cmp	ip, r3
   816a4:	f000 812f 	beq.w	81906 <_malloc_r+0x39e>
   816a8:	685a      	ldr	r2, [r3, #4]
   816aa:	f022 0203 	bic.w	r2, r2, #3
   816ae:	1b51      	subs	r1, r2, r5
   816b0:	290f      	cmp	r1, #15
   816b2:	ddf2      	ble.n	8169a <_malloc_r+0x132>
   816b4:	461c      	mov	r4, r3
   816b6:	68da      	ldr	r2, [r3, #12]
   816b8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   816bc:	f045 0901 	orr.w	r9, r5, #1
   816c0:	f041 0801 	orr.w	r8, r1, #1
   816c4:	441d      	add	r5, r3
   816c6:	f8c3 9004 	str.w	r9, [r3, #4]
   816ca:	4630      	mov	r0, r6
   816cc:	f8cc 200c 	str.w	r2, [ip, #12]
   816d0:	f8c2 c008 	str.w	ip, [r2, #8]
   816d4:	617d      	str	r5, [r7, #20]
   816d6:	613d      	str	r5, [r7, #16]
   816d8:	f8c5 e00c 	str.w	lr, [r5, #12]
   816dc:	f8c5 e008 	str.w	lr, [r5, #8]
   816e0:	f8c5 8004 	str.w	r8, [r5, #4]
   816e4:	5069      	str	r1, [r5, r1]
   816e6:	f000 f9c7 	bl	81a78 <__malloc_unlock>
   816ea:	e769      	b.n	815c0 <_malloc_r+0x58>
   816ec:	2400      	movs	r4, #0
   816ee:	4620      	mov	r0, r4
   816f0:	230c      	movs	r3, #12
   816f2:	6033      	str	r3, [r6, #0]
   816f4:	b003      	add	sp, #12
   816f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816fa:	217e      	movs	r1, #126	; 0x7e
   816fc:	203f      	movs	r0, #63	; 0x3f
   816fe:	e773      	b.n	815e8 <_malloc_r+0x80>
   81700:	4423      	add	r3, r4
   81702:	685a      	ldr	r2, [r3, #4]
   81704:	68e1      	ldr	r1, [r4, #12]
   81706:	e751      	b.n	815ac <_malloc_r+0x44>
   81708:	4423      	add	r3, r4
   8170a:	685a      	ldr	r2, [r3, #4]
   8170c:	4630      	mov	r0, r6
   8170e:	f042 0201 	orr.w	r2, r2, #1
   81712:	605a      	str	r2, [r3, #4]
   81714:	3408      	adds	r4, #8
   81716:	f000 f9af 	bl	81a78 <__malloc_unlock>
   8171a:	4620      	mov	r0, r4
   8171c:	b003      	add	sp, #12
   8171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81722:	68bc      	ldr	r4, [r7, #8]
   81724:	6863      	ldr	r3, [r4, #4]
   81726:	f023 0803 	bic.w	r8, r3, #3
   8172a:	4545      	cmp	r5, r8
   8172c:	d804      	bhi.n	81738 <_malloc_r+0x1d0>
   8172e:	ebc5 0308 	rsb	r3, r5, r8
   81732:	2b0f      	cmp	r3, #15
   81734:	f300 808c 	bgt.w	81850 <_malloc_r+0x2e8>
   81738:	4b53      	ldr	r3, [pc, #332]	; (81888 <_malloc_r+0x320>)
   8173a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 81898 <_malloc_r+0x330>
   8173e:	681a      	ldr	r2, [r3, #0]
   81740:	f8da 3000 	ldr.w	r3, [sl]
   81744:	442a      	add	r2, r5
   81746:	3301      	adds	r3, #1
   81748:	eb04 0b08 	add.w	fp, r4, r8
   8174c:	f000 8151 	beq.w	819f2 <_malloc_r+0x48a>
   81750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   81754:	320f      	adds	r2, #15
   81756:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8175a:	f022 020f 	bic.w	r2, r2, #15
   8175e:	4611      	mov	r1, r2
   81760:	4630      	mov	r0, r6
   81762:	9201      	str	r2, [sp, #4]
   81764:	f000 f98a 	bl	81a7c <_sbrk_r>
   81768:	f1b0 3fff 	cmp.w	r0, #4294967295
   8176c:	4681      	mov	r9, r0
   8176e:	9a01      	ldr	r2, [sp, #4]
   81770:	f000 8148 	beq.w	81a04 <_malloc_r+0x49c>
   81774:	4583      	cmp	fp, r0
   81776:	f200 80ef 	bhi.w	81958 <_malloc_r+0x3f0>
   8177a:	4b44      	ldr	r3, [pc, #272]	; (8188c <_malloc_r+0x324>)
   8177c:	45cb      	cmp	fp, r9
   8177e:	6819      	ldr	r1, [r3, #0]
   81780:	4411      	add	r1, r2
   81782:	6019      	str	r1, [r3, #0]
   81784:	f000 8143 	beq.w	81a0e <_malloc_r+0x4a6>
   81788:	f8da 0000 	ldr.w	r0, [sl]
   8178c:	f8df e108 	ldr.w	lr, [pc, #264]	; 81898 <_malloc_r+0x330>
   81790:	3001      	adds	r0, #1
   81792:	bf1b      	ittet	ne
   81794:	ebcb 0b09 	rsbne	fp, fp, r9
   81798:	4459      	addne	r1, fp
   8179a:	f8ce 9000 	streq.w	r9, [lr]
   8179e:	6019      	strne	r1, [r3, #0]
   817a0:	f019 0107 	ands.w	r1, r9, #7
   817a4:	f000 8108 	beq.w	819b8 <_malloc_r+0x450>
   817a8:	f1c1 0008 	rsb	r0, r1, #8
   817ac:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   817b0:	4481      	add	r9, r0
   817b2:	3108      	adds	r1, #8
   817b4:	444a      	add	r2, r9
   817b6:	f3c2 020b 	ubfx	r2, r2, #0, #12
   817ba:	ebc2 0a01 	rsb	sl, r2, r1
   817be:	4651      	mov	r1, sl
   817c0:	4630      	mov	r0, r6
   817c2:	9301      	str	r3, [sp, #4]
   817c4:	f000 f95a 	bl	81a7c <_sbrk_r>
   817c8:	1c43      	adds	r3, r0, #1
   817ca:	9b01      	ldr	r3, [sp, #4]
   817cc:	f000 812d 	beq.w	81a2a <_malloc_r+0x4c2>
   817d0:	ebc9 0200 	rsb	r2, r9, r0
   817d4:	4452      	add	r2, sl
   817d6:	f042 0201 	orr.w	r2, r2, #1
   817da:	6819      	ldr	r1, [r3, #0]
   817dc:	42bc      	cmp	r4, r7
   817de:	4451      	add	r1, sl
   817e0:	f8c7 9008 	str.w	r9, [r7, #8]
   817e4:	6019      	str	r1, [r3, #0]
   817e6:	f8c9 2004 	str.w	r2, [r9, #4]
   817ea:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8188c <_malloc_r+0x324>
   817ee:	d016      	beq.n	8181e <_malloc_r+0x2b6>
   817f0:	f1b8 0f0f 	cmp.w	r8, #15
   817f4:	f240 80ef 	bls.w	819d6 <_malloc_r+0x46e>
   817f8:	6862      	ldr	r2, [r4, #4]
   817fa:	f1a8 030c 	sub.w	r3, r8, #12
   817fe:	f023 0307 	bic.w	r3, r3, #7
   81802:	f002 0201 	and.w	r2, r2, #1
   81806:	18e0      	adds	r0, r4, r3
   81808:	f04f 0e05 	mov.w	lr, #5
   8180c:	431a      	orrs	r2, r3
   8180e:	2b0f      	cmp	r3, #15
   81810:	6062      	str	r2, [r4, #4]
   81812:	f8c0 e004 	str.w	lr, [r0, #4]
   81816:	f8c0 e008 	str.w	lr, [r0, #8]
   8181a:	f200 810a 	bhi.w	81a32 <_malloc_r+0x4ca>
   8181e:	4b1c      	ldr	r3, [pc, #112]	; (81890 <_malloc_r+0x328>)
   81820:	68bc      	ldr	r4, [r7, #8]
   81822:	681a      	ldr	r2, [r3, #0]
   81824:	4291      	cmp	r1, r2
   81826:	bf88      	it	hi
   81828:	6019      	strhi	r1, [r3, #0]
   8182a:	4b1a      	ldr	r3, [pc, #104]	; (81894 <_malloc_r+0x32c>)
   8182c:	681a      	ldr	r2, [r3, #0]
   8182e:	4291      	cmp	r1, r2
   81830:	6862      	ldr	r2, [r4, #4]
   81832:	bf88      	it	hi
   81834:	6019      	strhi	r1, [r3, #0]
   81836:	f022 0203 	bic.w	r2, r2, #3
   8183a:	4295      	cmp	r5, r2
   8183c:	eba2 0305 	sub.w	r3, r2, r5
   81840:	d801      	bhi.n	81846 <_malloc_r+0x2de>
   81842:	2b0f      	cmp	r3, #15
   81844:	dc04      	bgt.n	81850 <_malloc_r+0x2e8>
   81846:	4630      	mov	r0, r6
   81848:	f000 f916 	bl	81a78 <__malloc_unlock>
   8184c:	2400      	movs	r4, #0
   8184e:	e6b7      	b.n	815c0 <_malloc_r+0x58>
   81850:	f045 0201 	orr.w	r2, r5, #1
   81854:	f043 0301 	orr.w	r3, r3, #1
   81858:	4425      	add	r5, r4
   8185a:	6062      	str	r2, [r4, #4]
   8185c:	4630      	mov	r0, r6
   8185e:	60bd      	str	r5, [r7, #8]
   81860:	3408      	adds	r4, #8
   81862:	606b      	str	r3, [r5, #4]
   81864:	f000 f908 	bl	81a78 <__malloc_unlock>
   81868:	4620      	mov	r0, r4
   8186a:	b003      	add	sp, #12
   8186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81870:	2814      	cmp	r0, #20
   81872:	d969      	bls.n	81948 <_malloc_r+0x3e0>
   81874:	2854      	cmp	r0, #84	; 0x54
   81876:	f200 8098 	bhi.w	819aa <_malloc_r+0x442>
   8187a:	0b28      	lsrs	r0, r5, #12
   8187c:	306e      	adds	r0, #110	; 0x6e
   8187e:	0041      	lsls	r1, r0, #1
   81880:	e6b2      	b.n	815e8 <_malloc_r+0x80>
   81882:	bf00      	nop
   81884:	2007055c 	.word	0x2007055c
   81888:	20070a0c 	.word	0x20070a0c
   8188c:	20070a10 	.word	0x20070a10
   81890:	20070a08 	.word	0x20070a08
   81894:	20070a04 	.word	0x20070a04
   81898:	20070968 	.word	0x20070968
   8189c:	0a5a      	lsrs	r2, r3, #9
   8189e:	2a04      	cmp	r2, #4
   818a0:	d955      	bls.n	8194e <_malloc_r+0x3e6>
   818a2:	2a14      	cmp	r2, #20
   818a4:	f200 80a7 	bhi.w	819f6 <_malloc_r+0x48e>
   818a8:	325b      	adds	r2, #91	; 0x5b
   818aa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   818ae:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   818b2:	f8dc 1008 	ldr.w	r1, [ip, #8]
   818b6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 81a70 <_malloc_r+0x508>
   818ba:	4561      	cmp	r1, ip
   818bc:	d07f      	beq.n	819be <_malloc_r+0x456>
   818be:	684a      	ldr	r2, [r1, #4]
   818c0:	f022 0203 	bic.w	r2, r2, #3
   818c4:	4293      	cmp	r3, r2
   818c6:	d202      	bcs.n	818ce <_malloc_r+0x366>
   818c8:	6889      	ldr	r1, [r1, #8]
   818ca:	458c      	cmp	ip, r1
   818cc:	d1f7      	bne.n	818be <_malloc_r+0x356>
   818ce:	68ca      	ldr	r2, [r1, #12]
   818d0:	687b      	ldr	r3, [r7, #4]
   818d2:	60e2      	str	r2, [r4, #12]
   818d4:	60a1      	str	r1, [r4, #8]
   818d6:	6094      	str	r4, [r2, #8]
   818d8:	60cc      	str	r4, [r1, #12]
   818da:	e6c7      	b.n	8166c <_malloc_r+0x104>
   818dc:	f045 0701 	orr.w	r7, r5, #1
   818e0:	f042 0301 	orr.w	r3, r2, #1
   818e4:	4425      	add	r5, r4
   818e6:	6067      	str	r7, [r4, #4]
   818e8:	4630      	mov	r0, r6
   818ea:	614d      	str	r5, [r1, #20]
   818ec:	610d      	str	r5, [r1, #16]
   818ee:	f8c5 e00c 	str.w	lr, [r5, #12]
   818f2:	f8c5 e008 	str.w	lr, [r5, #8]
   818f6:	606b      	str	r3, [r5, #4]
   818f8:	50aa      	str	r2, [r5, r2]
   818fa:	3408      	adds	r4, #8
   818fc:	f000 f8bc 	bl	81a78 <__malloc_unlock>
   81900:	e65e      	b.n	815c0 <_malloc_r+0x58>
   81902:	684b      	ldr	r3, [r1, #4]
   81904:	e6b2      	b.n	8166c <_malloc_r+0x104>
   81906:	f109 0901 	add.w	r9, r9, #1
   8190a:	f019 0f03 	tst.w	r9, #3
   8190e:	f10c 0c08 	add.w	ip, ip, #8
   81912:	f47f aebd 	bne.w	81690 <_malloc_r+0x128>
   81916:	e02c      	b.n	81972 <_malloc_r+0x40a>
   81918:	f104 0308 	add.w	r3, r4, #8
   8191c:	6964      	ldr	r4, [r4, #20]
   8191e:	42a3      	cmp	r3, r4
   81920:	bf08      	it	eq
   81922:	3002      	addeq	r0, #2
   81924:	f43f ae75 	beq.w	81612 <_malloc_r+0xaa>
   81928:	e63a      	b.n	815a0 <_malloc_r+0x38>
   8192a:	461c      	mov	r4, r3
   8192c:	441a      	add	r2, r3
   8192e:	6851      	ldr	r1, [r2, #4]
   81930:	68db      	ldr	r3, [r3, #12]
   81932:	f854 5f08 	ldr.w	r5, [r4, #8]!
   81936:	f041 0101 	orr.w	r1, r1, #1
   8193a:	6051      	str	r1, [r2, #4]
   8193c:	4630      	mov	r0, r6
   8193e:	60eb      	str	r3, [r5, #12]
   81940:	609d      	str	r5, [r3, #8]
   81942:	f000 f899 	bl	81a78 <__malloc_unlock>
   81946:	e63b      	b.n	815c0 <_malloc_r+0x58>
   81948:	305b      	adds	r0, #91	; 0x5b
   8194a:	0041      	lsls	r1, r0, #1
   8194c:	e64c      	b.n	815e8 <_malloc_r+0x80>
   8194e:	099a      	lsrs	r2, r3, #6
   81950:	3238      	adds	r2, #56	; 0x38
   81952:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81956:	e7aa      	b.n	818ae <_malloc_r+0x346>
   81958:	42bc      	cmp	r4, r7
   8195a:	4b45      	ldr	r3, [pc, #276]	; (81a70 <_malloc_r+0x508>)
   8195c:	f43f af0d 	beq.w	8177a <_malloc_r+0x212>
   81960:	689c      	ldr	r4, [r3, #8]
   81962:	6862      	ldr	r2, [r4, #4]
   81964:	f022 0203 	bic.w	r2, r2, #3
   81968:	e767      	b.n	8183a <_malloc_r+0x2d2>
   8196a:	f8d8 8000 	ldr.w	r8, [r8]
   8196e:	4598      	cmp	r8, r3
   81970:	d17c      	bne.n	81a6c <_malloc_r+0x504>
   81972:	f010 0f03 	tst.w	r0, #3
   81976:	f1a8 0308 	sub.w	r3, r8, #8
   8197a:	f100 30ff 	add.w	r0, r0, #4294967295
   8197e:	d1f4      	bne.n	8196a <_malloc_r+0x402>
   81980:	687b      	ldr	r3, [r7, #4]
   81982:	ea23 0304 	bic.w	r3, r3, r4
   81986:	607b      	str	r3, [r7, #4]
   81988:	0064      	lsls	r4, r4, #1
   8198a:	429c      	cmp	r4, r3
   8198c:	f63f aec9 	bhi.w	81722 <_malloc_r+0x1ba>
   81990:	2c00      	cmp	r4, #0
   81992:	f43f aec6 	beq.w	81722 <_malloc_r+0x1ba>
   81996:	4223      	tst	r3, r4
   81998:	4648      	mov	r0, r9
   8199a:	f47f ae75 	bne.w	81688 <_malloc_r+0x120>
   8199e:	0064      	lsls	r4, r4, #1
   819a0:	4223      	tst	r3, r4
   819a2:	f100 0004 	add.w	r0, r0, #4
   819a6:	d0fa      	beq.n	8199e <_malloc_r+0x436>
   819a8:	e66e      	b.n	81688 <_malloc_r+0x120>
   819aa:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   819ae:	d818      	bhi.n	819e2 <_malloc_r+0x47a>
   819b0:	0be8      	lsrs	r0, r5, #15
   819b2:	3077      	adds	r0, #119	; 0x77
   819b4:	0041      	lsls	r1, r0, #1
   819b6:	e617      	b.n	815e8 <_malloc_r+0x80>
   819b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   819bc:	e6fa      	b.n	817b4 <_malloc_r+0x24c>
   819be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   819c2:	1092      	asrs	r2, r2, #2
   819c4:	f04f 0c01 	mov.w	ip, #1
   819c8:	fa0c f202 	lsl.w	r2, ip, r2
   819cc:	4313      	orrs	r3, r2
   819ce:	f8c8 3004 	str.w	r3, [r8, #4]
   819d2:	460a      	mov	r2, r1
   819d4:	e77d      	b.n	818d2 <_malloc_r+0x36a>
   819d6:	2301      	movs	r3, #1
   819d8:	f8c9 3004 	str.w	r3, [r9, #4]
   819dc:	464c      	mov	r4, r9
   819de:	2200      	movs	r2, #0
   819e0:	e72b      	b.n	8183a <_malloc_r+0x2d2>
   819e2:	f240 5354 	movw	r3, #1364	; 0x554
   819e6:	4298      	cmp	r0, r3
   819e8:	d81c      	bhi.n	81a24 <_malloc_r+0x4bc>
   819ea:	0ca8      	lsrs	r0, r5, #18
   819ec:	307c      	adds	r0, #124	; 0x7c
   819ee:	0041      	lsls	r1, r0, #1
   819f0:	e5fa      	b.n	815e8 <_malloc_r+0x80>
   819f2:	3210      	adds	r2, #16
   819f4:	e6b3      	b.n	8175e <_malloc_r+0x1f6>
   819f6:	2a54      	cmp	r2, #84	; 0x54
   819f8:	d823      	bhi.n	81a42 <_malloc_r+0x4da>
   819fa:	0b1a      	lsrs	r2, r3, #12
   819fc:	326e      	adds	r2, #110	; 0x6e
   819fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81a02:	e754      	b.n	818ae <_malloc_r+0x346>
   81a04:	68bc      	ldr	r4, [r7, #8]
   81a06:	6862      	ldr	r2, [r4, #4]
   81a08:	f022 0203 	bic.w	r2, r2, #3
   81a0c:	e715      	b.n	8183a <_malloc_r+0x2d2>
   81a0e:	f3cb 000b 	ubfx	r0, fp, #0, #12
   81a12:	2800      	cmp	r0, #0
   81a14:	f47f aeb8 	bne.w	81788 <_malloc_r+0x220>
   81a18:	4442      	add	r2, r8
   81a1a:	68bb      	ldr	r3, [r7, #8]
   81a1c:	f042 0201 	orr.w	r2, r2, #1
   81a20:	605a      	str	r2, [r3, #4]
   81a22:	e6fc      	b.n	8181e <_malloc_r+0x2b6>
   81a24:	21fc      	movs	r1, #252	; 0xfc
   81a26:	207e      	movs	r0, #126	; 0x7e
   81a28:	e5de      	b.n	815e8 <_malloc_r+0x80>
   81a2a:	2201      	movs	r2, #1
   81a2c:	f04f 0a00 	mov.w	sl, #0
   81a30:	e6d3      	b.n	817da <_malloc_r+0x272>
   81a32:	f104 0108 	add.w	r1, r4, #8
   81a36:	4630      	mov	r0, r6
   81a38:	f7ff fc8e 	bl	81358 <_free_r>
   81a3c:	f8da 1000 	ldr.w	r1, [sl]
   81a40:	e6ed      	b.n	8181e <_malloc_r+0x2b6>
   81a42:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81a46:	d804      	bhi.n	81a52 <_malloc_r+0x4ea>
   81a48:	0bda      	lsrs	r2, r3, #15
   81a4a:	3277      	adds	r2, #119	; 0x77
   81a4c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81a50:	e72d      	b.n	818ae <_malloc_r+0x346>
   81a52:	f240 5154 	movw	r1, #1364	; 0x554
   81a56:	428a      	cmp	r2, r1
   81a58:	d804      	bhi.n	81a64 <_malloc_r+0x4fc>
   81a5a:	0c9a      	lsrs	r2, r3, #18
   81a5c:	327c      	adds	r2, #124	; 0x7c
   81a5e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81a62:	e724      	b.n	818ae <_malloc_r+0x346>
   81a64:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   81a68:	227e      	movs	r2, #126	; 0x7e
   81a6a:	e720      	b.n	818ae <_malloc_r+0x346>
   81a6c:	687b      	ldr	r3, [r7, #4]
   81a6e:	e78b      	b.n	81988 <_malloc_r+0x420>
   81a70:	2007055c 	.word	0x2007055c

00081a74 <__malloc_lock>:
   81a74:	4770      	bx	lr
   81a76:	bf00      	nop

00081a78 <__malloc_unlock>:
   81a78:	4770      	bx	lr
   81a7a:	bf00      	nop

00081a7c <_sbrk_r>:
   81a7c:	b538      	push	{r3, r4, r5, lr}
   81a7e:	4c07      	ldr	r4, [pc, #28]	; (81a9c <_sbrk_r+0x20>)
   81a80:	2300      	movs	r3, #0
   81a82:	4605      	mov	r5, r0
   81a84:	4608      	mov	r0, r1
   81a86:	6023      	str	r3, [r4, #0]
   81a88:	f7ff f81a 	bl	80ac0 <_sbrk>
   81a8c:	1c43      	adds	r3, r0, #1
   81a8e:	d000      	beq.n	81a92 <_sbrk_r+0x16>
   81a90:	bd38      	pop	{r3, r4, r5, pc}
   81a92:	6823      	ldr	r3, [r4, #0]
   81a94:	2b00      	cmp	r3, #0
   81a96:	d0fb      	beq.n	81a90 <_sbrk_r+0x14>
   81a98:	602b      	str	r3, [r5, #0]
   81a9a:	bd38      	pop	{r3, r4, r5, pc}
   81a9c:	20070a54 	.word	0x20070a54

00081aa0 <__sread>:
   81aa0:	b510      	push	{r4, lr}
   81aa2:	460c      	mov	r4, r1
   81aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81aa8:	f000 f90a 	bl	81cc0 <_read_r>
   81aac:	2800      	cmp	r0, #0
   81aae:	db03      	blt.n	81ab8 <__sread+0x18>
   81ab0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   81ab2:	4403      	add	r3, r0
   81ab4:	6523      	str	r3, [r4, #80]	; 0x50
   81ab6:	bd10      	pop	{r4, pc}
   81ab8:	89a3      	ldrh	r3, [r4, #12]
   81aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81abe:	81a3      	strh	r3, [r4, #12]
   81ac0:	bd10      	pop	{r4, pc}
   81ac2:	bf00      	nop

00081ac4 <__swrite>:
   81ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ac8:	460c      	mov	r4, r1
   81aca:	8989      	ldrh	r1, [r1, #12]
   81acc:	461d      	mov	r5, r3
   81ace:	05cb      	lsls	r3, r1, #23
   81ad0:	4616      	mov	r6, r2
   81ad2:	4607      	mov	r7, r0
   81ad4:	d506      	bpl.n	81ae4 <__swrite+0x20>
   81ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81ada:	2200      	movs	r2, #0
   81adc:	2302      	movs	r3, #2
   81ade:	f000 f8db 	bl	81c98 <_lseek_r>
   81ae2:	89a1      	ldrh	r1, [r4, #12]
   81ae4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   81ae8:	81a1      	strh	r1, [r4, #12]
   81aea:	4638      	mov	r0, r7
   81aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81af0:	4632      	mov	r2, r6
   81af2:	462b      	mov	r3, r5
   81af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81af8:	f000 b814 	b.w	81b24 <_write_r>

00081afc <__sseek>:
   81afc:	b510      	push	{r4, lr}
   81afe:	460c      	mov	r4, r1
   81b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81b04:	f000 f8c8 	bl	81c98 <_lseek_r>
   81b08:	89a3      	ldrh	r3, [r4, #12]
   81b0a:	1c42      	adds	r2, r0, #1
   81b0c:	bf0e      	itee	eq
   81b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   81b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   81b16:	6520      	strne	r0, [r4, #80]	; 0x50
   81b18:	81a3      	strh	r3, [r4, #12]
   81b1a:	bd10      	pop	{r4, pc}

00081b1c <__sclose>:
   81b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81b20:	f000 b866 	b.w	81bf0 <_close_r>

00081b24 <_write_r>:
   81b24:	b570      	push	{r4, r5, r6, lr}
   81b26:	4c08      	ldr	r4, [pc, #32]	; (81b48 <_write_r+0x24>)
   81b28:	4606      	mov	r6, r0
   81b2a:	2500      	movs	r5, #0
   81b2c:	4608      	mov	r0, r1
   81b2e:	4611      	mov	r1, r2
   81b30:	461a      	mov	r2, r3
   81b32:	6025      	str	r5, [r4, #0]
   81b34:	f7fe fb5c 	bl	801f0 <_write>
   81b38:	1c43      	adds	r3, r0, #1
   81b3a:	d000      	beq.n	81b3e <_write_r+0x1a>
   81b3c:	bd70      	pop	{r4, r5, r6, pc}
   81b3e:	6823      	ldr	r3, [r4, #0]
   81b40:	2b00      	cmp	r3, #0
   81b42:	d0fb      	beq.n	81b3c <_write_r+0x18>
   81b44:	6033      	str	r3, [r6, #0]
   81b46:	bd70      	pop	{r4, r5, r6, pc}
   81b48:	20070a54 	.word	0x20070a54

00081b4c <__register_exitproc>:
   81b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b50:	4c25      	ldr	r4, [pc, #148]	; (81be8 <__register_exitproc+0x9c>)
   81b52:	4606      	mov	r6, r0
   81b54:	6825      	ldr	r5, [r4, #0]
   81b56:	4688      	mov	r8, r1
   81b58:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   81b5c:	4692      	mov	sl, r2
   81b5e:	4699      	mov	r9, r3
   81b60:	b3c4      	cbz	r4, 81bd4 <__register_exitproc+0x88>
   81b62:	6860      	ldr	r0, [r4, #4]
   81b64:	281f      	cmp	r0, #31
   81b66:	dc17      	bgt.n	81b98 <__register_exitproc+0x4c>
   81b68:	1c41      	adds	r1, r0, #1
   81b6a:	b176      	cbz	r6, 81b8a <__register_exitproc+0x3e>
   81b6c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   81b70:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   81b74:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   81b78:	2201      	movs	r2, #1
   81b7a:	4082      	lsls	r2, r0
   81b7c:	4315      	orrs	r5, r2
   81b7e:	2e02      	cmp	r6, #2
   81b80:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   81b84:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   81b88:	d01e      	beq.n	81bc8 <__register_exitproc+0x7c>
   81b8a:	1c83      	adds	r3, r0, #2
   81b8c:	6061      	str	r1, [r4, #4]
   81b8e:	2000      	movs	r0, #0
   81b90:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   81b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b98:	4b14      	ldr	r3, [pc, #80]	; (81bec <__register_exitproc+0xa0>)
   81b9a:	b303      	cbz	r3, 81bde <__register_exitproc+0x92>
   81b9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81ba0:	f7ff fcda 	bl	81558 <malloc>
   81ba4:	4604      	mov	r4, r0
   81ba6:	b1d0      	cbz	r0, 81bde <__register_exitproc+0x92>
   81ba8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   81bac:	2700      	movs	r7, #0
   81bae:	e884 0088 	stmia.w	r4, {r3, r7}
   81bb2:	4638      	mov	r0, r7
   81bb4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81bb8:	2101      	movs	r1, #1
   81bba:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   81bbe:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   81bc2:	2e00      	cmp	r6, #0
   81bc4:	d0e1      	beq.n	81b8a <__register_exitproc+0x3e>
   81bc6:	e7d1      	b.n	81b6c <__register_exitproc+0x20>
   81bc8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81bcc:	431a      	orrs	r2, r3
   81bce:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   81bd2:	e7da      	b.n	81b8a <__register_exitproc+0x3e>
   81bd4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   81bd8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   81bdc:	e7c1      	b.n	81b62 <__register_exitproc+0x16>
   81bde:	f04f 30ff 	mov.w	r0, #4294967295
   81be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81be6:	bf00      	nop
   81be8:	00081d04 	.word	0x00081d04
   81bec:	00081559 	.word	0x00081559

00081bf0 <_close_r>:
   81bf0:	b538      	push	{r3, r4, r5, lr}
   81bf2:	4c07      	ldr	r4, [pc, #28]	; (81c10 <_close_r+0x20>)
   81bf4:	2300      	movs	r3, #0
   81bf6:	4605      	mov	r5, r0
   81bf8:	4608      	mov	r0, r1
   81bfa:	6023      	str	r3, [r4, #0]
   81bfc:	f7fe ff7a 	bl	80af4 <_close>
   81c00:	1c43      	adds	r3, r0, #1
   81c02:	d000      	beq.n	81c06 <_close_r+0x16>
   81c04:	bd38      	pop	{r3, r4, r5, pc}
   81c06:	6823      	ldr	r3, [r4, #0]
   81c08:	2b00      	cmp	r3, #0
   81c0a:	d0fb      	beq.n	81c04 <_close_r+0x14>
   81c0c:	602b      	str	r3, [r5, #0]
   81c0e:	bd38      	pop	{r3, r4, r5, pc}
   81c10:	20070a54 	.word	0x20070a54

00081c14 <_fclose_r>:
   81c14:	2900      	cmp	r1, #0
   81c16:	d03d      	beq.n	81c94 <_fclose_r+0x80>
   81c18:	b570      	push	{r4, r5, r6, lr}
   81c1a:	4605      	mov	r5, r0
   81c1c:	460c      	mov	r4, r1
   81c1e:	b108      	cbz	r0, 81c24 <_fclose_r+0x10>
   81c20:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81c22:	b37b      	cbz	r3, 81c84 <_fclose_r+0x70>
   81c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81c28:	b90b      	cbnz	r3, 81c2e <_fclose_r+0x1a>
   81c2a:	2000      	movs	r0, #0
   81c2c:	bd70      	pop	{r4, r5, r6, pc}
   81c2e:	4628      	mov	r0, r5
   81c30:	4621      	mov	r1, r4
   81c32:	f7ff f9eb 	bl	8100c <__sflush_r>
   81c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81c38:	4606      	mov	r6, r0
   81c3a:	b133      	cbz	r3, 81c4a <_fclose_r+0x36>
   81c3c:	4628      	mov	r0, r5
   81c3e:	69e1      	ldr	r1, [r4, #28]
   81c40:	4798      	blx	r3
   81c42:	2800      	cmp	r0, #0
   81c44:	bfb8      	it	lt
   81c46:	f04f 36ff 	movlt.w	r6, #4294967295
   81c4a:	89a3      	ldrh	r3, [r4, #12]
   81c4c:	061b      	lsls	r3, r3, #24
   81c4e:	d41c      	bmi.n	81c8a <_fclose_r+0x76>
   81c50:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81c52:	b141      	cbz	r1, 81c66 <_fclose_r+0x52>
   81c54:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81c58:	4299      	cmp	r1, r3
   81c5a:	d002      	beq.n	81c62 <_fclose_r+0x4e>
   81c5c:	4628      	mov	r0, r5
   81c5e:	f7ff fb7b 	bl	81358 <_free_r>
   81c62:	2300      	movs	r3, #0
   81c64:	6323      	str	r3, [r4, #48]	; 0x30
   81c66:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81c68:	b121      	cbz	r1, 81c74 <_fclose_r+0x60>
   81c6a:	4628      	mov	r0, r5
   81c6c:	f7ff fb74 	bl	81358 <_free_r>
   81c70:	2300      	movs	r3, #0
   81c72:	6463      	str	r3, [r4, #68]	; 0x44
   81c74:	f7ff fb08 	bl	81288 <__sfp_lock_acquire>
   81c78:	2300      	movs	r3, #0
   81c7a:	81a3      	strh	r3, [r4, #12]
   81c7c:	f7ff fb06 	bl	8128c <__sfp_lock_release>
   81c80:	4630      	mov	r0, r6
   81c82:	bd70      	pop	{r4, r5, r6, pc}
   81c84:	f7ff fafa 	bl	8127c <__sinit>
   81c88:	e7cc      	b.n	81c24 <_fclose_r+0x10>
   81c8a:	4628      	mov	r0, r5
   81c8c:	6921      	ldr	r1, [r4, #16]
   81c8e:	f7ff fb63 	bl	81358 <_free_r>
   81c92:	e7dd      	b.n	81c50 <_fclose_r+0x3c>
   81c94:	2000      	movs	r0, #0
   81c96:	4770      	bx	lr

00081c98 <_lseek_r>:
   81c98:	b570      	push	{r4, r5, r6, lr}
   81c9a:	4c08      	ldr	r4, [pc, #32]	; (81cbc <_lseek_r+0x24>)
   81c9c:	4606      	mov	r6, r0
   81c9e:	2500      	movs	r5, #0
   81ca0:	4608      	mov	r0, r1
   81ca2:	4611      	mov	r1, r2
   81ca4:	461a      	mov	r2, r3
   81ca6:	6025      	str	r5, [r4, #0]
   81ca8:	f7fe ff28 	bl	80afc <_lseek>
   81cac:	1c43      	adds	r3, r0, #1
   81cae:	d000      	beq.n	81cb2 <_lseek_r+0x1a>
   81cb0:	bd70      	pop	{r4, r5, r6, pc}
   81cb2:	6823      	ldr	r3, [r4, #0]
   81cb4:	2b00      	cmp	r3, #0
   81cb6:	d0fb      	beq.n	81cb0 <_lseek_r+0x18>
   81cb8:	6033      	str	r3, [r6, #0]
   81cba:	bd70      	pop	{r4, r5, r6, pc}
   81cbc:	20070a54 	.word	0x20070a54

00081cc0 <_read_r>:
   81cc0:	b570      	push	{r4, r5, r6, lr}
   81cc2:	4c08      	ldr	r4, [pc, #32]	; (81ce4 <_read_r+0x24>)
   81cc4:	4606      	mov	r6, r0
   81cc6:	2500      	movs	r5, #0
   81cc8:	4608      	mov	r0, r1
   81cca:	4611      	mov	r1, r2
   81ccc:	461a      	mov	r2, r3
   81cce:	6025      	str	r5, [r4, #0]
   81cd0:	f7fe fa70 	bl	801b4 <_read>
   81cd4:	1c43      	adds	r3, r0, #1
   81cd6:	d000      	beq.n	81cda <_read_r+0x1a>
   81cd8:	bd70      	pop	{r4, r5, r6, pc}
   81cda:	6823      	ldr	r3, [r4, #0]
   81cdc:	2b00      	cmp	r3, #0
   81cde:	d0fb      	beq.n	81cd8 <_read_r+0x18>
   81ce0:	6033      	str	r3, [r6, #0]
   81ce2:	bd70      	pop	{r4, r5, r6, pc}
   81ce4:	20070a54 	.word	0x20070a54
   81ce8:	0001c200 	.word	0x0001c200
   81cec:	000000c0 	.word	0x000000c0
   81cf0:	00000800 	.word	0x00000800
	...
   81d00:	00000043 	.word	0x00000043

00081d04 <_global_impure_ptr>:
   81d04:	20070130                                0.. 

00081d08 <_init>:
   81d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d0a:	bf00      	nop
   81d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d0e:	bc08      	pop	{r3}
   81d10:	469e      	mov	lr, r3
   81d12:	4770      	bx	lr

00081d14 <__init_array_start>:
   81d14:	00080fed 	.word	0x00080fed

00081d18 <__frame_dummy_init_array_entry>:
   81d18:	00080119                                ....

00081d1c <_fini>:
   81d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d1e:	bf00      	nop
   81d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d22:	bc08      	pop	{r3}
   81d24:	469e      	mov	lr, r3
   81d26:	4770      	bx	lr

00081d28 <__fini_array_start>:
   81d28:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00081d00 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <__malloc_av_>:
	...
20070564:	2007055c 2007055c 20070564 20070564     \.. \.. d.. d.. 
20070574:	2007056c 2007056c 20070574 20070574     l.. l.. t.. t.. 
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 

20070964 <__malloc_trim_threshold>:
20070964:	00020000                                ....

20070968 <__malloc_sbrk_base>:
20070968:	ffffffff                                ....
